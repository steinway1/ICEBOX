(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/**
 * @popperjs/core v2.11.8 - MIT License
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
var max = Math.max;
var min = Math.min;
var round = Math.round;
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function (item) {
      return item.brand + "/" + item.version;
    }).join(' ');
  }
  return navigator.userAgent;
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window,
    visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x: x,
    y: y
  };
}
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}
function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument :
  // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}
function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle(element),
    overflow = _getComputedStyle.overflow,
    overflowX = _getComputedStyle.overflowX,
    overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' ||
    // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}
function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot ||
    // step into the shadow DOM of the parent of a slotted node
    element.parentNode || (
    // DOM Element detected
    isShadowRoot(element) ? element.host : null) ||
    // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback
  );
}
function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList :
  // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}
function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) ||
  // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === 'fixed') {
    return null;
  }
  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block

function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle(element);
    if (elementCss.position === 'fixed') {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.

function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
    return window;
  }
  return offsetParent || getContainingBlock(element) || window;
}
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }
    return pending;
  };
}
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      } // $FlowFixMe[prop-missing]: need a better way to handle this...

      next = next.parentNode || next.host;
    } while (next);
  } // Give up, the result is false

  return false;
}
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === 'fixed');
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`

function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents

function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function getBasePlacement(placement) {
  return placement.split('-')[0];
}
function getVariation(placement) {
  return placement.split('-')[1];
}
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}
function computeOffsets(_ref) {
  var reference = _ref.reference,
    element = _ref.element,
    placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }
  return offsets;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options,
    _options$placement = _options.placement,
    placement = _options$placement === void 0 ? state.placement : _options$placement,
    _options$strategy = _options.strategy,
    strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
    _options$boundary = _options.boundary,
    boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
    _options$rootBoundary = _options.rootBoundary,
    rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
    _options$elementConte = _options.elementContext,
    elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
    _options$altBoundary = _options.altBoundary,
    altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
    _options$padding = _options.padding,
    padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }
  return overflowOffsets;
}
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions,
    _generatorOptions$def = _generatorOptions.defaultModifiers,
    defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
    _generatorOptions$def2 = _generatorOptions.defaultOptions,
    defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements,
          reference = _state$elements.reference,
          popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          return;
        } // Store the reference and popper rects to be read by modifiers

        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index],
            fn = _state$orderedModifie.fn,
            _state$orderedModifie2 = _state$orderedModifie.options,
            _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
            name = _state$orderedModifie.name;
          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference, popper)) {
      return instance;
    }
    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref) {
        var name = _ref.name,
          _ref$options = _ref.options,
          options = _ref$options === void 0 ? {} : _ref$options,
          effect = _ref.effect;
        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });
          var noopFn = function noopFn() {};
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var passive = {
  passive: true
};
function effect$2(_ref) {
  var state = _ref.state,
    instance = _ref.instance,
    options = _ref.options;
  var _options$scroll = options.scroll,
    scroll = _options$scroll === void 0 ? true : _options$scroll,
    _options$resize = options.resize,
    resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }
  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }
  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }
    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules

var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect$2,
  data: {}
};
function popperOffsets(_ref) {
  var state = _ref.state,
    name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules

var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};
var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x,
    y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper = _ref2.popper,
    popperRect = _ref2.popperRect,
    placement = _ref2.placement,
    variation = _ref2.variation,
    offsets = _ref2.offsets,
    position = _ref2.position,
    gpuAcceleration = _ref2.gpuAcceleration,
    adaptive = _ref2.adaptive,
    roundOffsets = _ref2.roundOffsets,
    isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x,
    x = _offsets$x === void 0 ? 0 : _offsets$x,
    _offsets$y = offsets.y,
    y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';
    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);
      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height :
      // $FlowFixMe[prop-missing]
      offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width :
      // $FlowFixMe[prop-missing]
      offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x,
    y: y
  }, getWindow(popper)) : {
    x: x,
    y: y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state,
    options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
    gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
    _options$adaptive = options.adaptive,
    adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
    _options$roundOffsets = options.roundOffsets,
    roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration,
    isFixed: state.options.strategy === 'fixed'
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules

var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]

    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];
      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}
function effect$1(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules

var applyStyles$1 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect$1,
  requires: ['computeStyles']
};
function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
    skidding = _ref[0],
    distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state,
    options = _ref2.options,
    name = _ref2.name;
  var _options$offset = options.offset,
    offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
    x = _data$state$placement.x,
    y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules

var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};
var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options,
    placement = _options.placement,
    boundary = _options.boundary,
    rootBoundary = _options.rootBoundary,
    padding = _options.padding,
    flipVariations = _options.flipVariations,
    _options$allowedAutoP = _options.allowedAutoPlacements,
    allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state,
    options = _ref.options,
    name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis,
    checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
    _options$altAxis = options.altAxis,
    checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
    specifiedFallbackPlacements = options.fallbackPlacements,
    padding = options.padding,
    boundary = options.boundary,
    rootBoundary = options.rootBoundary,
    altBoundary = options.altBoundary,
    _options$flipVariatio = options.flipVariations,
    flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
    allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];
  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);
        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break") break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules

var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
function withinMaxClamp(min, value, max) {
  var v = within(min, value, max);
  return v > max ? max : v;
}
function preventOverflow(_ref) {
  var state = _ref.state,
    options = _ref.options,
    name = _ref.name;
  var _options$mainAxis = options.mainAxis,
    checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
    _options$altAxis = options.altAxis,
    checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
    boundary = options.boundary,
    rootBoundary = options.rootBoundary,
    altBoundary = options.altBoundary,
    padding = options.padding,
    _options$tether = options.tether,
    tether = _options$tether === void 0 ? true : _options$tether,
    _options$tetherOffset = options.tetherOffset,
    tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min$1 = offset + overflow[mainSide];
    var max$1 = offset - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === 'x' ? top : left;
    var _altSide = mainAxis === 'x' ? bottom : right;
    var _offset = popperOffsets[altAxis];
    var _len = altAxis === 'y' ? 'height' : 'width';
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules

var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};
var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state,
    name = _ref.name,
    options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';
  if (!arrowElement || !popperOffsets) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
  var state = _ref2.state,
    options = _ref2.options;
  var _options$element = options.element,
    arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
  if (arrowElement == null) {
    return;
  } // CSS selector

  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules

var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state,
    name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules

var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};
var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
var createPopper$1 = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers$1
}); // eslint-disable-next-line import/no-unused-modules

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

exports.applyStyles = applyStyles$1;
exports.arrow = arrow$1;
exports.computeStyles = computeStyles$1;
exports.createPopper = createPopper;
exports.createPopperLite = createPopper$1;
exports.defaultModifiers = defaultModifiers;
exports.detectOverflow = detectOverflow;
exports.eventListeners = eventListeners;
exports.flip = flip$1;
exports.hide = hide$1;
exports.offset = offset$1;
exports.popperGenerator = popperGenerator;
exports.popperOffsets = popperOffsets$1;
exports.preventOverflow = preventOverflow$1;

},{}],2:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
 * jQuery JavaScript Library v3.7.1
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-08-28T13:37Z
 */
(function (global, factory) {
  "use strict";

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket trac-14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }
      return factory(w);
    };
  } else {
    factory(global);
  }

  // Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : void 0, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];
  var getProto = Object.getPrototypeOf;
  var _slice = arr.slice;
  var flat = arr.flat ? function (array) {
    return arr.flat.call(array);
  } : function (array) {
    return arr.concat.apply([], array);
  };
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};
  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    // Plus for old WebKit, typeof returns "function" for HTML collections
    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
  };
  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };
  var document = window.document;
  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };
  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i,
      val,
      script = doc.createElement("script");
    script.text = code;
    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || node.getAttribute && node.getAttribute(i);
        if (val) {
          script.setAttribute(i, val);
        }
      }
    }
    doc.head.appendChild(script).parentNode.removeChild(script);
  }
  function toType(obj) {
    if (obj == null) {
      return obj + "";
    }

    // Support: Android <=2.3 only (functionish RegExp)
    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module

  var version = "3.7.1",
    rhtmlSuffix = /HTML$/i,
    // Define a local copy of jQuery
    _jQuery2 = function jQuery(selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new _jQuery2.fn.init(selector, context);
    };
  _jQuery2.fn = _jQuery2.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: _jQuery2,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      }

      // Return just the one element from the set
      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = _jQuery2.merge(this.constructor(), elems);

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;

      // Return the newly-formed element set
      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return _jQuery2.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(_jQuery2.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    even: function even() {
      return this.pushStack(_jQuery2.grep(this, function (_elem, i) {
        return (i + 1) % 2;
      }));
    },
    odd: function odd() {
      return this.pushStack(_jQuery2.grep(this, function (_elem, i) {
        return i % 2;
      }));
    },
    eq: function eq(i) {
      var len = this.length,
        j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };
  _jQuery2.extend = _jQuery2.fn.extend = function () {
    var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if (typeof target === "boolean") {
      deep = target;

      // Skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name];

          // Prevent Object.prototype pollution
          // Prevent never-ending loop
          if (name === "__proto__" || target === copy) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (_jQuery2.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name];

            // Ensure proper type for the source value
            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !_jQuery2.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }
            copyIsArray = false;

            // Never move original objects, clone them
            target[name] = _jQuery2.extend(deep, clone, copy);

            // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };
  _jQuery2.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor;

      // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects
      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }
      proto = getProto(obj);

      // Objects with no prototype (e.g., `Object.create( null )`) are plain
      if (!proto) {
        return true;
      }

      // Objects with prototype are plain iff they were constructed by a global Object function
      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      var name;
      for (name in obj) {
        return false;
      }
      return true;
    },
    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function globalEval(code, options, doc) {
      DOMEval(code, {
        nonce: options && options.nonce
      }, doc);
    },
    each: function each(obj, callback) {
      var length,
        i = 0;
      if (isArrayLike(obj)) {
        length = obj.length;
        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }
      return obj;
    },
    // Retrieve the text value of an array of DOM nodes
    text: function text(elem) {
      var node,
        ret = "",
        i = 0,
        nodeType = elem.nodeType;
      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += _jQuery2.text(node);
        }
      }
      if (nodeType === 1 || nodeType === 11) {
        return elem.textContent;
      }
      if (nodeType === 9) {
        return elem.documentElement.textContent;
      }
      if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      }

      // Do not include comment or processing instruction nodes

      return ret;
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];
      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          _jQuery2.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }
      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    isXMLDoc: function isXMLDoc(elem) {
      var namespace = elem && elem.namespaceURI,
        docElem = elem && (elem.ownerDocument || elem).documentElement;

      // Assume HTML when documentElement doesn't yet exist, such as inside
      // document fragments.
      return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
        j = 0,
        i = first.length;
      for (; j < len; j++) {
        first[i++] = second[j];
      }
      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;

      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }
      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
        value,
        i = 0,
        ret = [];

      // Go through the array, translating each of the items to their new values
      if (isArrayLike(elems)) {
        length = elems.length;
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }

        // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      }

      // Flatten any nested arrays
      return flat(ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });
  if (typeof Symbol === "function") {
    _jQuery2.fn[Symbol.iterator] = arr[Symbol.iterator];
  }

  // Populate the class2type map
  _jQuery2.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });
  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
      type = toType(obj);
    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }
    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }
  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }
  var pop = arr.pop;
  var sort = arr.sort;
  var splice = arr.splice;
  var whitespace = "[\\x20\\t\\r\\n\\f]";
  var rtrimCSS = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");

  // Note: an element does not contain itself
  _jQuery2.contains = function (a, b) {
    var bup = b && b.parentNode;
    return a === bup || !!(bup && bup.nodeType === 1 && (
    // Support: IE 9 - 11+
    // IE doesn't have `contains` on SVG.
    a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
  };

  // CSS string/identifier serialization
  // https://drafts.csswg.org/cssom/#common-serializing-idioms
  var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
  function fcssescape(ch, asCodePoint) {
    if (asCodePoint) {
      // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
      if (ch === "\0") {
        return "\uFFFD";
      }

      // Control characters and (dependent upon position) numbers get escaped as code points
      return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
    }

    // Other potentially-special ASCII characters get backslash-escaped
    return "\\" + ch;
  }
  _jQuery2.escapeSelector = function (sel) {
    return (sel + "").replace(rcssescape, fcssescape);
  };
  var preferredDoc = document,
    pushNative = push;
  (function () {
    var i,
      Expr,
      outermostContext,
      sortInput,
      hasDuplicate,
      push = pushNative,
      // Local document vars
      document,
      documentElement,
      documentIsHTML,
      rbuggyQSA,
      matches,
      // Instance-specific data
      expando = _jQuery2.expando,
      dirruns = 0,
      done = 0,
      classCache = createCache(),
      tokenCache = createCache(),
      compilerCache = createCache(),
      nonnativeSelectorCache = createCache(),
      sortOrder = function sortOrder(a, b) {
        if (a === b) {
          hasDuplicate = true;
        }
        return 0;
      },
      booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" + "loop|multiple|open|readonly|required|scoped",
      // Regular expressions

      // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
      identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
      // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
      attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
      // Operator (capture 2)
      "*([*^$|!~]?=)" + whitespace +
      // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
      "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
      pseudos = ":(" + identifier + ")(?:\\((" +
      // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
      // 1. quoted (capture 3; capture 4 or capture 5)
      "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
      // 2. simple (capture 6)
      "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
      // 3. anything else (capture 2)
      ".*" + ")\\)|)",
      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
      rwhitespace = new RegExp(whitespace + "+", "g"),
      rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
      rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
      rdescend = new RegExp(whitespace + "|>"),
      rpseudo = new RegExp(pseudos),
      ridentifier = new RegExp("^" + identifier + "$"),
      matchExpr = {
        ID: new RegExp("^#(" + identifier + ")"),
        CLASS: new RegExp("^\\.(" + identifier + ")"),
        TAG: new RegExp("^(" + identifier + "|[*])"),
        ATTR: new RegExp("^" + attributes),
        PSEUDO: new RegExp("^" + pseudos),
        CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
        bool: new RegExp("^(?:" + booleans + ")$", "i"),
        // For use in libraries implementing .is()
        // We use this for POS matching in `select`
        needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
      },
      rinputs = /^(?:input|select|textarea|button)$/i,
      rheader = /^h\d$/i,
      // Easily-parseable/retrievable ID or TAG or CLASS selectors
      rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
      rsibling = /[+~]/,
      // CSS escapes
      // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
      runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
      funescape = function funescape(escape, nonHex) {
        var high = "0x" + escape.slice(1) - 0x10000;
        if (nonHex) {
          // Strip the backslash prefix from a non-hex escape sequence
          return nonHex;
        }

        // Replace a hexadecimal escape sequence with the encoded Unicode code point
        // Support: IE <=11+
        // For values outside the Basic Multilingual Plane (BMP), manually construct a
        // surrogate pair
        return high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
      },
      // Used for iframes; see `setDocument`.
      // Support: IE 9 - 11+, Edge 12 - 18+
      // Removing the function wrapper causes a "Permission Denied"
      // error in IE/Edge.
      unloadHandler = function unloadHandler() {
        setDocument();
      },
      inDisabledFieldset = addCombinator(function (elem) {
        return elem.disabled === true && nodeName(elem, "fieldset");
      }, {
        dir: "parentNode",
        next: "legend"
      });

    // Support: IE <=9 only
    // Accessing document.activeElement can throw unexpectedly
    // https://bugs.jquery.com/ticket/13393
    function safeActiveElement() {
      try {
        return document.activeElement;
      } catch (err) {}
    }

    // Optimize for push.apply( _, NodeList )
    try {
      push.apply(arr = _slice.call(preferredDoc.childNodes), preferredDoc.childNodes);

      // Support: Android <=4.0
      // Detect silently failing push.apply
      // eslint-disable-next-line no-unused-expressions
      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: function apply(target, els) {
          pushNative.apply(target, _slice.call(els));
        },
        call: function call(target) {
          pushNative.apply(target, _slice.call(arguments, 1));
        }
      };
    }
    function find(selector, context, results, seed) {
      var m,
        i,
        elem,
        nid,
        match,
        groups,
        newSelector,
        newContext = context && context.ownerDocument,
        // nodeType defaults to 9, since context defaults to document
        nodeType = context ? context.nodeType : 9;
      results = results || [];

      // Return early from calls with invalid selector or context
      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      }

      // Try to shortcut find operations (as opposed to filters) in HTML documents
      if (!seed) {
        setDocument(context);
        context = context || document;
        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE 9 only
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    push.call(results, elem);
                    return results;
                  }
                } else {
                  return results;
                }

                // Element context
              } else {
                // Support: IE 9 only
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && find.contains(context, elem) && elem.id === m) {
                  push.call(results, elem);
                  return results;
                }
              }

              // Type selector
            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results;

              // Class selector
            } else if ((m = match[3]) && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          }

          // Take advantage of querySelectorAll
          if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
            newSelector = selector;
            newContext = context;

            // qSA considers elements outside a scoping root when evaluating child or
            // descendant combinators, which is not what we want.
            // In such cases, we work around the behavior by prefixing every selector in the
            // list with an ID selector referencing the scope context.
            // The technique has to be used as well when a leading combinator is used
            // as such selectors are not recognized by querySelectorAll.
            // Thanks to Andrew Dupont for this technique.
            if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
              // Expand context for sibling selectors
              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;

              // We can use :scope instead of the ID hack if the browser
              // supports it & if we're not changing the context.
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when
              // strict-comparing two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              if (newContext != context || !support.scope) {
                // Capture the context ID, setting it first if necessary
                if (nid = context.getAttribute("id")) {
                  nid = _jQuery2.escapeSelector(nid);
                } else {
                  context.setAttribute("id", nid = expando);
                }
              }

              // Prefix every selector in the list
              groups = tokenize(selector);
              i = groups.length;
              while (i--) {
                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
              }
              newSelector = groups.join(",");
            }
            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
              nonnativeSelectorCache(selector, true);
            } finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      }

      // All others
      return select(selector.replace(rtrimCSS, "$1"), context, results, seed);
    }

    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */
    function createCache() {
      var keys = [];
      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties
        // (see https://github.com/jquery/sizzle/issues/157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }
        return cache[key + " "] = value;
      }
      return cache;
    }

    /**
     * Mark a function for special use by jQuery selector module
     * @param {Function} fn The function to mark
     */
    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }

    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */
    function assert(fn) {
      var el = document.createElement("fieldset");
      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        }

        // release memory in IE
        el = null;
      }
    }

    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */
    function createInputPseudo(type) {
      return function (elem) {
        return nodeName(elem, "input") && elem.type === type;
      };
    }

    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */
    function createButtonPseudo(type) {
      return function (elem) {
        return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
      };
    }

    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */
    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            }

            // Support: IE 6 - 11+
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors
            return elem.isDisabled === disabled ||
            // Where there is no isDisabled, check manually
            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
          }
          return elem.disabled === disabled;

          // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        }

        // Remaining elements are neither :enabled nor :disabled
        return false;
      };
    }

    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */
    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
            matchIndexes = fn([], seed.length, argument),
            i = matchIndexes.length;

          // Match elements found at the specified indexes
          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }

    /**
     * Checks a node for validity as a jQuery selector context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */
    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    }

    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [node] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */
    function setDocument(node) {
      var subWindow,
        doc = node ? node.ownerDocument || node : preferredDoc;

      // Return early if doc is invalid or already selected
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      }

      // Update global variables
      document = doc;
      documentElement = document.documentElement;
      documentIsHTML = !_jQuery2.isXMLDoc(document);

      // Support: iOS 7 only, IE 9 - 11+
      // Older browsers didn't support unprefixed `matches`.
      matches = documentElement.matches || documentElement.webkitMatchesSelector || documentElement.msMatchesSelector;

      // Support: IE 9 - 11+, Edge 12 - 18+
      // Accessing iframe documents after unload throws "permission denied" errors
      // (see trac-13936).
      // Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
      // all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
      if (documentElement.msMatchesSelector &&
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 9 - 11+, Edge 12 - 18+
        subWindow.addEventListener("unload", unloadHandler);
      }

      // Support: IE <10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test
      support.getById = assert(function (el) {
        documentElement.appendChild(el).id = _jQuery2.expando;
        return !document.getElementsByName || !document.getElementsByName(_jQuery2.expando).length;
      });

      // Support: IE 9 only
      // Check to see if it's possible to do matchesSelector
      // on a disconnected node.
      support.disconnectedMatch = assert(function (el) {
        return matches.call(el, "*");
      });

      // Support: IE 9 - 11+, Edge 12 - 18+
      // IE/Edge don't support the :scope pseudo-class.
      support.scope = assert(function () {
        return document.querySelectorAll(":scope");
      });

      // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
      // Make sure the `:has()` argument is parsed unforgivingly.
      // We include `*` in the test to detect buggy implementations that are
      // _selectively_ forgiving (specifically when the list includes at least
      // one valid selector).
      // Note that we treat complete lack of support for `:has()` as if it were
      // spec-compliant support, which is fine because use of `:has()` in such
      // environments will fail in the qSA path and fall back to jQuery traversal
      // anyway.
      support.cssHas = assert(function () {
        try {
          document.querySelector(":has(*,:jqfake)");
          return false;
        } catch (e) {
          return true;
        }
      });

      // ID filter and find
      if (support.getById) {
        Expr.filter.ID = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };
        Expr.find.ID = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter.ID = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        };

        // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut
        Expr.find.ID = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
              i,
              elems,
              elem = context.getElementById(id);
            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");
              if (node && node.value === id) {
                return [elem];
              }

              // Fall back on getElementsByName
              elems = context.getElementsByName(id);
              i = 0;
              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");
                if (node && node.value === id) {
                  return [elem];
                }
              }
            }
            return [];
          }
        };
      }

      // Tag
      Expr.find.TAG = function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag);

          // DocumentFragment nodes don't have gEBTN
        } else {
          return context.querySelectorAll(tag);
        }
      };

      // Class
      Expr.find.CLASS = function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };

      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */

      // QSA and matchesSelector support

      rbuggyQSA = [];

      // Build QSA regex
      // Regex strategy adopted from Diego Perini
      assert(function (el) {
        var input;
        documentElement.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a>" + "<select id='" + expando + "-\r\\' disabled='disabled'>" + "<option selected=''></option></select>";

        // Support: iOS <=7 - 8 only
        // Boolean attributes and "value" are not treated correctly in some XML documents
        if (!el.querySelectorAll("[selected]").length) {
          rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
        }

        // Support: iOS <=7 - 8 only
        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
          rbuggyQSA.push("~=");
        }

        // Support: iOS 8 only
        // https://bugs.webkit.org/show_bug.cgi?id=136851
        // In-page `selector#id sibling-combinator selector` fails
        if (!el.querySelectorAll("a#" + expando + "+*").length) {
          rbuggyQSA.push(".#.+[+~]");
        }

        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
        // In some of the document kinds, these selectors wouldn't work natively.
        // This is probably OK but for backwards compatibility we want to maintain
        // handling them through jQuery traversal in jQuery 3.x.
        if (!el.querySelectorAll(":checked").length) {
          rbuggyQSA.push(":checked");
        }

        // Support: Windows 8 Native Apps
        // The type and name attributes are restricted during .innerHTML assignment
        input = document.createElement("input");
        input.setAttribute("type", "hidden");
        el.appendChild(input).setAttribute("name", "D");

        // Support: IE 9 - 11+
        // IE's :disabled selector does not pick up the children of disabled fieldsets
        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
        // In some of the document kinds, these selectors wouldn't work natively.
        // This is probably OK but for backwards compatibility we want to maintain
        // handling them through jQuery traversal in jQuery 3.x.
        documentElement.appendChild(el).disabled = true;
        if (el.querySelectorAll(":disabled").length !== 2) {
          rbuggyQSA.push(":enabled", ":disabled");
        }

        // Support: IE 11+, Edge 15 - 18+
        // IE 11/Edge don't find elements on a `[name='']` query in some cases.
        // Adding a temporary attribute to the document before the selection works
        // around the issue.
        // Interestingly, IE 10 & older don't seem to have the issue.
        input = document.createElement("input");
        input.setAttribute("name", "");
        el.appendChild(input);
        if (!el.querySelectorAll("[name='']").length) {
          rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
        }
      });
      if (!support.cssHas) {
        // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
        // Our regular `try-catch` mechanism fails to detect natively-unsupported
        // pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
        // in browsers that parse the `:has()` argument as a forgiving selector list.
        // https://drafts.csswg.org/selectors/#relational now requires the argument
        // to be parsed unforgivingly, but browsers have not yet fully adjusted.
        rbuggyQSA.push(":has");
      }
      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));

      /* Sorting
      ---------------------------------------------------------------------- */

      // Document order sorting
      sortOrder = function sortOrder(a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        // Sort on method existence if only one input has compareDocumentPosition
        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
        if (compare) {
          return compare;
        }

        // Calculate position if both inputs belong to the same document
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) :
        // Otherwise we know they are disconnected
        1;

        // Disconnected nodes
        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if (a === document || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {
            return -1;
          }

          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if (b === document || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {
            return 1;
          }

          // Maintain original order
          return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
        }
        return compare & 4 ? -1 : 1;
      };
      return document;
    }
    find.matches = function (expr, elements) {
      return find(expr, null, null, elements);
    };
    find.matchesSelector = function (elem, expr) {
      setDocument(elem);
      if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr);

          // IE 9's matchesSelector returns false on disconnected nodes
          if (ret || support.disconnectedMatch ||
          // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
          nonnativeSelectorCache(expr, true);
        }
      }
      return find(expr, document, null, [elem]).length > 0;
    };
    find.contains = function (context, elem) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((context.ownerDocument || context) != document) {
        setDocument(context);
      }
      return _jQuery2.contains(context, elem);
    };
    find.attr = function (elem, name) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((elem.ownerDocument || elem) != document) {
        setDocument(elem);
      }
      var fn = Expr.attrHandle[name.toLowerCase()],
        // Don't get fooled by Object.prototype properties (see trac-13807)
        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      if (val !== undefined) {
        return val;
      }
      return elem.getAttribute(name);
    };
    find.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };

    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */
    _jQuery2.uniqueSort = function (results) {
      var elem,
        duplicates = [],
        j = 0,
        i = 0;

      // Unless we *know* we can detect duplicates, assume their presence
      //
      // Support: Android <=4.0+
      // Testing for detecting duplicates is unpredictable so instead assume we can't
      // depend on duplicate detection in all browsers without a stable sort.
      hasDuplicate = !support.sortStable;
      sortInput = !support.sortStable && _slice.call(results, 0);
      sort.call(results, sortOrder);
      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }
        while (j--) {
          splice.call(results, duplicates[j], 1);
        }
      }

      // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225
      sortInput = null;
      return results;
    };
    _jQuery2.fn.uniqueSort = function () {
      return this.pushStack(_jQuery2.uniqueSort(_slice.apply(this)));
    };
    Expr = _jQuery2.expr = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        ATTR: function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape);

          // Move the given value to match[3] whether quoted or unquoted
          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }
          return match.slice(0, 4);
        },
        CHILD: function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();
          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              find.error(match[0]);
            }

            // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1
            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd");

            // other types prohibit arguments
          } else if (match[3]) {
            find.error(match[0]);
          }
          return match;
        },
        PSEUDO: function PSEUDO(match) {
          var excess,
            unquoted = !match[6] && match[2];
          if (matchExpr.CHILD.test(match[0])) {
            return null;
          }

          // Accept quoted arguments as-is
          if (match[3]) {
            match[2] = match[4] || match[5] || "";

            // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && (
          // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && (
          // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          }

          // Return only captures needed by the pseudo filter method (type and argument)
          return match.slice(0, 3);
        }
      },
      filter: {
        TAG: function TAG(nodeNameSelector) {
          var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return nodeName(elem, expectedNodeName);
          };
        },
        CLASS: function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        ATTR: function ATTR(name, operator, check) {
          return function (elem) {
            var result = find.attr(elem, name);
            if (result == null) {
              return operator === "!=";
            }
            if (!operator) {
              return true;
            }
            result += "";
            if (operator === "=") {
              return result === check;
            }
            if (operator === "!=") {
              return result !== check;
            }
            if (operator === "^=") {
              return check && result.indexOf(check) === 0;
            }
            if (operator === "*=") {
              return check && result.indexOf(check) > -1;
            }
            if (operator === "$=") {
              return check && result.slice(-check.length) === check;
            }
            if (operator === "~=") {
              return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
            }
            if (operator === "|=") {
              return result === check || result.slice(0, check.length + 1) === check + "-";
            }
            return false;
          };
        },
        CHILD: function CHILD(type, what, _argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
            forward = type.slice(-4) !== "last",
            ofType = what === "of-type";
          return first === 1 && last === 0 ?
          // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, _context, xml) {
            var cache,
              outerCache,
              node,
              nodeIndex,
              start,
              dir = simple !== forward ? "nextSibling" : "previousSibling",
              parent = elem.parentNode,
              name = ofType && elem.nodeName.toLowerCase(),
              useCache = !xml && !ofType,
              diff = false;
            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;
                  while (node = node[dir]) {
                    if (ofType ? nodeName(node, name) : node.nodeType === 1) {
                      return false;
                    }
                  }

                  // Reverse direction for :only-* (if we haven't yet done so)
                  start = dir = type === "only" && !start && "nextSibling";
                }
                return true;
              }
              start = [forward ? parent.firstChild : parent.lastChild];

              // non-xml :nth-child(...) stores cache data on `parent`
              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                outerCache = parent[expando] || (parent[expando] = {});
                cache = outerCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];
                while (node = ++nodeIndex && node && node[dir] || (
                // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    outerCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  cache = outerCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                }

                // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {});
                        outerCache[type] = [dirruns, diff];
                      }
                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              }

              // Incorporate the offset, then check against cycle size
              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        PSEUDO: function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // https://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);

          // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as jQuery does
          if (fn[expando]) {
            return fn(argument);
          }

          // But maintain support for old signatures
          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                matched = fn(seed, argument),
                i = matched.length;
              while (i--) {
                idx = indexOf.call(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }
          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        not: markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
            results = [],
            matcher = compile(selector.replace(rtrimCSS, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
            var elem,
              unmatched = matcher(seed, null, xml, []),
              i = seed.length;

            // Match elements unmatched by `matcher`
            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, _context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results);

            // Don't keep the element
            // (see https://github.com/jquery/sizzle/issues/299)
            input[0] = null;
            return !results.pop();
          };
        }),
        has: markFunction(function (selector) {
          return function (elem) {
            return find(selector, elem).length > 0;
          };
        }),
        contains: markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || _jQuery2.text(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // https://www.w3.org/TR/selectors/#lang-pseudo
        lang: markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            find.error("unsupported lang: " + lang);
          }
          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;
            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);
            return false;
          };
        }),
        // Miscellaneous
        target: function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        root: function root(elem) {
          return elem === documentElement;
        },
        focus: function focus(elem) {
          return elem === safeActiveElement() && document.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        enabled: createDisabledPseudo(false),
        disabled: createDisabledPseudo(true),
        checked: function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
        },
        selected: function selected(elem) {
          // Support: IE <=11+
          // Accessing the selectedIndex property
          // forces the browser to treat the default option as
          // selected when in an optgroup.
          if (elem.parentNode) {
            // eslint-disable-next-line no-unused-expressions
            elem.parentNode.selectedIndex;
          }
          return elem.selected === true;
        },
        // Contents
        empty: function empty(elem) {
          // https://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }
          return true;
        },
        parent: function parent(elem) {
          return !Expr.pseudos.empty(elem);
        },
        // Element/input types
        header: function header(elem) {
          return rheader.test(elem.nodeName);
        },
        input: function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        button: function button(elem) {
          return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
        },
        text: function text(elem) {
          var attr;
          return nodeName(elem, "input") && elem.type === "text" && (
          // Support: IE <10 only
          // New HTML5 attribute values (e.g., "search") appear
          // with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        first: createPositionalPseudo(function () {
          return [0];
        }),
        last: createPositionalPseudo(function (_matchIndexes, length) {
          return [length - 1];
        }),
        eq: createPositionalPseudo(function (_matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        even: createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        odd: createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        lt: createPositionalPseudo(function (matchIndexes, length, argument) {
          var i;
          if (argument < 0) {
            i = argument + length;
          } else if (argument > length) {
            i = length;
          } else {
            i = argument;
          }
          for (; --i >= 0;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        gt: createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;
          for (; ++i < length;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        })
      }
    };
    Expr.pseudos.nth = Expr.pseudos.eq;

    // Add button/input type pseudos
    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }
    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    }

    // Easy API for creating new setFilters
    function setFilters() {}
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();
    function tokenize(selector, parseOnly) {
      var matched,
        match,
        tokens,
        type,
        soFar,
        groups,
        preFilters,
        cached = tokenCache[selector + " "];
      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }
      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;
      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }
          groups.push(tokens = []);
        }
        matched = false;

        // Combinators
        if (match = rleadingCombinator.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrimCSS, " ")
          });
          soFar = soFar.slice(matched.length);
        }

        // Filters
        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }
        if (!matched) {
          break;
        }
      }

      // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens
      if (parseOnly) {
        return soFar.length;
      }
      return soFar ? find.error(selector) :
      // Cache the tokens
      tokenCache(selector, groups).slice(0);
    }
    function toSelector(tokens) {
      var i = 0,
        len = tokens.length,
        selector = "";
      for (; i < len; i++) {
        selector += tokens[i].value;
      }
      return selector;
    }
    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
        skip = combinator.next,
        key = skip || dir,
        checkNonElements = base && key === "parentNode",
        doneName = done++;
      return combinator.first ?
      // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }
        return false;
      } :
      // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
          outerCache,
          newCache = [dirruns, doneName];

        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {});
              if (skip && nodeName(elem, skip)) {
                elem = elem[dir] || elem;
              } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                outerCache[key] = newCache;

                // A match means we're done; a fail means we have to keep checking
                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }
        return false;
      };
    }
    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;
        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }
        return true;
      } : matchers[0];
    }
    function multipleContexts(selector, contexts, results) {
      var i = 0,
        len = contexts.length;
      for (; i < len; i++) {
        find(selector, contexts[i], results);
      }
      return results;
    }
    function condense(unmatched, map, filter, context, xml) {
      var elem,
        newUnmatched = [],
        i = 0,
        len = unmatched.length,
        mapped = map != null;
      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);
            if (mapped) {
              map.push(i);
            }
          }
        }
      }
      return newUnmatched;
    }
    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }
      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }
      return markFunction(function (seed, results, context, xml) {
        var temp,
          i,
          elem,
          matcherOut,
          preMap = [],
          postMap = [],
          preexisting = results.length,
          // Get initial elements from seed or context
          elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
          // Prefilter to get matcher input, preserving a map for seed-results synchronization
          matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;
        if (matcher) {
          // If we have a postFinder, or filtered seed, or non-seed postFilter
          // or preexisting results,
          matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ?
          // ...intermediate processing is necessary
          [] :
          // ...otherwise use results directly
          results;

          // Find primary matches
          matcher(matcherIn, matcherOut, context, xml);
        } else {
          matcherOut = matcherIn;
        }

        // Apply postFilter
        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml);

          // Un-match failing elements by moving them back to matcherIn
          i = temp.length;
          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }
        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;
              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }
              postFinder(null, matcherOut = [], temp, xml);
            }

            // Move matched elements from seed to results to keep them synchronized
            i = matcherOut.length;
            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          }

          // Add elements to results, through postFinder if defined
        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }
    function matcherFromTokens(tokens) {
      var checkContext,
        matcher,
        j,
        len = tokens.length,
        leadingRelative = Expr.relative[tokens[0].type],
        implicitRelative = leadingRelative || Expr.relative[" "],
        i = leadingRelative ? 1 : 0,
        // The foundational matcher ensures that elements are reachable from top-level context(s)
        matchContext = addCombinator(function (elem) {
          return elem === checkContext;
        }, implicitRelative, true),
        matchAnyContext = addCombinator(function (elem) {
          return indexOf.call(checkContext, elem) > -1;
        }, implicitRelative, true),
        matchers = [function (elem, context, xml) {
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));

          // Avoid hanging onto element
          // (see https://github.com/jquery/sizzle/issues/299)
          checkContext = null;
          return ret;
        }];
      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

          // Return special upon seeing a positional matcher
          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;
            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }
            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrimCSS, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }
          matchers.push(matcher);
        }
      }
      return elementMatcher(matchers);
    }
    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
        byElement = elementMatchers.length > 0,
        superMatcher = function superMatcher(seed, context, xml, results, outermost) {
          var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
            elems = seed || byElement && Expr.find.TAG("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;
          if (outermost) {
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            outermostContext = context == document || context || outermost;
          }

          // Add elements passing elementMatchers directly to results
          // Support: iOS <=7 - 9 only
          // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
          // elements by id. (see trac-14142)
          for (; i !== len && (elem = elems[i]) != null; i++) {
            if (byElement && elem) {
              j = 0;

              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              if (!context && elem.ownerDocument != document) {
                setDocument(elem);
                xml = !documentIsHTML;
              }
              while (matcher = elementMatchers[j++]) {
                if (matcher(elem, context || document, xml)) {
                  push.call(results, elem);
                  break;
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
              }
            }

            // Track unmatched elements for set filters
            if (bySet) {
              // They will have gone through all possible matchers
              if (elem = !matcher && elem) {
                matchedCount--;
              }

              // Lengthen the array for every element, matched or not
              if (seed) {
                unmatched.push(elem);
              }
            }
          }

          // `i` is now the count of elements visited above, and adding it to `matchedCount`
          // makes the latter nonnegative.
          matchedCount += i;

          // Apply set filters to unmatched elements
          // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
          // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
          // no element matchers and no seed.
          // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
          // case, which will result in a "00" `matchedCount` that differs from `i` but is also
          // numerically zero.
          if (bySet && i !== matchedCount) {
            j = 0;
            while (matcher = setMatchers[j++]) {
              matcher(unmatched, setMatched, context, xml);
            }
            if (seed) {
              // Reintegrate element matches to eliminate the need for sorting
              if (matchedCount > 0) {
                while (i--) {
                  if (!(unmatched[i] || setMatched[i])) {
                    setMatched[i] = pop.call(results);
                  }
                }
              }

              // Discard index placeholder values to get only actual matches
              setMatched = condense(setMatched);
            }

            // Add matches to results
            push.apply(results, setMatched);

            // Seedless set matches succeeding multiple successful matchers stipulate sorting
            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
              _jQuery2.uniqueSort(results);
            }
          }

          // Override manipulation of globals by nested matchers
          if (outermost) {
            dirruns = dirrunsUnique;
            outermostContext = contextBackup;
          }
          return unmatched;
        };
      return bySet ? markFunction(superMatcher) : superMatcher;
    }
    function compile(selector, match /* Internal Use Only */) {
      var i,
        setMatchers = [],
        elementMatchers = [],
        cached = compilerCache[selector + " "];
      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }
        i = match.length;
        while (i--) {
          cached = matcherFromTokens(match[i]);
          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        }

        // Cache the compiled function
        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

        // Save selector and tokenization
        cached.selector = selector;
      }
      return cached;
    }

    /**
     * A low-level selection function that works with jQuery's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with jQuery selector compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */
    function select(selector, context, results, seed) {
      var i,
        tokens,
        token,
        type,
        find,
        compiled = typeof selector === "function" && selector,
        match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || [];

      // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)
      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);
        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];
          if (!context) {
            return results;

            // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }
          selector = selector.slice(tokens.shift().value.length);
        }

        // Fetch a seed set for right-to-left matching
        i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
        while (i--) {
          token = tokens[i];

          // Abort if we hit a combinator
          if (Expr.relative[type = token.type]) {
            break;
          }
          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);
              if (!selector) {
                push.apply(results, seed);
                return results;
              }
              break;
            }
          }
        }
      }

      // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above
      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }

    // One-time assignments

    // Support: Android <=4.0 - 4.1+
    // Sort stability
    support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

    // Initialize against the default document
    setDocument();

    // Support: Android <=4.0 - 4.1+
    // Detached nodes confoundingly follow *each other*
    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    });
    _jQuery2.find = find;

    // Deprecated
    _jQuery2.expr[":"] = _jQuery2.expr.pseudos;
    _jQuery2.unique = _jQuery2.uniqueSort;

    // These have always been private, but they used to be documented as part of
    // Sizzle so let's maintain them for now for backwards compatibility purposes.
    find.compile = compile;
    find.select = select;
    find.setDocument = setDocument;
    find.tokenize = tokenize;
    find.escape = _jQuery2.escapeSelector;
    find.getText = _jQuery2.text;
    find.isXML = _jQuery2.isXMLDoc;
    find.selectors = _jQuery2.expr;
    find.support = _jQuery2.support;
    find.uniqueSort = _jQuery2.uniqueSort;

    /* eslint-enable */
  })();
  var dir = function dir(elem, _dir, until) {
    var matched = [],
      truncate = until !== undefined;
    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && _jQuery2(elem).is(until)) {
          break;
        }
        matched.push(elem);
      }
    }
    return matched;
  };
  var _siblings = function siblings(n, elem) {
    var matched = [];
    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }
    return matched;
  };
  var rneedsContext = _jQuery2.expr.match.needsContext;
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return _jQuery2.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }

    // Single element
    if (qualifier.nodeType) {
      return _jQuery2.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }

    // Arraylike of elements (jQuery, arguments, Array)
    if (typeof qualifier !== "string") {
      return _jQuery2.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    }

    // Filtered directly for both simple and complex selectors
    return _jQuery2.filter(qualifier, elements, not);
  }
  _jQuery2.filter = function (expr, elems, not) {
    var elem = elems[0];
    if (not) {
      expr = ":not(" + expr + ")";
    }
    if (elems.length === 1 && elem.nodeType === 1) {
      return _jQuery2.find.matchesSelector(elem, expr) ? [elem] : [];
    }
    return _jQuery2.find.matches(expr, _jQuery2.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };
  _jQuery2.fn.extend({
    find: function find(selector) {
      var i,
        ret,
        len = this.length,
        self = this;
      if (typeof selector !== "string") {
        return this.pushStack(_jQuery2(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (_jQuery2.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      ret = this.pushStack([]);
      for (i = 0; i < len; i++) {
        _jQuery2.find(selector, self[i], ret);
      }
      return len > 1 ? _jQuery2.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this,
      // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? _jQuery2(selector) : selector || [], false).length;
    }
  });

  // Initialize a jQuery object

  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
    // Strict HTML recognition (trac-11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
    init = _jQuery2.fn.init = function (selector, context, root) {
      var match, elem;

      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }

      // Method init() accepts an alternate rootjQuery
      // so migrate can support jQuery.sub (gh-2101)
      root = root || rootjQuery;

      // Handle HTML strings
      if (typeof selector === "string") {
        if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [null, selector, null];
        } else {
          match = rquickExpr.exec(selector);
        }

        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof _jQuery2 ? context[0] : context;

            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            _jQuery2.merge(this, _jQuery2.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && _jQuery2.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (isFunction(this[match])) {
                  this[match](context[match]);

                  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }
            return this;

            // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);
            if (elem) {
              // Inject the element directly into the jQuery object
              this[0] = elem;
              this.length = 1;
            }
            return this;
          }

          // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || root).find(selector);

          // HANDLE: $(expr, context)
          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }

        // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this[0] = selector;
        this.length = 1;
        return this;

        // HANDLE: $(function)
        // Shortcut for document ready
      } else if (isFunction(selector)) {
        return root.ready !== undefined ? root.ready(selector) :
        // Execute immediately if ready is not present
        selector(_jQuery2);
      }
      return _jQuery2.makeArray(selector, this);
    };

  // Give the init function the jQuery prototype for later instantiation
  init.prototype = _jQuery2.fn;

  // Initialize central reference
  rootjQuery = _jQuery2(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };
  _jQuery2.fn.extend({
    has: function has(target) {
      var targets = _jQuery2(target, this),
        l = targets.length;
      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (_jQuery2.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
        i = 0,
        l = this.length,
        matched = [],
        targets = typeof selectors !== "string" && _jQuery2(selectors);

      // Positional selectors never match, since there's no _selection_ context
      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :
            // Don't pass non-elements to jQuery#find
            cur.nodeType === 1 && _jQuery2.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }
      return this.pushStack(matched.length > 1 ? _jQuery2.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }

      // Index in selector
      if (typeof elem === "string") {
        return indexOf.call(_jQuery2(elem), this[0]);
      }

      // Locate the position of the desired element
      return indexOf.call(this,
      // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(_jQuery2.uniqueSort(_jQuery2.merge(this.get(), _jQuery2(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });
  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
    return cur;
  }
  _jQuery2.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, _i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, _i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, _i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (elem.contentDocument != null &&
      // Support: IE 11+
      // <object> elements with no `data` attribute has an object
      // `contentDocument` with a `null` prototype.
      getProto(elem.contentDocument)) {
        return elem.contentDocument;
      }

      // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.
      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }
      return _jQuery2.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    _jQuery2.fn[name] = function (until, selector) {
      var matched = _jQuery2.map(this, fn, until);
      if (name.slice(-5) !== "Until") {
        selector = until;
      }
      if (selector && typeof selector === "string") {
        matched = _jQuery2.filter(selector, matched);
      }
      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          _jQuery2.uniqueSort(matched);
        }

        // Reverse order for parents* and prev-derivatives
        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }
      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

  // Convert String-formatted options into Object-formatted ones
  function createOptions(options) {
    var object = {};
    _jQuery2.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  _jQuery2.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : _jQuery2.extend({}, options);
    var
      // Flag to know if list is currently firing
      firing,
      // Last fire value for non-forgettable lists
      memory,
      // Flag to know if list was already fired
      _fired,
      // Flag to prevent firing
      _locked,
      // Actual callback list
      list = [],
      // Queue of execution data for repeatable lists
      queue = [],
      // Index of currently firing callback (modified by add/remove as needed)
      firingIndex = -1,
      // Fire callbacks
      fire = function fire() {
        // Enforce single-firing
        _locked = _locked || options.once;

        // Execute callbacks for all pending executions,
        // respecting firingIndex overrides and runtime changes
        _fired = firing = true;
        for (; queue.length; firingIndex = -1) {
          memory = queue.shift();
          while (++firingIndex < list.length) {
            // Run callback and check for early termination
            if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
              // Jump to end and forget the data so .add doesn't re-fire
              firingIndex = list.length;
              memory = false;
            }
          }
        }

        // Forget the data if we're done with it
        if (!options.memory) {
          memory = false;
        }
        firing = false;

        // Clean up if we're done firing for good
        if (_locked) {
          // Keep an empty list if we have data for future add calls
          if (memory) {
            list = [];

            // Otherwise, this object is spent
          } else {
            list = "";
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function add() {
          if (list) {
            // If we have memory from a past run, we should fire after adding
            if (memory && !firing) {
              firingIndex = list.length - 1;
              queue.push(memory);
            }
            (function add(args) {
              _jQuery2.each(args, function (_, arg) {
                if (isFunction(arg)) {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && toType(arg) !== "string") {
                  // Inspect recursively
                  add(arg);
                }
              });
            })(arguments);
            if (memory && !firing) {
              fire();
            }
          }
          return this;
        },
        // Remove a callback from the list
        remove: function remove() {
          _jQuery2.each(arguments, function (_, arg) {
            var index;
            while ((index = _jQuery2.inArray(arg, list, index)) > -1) {
              list.splice(index, 1);

              // Handle firing indexes
              if (index <= firingIndex) {
                firingIndex--;
              }
            }
          });
          return this;
        },
        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function has(fn) {
          return fn ? _jQuery2.inArray(fn, list) > -1 : list.length > 0;
        },
        // Remove all callbacks from the list
        empty: function empty() {
          if (list) {
            list = [];
          }
          return this;
        },
        // Disable .fire and .add
        // Abort any current/pending executions
        // Clear all callbacks and values
        disable: function disable() {
          _locked = queue = [];
          list = memory = "";
          return this;
        },
        disabled: function disabled() {
          return !list;
        },
        // Disable .fire
        // Also disable .add unless we have memory (since it would have no effect)
        // Abort any pending executions
        lock: function lock() {
          _locked = queue = [];
          if (!memory && !firing) {
            list = memory = "";
          }
          return this;
        },
        locked: function locked() {
          return !!_locked;
        },
        // Call all callbacks with the given context and arguments
        fireWith: function fireWith(context, args) {
          if (!_locked) {
            args = args || [];
            args = [context, args.slice ? args.slice() : args];
            queue.push(args);
            if (!firing) {
              fire();
            }
          }
          return this;
        },
        // Call all the callbacks with the given arguments
        fire: function fire() {
          self.fireWith(this, arguments);
          return this;
        },
        // To know if the callbacks have already been called at least once
        fired: function fired() {
          return !!_fired;
        }
      };
    return self;
  };
  function Identity(v) {
    return v;
  }
  function Thrower(ex) {
    throw ex;
  }
  function adoptValue(value, resolve, reject, noValue) {
    var method;
    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject);

        // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject);

        // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      }

      // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.
    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }
  _jQuery2.extend({
    Deferred: function Deferred(func) {
      var tuples = [
        // action, add listener, callbacks,
        // ... .then handlers, argument index, [final state]
        ["notify", "progress", _jQuery2.Callbacks("memory"), _jQuery2.Callbacks("memory"), 2], ["resolve", "done", _jQuery2.Callbacks("once memory"), _jQuery2.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", _jQuery2.Callbacks("once memory"), _jQuery2.Callbacks("once memory"), 1, "rejected"]],
        _state = "pending",
        _promise = {
          state: function state() {
            return _state;
          },
          always: function always() {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          "catch": function _catch(fn) {
            return _promise.then(null, fn);
          },
          // Keep pipe for back-compat
          pipe: function pipe(/* fnDone, fnFail, fnProgress */
          ) {
            var fns = arguments;
            return _jQuery2.Deferred(function (newDefer) {
              _jQuery2.each(tuples, function (_i, tuple) {
                // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                // deferred.progress(function() { bind to newDefer or newDefer.notify })
                // deferred.done(function() { bind to newDefer or newDefer.resolve })
                // deferred.fail(function() { bind to newDefer or newDefer.reject })
                deferred[tuple[1]](function () {
                  var returned = fn && fn.apply(this, arguments);
                  if (returned && isFunction(returned.promise)) {
                    returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                  } else {
                    newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                  }
                });
              });
              fns = null;
            }).promise();
          },
          then: function then(onFulfilled, onRejected, onProgress) {
            var maxDepth = 0;
            function resolve(depth, deferred, handler, special) {
              return function () {
                var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                    var returned, then;

                    // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts
                    if (depth < maxDepth) {
                      return;
                    }
                    returned = handler.apply(that, args);

                    // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48
                    if (returned === deferred.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }

                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once
                    then = returned && (
                    // Support: Promises/A+ section 2.3.4
                    // https://promisesaplus.com/#point-64
                    // Only check objects and functions for thenability
                    _typeof(returned) === "object" || typeof returned === "function") && returned.then;

                    // Handle a returned thenable
                    if (isFunction(then)) {
                      // Special processors (notify) just wait for resolution
                      if (special) {
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

                        // Normal processors (resolve) also hook into progress
                      } else {
                        // ...and disregard older resolution values
                        maxDepth++;
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                      }

                      // Handle all other returned values
                    } else {
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if (handler !== Identity) {
                        that = undefined;
                        args = [returned];
                      }

                      // Process the value(s)
                      // Default process is resolve
                      (special || deferred.resolveWith)(that, args);
                    }
                  },
                  // Only normal processors (resolve) catch and reject exceptions
                  process = special ? mightThrow : function () {
                    try {
                      mightThrow();
                    } catch (e) {
                      if (_jQuery2.Deferred.exceptionHook) {
                        _jQuery2.Deferred.exceptionHook(e, process.error);
                      }

                      // Support: Promises/A+ section 2.3.3.3.4.1
                      // https://promisesaplus.com/#point-61
                      // Ignore post-resolution exceptions
                      if (depth + 1 >= maxDepth) {
                        // Only substitute handlers pass on context
                        // and multiple values (non-spec behavior)
                        if (handler !== Thrower) {
                          that = undefined;
                          args = [e];
                        }
                        deferred.rejectWith(that, args);
                      }
                    }
                  };

                // Support: Promises/A+ section 2.3.3.3.1
                // https://promisesaplus.com/#point-57
                // Re-resolve promises immediately to dodge false rejection from
                // subsequent errors
                if (depth) {
                  process();
                } else {
                  // Call an optional hook to record the error, in case of exception
                  // since it's otherwise lost when execution goes async
                  if (_jQuery2.Deferred.getErrorHook) {
                    process.error = _jQuery2.Deferred.getErrorHook();

                    // The deprecated alias of the above. While the name suggests
                    // returning the stack, not an error instance, jQuery just passes
                    // it directly to `console.warn` so both will work; an instance
                    // just better cooperates with source maps.
                  } else if (_jQuery2.Deferred.getStackHook) {
                    process.error = _jQuery2.Deferred.getStackHook();
                  }
                  window.setTimeout(process);
                }
              };
            }
            return _jQuery2.Deferred(function (newDefer) {
              // progress_handlers.add( ... )
              tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

              // fulfilled_handlers.add( ... )
              tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));

              // rejected_handlers.add( ... )
              tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
            }).promise();
          },
          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function promise(obj) {
            return obj != null ? _jQuery2.extend(obj, _promise) : _promise;
          }
        },
        deferred = {};

      // Add list-specific methods
      _jQuery2.each(tuples, function (i, tuple) {
        var list = tuple[2],
          stateString = tuple[5];

        // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add
        _promise[tuple[1]] = list.add;

        // Handle state
        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          },
          // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable,
          // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable,
          // progress_callbacks.lock
          tuples[0][2].lock,
          // progress_handlers.lock
          tuples[0][3].lock);
        }

        // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire
        list.add(tuple[3].fire);

        // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        };

        // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith
        deferred[tuple[0] + "With"] = list.fireWith;
      });

      // Make the deferred a promise
      _promise.promise(deferred);

      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }

      // All done!
      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var
        // count of uncompleted subordinates
        remaining = arguments.length,
        // count of unprocessed arguments
        i = remaining,
        // subordinate fulfillment data
        resolveContexts = Array(i),
        resolveValues = _slice.call(arguments),
        // the primary Deferred
        primary = _jQuery2.Deferred(),
        // subordinate callback factory
        updateFunc = function updateFunc(i) {
          return function (value) {
            resolveContexts[i] = this;
            resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
            if (! --remaining) {
              primary.resolveWith(resolveContexts, resolveValues);
            }
          };
        };

      // Single- and empty arguments are adopted like Promise.resolve
      if (remaining <= 1) {
        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);

        // Use .then() to unwrap secondary thenables (cf. gh-3000)
        if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return primary.then();
        }
      }

      // Multiple arguments are aggregated like Promise.all array elements
      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), primary.reject);
      }
      return primary.promise();
    }
  });

  // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.
  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
  // captured before the async barrier to get the original error cause
  // which may otherwise be hidden.
  _jQuery2.Deferred.exceptionHook = function (error, asyncError) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, asyncError);
    }
  };
  _jQuery2.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  };

  // The deferred used on DOM ready
  var readyList = _jQuery2.Deferred();
  _jQuery2.fn.ready = function (fn) {
    readyList.then(fn)

    // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    ["catch"](function (error) {
      _jQuery2.readyException(error);
    });
    return this;
  };
  _jQuery2.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See trac-6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --_jQuery2.readyWait : _jQuery2.isReady) {
        return;
      }

      // Remember that the DOM is ready
      _jQuery2.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --_jQuery2.readyWait > 0) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith(document, [_jQuery2]);
    }
  });
  _jQuery2.ready.then = readyList.then;

  // The ready event handler and self cleanup method
  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    _jQuery2.ready();
  }

  // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon
  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(_jQuery2.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed);

    // A fallback to window.onload, that will always work
    window.addEventListener("load", completed);
  }

  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var _access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
      len = elems.length,
      bulk = key == null;

    // Sets many values
    if (toType(key) === "object") {
      chainable = true;
      for (i in key) {
        _access(elems, fn, i, key[i], true, emptyGet, raw);
      }

      // Sets one value
    } else if (value !== undefined) {
      chainable = true;
      if (!isFunction(value)) {
        raw = true;
      }
      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null;

          // ...except when executing function values
        } else {
          bulk = fn;
          fn = function fn(elem, _key, value) {
            return bulk.call(_jQuery2(elem), value);
          };
        }
      }
      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }
    if (chainable) {
      return elems;
    }

    // Gets
    if (bulk) {
      return fn.call(elems);
    }
    return len ? fn(elems[0], key) : emptyGet;
  };

  // Matches dashed string for camelizing
  var rmsPrefix = /^-ms-/,
    rdashAlpha = /-([a-z])/g;

  // Used by camelCase as callback to replace()
  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  }

  // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (trac-9572)
  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }
  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };
  function Data() {
    this.expando = _jQuery2.expando + Data.uid++;
  }
  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando];

      // If not, create one
      if (!value) {
        value = {};

        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see trac-8335.
        // Always return an empty object.
        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value;

            // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }
      return value;
    },
    set: function set(owner, data, value) {
      var prop,
        cache = this.cache(owner);

      // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)
      if (typeof data === "string") {
        cache[camelCase(data)] = value;

        // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }
      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) :
      // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      }

      // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
        cache = owner[this.expando];
      if (cache === undefined) {
        return;
      }
      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key);

          // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace
          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }
        i = key.length;
        while (i--) {
          delete cache[key[i]];
        }
      }

      // Remove the expando if there's no more data
      if (key === undefined || _jQuery2.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !_jQuery2.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data();

  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /[A-Z]/g;
  function getData(data) {
    if (data === "true") {
      return true;
    }
    if (data === "false") {
      return false;
    }
    if (data === "null") {
      return null;
    }

    // Only convert to a number if it doesn't change the string
    if (data === +data + "") {
      return +data;
    }
    if (rbrace.test(data)) {
      return JSON.parse(data);
    }
    return data;
  }
  function dataAttr(elem, key, data) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);
      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {}

        // Make sure we set the data so it isn't changed later
        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }
  _jQuery2.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  _jQuery2.fn.extend({
    data: function data(key, value) {
      var i,
        name,
        data,
        elem = this[0],
        attrs = elem && elem.attributes;

      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);
          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;
            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (trac-14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }
        return data;
      }

      // Sets multiple values
      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }
      return _access(this, function (value) {
        var data;

        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);
          if (data !== undefined) {
            return data;
          }

          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr(elem, key);
          if (data !== undefined) {
            return data;
          }

          // We tried really hard, but the data doesn't exist.
          return;
        }

        // Set the data...
        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  _jQuery2.extend({
    queue: function queue(elem, type, data) {
      var queue;
      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type);

        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, _jQuery2.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";
      var queue = _jQuery2.queue(elem, type),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = _jQuery2._queueHooks(elem, type),
        next = function next() {
          _jQuery2.dequeue(elem, type);
        };

      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }
      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        }

        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }
      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: _jQuery2.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  _jQuery2.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;
      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }
      if (arguments.length < setter) {
        return _jQuery2.queue(this[0], type);
      }
      return data === undefined ? this : this.each(function () {
        var queue = _jQuery2.queue(this, type, data);

        // Ensure a hooks for this queue
        _jQuery2._queueHooks(this, type);
        if (type === "fx" && queue[0] !== "inprogress") {
          _jQuery2.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        _jQuery2.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
        count = 1,
        defer = _jQuery2.Deferred(),
        elements = this,
        i = this.length,
        resolve = function resolve() {
          if (! --count) {
            defer.resolveWith(elements, [elements]);
          }
        };
      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }
      type = type || "fx";
      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  var documentElement = document.documentElement;
  var isAttached = function isAttached(elem) {
      return _jQuery2.contains(elem.ownerDocument, elem);
    },
    composed = {
      composed: true
    };

  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.
  if (documentElement.getRootNode) {
    isAttached = function isAttached(elem) {
      return _jQuery2.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
  }
  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;

    // Inline style trumps all
    return elem.style.display === "none" || elem.style.display === "" &&
    // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    isAttached(elem) && _jQuery2.css(elem, "display") === "none";
  };
  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
      scale,
      maxIterations = 20,
      currentValue = tween ? function () {
        return tween.cur();
      } : function () {
        return _jQuery2.css(elem, prop, "");
      },
      initial = currentValue(),
      unit = valueParts && valueParts[3] || (_jQuery2.cssNumber[prop] ? "" : "px"),
      // Starting value computation is required for potential unit mismatches
      initialInUnit = elem.nodeType && (_jQuery2.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(_jQuery2.css(elem, prop));
    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2;

      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[3];

      // Iteratively approximate from a nonzero starting point
      initialInUnit = +initial || 1;
      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        _jQuery2.style(elem, prop, initialInUnit + unit);
        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }
        initialInUnit = initialInUnit / scale;
      }
      initialInUnit = initialInUnit * 2;
      _jQuery2.style(elem, prop, initialInUnit + unit);

      // Make sure we update the tween properties later on
      valueParts = valueParts || [];
    }
    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0;

      // Apply relative offset (+=/-=) if specified
      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }
    return adjusted;
  }
  var defaultDisplayMap = {};
  function getDefaultDisplay(elem) {
    var temp,
      doc = elem.ownerDocument,
      nodeName = elem.nodeName,
      display = defaultDisplayMap[nodeName];
    if (display) {
      return display;
    }
    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = _jQuery2.css(temp, "display");
    temp.parentNode.removeChild(temp);
    if (display === "none") {
      display = "block";
    }
    defaultDisplayMap[nodeName] = display;
    return display;
  }
  function showHide(elements, show) {
    var display,
      elem,
      values = [],
      index = 0,
      length = elements.length;

    // Determine new display value for elements that need to change
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      display = elem.style.display;
      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;
          if (!values[index]) {
            elem.style.display = "";
          }
        }
        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none";

          // Remember what we're overwriting
          dataPriv.set(elem, "display", display);
        }
      }
    }

    // Set the display of the elements in a second loop to avoid constant reflow
    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }
    return elements;
  }
  _jQuery2.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }
      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          _jQuery2(this).show();
        } else {
          _jQuery2(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
  (function () {
    var fragment = document.createDocumentFragment(),
      div = fragment.appendChild(document.createElement("div")),
      input = document.createElement("input");

    // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (trac-11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (trac-14901)
    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input);

    // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

    // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

    // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.
    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  })();

  // We have to close these tags to support XHTML (trac-13200)
  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  // Support: IE <=9 only
  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
  }
  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
    var ret;
    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }
    if (tag === undefined || tag && nodeName(context, tag)) {
      return _jQuery2.merge([context], ret);
    }
    return ret;
  }

  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0,
      l = elems.length;
    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }
  var rhtml = /<|&#?\w+;/;
  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
      tmp,
      tag,
      wrap,
      attached,
      j,
      fragment = context.createDocumentFragment(),
      nodes = [],
      i = 0,
      l = elems.length;
    for (; i < l; i++) {
      elem = elems[i];
      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          _jQuery2.merge(nodes, elem.nodeType ? [elem] : elem);

          // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem));

          // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div"));

          // Deserialize a standard representation
          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + _jQuery2.htmlPrefilter(elem) + wrap[2];

          // Descend through wrappers to the right content
          j = wrap[0];
          while (j--) {
            tmp = tmp.lastChild;
          }

          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          _jQuery2.merge(nodes, tmp.childNodes);

          // Remember the top-level container
          tmp = fragment.firstChild;

          // Ensure the created nodes are orphaned (trac-12392)
          tmp.textContent = "";
        }
      }
    }

    // Remove wrapper from fragment
    fragment.textContent = "";
    i = 0;
    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && _jQuery2.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }
        continue;
      }
      attached = isAttached(elem);

      // Append to fragment
      tmp = getAll(fragment.appendChild(elem), "script");

      // Preserve script evaluation history
      if (attached) {
        setGlobalEval(tmp);
      }

      // Capture executables
      if (scripts) {
        j = 0;
        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }
    return fragment;
  }
  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }
  function _on(elem, types, selector, data, fn, one) {
    var origFn, type;

    // Types can be a map of types/handlers
    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }
      return elem;
    }
    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }
    if (one === 1) {
      origFn = fn;
      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        _jQuery2().off(event);
        return origFn.apply(this, arguments);
      };

      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || (origFn.guid = _jQuery2.guid++);
    }
    return elem.each(function () {
      _jQuery2.event.add(this, types, fn, data, selector);
    });
  }

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  _jQuery2.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
        eventHandle,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.get(elem);

      // Only attach events to objects that accept data
      if (!acceptData(elem)) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)
      if (selector) {
        _jQuery2.find.matchesSelector(documentElement, selector);
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = _jQuery2.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof _jQuery2 !== "undefined" && _jQuery2.event.triggered !== e.type ? _jQuery2.event.dispatch.apply(elem, arguments) : undefined;
        };
      }

      // Handle multiple events separated by a space
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }

        // If event changes its type, use the special event handlers for the changed type
        special = _jQuery2.event.special[type] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;

        // Update special based on newly reset type
        special = _jQuery2.event.special[type] || {};

        // handleObj is passed to all event handlers
        handleObj = _jQuery2.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && _jQuery2.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn);

        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }
        if (special.add) {
          special.add.call(elem, handleObj);
          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }

        // Keep track of which events have ever been used, for event optimization
        _jQuery2.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
        origCount,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
      if (!elemData || !(events = elemData.events)) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            _jQuery2.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }
        special = _jQuery2.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];
          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);
            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            _jQuery2.removeEvent(elem, type, elemData.handle);
          }
          delete events[type];
        }
      }

      // Remove data and the expando if it's no longer used
      if (_jQuery2.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      var i,
        j,
        ret,
        matched,
        handleObj,
        handlerQueue,
        args = new Array(arguments.length),
        // Make a writable jQuery.Event from the native event object
        event = _jQuery2.event.fix(nativeEvent),
        handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
        special = _jQuery2.event.special[event.type] || {};

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }

      // Determine handlers
      handlerQueue = _jQuery2.event.handlers.call(this, event, handlers);

      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((_jQuery2.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }
      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
        handleObj,
        sel,
        matchedHandlers,
        matchedSelectors,
        handlerQueue = [],
        delegateCount = _handlers.delegateCount,
        cur = event.target;

      // Find delegate handlers
      if (delegateCount &&
      // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType &&
      // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (trac-13208)
          // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};
            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i];

              // Don't conflict with Object.prototype properties (trac-13203)
              sel = handleObj.selector + " ";
              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? _jQuery2(sel, this).index(cur) > -1 : _jQuery2.find(sel, this, null, [cur]).length;
              }
              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }
            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      cur = this;
      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }
      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(_jQuery2.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[_jQuery2.expando] ? originalEvent : new _jQuery2.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function setup(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Claim the first handler
          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", true);
          }

          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function trigger(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Force setup before triggering a click
          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            leverageNative(el, "click");
          }

          // Return non-false to allow normal event-path propagation
          return true;
        },
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function _default(event) {
          var target = event.target;
          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  };

  // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.
  function leverageNative(el, type, isSetup) {
    // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
    if (!isSetup) {
      if (dataPriv.get(el, type) === undefined) {
        _jQuery2.event.add(el, type, returnTrue);
      }
      return;
    }

    // Register the controller as a special universal handler for all event namespaces
    dataPriv.set(el, type, false);
    _jQuery2.event.add(el, type, {
      namespace: false,
      handler: function handler(event) {
        var result,
          saved = dataPriv.get(this, type);
        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          if (!saved) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = _slice.call(arguments);
            dataPriv.set(this, type, saved);

            // Trigger the native event and capture its result
            this[type]();
            result = dataPriv.get(this, type);
            dataPriv.set(this, type, false);
            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();
              return result;
            }

            // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering
            // the native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.
          } else if ((_jQuery2.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          }

          // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments
        } else if (saved) {
          // ...and capture the result
          dataPriv.set(this, type, _jQuery2.event.trigger(saved[0], saved.slice(1), this));

          // Abort handling of the native event by all jQuery handlers while allowing
          // native handlers on the same element to run. On target, this is achieved
          // by stopping immediate propagation just on the jQuery event. However,
          // the native event is re-wrapped by a jQuery one on each level of the
          // propagation so the only way to stop it for jQuery is to stop it for
          // everyone via native `stopPropagation()`. This is not a problem for
          // focus/blur which don't bubble, but it does also stop click on checkboxes
          // and radios. We accept this limitation.
          event.stopPropagation();
          event.isImmediatePropagationStopped = returnTrue;
        }
      }
    });
  }
  _jQuery2.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };
  _jQuery2.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof _jQuery2.Event)) {
      return new _jQuery2.Event(src, props);
    }

    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
      // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse;

      // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (trac-504, trac-13143)
      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget;

      // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if (props) {
      _jQuery2.extend(this, props);
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || Date.now();

    // Mark it as fixed
    this[_jQuery2.expando] = true;
  };

  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  _jQuery2.Event.prototype = {
    constructor: _jQuery2.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;
      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;
      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;
      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }
      this.stopPropagation();
    }
  };

  // Includes all common event props including KeyEvent and MouseEvent specific props
  _jQuery2.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: true
  }, _jQuery2.event.addProp);
  _jQuery2.each({
    focus: "focusin",
    blur: "focusout"
  }, function (type, delegateType) {
    function focusMappedHandler(nativeEvent) {
      if (document.documentMode) {
        // Support: IE 11+
        // Attach a single focusin/focusout handler on the document while someone wants
        // focus/blur. This is because the former are synchronous in IE while the latter
        // are async. In other browsers, all those handlers are invoked synchronously.

        // `handle` from private data would already wrap the event, but we need
        // to change the `type` here.
        var handle = dataPriv.get(this, "handle"),
          event = _jQuery2.event.fix(nativeEvent);
        event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
        event.isSimulated = true;

        // First, handle focusin/focusout
        handle(nativeEvent);

        // ...then, handle focus/blur
        //
        // focus/blur don't bubble while focusin/focusout do; simulate the former by only
        // invoking the handler at the lower level.
        if (event.target === event.currentTarget) {
          // The setup part calls `leverageNative`, which, in turn, calls
          // `jQuery.event.add`, so event handle will already have been set
          // by this point.
          handle(event);
        }
      } else {
        // For non-IE browsers, attach a single capturing handler on the document
        // while someone wants focusin/focusout.
        _jQuery2.event.simulate(delegateType, nativeEvent.target, _jQuery2.event.fix(nativeEvent));
      }
    }
    _jQuery2.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function setup() {
        var attaches;

        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, true);
        if (document.documentMode) {
          // Support: IE 9 - 11+
          // We use the same native handler for focusin & focus (and focusout & blur)
          // so we need to coordinate setup & teardown parts between those events.
          // Use `delegateType` as the key as `type` is already used by `leverageNative`.
          attaches = dataPriv.get(this, delegateType);
          if (!attaches) {
            this.addEventListener(delegateType, focusMappedHandler);
          }
          dataPriv.set(this, delegateType, (attaches || 0) + 1);
        } else {
          // Return false to allow normal processing in the caller
          return false;
        }
      },
      trigger: function trigger() {
        // Force setup before trigger
        leverageNative(this, type);

        // Return non-false to allow normal event-path propagation
        return true;
      },
      teardown: function teardown() {
        var attaches;
        if (document.documentMode) {
          attaches = dataPriv.get(this, delegateType) - 1;
          if (!attaches) {
            this.removeEventListener(delegateType, focusMappedHandler);
            dataPriv.remove(this, delegateType);
          } else {
            dataPriv.set(this, delegateType, attaches);
          }
        } else {
          // Return false to indicate standard teardown should be applied
          return false;
        }
      },
      // Suppress native focus or blur if we're currently inside
      // a leveraged native-event stack
      _default: function _default(event) {
        return dataPriv.get(event.target, type);
      },
      delegateType: delegateType
    };

    // Support: Firefox <=44
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    //
    // Support: IE 9 - 11+
    // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
    // attach a single handler for both events in IE.
    _jQuery2.event.special[delegateType] = {
      setup: function setup() {
        // Handle: regular nodes (via `this.ownerDocument`), window
        // (via `this.document`) & document (via `this`).
        var doc = this.ownerDocument || this.document || this,
          dataHolder = document.documentMode ? this : doc,
          attaches = dataPriv.get(dataHolder, delegateType);

        // Support: IE 9 - 11+
        // We use the same native handler for focusin & focus (and focusout & blur)
        // so we need to coordinate setup & teardown parts between those events.
        // Use `delegateType` as the key as `type` is already used by `leverageNative`.
        if (!attaches) {
          if (document.documentMode) {
            this.addEventListener(delegateType, focusMappedHandler);
          } else {
            doc.addEventListener(type, focusMappedHandler, true);
          }
        }
        dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
      },
      teardown: function teardown() {
        var doc = this.ownerDocument || this.document || this,
          dataHolder = document.documentMode ? this : doc,
          attaches = dataPriv.get(dataHolder, delegateType) - 1;
        if (!attaches) {
          if (document.documentMode) {
            this.removeEventListener(delegateType, focusMappedHandler);
          } else {
            doc.removeEventListener(type, focusMappedHandler, true);
          }
          dataPriv.remove(dataHolder, delegateType);
        } else {
          dataPriv.set(dataHolder, delegateType, attaches);
        }
      }
    };
  });

  // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).
  _jQuery2.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    _jQuery2.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
          target = this,
          related = event.relatedTarget,
          handleObj = event.handleObj;

        // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if (!related || related !== target && !_jQuery2.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }
        return ret;
      }
    };
  });
  _jQuery2.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        _jQuery2(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        _jQuery2.event.remove(this, types, fn, selector);
      });
    }
  });
  var
    // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

  // Prefer a tbody over its parent table for containing new rows
  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return _jQuery2(elem).children("tbody")[0] || elem;
    }
    return elem;
  }

  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }
    return elem;
  }
  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;
    if (dest.nodeType !== 1) {
      return;
    }

    // 1. Copy private data: events, handlers, etc.
    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;
      if (events) {
        dataPriv.remove(dest, "handle events");
        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            _jQuery2.event.add(dest, type, events[type][i]);
          }
        }
      }
    }

    // 2. Copy user data
    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = _jQuery2.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  }

  // Fix IE bugs, see support tests
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked;

      // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }
  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);
    var fragment,
      first,
      scripts,
      hasScripts,
      node,
      doc,
      i = 0,
      l = collection.length,
      iNoClone = l - 1,
      value = args[0],
      valueIsFunction = isFunction(value);

    // We can't cloneNode fragments that contain checked, in WebKit
    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);
        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }
        domManip(self, args, callback, ignored);
      });
    }
    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;
      if (fragment.childNodes.length === 1) {
        fragment = first;
      }

      // Require either new content or an interest in ignored elements to invoke the callback
      if (first || ignored) {
        scripts = _jQuery2.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length;

        // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (trac-8070).
        for (; i < l; i++) {
          node = fragment;
          if (i !== iNoClone) {
            node = _jQuery2.clone(node, true, true);

            // Keep references to cloned scripts for later restoration
            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              _jQuery2.merge(scripts, getAll(node, "script"));
            }
          }
          callback.call(collection[i], node, i);
        }
        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument;

          // Re-enable scripts
          _jQuery2.map(scripts, restoreScript);

          // Evaluate executable scripts on first document insertion
          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];
            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && _jQuery2.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (_jQuery2._evalUrl && !node.noModule) {
                  _jQuery2._evalUrl(node.src, {
                    nonce: node.nonce || node.getAttribute("nonce")
                  }, doc);
                }
              } else {
                // Unwrap a CDATA section containing script contents. This shouldn't be
                // needed as in XML documents they're already not visible when
                // inspecting element contents and in HTML documents they have no
                // meaning but we're preserving that logic for backwards compatibility.
                // This will be removed completely in 4.0. See gh-4904.
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }
    return collection;
  }
  function _remove(elem, selector, keepData) {
    var node,
      nodes = selector ? _jQuery2.filter(selector, elem) : elem,
      i = 0;
    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        _jQuery2.cleanData(getAll(node));
      }
      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }
        node.parentNode.removeChild(node);
      }
    }
    return elem;
  }
  _jQuery2.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html;
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
        l,
        srcElements,
        destElements,
        clone = elem.cloneNode(true),
        inPage = isAttached(elem);

      // Fix IE cloning issues
      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !_jQuery2.isXMLDoc(elem)) {
        // We eschew jQuery#find here for performance reasons:
        // https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);
        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }

      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }

      // Preserve script evaluation history
      destElements = getAll(clone, "script");
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      }

      // Return the cloned set
      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
        elem,
        type,
        special = _jQuery2.event.special,
        i = 0;
      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  _jQuery2.event.remove(elem, type);

                  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  _jQuery2.removeEvent(elem, type, data.handle);
                }
              }
            }

            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataPriv.expando] = undefined;
          }
          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  _jQuery2.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return _access(this, function (value) {
        return value === undefined ? _jQuery2.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
        i = 0;
      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          _jQuery2.cleanData(getAll(elem, false));

          // Remove any remaining nodes
          elem.textContent = "";
        }
      }
      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return _jQuery2.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return _access(this, function (value) {
        var elem = this[0] || {},
          i = 0,
          l = this.length;
        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        }

        // See if we can take a shortcut and just use innerHTML
        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = _jQuery2.htmlPrefilter(value);
          try {
            for (; i < l; i++) {
              elem = this[i] || {};

              // Remove element nodes and prevent memory leaks
              if (elem.nodeType === 1) {
                _jQuery2.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }
            elem = 0;

            // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = [];

      // Make the changes, replacing each non-ignored context element with the new content
      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;
        if (_jQuery2.inArray(this, ignored) < 0) {
          _jQuery2.cleanData(getAll(this));
          if (parent) {
            parent.replaceChild(elem, this);
          }
        }

        // Force callback invocation
      }, ignored);
    }
  });
  _jQuery2.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    _jQuery2.fn[name] = function (selector) {
      var elems,
        ret = [],
        insert = _jQuery2(selector),
        last = insert.length - 1,
        i = 0;
      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        _jQuery2(insert[i])[original](elems);

        // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit
        push.apply(ret, elems.get());
      }
      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
  var rcustomProp = /^--/;
  var getStyles = function getStyles(elem) {
    // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;
    if (!view || !view.opener) {
      view = window;
    }
    return view.getComputedStyle(elem);
  };
  var swap = function swap(elem, options, callback) {
    var ret,
      name,
      old = {};

    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }
    ret = callback.call(elem);

    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }
    return ret;
  };
  var rboxStyle = new RegExp(cssExpand.join("|"), "i");
  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }
      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%";

      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't
      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

      // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements
      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

      // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)
      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
      documentElement.removeChild(container);

      // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed
      div = null;
    }
    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }
    var pixelPositionVal,
      boxSizingReliableVal,
      scrollboxSizeVal,
      pixelBoxStylesVal,
      reliableTrDimensionsVal,
      reliableMarginLeftVal,
      container = document.createElement("div"),
      div = document.createElement("div");

    // Finish early in limited (non-browser) environments
    if (!div.style) {
      return;
    }

    // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (trac-8908)
    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    _jQuery2.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      },
      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      //
      // Support: Firefox 70+
      // Only Firefox includes border widths
      // in computed dimensions. (gh-4529)
      reliableTrDimensions: function reliableTrDimensions() {
        var table, tr, trChild, trStyle;
        if (reliableTrDimensionsVal == null) {
          table = document.createElement("table");
          tr = document.createElement("tr");
          trChild = document.createElement("div");
          table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
          tr.style.cssText = "box-sizing:content-box;border:1px solid";

          // Support: Chrome 86+
          // Height set through cssText does not get applied.
          // Computed height then comes back as 0.
          tr.style.height = "1px";
          trChild.style.height = "9px";

          // Support: Android 8 Chrome 86+
          // In our bodyBackground.html iframe,
          // display for all div elements is set to "inline",
          // which causes a problem only in Android 8 Chrome 86.
          // Ensuring the div is `display: block`
          // gets around this issue.
          trChild.style.display = "block";
          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
          documentElement.removeChild(table);
        }
        return reliableTrDimensionsVal;
      }
    });
  })();
  function curCSS(elem, name, computed) {
    var width,
      minWidth,
      maxWidth,
      ret,
      isCustomProp = rcustomProp.test(name),
      // Support: Firefox 51+
      // Retrieving style before computed somehow
      // fixes an issue with getting wrong values
      // on detached elements
      style = elem.style;
    computed = computed || getStyles(elem);

    // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, trac-12537)
    //   .css('--customProperty) (gh-3144)
    if (computed) {
      // Support: IE <=9 - 11+
      // IE only supports `"float"` in `getPropertyValue`; in computed styles
      // it's only available as `"cssFloat"`. We no longer modify properties
      // sent to `.css()` apart from camelCasing, so we need to check both.
      // Normally, this would create difference in behavior: if
      // `getPropertyValue` returns an empty string, the value returned
      // by `.css()` would be `undefined`. This is usually the case for
      // disconnected elements. However, in IE even disconnected elements
      // with no styles return `"none"` for `getPropertyValue( "float" )`
      ret = computed.getPropertyValue(name) || computed[name];
      if (isCustomProp && ret) {
        // Support: Firefox 105+, Chrome <=105+
        // Spec requires trimming whitespace for custom properties (gh-4926).
        // Firefox only trims leading whitespace. Chrome just collapses
        // both leading & trailing whitespace to a single space.
        //
        // Fall back to `undefined` if empty string returned.
        // This collapses a missing definition with property defined
        // and set to an empty string but there's no standard API
        // allowing us to differentiate them without a performance penalty
        // and returning `undefined` aligns with older jQuery.
        //
        // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
        // as whitespace while CSS does not, but this is not a problem
        // because CSS preprocessing replaces them with U+000A LINE FEED
        // (which *is* CSS whitespace)
        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
        ret = ret.replace(rtrimCSS, "$1") || undefined;
      }
      if (ret === "" && !isAttached(elem)) {
        ret = _jQuery2.style(elem, name);
      }

      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values
      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }
    return ret !== undefined ?
    // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }
  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }

        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }
  var cssPrefixes = ["Webkit", "Moz", "ms"],
    emptyStyle = document.createElement("div").style,
    vendorProps = {};

  // Return a vendor-prefixed property or undefined
  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
      i = cssPrefixes.length;
    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  }

  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
  function finalPropName(name) {
    var _final = _jQuery2.cssProps[name] || vendorProps[name];
    if (_final) {
      return _final;
    }
    if (name in emptyStyle) {
      return name;
    }
    return vendorProps[name] = vendorPropName(name) || name;
  }
  var
    // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    cssShow = {
      position: "absolute",
      visibility: "hidden",
      display: "block"
    },
    cssNormalTransform = {
      letterSpacing: "0",
      fontWeight: "400"
    };
  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ?
    // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }
  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
      extra = 0,
      delta = 0,
      marginDelta = 0;

    // Adjustment may not be necessary
    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }
    for (; i < 4; i += 2) {
      // Both box models exclude margin
      // Count margin delta separately to only add it after scroll gutter adjustment.
      // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
      if (box === "margin") {
        marginDelta += _jQuery2.css(elem, box + cssExpand[i], true, styles);
      }

      // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
      if (!isBorderBox) {
        // Add padding
        delta += _jQuery2.css(elem, "padding" + cssExpand[i], true, styles);

        // For "border" or "margin", add border
        if (box !== "padding") {
          delta += _jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);

          // But still keep track of it otherwise
        } else {
          extra += _jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }

        // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"
      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= _jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
        }

        // For "content" or "padding", subtract border
        if (box !== "margin") {
          delta -= _jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    }

    // Account for positive content-box scroll gutter when requested by providing computedVal
    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5

      // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      )) || 0;
    }
    return delta + marginDelta;
  }
  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
      // Fake content-box until we know it's needed to know the true value.
      boxSizingNeeded = !support.boxSizingReliable() || extra,
      isBorderBox = boxSizingNeeded && _jQuery2.css(elem, "boxSizing", false, styles) === "border-box",
      valueIsBorderBox = isBorderBox,
      val = curCSS(elem, dimension, styles),
      offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);

    // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.
    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }
      val = "auto";
    }

    // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.
    if ((!support.boxSizingReliable() && isBorderBox ||
    // Support: IE 10 - 11+, Edge 15 - 18+
    // IE/Edge misreport `getComputedStyle` of table rows with width/height
    // set in CSS while `offset*` properties report correct values.
    // Interestingly, in some cases IE 9 doesn't suffer from this issue.
    !support.reliableTrDimensions() && nodeName(elem, "tr") ||
    // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    val === "auto" ||
    // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    !parseFloat(val) && _jQuery2.css(elem, "display", false, styles) === "inline") &&
    // Make sure the element is visible & connected
    elem.getClientRects().length) {
      isBorderBox = _jQuery2.css(elem, "boxSizing", false, styles) === "border-box";

      // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.
      valueIsBorderBox = offsetProp in elem;
      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    }

    // Normalize "" and auto
    val = parseFloat(val) || 0;

    // Adjust for the element's box model
    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles,
    // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }
  _jQuery2.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageSlice: true,
      columnCount: true,
      flexGrow: true,
      flexShrink: true,
      fontWeight: true,
      gridArea: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnStart: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowStart: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      scale: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeMiterlimit: true,
      strokeOpacity: true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }

      // Make sure that we're working with the right name
      var ret,
        type,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name),
        style = elem.style;

      // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Gets hook for the prefixed version, then unprefixed version
      hooks = _jQuery2.cssHooks[name] || _jQuery2.cssHooks[origName];

      // Check if we're setting a value
      if (value !== undefined) {
        type = _typeof(value);

        // Convert "+=" or "-=" to relative numbers (trac-7345)
        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret);

          // Fixes bug trac-9237
          type = "number";
        }

        // Make sure that null and NaN values aren't set (trac-7116)
        if (value == null || value !== value) {
          return;
        }

        // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.
        if (type === "number" && !isCustomProp) {
          value += ret && ret[3] || (_jQuery2.cssNumber[origName] ? "" : "px");
        }

        // background-* props affect original clone's values
        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        }

        // Otherwise just get the value from the style object
        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
        num,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name);

      // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Try prefixed name followed by the unprefixed name
      hooks = _jQuery2.cssHooks[name] || _jQuery2.cssHooks[origName];

      // If a hook was provided get the computed value from there
      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      }

      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }

      // Convert "normal" to computed value
      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }

      // Make numeric if forced or a qualifier was provided and val looks numeric
      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }
      return val;
    }
  });
  _jQuery2.each(["height", "width"], function (_i, dimension) {
    _jQuery2.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(_jQuery2.css(elem, "display")) && (
          // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
          styles = getStyles(elem),
          // Only read styles.position if the test has a chance to fail
          // to avoid forcing a reflow.
          scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
          boxSizingNeeded = scrollboxSizeBuggy || extra,
          isBorderBox = boxSizingNeeded && _jQuery2.css(elem, "boxSizing", false, styles) === "border-box",
          subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;

        // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)
        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        }

        // Convert to pixels if value adjustment is needed
        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = _jQuery2.css(elem, dimension);
        }
        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  _jQuery2.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  });

  // These hooks are used by animate to expand properties
  _jQuery2.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    _jQuery2.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
          expanded = {},
          // Assumes a single number if not a string
          parts = typeof value === "string" ? value.split(" ") : [value];
        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }
        return expanded;
      }
    };
    if (prefix !== "margin") {
      _jQuery2.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  _jQuery2.fn.extend({
    css: function css(name, value) {
      return _access(this, function (elem, name, value) {
        var styles,
          len,
          map = {},
          i = 0;
        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;
          for (; i < len; i++) {
            map[name[i]] = _jQuery2.css(elem, name[i], false, styles);
          }
          return map;
        }
        return value !== undefined ? _jQuery2.style(elem, name, value) : _jQuery2.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  });
  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  _jQuery2.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || _jQuery2.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (_jQuery2.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
        hooks = Tween.propHooks[this.prop];
      if (this.options.duration) {
        this.pos = eased = _jQuery2.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;
      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }
      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result;

        // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.
        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        }

        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = _jQuery2.css(tween.elem, tween.prop, "");

        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (_jQuery2.fx.step[tween.prop]) {
          _jQuery2.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (_jQuery2.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
          _jQuery2.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  };

  // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  _jQuery2.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  _jQuery2.fx = Tween.prototype.init;

  // Back compat <1.8 extension point
  _jQuery2.fx.step = {};
  var fxNow,
    inProgress,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rrun = /queueHooks$/;
  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, _jQuery2.fx.interval);
      }
      _jQuery2.fx.tick();
    }
  }

  // Animations created synchronously will run synchronously
  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = Date.now();
  }

  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which,
      i = 0,
      attrs = {
        height: type
      };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }
    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }
    return attrs;
  }
  function createTween(value, prop, animation) {
    var tween,
      collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
      index = 0,
      length = collection.length;
    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }
  function defaultPrefilter(elem, props, opts) {
    var prop,
      value,
      toggle,
      hooks,
      oldfire,
      propTween,
      restoreDisplay,
      display,
      isBox = "width" in props || "height" in props,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHiddenWithinTree(elem),
      dataShow = dataPriv.get(elem, "fxshow");

    // Queue-skipping animations hijack the fx hooks
    if (!opts.queue) {
      hooks = _jQuery2._queueHooks(elem, "fx");
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!_jQuery2.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    }

    // Detect show/hide animations
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";
        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true;

            // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }
        orig[prop] = dataShow && dataShow[prop] || _jQuery2.style(elem, prop);
      }
    }

    // Bail out if this is a no-op like .hide().hide()
    propTween = !_jQuery2.isEmptyObject(props);
    if (!propTween && _jQuery2.isEmptyObject(orig)) {
      return;
    }

    // Restrict "overflow" and "display" styles during box animations
    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY];

      // Identify a display type, preferring old show/hide data over the CSS cascade
      restoreDisplay = dataShow && dataShow.display;
      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }
      display = _jQuery2.css(elem, "display");
      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = _jQuery2.css(elem, "display");
          showHide([elem]);
        }
      }

      // Animate inline elements as inline-block
      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
        if (_jQuery2.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });
            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }
          style.display = "inline-block";
        }
      }
    }
    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }

    // Implement show/hide animations
    propTween = false;
    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        }

        // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
        if (toggle) {
          dataShow.hidden = !hidden;
        }

        // Show elements before animating them
        if (hidden) {
          showHide([elem], true);
        }

        /* eslint-disable no-loop-func */

        anim.done(function () {
          /* eslint-enable no-loop-func */

          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }
          dataPriv.remove(elem, "fxshow");
          for (prop in orig) {
            _jQuery2.style(elem, prop, orig[prop]);
          }
        });
      }

      // Per-property setup
      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;
        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }
  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }
      if (index !== name) {
        props[name] = value;
        delete props[index];
      }
      hooks = _jQuery2.cssHooks[name];
      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name];

        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }
  function Animation(elem, properties, options) {
    var result,
      stopped,
      index = 0,
      length = Animation.prefilters.length,
      deferred = _jQuery2.Deferred().always(function () {
        // Don't match elem in the :animated selector
        delete tick.elem;
      }),
      tick = function tick() {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
          temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;
        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }
        deferred.notifyWith(elem, [animation, percent, remaining]);

        // If there's more to do, yield
        if (percent < 1 && length) {
          return remaining;
        }

        // If this was an empty animation, synthesize a final progress notification
        if (!length) {
          deferred.notifyWith(elem, [animation, 1, 0]);
        }

        // Resolve the animation and report its conclusion
        deferred.resolveWith(elem, [animation]);
        return false;
      },
      animation = deferred.promise({
        elem: elem,
        props: _jQuery2.extend({}, properties),
        opts: _jQuery2.extend(true, {
          specialEasing: {},
          easing: _jQuery2.easing._default
        }, options),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function createTween(prop, end) {
          var tween = _jQuery2.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
          animation.tweens.push(tween);
          return tween;
        },
        stop: function stop(gotoEnd) {
          var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }

          // Resolve when we played the last frame; otherwise, reject
          if (gotoEnd) {
            deferred.notifyWith(elem, [animation, 1, 0]);
            deferred.resolveWith(elem, [animation, gotoEnd]);
          } else {
            deferred.rejectWith(elem, [animation, gotoEnd]);
          }
          return this;
        }
      }),
      props = animation.props;
    propFilter(props, animation.opts.specialEasing);
    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
      if (result) {
        if (isFunction(result.stop)) {
          _jQuery2._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }
        return result;
      }
    }
    _jQuery2.map(props, createTween, animation);
    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }

    // Attach callbacks from options
    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    _jQuery2.fx.timer(_jQuery2.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    return animation;
  }
  _jQuery2.Animation = _jQuery2.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function tweener(props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }
      var prop,
        index = 0,
        length = props.length;
      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });
  _jQuery2.speed = function (speed, easing, fn) {
    var opt = speed && _typeof(speed) === "object" ? _jQuery2.extend({}, speed) : {
      complete: fn || !fn && easing || isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction(easing) && easing
    };

    // Go to the end state if fx are off
    if (_jQuery2.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in _jQuery2.fx.speeds) {
          opt.duration = _jQuery2.fx.speeds[opt.duration];
        } else {
          opt.duration = _jQuery2.fx.speeds._default;
        }
      }
    }

    // Normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;
    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }
      if (opt.queue) {
        _jQuery2.dequeue(this, opt.queue);
      }
    };
    return opt;
  };
  _jQuery2.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHiddenWithinTree).css("opacity", 0).show()

      // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = _jQuery2.isEmptyObject(prop),
        optall = _jQuery2.speed(speed, easing, callback),
        doAnimation = function doAnimation() {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, _jQuery2.extend({}, prop), optall);

          // Empty animations, or finishing resolves immediately
          if (empty || dataPriv.get(this, "finish")) {
            anim.stop(true);
          }
        };
      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };
      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue) {
        this.queue(type || "fx", []);
      }
      return this.each(function () {
        var dequeue = true,
          index = type != null && type + "queueHooks",
          timers = _jQuery2.timers,
          data = dataPriv.get(this);
        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }

        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if (dequeue || !gotoEnd) {
          _jQuery2.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }
      return this.each(function () {
        var index,
          data = dataPriv.get(this),
          queue = data[type + "queue"],
          hooks = data[type + "queueHooks"],
          timers = _jQuery2.timers,
          length = queue ? queue.length : 0;

        // Enable finishing flag on private data
        data.finish = true;

        // Empty the queue first
        _jQuery2.queue(this, type, []);
        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }

        // Look for any active animations, and finish them
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }

        // Look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }

        // Turn off finishing flag
        delete data.finish;
      });
    }
  });
  _jQuery2.each(["toggle", "show", "hide"], function (_i, name) {
    var cssFn = _jQuery2.fn[name];
    _jQuery2.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  });

  // Generate shortcuts for custom animations
  _jQuery2.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    _jQuery2.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  _jQuery2.timers = [];
  _jQuery2.fx.tick = function () {
    var timer,
      i = 0,
      timers = _jQuery2.timers;
    fxNow = Date.now();
    for (; i < timers.length; i++) {
      timer = timers[i];

      // Run the timer and safely remove it when done (allowing for external removal)
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }
    if (!timers.length) {
      _jQuery2.fx.stop();
    }
    fxNow = undefined;
  };
  _jQuery2.fx.timer = function (timer) {
    _jQuery2.timers.push(timer);
    _jQuery2.fx.start();
  };
  _jQuery2.fx.interval = 13;
  _jQuery2.fx.start = function () {
    if (inProgress) {
      return;
    }
    inProgress = true;
    schedule();
  };
  _jQuery2.fx.stop = function () {
    inProgress = null;
  };
  _jQuery2.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  };

  // Based off of the plugin by Clint Helfers, with permission.
  _jQuery2.fn.delay = function (time, type) {
    time = _jQuery2.fx ? _jQuery2.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);
      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };
  (function () {
    var input = document.createElement("input"),
      select = document.createElement("select"),
      opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox";

    // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== "";

    // Support: IE <=11 only
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: IE <=11 only
    // An input loses its value after becoming a radio
    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();
  var boolHook,
    attrHandle = _jQuery2.expr.attrHandle;
  _jQuery2.fn.extend({
    attr: function attr(name, value) {
      return _access(this, _jQuery2.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        _jQuery2.removeAttr(this, name);
      });
    }
  });
  _jQuery2.extend({
    attr: function attr(elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set attributes on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === "undefined") {
        return _jQuery2.prop(elem, name, value);
      }

      // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined
      if (nType !== 1 || !_jQuery2.isXMLDoc(elem)) {
        hooks = _jQuery2.attrHooks[name.toLowerCase()] || (_jQuery2.expr.match.bool.test(name) ? boolHook : undefined);
      }
      if (value !== undefined) {
        if (value === null) {
          _jQuery2.removeAttr(elem, name);
          return;
        }
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }
        elem.setAttribute(name, value + "");
        return value;
      }
      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }
      ret = _jQuery2.find.attr(elem, name);

      // Non-existent attributes return null, we normalize to undefined
      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
        i = 0,
        // Attribute names can contain non-HTML whitespace characters
        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
        attrNames = value && value.match(rnothtmlwhite);
      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  });

  // Hooks for boolean attributes
  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        _jQuery2.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };
  _jQuery2.each(_jQuery2.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || _jQuery2.find.attr;
    attrHandle[name] = function (elem, name, isXML) {
      var ret,
        handle,
        lowercaseName = name.toLowerCase();
      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }
      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
    rclickable = /^(?:a|area)$/i;
  _jQuery2.fn.extend({
    prop: function prop(name, value) {
      return _access(this, _jQuery2.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[_jQuery2.propFix[name] || name];
      });
    }
  });
  _jQuery2.extend({
    prop: function prop(elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set properties on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      if (nType !== 1 || !_jQuery2.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = _jQuery2.propFix[name] || name;
        hooks = _jQuery2.propHooks[name];
      }
      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }
        return elem[name] = value;
      }
      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }
      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // Use proper attribute retrieval (trac-12072)
          var tabindex = _jQuery2.find.attr(elem, "tabindex");
          if (tabindex) {
            return parseInt(tabindex, 10);
          }
          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }
          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  });

  // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop
  if (!support.optSelected) {
    _jQuery2.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent) {
          parent.selectedIndex;
          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }
  _jQuery2.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    _jQuery2.propFix[this.toLowerCase()] = this;
  });

  // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }
  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }
  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }
    return [];
  }
  _jQuery2.fn.extend({
    addClass: function addClass(value) {
      var classNames, cur, curValue, className, i, finalValue;
      if (isFunction(value)) {
        return this.each(function (j) {
          _jQuery2(this).addClass(value.call(this, j, getClass(this)));
        });
      }
      classNames = classesToArray(value);
      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);
          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];
              if (cur.indexOf(" " + className + " ") < 0) {
                cur += className + " ";
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }
      return this;
    },
    removeClass: function removeClass(value) {
      var classNames, cur, curValue, className, i, finalValue;
      if (isFunction(value)) {
        return this.each(function (j) {
          _jQuery2(this).removeClass(value.call(this, j, getClass(this)));
        });
      }
      if (!arguments.length) {
        return this.attr("class", "");
      }
      classNames = classesToArray(value);
      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);

          // This expression is here for better compressibility (see addClass)
          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];

              // Remove *all* instances
              while (cur.indexOf(" " + className + " ") > -1) {
                cur = cur.replace(" " + className + " ", " ");
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }
      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var classNames,
        className,
        i,
        self,
        type = _typeof(value),
        isValidValue = type === "string" || Array.isArray(value);
      if (isFunction(value)) {
        return this.each(function (i) {
          _jQuery2(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }
      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }
      classNames = classesToArray(value);
      return this.each(function () {
        if (isValidValue) {
          // Toggle individual class names
          self = _jQuery2(this);
          for (i = 0; i < classNames.length; i++) {
            className = classNames[i];

            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }

          // Toggle whole class name
        } else if (value === undefined || type === "boolean") {
          className = getClass(this);
          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          }

          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
        elem,
        i = 0;
      className = " " + selector + " ";
      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }
      return false;
    }
  });
  var rreturn = /\r/g;
  _jQuery2.fn.extend({
    val: function val(value) {
      var hooks,
        ret,
        valueIsFunction,
        elem = this[0];
      if (!arguments.length) {
        if (elem) {
          hooks = _jQuery2.valHooks[elem.type] || _jQuery2.valHooks[elem.nodeName.toLowerCase()];
          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }
          ret = elem.value;

          // Handle most common string cases
          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          }

          // Handle cases where value is null/undef or number
          return ret == null ? "" : ret;
        }
        return;
      }
      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;
        if (this.nodeType !== 1) {
          return;
        }
        if (valueIsFunction) {
          val = value.call(this, i, _jQuery2(this).val());
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = _jQuery2.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }
        hooks = _jQuery2.valHooks[this.type] || _jQuery2.valHooks[this.nodeName.toLowerCase()];

        // If set returns undefined, fall back to normal setting
        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  _jQuery2.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = _jQuery2.find.attr(elem, "value");
          return val != null ? val :
          // Support: IE <=10 - 11 only
          // option.text throws exceptions (trac-14686, trac-14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(_jQuery2.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
            option,
            i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one",
            values = one ? null : [],
            max = one ? index + 1 : options.length;
          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          }

          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];

            // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (trac-2551)
            if ((option.selected || i === index) &&
            // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = _jQuery2(option).val();

              // We don't need an array for one selects
              if (one) {
                return value;
              }

              // Multi-Selects return an array
              values.push(value);
            }
          }
          return values;
        },
        set: function set(elem, value) {
          var optionSet,
            option,
            options = elem.options,
            values = _jQuery2.makeArray(value),
            i = options.length;
          while (i--) {
            option = options[i];

            /* eslint-disable no-cond-assign */

            if (option.selected = _jQuery2.inArray(_jQuery2.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }

            /* eslint-enable no-cond-assign */
          }

          // Force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });

  // Radios and checkboxes getter/setter
  _jQuery2.each(["radio", "checkbox"], function () {
    _jQuery2.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = _jQuery2.inArray(_jQuery2(elem).val(), value) > -1;
        }
      }
    };
    if (!support.checkOn) {
      _jQuery2.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  });

  // Return jQuery for attributes-only inclusion
  var location = window.location;
  var nonce = {
    guid: Date.now()
  };
  var rquery = /\?/;

  // Cross-browser xml parsing
  _jQuery2.parseXML = function (data) {
    var xml, parserErrorElem;
    if (!data || typeof data !== "string") {
      return null;
    }

    // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.
    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {}
    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
    if (!xml || parserErrorElem) {
      _jQuery2.error("Invalid XML: " + (parserErrorElem ? _jQuery2.map(parserErrorElem.childNodes, function (el) {
        return el.textContent;
      }).join("\n") : data));
    }
    return xml;
  };
  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    stopPropagationCallback = function stopPropagationCallback(e) {
      e.stopPropagation();
    };
  _jQuery2.extend(_jQuery2.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
        cur,
        tmp,
        bubbleType,
        ontype,
        handle,
        special,
        lastElement,
        eventPath = [elem || document],
        type = hasOwn.call(event, "type") ? event.type : event,
        namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document;

      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + _jQuery2.event.triggered)) {
        return;
      }
      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(":") < 0 && "on" + type;

      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[_jQuery2.expando] ? event : new _jQuery2.Event(type, _typeof(event) === "object" && event);

      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : _jQuery2.makeArray(data, [event]);

      // Allow special events to draw outside the lines
      special = _jQuery2.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (trac-9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }

      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type;

        // jQuery handler
        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");
        if (handle) {
          handle.apply(cur, data);
        }

        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (trac-6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];
            if (tmp) {
              elem[ontype] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            _jQuery2.event.triggered = type;
            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }
            elem[type]();
            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }
            _jQuery2.event.triggered = undefined;
            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }
      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = _jQuery2.extend(new _jQuery2.Event(), event, {
        type: type,
        isSimulated: true
      });
      _jQuery2.event.trigger(e, null, elem);
    }
  });
  _jQuery2.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        _jQuery2.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];
      if (elem) {
        return _jQuery2.event.trigger(type, data, elem, true);
      }
    }
  });
  var rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;
  function buildParams(prefix, obj, traditional, add) {
    var name;
    if (Array.isArray(obj)) {
      // Serialize array item.
      _jQuery2.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }

  // Serialize an array of form elements or a set of
  // key/values into a query string
  _jQuery2.param = function (a, traditional) {
    var prefix,
      s = [],
      add = function add(key, valueOrFunction) {
        // If value is a function, invoke it and use its return value
        var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
        s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
      };
    if (a == null) {
      return "";
    }

    // If an array was passed in, assume that it is an array of form elements.
    if (Array.isArray(a) || a.jquery && !_jQuery2.isPlainObject(a)) {
      // Serialize the form elements
      _jQuery2.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }

    // Return the resulting serialization
    return s.join("&");
  };
  _jQuery2.fn.extend({
    serialize: function serialize() {
      return _jQuery2.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = _jQuery2.prop(this, "elements");
        return elements ? _jQuery2.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type;

        // Use .is( ":disabled" ) so that fieldset[disabled] works
        return this.name && !_jQuery2(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (_i, elem) {
        var val = _jQuery2(this).val();
        if (val == null) {
          return null;
        }
        if (Array.isArray(val)) {
          return _jQuery2.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }
        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  var r20 = /%20/g,
    rhash = /#.*$/,
    rantiCache = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
    // trac-7653, trac-8125, trac-8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},
    // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
    allTypes = "*/".concat("*"),
    // Anchor tag for parsing the document origin
    originAnchor = document.createElement("a");
  originAnchor.href = location.href;

  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }
      var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func);

            // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }

  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
      seekingTransport = structure === transports;
    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      _jQuery2.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }
    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  }

  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes trac-9887
  function ajaxExtend(target, src) {
    var key,
      deep,
      flatOptions = _jQuery2.ajaxSettings.flatOptions || {};
    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      _jQuery2.extend(true, target, deep);
    }
    return target;
  }

  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
      type,
      finalDataType,
      firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === "*") {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    }

    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }

      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }

  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
      current,
      conv,
      tmp,
      prev,
      converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }
    current = dataTypes.shift();

    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }

      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }
      prev = current;
      current = dataTypes.shift();
      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev;

          // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current];

          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];

                    // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s["throws"]) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }
    return {
      state: "success",
      data: response
    };
  }
  _jQuery2.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */

      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": JSON.parse,
        // Parse text as xml
        "text xml": _jQuery2.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ?
      // Building a settings object
      ajaxExtend(ajaxExtend(target, _jQuery2.ajaxSettings), settings) :
      // Extending ajaxSettings
      ajaxExtend(_jQuery2.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function ajax(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (_typeof(url) === "object") {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};
      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString,
        responseHeaders,
        // timeout handle
        timeoutTimer,
        // Url cleanup var
        urlAnchor,
        // Request state (becomes false upon send and true upon completion)
        completed,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // uncached part of the url
        uncached,
        // Create the final options object
        s = _jQuery2.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? _jQuery2(callbackContext) : _jQuery2.event,
        // Deferreds
        deferred = _jQuery2.Deferred(),
        completeDeferred = _jQuery2.Callbacks("once memory"),
        // Status-dependent callbacks
        _statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
        // Default abort message
        strAbort = "canceled",
        // Fake xhr
        jqXHR = {
          readyState: 0,
          // Builds headers hashtable if needed
          getResponseHeader: function getResponseHeader(key) {
            var match;
            if (completed) {
              if (!responseHeaders) {
                responseHeaders = {};
                while (match = rheaders.exec(responseHeadersString)) {
                  responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                }
              }
              match = responseHeaders[key.toLowerCase() + " "];
            }
            return match == null ? null : match.join(", ");
          },
          // Raw string
          getAllResponseHeaders: function getAllResponseHeaders() {
            return completed ? responseHeadersString : null;
          },
          // Caches the header
          setRequestHeader: function setRequestHeader(name, value) {
            if (completed == null) {
              name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
              requestHeaders[name] = value;
            }
            return this;
          },
          // Overrides response content-type header
          overrideMimeType: function overrideMimeType(type) {
            if (completed == null) {
              s.mimeType = type;
            }
            return this;
          },
          // Status-dependent callbacks
          statusCode: function statusCode(map) {
            var code;
            if (map) {
              if (completed) {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              } else {
                // Lazy-add the new callbacks in a way that preserves old ones
                for (code in map) {
                  _statusCode[code] = [_statusCode[code], map[code]];
                }
              }
            }
            return this;
          },
          // Cancel the request
          abort: function abort(statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          }
        };

      // Attach deferreds
      deferred.promise(jqXHR);

      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (trac-10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

      // Alias method option to type as per ticket trac-12004
      s.type = options.method || options.type || s.method || s.type;

      // Extract dataTypes list
      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

      // A cross-domain request is in order when the origin doesn't match the current origin.
      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a");

        // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/
        try {
          urlAnchor.href = s.url;

          // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative
          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      }

      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = _jQuery2.param(s.data, s.traditional);
      }

      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

      // If request was aborted inside a prefilter, stop there
      if (completed) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
      fireGlobals = _jQuery2.event && s.global;

      // Watch for a new set of requests
      if (fireGlobals && _jQuery2.active++ === 0) {
        _jQuery2.event.trigger("ajaxStart");
      }

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);

      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation
      cacheURL = s.url.replace(rhash, "");

      // More options handling for requests with no content
      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length);

        // If data is available and should be processed, append data to url
        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

          // trac-9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Add or update anti-cache param if needed
        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
        }

        // Put hash and anti-cache on the URL that will be requested (gh-1732)
        s.url = cacheURL + uncached;

        // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (_jQuery2.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", _jQuery2.lastModified[cacheURL]);
        }
        if (_jQuery2.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", _jQuery2.etag[cacheURL]);
        }
      }

      // Set the correct header, if data is being sent
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }

      // Allow custom headers/mimetypes and early abort
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      }

      // Aborting is no longer a cancellation
      strAbort = "abort";

      // Install callbacks on deferreds
      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error);

      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

      // If no transport, we auto-abort
      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1;

        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        }

        // If request was aborted inside ajaxSend, stop there
        if (completed) {
          return jqXHR;
        }

        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }
        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          }

          // Propagate others as results
          done(-1, e);
        }
      }

      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
          success,
          error,
          response,
          modified,
          statusText = nativeStatusText;

        // Ignore repeat invocations
        if (completed) {
          return;
        }
        completed = true;

        // Clear timeout if it exists
        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || "";

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;

        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }

        // Use a noop converter for missing script but not if jsonp
        if (!isSuccess && _jQuery2.inArray("script", s.dataTypes) > -1 && _jQuery2.inArray("json", s.dataTypes) < 0) {
          s.converters["text script"] = function () {};
        }

        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);

        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");
            if (modified) {
              _jQuery2.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader("etag");
            if (modified) {
              _jQuery2.etag[cacheURL] = modified;
            }
          }

          // if no content
          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent";

            // if not modified
          } else if (status === 304) {
            statusText = "notmodified";

            // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = "error";
            if (status < 0) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + "";

        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        }

        // Status-dependent callbacks
        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;
        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        }

        // Complete
        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

          // Handle the global AJAX counter
          if (! --_jQuery2.active) {
            _jQuery2.event.trigger("ajaxStop");
          }
        }
      }
      return jqXHR;
    },
    getJSON: function getJSON(url, data, callback) {
      return _jQuery2.get(url, data, callback, "json");
    },
    getScript: function getScript(url, callback) {
      return _jQuery2.get(url, undefined, callback, "script");
    }
  });
  _jQuery2.each(["get", "post"], function (_i, method) {
    _jQuery2[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      // The url can be an options object (which then must have .url)
      return _jQuery2.ajax(_jQuery2.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, _jQuery2.isPlainObject(url) && url));
    };
  });
  _jQuery2.ajaxPrefilter(function (s) {
    var i;
    for (i in s.headers) {
      if (i.toLowerCase() === "content-type") {
        s.contentType = s.headers[i] || "";
      }
    }
  });
  _jQuery2._evalUrl = function (url, options, doc) {
    return _jQuery2.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (trac-11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function text_script() {}
      },
      dataFilter: function dataFilter(response) {
        _jQuery2.globalEval(response, options, doc);
      }
    });
  };
  _jQuery2.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;
      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        }

        // The elements to wrap the target around
        wrap = _jQuery2(html, this[0].ownerDocument).eq(0).clone(true);
        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }
        wrap.map(function () {
          var elem = this;
          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }
          return elem;
        }).append(this);
      }
      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          _jQuery2(this).wrapInner(html.call(this, i));
        });
      }
      return this.each(function () {
        var self = _jQuery2(this),
          contents = self.contents();
        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        _jQuery2(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        _jQuery2(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });
  _jQuery2.expr.pseudos.hidden = function (elem) {
    return !_jQuery2.expr.pseudos.visible(elem);
  };
  _jQuery2.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };
  _jQuery2.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };
  var xhrSuccessStatus = {
      // File protocol always yields status code 0, assume 200
      0: 200,
      // Support: IE <=9 only
      // trac-1450: sometimes IE returns 1223 when it should be 204
      1223: 204
    },
    xhrSupported = _jQuery2.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  _jQuery2.ajaxTransport(function (options) {
    var _callback, errorCallback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
            xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password);

          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }

          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          }

          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }

          // Callback
          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete(
                    // File: protocol always yields status 0; see trac-8605, trac-14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,
                  // Support: IE <=9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          };

          // Listen to events
          xhr.onload = _callback();
          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error");

          // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts
          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          }

          // Create the abort callback
          _callback = _callback("abort");
          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // trac-14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  });

  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
  _jQuery2.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  });

  // Install script dataType
  _jQuery2.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function text_script(text) {
        _jQuery2.globalEval(text);
        return text;
      }
    }
  });

  // Handle cache's special case and crossDomain
  _jQuery2.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = "GET";
    }
  });

  // Bind script tag hack transport
  _jQuery2.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, _callback2;
      return {
        send: function send(_, complete) {
          script = _jQuery2("<script>").attr(s.scriptAttrs || {}).prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback2 = function callback(evt) {
            script.remove();
            _callback2 = null;
            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          });

          // Use native DOM manipulation to avoid our domManip AJAX trickery
          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback2) {
            _callback2();
          }
        }
      };
    }
  });
  var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

  // Default jsonp settings
  _jQuery2.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || _jQuery2.expando + "_" + nonce.guid++;
      this[callback] = true;
      return callback;
    }
  });

  // Detect, normalize options and install callbacks for jsonp requests
  _jQuery2.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
      overwritten,
      responseContainer,
      jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters["script json"] = function () {
        if (!responseContainer) {
          _jQuery2.error(callbackName + " was not called");
        }
        return responseContainer[0];
      };

      // Force json dataType
      s.dataTypes[0] = "json";

      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          _jQuery2(window).removeProp(callbackName);

          // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        }

        // Save back as free
        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // Save the callback name for future use
          oldCallbacks.push(callbackName);
        }

        // Call if it was a function and we have a response
        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }
        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return "script";
    }
  });

  // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337
  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }();

  // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  _jQuery2.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }
    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }
    var base, parsed, scripts;
    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument("");

        // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)
        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }
    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && [];

    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }
    parsed = buildFragment([data], context, scripts);
    if (scripts && scripts.length) {
      _jQuery2(scripts).remove();
    }
    return _jQuery2.merge([], parsed.childNodes);
  };

  /**
   * Load a url into a page
   */
  _jQuery2.fn.load = function (url, params, callback) {
    var selector,
      type,
      response,
      self = this,
      off = url.indexOf(" ");
    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    }

    // If it's a function
    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;

      // Otherwise, build a param string
    } else if (params && _typeof(params) === "object") {
      type = "POST";
    }

    // If we have elements to modify, make the request
    if (self.length > 0) {
      _jQuery2.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ?
        // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        _jQuery2("<div>").append(_jQuery2.parseHTML(responseText)).find(selector) :
        // Otherwise use the full result
        responseText);

        // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }
    return this;
  };
  _jQuery2.expr.pseudos.animated = function (elem) {
    return _jQuery2.grep(_jQuery2.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };
  _jQuery2.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
        curLeft,
        curCSSTop,
        curTop,
        curOffset,
        curCSSLeft,
        calculatePosition,
        position = _jQuery2.css(elem, "position"),
        curElem = _jQuery2(elem),
        props = {};

      // Set position first, in-case top/left are set even on static elem
      if (position === "static") {
        elem.style.position = "relative";
      }
      curOffset = curElem.offset();
      curCSSTop = _jQuery2.css(elem, "top");
      curCSSLeft = _jQuery2.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }
      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, _jQuery2.extend({}, curOffset));
      }
      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }
      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  _jQuery2.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          _jQuery2.offset.setOffset(this, options, i);
        });
      }
      var rect,
        win,
        elem = this[0];
      if (!elem) {
        return;
      }

      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error
      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      }

      // Get document-relative position by adding viewport scroll to viewport-relative gBCR
      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }
      var offsetParent,
        offset,
        doc,
        elem = this[0],
        parentOffset = {
          top: 0,
          left: 0
        };

      // position:fixed elements are offset from the viewport, which itself always has zero offset
      if (_jQuery2.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset();

        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;
        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && _jQuery2.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }
        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = _jQuery2(offsetParent).offset();
          parentOffset.top += _jQuery2.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += _jQuery2.css(offsetParent, "borderLeftWidth", true);
        }
      }

      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - _jQuery2.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - _jQuery2.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;
        while (offsetParent && _jQuery2.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || documentElement;
      });
    }
  });

  // Create scrollLeft and scrollTop methods
  _jQuery2.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;
    _jQuery2.fn[method] = function (val) {
      return _access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;
        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }
        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }
        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  });

  // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  _jQuery2.each(["top", "left"], function (_i, prop) {
    _jQuery2.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop);

        // If curCSS returns percentage, fallback to offset
        return rnumnonpx.test(computed) ? _jQuery2(elem).position()[prop] + "px" : computed;
      }
    });
  });

  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  _jQuery2.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    _jQuery2.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      _jQuery2.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
          extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return _access(this, function (elem, type, value) {
          var doc;
          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          }

          // Get document width or height
          if (elem.nodeType === 9) {
            doc = elem.documentElement;

            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }
          return value === undefined ?
          // Get width or height on the element, requesting but not forcing parseFloat
          _jQuery2.css(elem, type, extra) :
          // Set width or height on the element
          _jQuery2.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  _jQuery2.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
    _jQuery2.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  _jQuery2.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    },
    hover: function hover(fnOver, fnOut) {
      return this.on("mouseenter", fnOver).on("mouseleave", fnOut || fnOver);
    }
  });
  _jQuery2.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
    // Handle event binding
    _jQuery2.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });

  // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  // Require that the "whitespace run" starts from a non-whitespace
  // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
  var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

  // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon
  _jQuery2.proxy = function (fn, context) {
    var tmp, args, proxy;
    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    }

    // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.
    if (!isFunction(fn)) {
      return undefined;
    }

    // Simulated bind
    args = _slice.call(arguments, 2);
    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    };

    // Set the guid of unique handler to the same of original handler, so it can be removed
    proxy.guid = fn.guid = fn.guid || _jQuery2.guid++;
    return proxy;
  };
  _jQuery2.holdReady = function (hold) {
    if (hold) {
      _jQuery2.readyWait++;
    } else {
      _jQuery2.ready(true);
    }
  };
  _jQuery2.isArray = Array.isArray;
  _jQuery2.parseJSON = JSON.parse;
  _jQuery2.nodeName = nodeName;
  _jQuery2.isFunction = isFunction;
  _jQuery2.isWindow = isWindow;
  _jQuery2.camelCase = camelCase;
  _jQuery2.type = toType;
  _jQuery2.now = Date.now;
  _jQuery2.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = _jQuery2.type(obj);
    return (type === "number" || type === "string") &&
    // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  };
  _jQuery2.trim = function (text) {
    return text == null ? "" : (text + "").replace(rtrim, "$1");
  };

  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.

  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (typeof define === "function" && define.amd) {
    define("jquery", [], function () {
      return _jQuery2;
    });
  }
  var
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;
  _jQuery2.noConflict = function (deep) {
    if (window.$ === _jQuery2) {
      window.$ = _$;
    }
    if (deep && window.jQuery === _jQuery2) {
      window.jQuery = _jQuery;
    }
    return _jQuery2;
  };

  // Expose jQuery and $ identifiers, even in AMD
  // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (trac-13566)
  if (typeof noGlobal === "undefined") {
    window.jQuery = window.$ = _jQuery2;
  }
  return _jQuery2;
});

},{}],3:[function(require,module,exports){
"use strict";

// ==================================================
// fancyBox v3.5.7
//
// Licensed GPLv3 for open source use
// or fancyBox Commercial License for commercial use
//
// http://fancyapps.com/fancybox/
// Copyright 2019 fancyApps
//
// ==================================================
!function (t, e, n, o) {
  "use strict";

  function i(t, e) {
    var o,
      i,
      a,
      s = [],
      r = 0;
    t && t.isDefaultPrevented() || (t.preventDefault(), e = e || {}, t && t.data && (e = h(t.data.options, e)), o = e.$target || n(t.currentTarget).trigger("blur"), (a = n.fancybox.getInstance()) && a.$trigger && a.$trigger.is(o) || (e.selector ? s = n(e.selector) : (i = o.attr("data-fancybox") || "", i ? (s = t.data ? t.data.items : [], s = s.length ? s.filter('[data-fancybox="' + i + '"]') : n('[data-fancybox="' + i + '"]')) : s = [o]), r = n(s).index(o), r < 0 && (r = 0), a = n.fancybox.open(s, e, r), a.$trigger = o));
  }
  if (t.console = t.console || {
    info: function info(t) {}
  }, n) {
    if (n.fn.fancybox) return void console.info("fancyBox already initialized");
    var a = {
        closeExisting: !1,
        loop: !1,
        gutter: 50,
        keyboard: !0,
        preventCaptionOverlap: !0,
        arrows: !0,
        infobar: !0,
        smallBtn: "auto",
        toolbar: "auto",
        buttons: ["zoom", "slideShow", "thumbs", "close"],
        idleTime: 3,
        protect: !1,
        modal: !1,
        image: {
          preload: !1
        },
        ajax: {
          settings: {
            data: {
              fancybox: !0
            }
          }
        },
        iframe: {
          tpl: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',
          preload: !0,
          css: {},
          attr: {
            scrolling: "auto"
          }
        },
        video: {
          tpl: '<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',
          format: "",
          autoStart: !0
        },
        defaultType: "image",
        animationEffect: "zoom",
        animationDuration: 366,
        zoomOpacity: "auto",
        transitionEffect: "fade",
        transitionDuration: 366,
        slideClass: "",
        baseClass: "",
        baseTpl: '<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',
        spinnerTpl: '<div class="fancybox-loading"></div>',
        errorTpl: '<div class="fancybox-error"><p>{{ERROR}}</p></div>',
        btnTpl: {
          download: '<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',
          zoom: '<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',
          close: '<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',
          arrowLeft: '<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',
          arrowRight: '<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',
          smallBtn: '<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'
        },
        parentEl: "body",
        hideScrollbar: !0,
        autoFocus: !0,
        backFocus: !0,
        trapFocus: !0,
        fullScreen: {
          autoStart: !1
        },
        touch: {
          vertical: !0,
          momentum: !0
        },
        hash: null,
        media: {},
        slideShow: {
          autoStart: !1,
          speed: 3e3
        },
        thumbs: {
          autoStart: !1,
          hideOnClose: !0,
          parentEl: ".fancybox-container",
          axis: "y"
        },
        wheel: "auto",
        onInit: n.noop,
        beforeLoad: n.noop,
        afterLoad: n.noop,
        beforeShow: n.noop,
        afterShow: n.noop,
        beforeClose: n.noop,
        afterClose: n.noop,
        onActivate: n.noop,
        onDeactivate: n.noop,
        clickContent: function clickContent(t, e) {
          return "image" === t.type && "zoom";
        },
        clickSlide: "close",
        clickOutside: "close",
        dblclickContent: !1,
        dblclickSlide: !1,
        dblclickOutside: !1,
        mobile: {
          preventCaptionOverlap: !1,
          idleTime: !1,
          clickContent: function clickContent(t, e) {
            return "image" === t.type && "toggleControls";
          },
          clickSlide: function clickSlide(t, e) {
            return "image" === t.type ? "toggleControls" : "close";
          },
          dblclickContent: function dblclickContent(t, e) {
            return "image" === t.type && "zoom";
          },
          dblclickSlide: function dblclickSlide(t, e) {
            return "image" === t.type && "zoom";
          }
        },
        lang: "en",
        i18n: {
          en: {
            CLOSE: "Close",
            NEXT: "Next",
            PREV: "Previous",
            ERROR: "The requested content cannot be loaded. <br/> Please try again later.",
            PLAY_START: "Start slideshow",
            PLAY_STOP: "Pause slideshow",
            FULL_SCREEN: "Full screen",
            THUMBS: "Thumbnails",
            DOWNLOAD: "Download",
            SHARE: "Share",
            ZOOM: "Zoom"
          },
          de: {
            CLOSE: "Schlie&szlig;en",
            NEXT: "Weiter",
            PREV: "Zur&uuml;ck",
            ERROR: "Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",
            PLAY_START: "Diaschau starten",
            PLAY_STOP: "Diaschau beenden",
            FULL_SCREEN: "Vollbild",
            THUMBS: "Vorschaubilder",
            DOWNLOAD: "Herunterladen",
            SHARE: "Teilen",
            ZOOM: "Vergr&ouml;&szlig;ern"
          }
        }
      },
      s = n(t),
      r = n(e),
      c = 0,
      l = function l(t) {
        return t && t.hasOwnProperty && t instanceof n;
      },
      d = function () {
        return t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.oRequestAnimationFrame || function (e) {
          return t.setTimeout(e, 1e3 / 60);
        };
      }(),
      u = function () {
        return t.cancelAnimationFrame || t.webkitCancelAnimationFrame || t.mozCancelAnimationFrame || t.oCancelAnimationFrame || function (e) {
          t.clearTimeout(e);
        };
      }(),
      f = function () {
        var t,
          n = e.createElement("fakeelement"),
          o = {
            transition: "transitionend",
            OTransition: "oTransitionEnd",
            MozTransition: "transitionend",
            WebkitTransition: "webkitTransitionEnd"
          };
        for (t in o) if (void 0 !== n.style[t]) return o[t];
        return "transitionend";
      }(),
      p = function p(t) {
        return t && t.length && t[0].offsetHeight;
      },
      h = function h(t, e) {
        var o = n.extend(!0, {}, t, e);
        return n.each(e, function (t, e) {
          n.isArray(e) && (o[t] = e);
        }), o;
      },
      g = function g(t) {
        var o, i;
        return !(!t || t.ownerDocument !== e) && (n(".fancybox-container").css("pointer-events", "none"), o = {
          x: t.getBoundingClientRect().left + t.offsetWidth / 2,
          y: t.getBoundingClientRect().top + t.offsetHeight / 2
        }, i = e.elementFromPoint(o.x, o.y) === t, n(".fancybox-container").css("pointer-events", ""), i);
      },
      b = function b(t, e, o) {
        var i = this;
        i.opts = h({
          index: o
        }, n.fancybox.defaults), n.isPlainObject(e) && (i.opts = h(i.opts, e)), n.fancybox.isMobile && (i.opts = h(i.opts, i.opts.mobile)), i.id = i.opts.id || ++c, i.currIndex = parseInt(i.opts.index, 10) || 0, i.prevIndex = null, i.prevPos = null, i.currPos = 0, i.firstRun = !0, i.group = [], i.slides = {}, i.addContent(t), i.group.length && i.init();
      };
    n.extend(b.prototype, {
      init: function init() {
        var o,
          i,
          a = this,
          s = a.group[a.currIndex],
          r = s.opts;
        r.closeExisting && n.fancybox.close(!0), n("body").addClass("fancybox-active"), !n.fancybox.getInstance() && !1 !== r.hideScrollbar && !n.fancybox.isMobile && e.body.scrollHeight > t.innerHeight && (n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:' + (t.innerWidth - e.documentElement.clientWidth) + "px;}</style>"), n("body").addClass("compensate-for-scrollbar")), i = "", n.each(r.buttons, function (t, e) {
          i += r.btnTpl[e] || "";
        }), o = n(a.translate(a, r.baseTpl.replace("{{buttons}}", i).replace("{{arrows}}", r.btnTpl.arrowLeft + r.btnTpl.arrowRight))).attr("id", "fancybox-container-" + a.id).addClass(r.baseClass).data("FancyBox", a).appendTo(r.parentEl), a.$refs = {
          container: o
        }, ["bg", "inner", "infobar", "toolbar", "stage", "caption", "navigation"].forEach(function (t) {
          a.$refs[t] = o.find(".fancybox-" + t);
        }), a.trigger("onInit"), a.activate(), a.jumpTo(a.currIndex);
      },
      translate: function translate(t, e) {
        var n = t.opts.i18n[t.opts.lang] || t.opts.i18n.en;
        return e.replace(/\{\{(\w+)\}\}/g, function (t, e) {
          return void 0 === n[e] ? t : n[e];
        });
      },
      addContent: function addContent(t) {
        var e,
          o = this,
          i = n.makeArray(t);
        n.each(i, function (t, e) {
          var i,
            a,
            s,
            r,
            c,
            l = {},
            d = {};
          n.isPlainObject(e) ? (l = e, d = e.opts || e) : "object" === n.type(e) && n(e).length ? (i = n(e), d = i.data() || {}, d = n.extend(!0, {}, d, d.options), d.$orig = i, l.src = o.opts.src || d.src || i.attr("href"), l.type || l.src || (l.type = "inline", l.src = e)) : l = {
            type: "html",
            src: e + ""
          }, l.opts = n.extend(!0, {}, o.opts, d), n.isArray(d.buttons) && (l.opts.buttons = d.buttons), n.fancybox.isMobile && l.opts.mobile && (l.opts = h(l.opts, l.opts.mobile)), a = l.type || l.opts.type, r = l.src || "", !a && r && ((s = r.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i)) ? (a = "video", l.opts.video.format || (l.opts.video.format = "video/" + ("ogv" === s[1] ? "ogg" : s[1]))) : r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i) ? a = "image" : r.match(/\.(pdf)((\?|#).*)?$/i) ? (a = "iframe", l = n.extend(!0, l, {
            contentType: "pdf",
            opts: {
              iframe: {
                preload: !1
              }
            }
          })) : "#" === r.charAt(0) && (a = "inline")), a ? l.type = a : o.trigger("objectNeedsType", l), l.contentType || (l.contentType = n.inArray(l.type, ["html", "inline", "ajax"]) > -1 ? "html" : l.type), l.index = o.group.length, "auto" == l.opts.smallBtn && (l.opts.smallBtn = n.inArray(l.type, ["html", "inline", "ajax"]) > -1), "auto" === l.opts.toolbar && (l.opts.toolbar = !l.opts.smallBtn), l.$thumb = l.opts.$thumb || null, l.opts.$trigger && l.index === o.opts.index && (l.$thumb = l.opts.$trigger.find("img:first"), l.$thumb.length && (l.opts.$orig = l.opts.$trigger)), l.$thumb && l.$thumb.length || !l.opts.$orig || (l.$thumb = l.opts.$orig.find("img:first")), l.$thumb && !l.$thumb.length && (l.$thumb = null), l.thumb = l.opts.thumb || (l.$thumb ? l.$thumb[0].src : null), "function" === n.type(l.opts.caption) && (l.opts.caption = l.opts.caption.apply(e, [o, l])), "function" === n.type(o.opts.caption) && (l.opts.caption = o.opts.caption.apply(e, [o, l])), l.opts.caption instanceof n || (l.opts.caption = void 0 === l.opts.caption ? "" : l.opts.caption + ""), "ajax" === l.type && (c = r.split(/\s+/, 2), c.length > 1 && (l.src = c.shift(), l.opts.filter = c.shift())), l.opts.modal && (l.opts = n.extend(!0, l.opts, {
            trapFocus: !0,
            infobar: 0,
            toolbar: 0,
            smallBtn: 0,
            keyboard: 0,
            slideShow: 0,
            fullScreen: 0,
            thumbs: 0,
            touch: 0,
            clickContent: !1,
            clickSlide: !1,
            clickOutside: !1,
            dblclickContent: !1,
            dblclickSlide: !1,
            dblclickOutside: !1
          })), o.group.push(l);
        }), Object.keys(o.slides).length && (o.updateControls(), (e = o.Thumbs) && e.isActive && (e.create(), e.focus()));
      },
      addEvents: function addEvents() {
        var e = this;
        e.removeEvents(), e.$refs.container.on("click.fb-close", "[data-fancybox-close]", function (t) {
          t.stopPropagation(), t.preventDefault(), e.close(t);
        }).on("touchstart.fb-prev click.fb-prev", "[data-fancybox-prev]", function (t) {
          t.stopPropagation(), t.preventDefault(), e.previous();
        }).on("touchstart.fb-next click.fb-next", "[data-fancybox-next]", function (t) {
          t.stopPropagation(), t.preventDefault(), e.next();
        }).on("click.fb", "[data-fancybox-zoom]", function (t) {
          e[e.isScaledDown() ? "scaleToActual" : "scaleToFit"]();
        }), s.on("orientationchange.fb resize.fb", function (t) {
          t && t.originalEvent && "resize" === t.originalEvent.type ? (e.requestId && u(e.requestId), e.requestId = d(function () {
            e.update(t);
          })) : (e.current && "iframe" === e.current.type && e.$refs.stage.hide(), setTimeout(function () {
            e.$refs.stage.show(), e.update(t);
          }, n.fancybox.isMobile ? 600 : 250));
        }), r.on("keydown.fb", function (t) {
          var o = n.fancybox ? n.fancybox.getInstance() : null,
            i = o.current,
            a = t.keyCode || t.which;
          if (9 == a) return void (i.opts.trapFocus && e.focus(t));
          if (!(!i.opts.keyboard || t.ctrlKey || t.altKey || t.shiftKey || n(t.target).is("input,textarea,video,audio,select"))) return 8 === a || 27 === a ? (t.preventDefault(), void e.close(t)) : 37 === a || 38 === a ? (t.preventDefault(), void e.previous()) : 39 === a || 40 === a ? (t.preventDefault(), void e.next()) : void e.trigger("afterKeydown", t, a);
        }), e.group[e.currIndex].opts.idleTime && (e.idleSecondsCounter = 0, r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle", function (t) {
          e.idleSecondsCounter = 0, e.isIdle && e.showControls(), e.isIdle = !1;
        }), e.idleInterval = t.setInterval(function () {
          ++e.idleSecondsCounter >= e.group[e.currIndex].opts.idleTime && !e.isDragging && (e.isIdle = !0, e.idleSecondsCounter = 0, e.hideControls());
        }, 1e3));
      },
      removeEvents: function removeEvents() {
        var e = this;
        s.off("orientationchange.fb resize.fb"), r.off("keydown.fb .fb-idle"), this.$refs.container.off(".fb-close .fb-prev .fb-next"), e.idleInterval && (t.clearInterval(e.idleInterval), e.idleInterval = null);
      },
      previous: function previous(t) {
        return this.jumpTo(this.currPos - 1, t);
      },
      next: function next(t) {
        return this.jumpTo(this.currPos + 1, t);
      },
      jumpTo: function jumpTo(t, e) {
        var o,
          i,
          a,
          s,
          r,
          c,
          l,
          d,
          u,
          f = this,
          h = f.group.length;
        if (!(f.isDragging || f.isClosing || f.isAnimating && f.firstRun)) {
          if (t = parseInt(t, 10), !(a = f.current ? f.current.opts.loop : f.opts.loop) && (t < 0 || t >= h)) return !1;
          if (o = f.firstRun = !Object.keys(f.slides).length, r = f.current, f.prevIndex = f.currIndex, f.prevPos = f.currPos, s = f.createSlide(t), h > 1 && ((a || s.index < h - 1) && f.createSlide(t + 1), (a || s.index > 0) && f.createSlide(t - 1)), f.current = s, f.currIndex = s.index, f.currPos = s.pos, f.trigger("beforeShow", o), f.updateControls(), s.forcedDuration = void 0, n.isNumeric(e) ? s.forcedDuration = e : e = s.opts[o ? "animationDuration" : "transitionDuration"], e = parseInt(e, 10), i = f.isMoved(s), s.$slide.addClass("fancybox-slide--current"), o) return s.opts.animationEffect && e && f.$refs.container.css("transition-duration", e + "ms"), f.$refs.container.addClass("fancybox-is-open").trigger("focus"), f.loadSlide(s), void f.preload("image");
          c = n.fancybox.getTranslate(r.$slide), l = n.fancybox.getTranslate(f.$refs.stage), n.each(f.slides, function (t, e) {
            n.fancybox.stop(e.$slide, !0);
          }), r.pos !== s.pos && (r.isComplete = !1), r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"), i ? (u = c.left - (r.pos * c.width + r.pos * r.opts.gutter), n.each(f.slides, function (t, o) {
            o.$slide.removeClass("fancybox-animated").removeClass(function (t, e) {
              return (e.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
            });
            var i = o.pos * c.width + o.pos * o.opts.gutter;
            n.fancybox.setTranslate(o.$slide, {
              top: 0,
              left: i - l.left + u
            }), o.pos !== s.pos && o.$slide.addClass("fancybox-slide--" + (o.pos > s.pos ? "next" : "previous")), p(o.$slide), n.fancybox.animate(o.$slide, {
              top: 0,
              left: (o.pos - s.pos) * c.width + (o.pos - s.pos) * o.opts.gutter
            }, e, function () {
              o.$slide.css({
                transform: "",
                opacity: ""
              }).removeClass("fancybox-slide--next fancybox-slide--previous"), o.pos === f.currPos && f.complete();
            });
          })) : e && s.opts.transitionEffect && (d = "fancybox-animated fancybox-fx-" + s.opts.transitionEffect, r.$slide.addClass("fancybox-slide--" + (r.pos > s.pos ? "next" : "previous")), n.fancybox.animate(r.$slide, d, e, function () {
            r.$slide.removeClass(d).removeClass("fancybox-slide--next fancybox-slide--previous");
          }, !1)), s.isLoaded ? f.revealContent(s) : f.loadSlide(s), f.preload("image");
        }
      },
      createSlide: function createSlide(t) {
        var e,
          o,
          i = this;
        return o = t % i.group.length, o = o < 0 ? i.group.length + o : o, !i.slides[t] && i.group[o] && (e = n('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage), i.slides[t] = n.extend(!0, {}, i.group[o], {
          pos: t,
          $slide: e,
          isLoaded: !1
        }), i.updateSlide(i.slides[t])), i.slides[t];
      },
      scaleToActual: function scaleToActual(t, e, o) {
        var i,
          a,
          s,
          r,
          c,
          l = this,
          d = l.current,
          u = d.$content,
          f = n.fancybox.getTranslate(d.$slide).width,
          p = n.fancybox.getTranslate(d.$slide).height,
          h = d.width,
          g = d.height;
        l.isAnimating || l.isMoved() || !u || "image" != d.type || !d.isLoaded || d.hasError || (l.isAnimating = !0, n.fancybox.stop(u), t = void 0 === t ? .5 * f : t, e = void 0 === e ? .5 * p : e, i = n.fancybox.getTranslate(u), i.top -= n.fancybox.getTranslate(d.$slide).top, i.left -= n.fancybox.getTranslate(d.$slide).left, r = h / i.width, c = g / i.height, a = .5 * f - .5 * h, s = .5 * p - .5 * g, h > f && (a = i.left * r - (t * r - t), a > 0 && (a = 0), a < f - h && (a = f - h)), g > p && (s = i.top * c - (e * c - e), s > 0 && (s = 0), s < p - g && (s = p - g)), l.updateCursor(h, g), n.fancybox.animate(u, {
          top: s,
          left: a,
          scaleX: r,
          scaleY: c
        }, o || 366, function () {
          l.isAnimating = !1;
        }), l.SlideShow && l.SlideShow.isActive && l.SlideShow.stop());
      },
      scaleToFit: function scaleToFit(t) {
        var e,
          o = this,
          i = o.current,
          a = i.$content;
        o.isAnimating || o.isMoved() || !a || "image" != i.type || !i.isLoaded || i.hasError || (o.isAnimating = !0, n.fancybox.stop(a), e = o.getFitPos(i), o.updateCursor(e.width, e.height), n.fancybox.animate(a, {
          top: e.top,
          left: e.left,
          scaleX: e.width / a.width(),
          scaleY: e.height / a.height()
        }, t || 366, function () {
          o.isAnimating = !1;
        }));
      },
      getFitPos: function getFitPos(t) {
        var e,
          o,
          i,
          a,
          s = this,
          r = t.$content,
          c = t.$slide,
          l = t.width || t.opts.width,
          d = t.height || t.opts.height,
          u = {};
        return !!(t.isLoaded && r && r.length) && (e = n.fancybox.getTranslate(s.$refs.stage).width, o = n.fancybox.getTranslate(s.$refs.stage).height, e -= parseFloat(c.css("paddingLeft")) + parseFloat(c.css("paddingRight")) + parseFloat(r.css("marginLeft")) + parseFloat(r.css("marginRight")), o -= parseFloat(c.css("paddingTop")) + parseFloat(c.css("paddingBottom")) + parseFloat(r.css("marginTop")) + parseFloat(r.css("marginBottom")), l && d || (l = e, d = o), i = Math.min(1, e / l, o / d), l *= i, d *= i, l > e - .5 && (l = e), d > o - .5 && (d = o), "image" === t.type ? (u.top = Math.floor(.5 * (o - d)) + parseFloat(c.css("paddingTop")), u.left = Math.floor(.5 * (e - l)) + parseFloat(c.css("paddingLeft"))) : "video" === t.contentType && (a = t.opts.width && t.opts.height ? l / d : t.opts.ratio || 16 / 9, d > l / a ? d = l / a : l > d * a && (l = d * a)), u.width = l, u.height = d, u);
      },
      update: function update(t) {
        var e = this;
        n.each(e.slides, function (n, o) {
          e.updateSlide(o, t);
        });
      },
      updateSlide: function updateSlide(t, e) {
        var o = this,
          i = t && t.$content,
          a = t.width || t.opts.width,
          s = t.height || t.opts.height,
          r = t.$slide;
        o.adjustCaption(t), i && (a || s || "video" === t.contentType) && !t.hasError && (n.fancybox.stop(i), n.fancybox.setTranslate(i, o.getFitPos(t)), t.pos === o.currPos && (o.isAnimating = !1, o.updateCursor())), o.adjustLayout(t), r.length && (r.trigger("refresh"), t.pos === o.currPos && o.$refs.toolbar.add(o.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar", r.get(0).scrollHeight > r.get(0).clientHeight)), o.trigger("onUpdate", t, e);
      },
      centerSlide: function centerSlide(t) {
        var e = this,
          o = e.current,
          i = o.$slide;
        !e.isClosing && o && (i.siblings().css({
          transform: "",
          opacity: ""
        }), i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"), n.fancybox.animate(i, {
          top: 0,
          left: 0,
          opacity: 1
        }, void 0 === t ? 0 : t, function () {
          i.css({
            transform: "",
            opacity: ""
          }), o.isComplete || e.complete();
        }, !1));
      },
      isMoved: function isMoved(t) {
        var e,
          o,
          i = t || this.current;
        return !!i && (o = n.fancybox.getTranslate(this.$refs.stage), e = n.fancybox.getTranslate(i.$slide), !i.$slide.hasClass("fancybox-animated") && (Math.abs(e.top - o.top) > .5 || Math.abs(e.left - o.left) > .5));
      },
      updateCursor: function updateCursor(t, e) {
        var o,
          i,
          a = this,
          s = a.current,
          r = a.$refs.container;
        s && !a.isClosing && a.Guestures && (r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"), o = a.canPan(t, e), i = !!o || a.isZoomable(), r.toggleClass("fancybox-is-zoomable", i), n("[data-fancybox-zoom]").prop("disabled", !i), o ? r.addClass("fancybox-can-pan") : i && ("zoom" === s.opts.clickContent || n.isFunction(s.opts.clickContent) && "zoom" == s.opts.clickContent(s)) ? r.addClass("fancybox-can-zoomIn") : s.opts.touch && (s.opts.touch.vertical || a.group.length > 1) && "video" !== s.contentType && r.addClass("fancybox-can-swipe"));
      },
      isZoomable: function isZoomable() {
        var t,
          e = this,
          n = e.current;
        if (n && !e.isClosing && "image" === n.type && !n.hasError) {
          if (!n.isLoaded) return !0;
          if ((t = e.getFitPos(n)) && (n.width > t.width || n.height > t.height)) return !0;
        }
        return !1;
      },
      isScaledDown: function isScaledDown(t, e) {
        var o = this,
          i = !1,
          a = o.current,
          s = a.$content;
        return void 0 !== t && void 0 !== e ? i = t < a.width && e < a.height : s && (i = n.fancybox.getTranslate(s), i = i.width < a.width && i.height < a.height), i;
      },
      canPan: function canPan(t, e) {
        var o = this,
          i = o.current,
          a = null,
          s = !1;
        return "image" === i.type && (i.isComplete || t && e) && !i.hasError && (s = o.getFitPos(i), void 0 !== t && void 0 !== e ? a = {
          width: t,
          height: e
        } : i.isComplete && (a = n.fancybox.getTranslate(i.$content)), a && s && (s = Math.abs(a.width - s.width) > 1.5 || Math.abs(a.height - s.height) > 1.5)), s;
      },
      loadSlide: function loadSlide(t) {
        var e,
          o,
          i,
          a = this;
        if (!t.isLoading && !t.isLoaded) {
          if (t.isLoading = !0, !1 === a.trigger("beforeLoad", t)) return t.isLoading = !1, !1;
          switch (e = t.type, o = t.$slide, o.off("refresh").trigger("onReset").addClass(t.opts.slideClass), e) {
            case "image":
              a.setImage(t);
              break;
            case "iframe":
              a.setIframe(t);
              break;
            case "html":
              a.setContent(t, t.src || t.content);
              break;
            case "video":
              a.setContent(t, t.opts.video.tpl.replace(/\{\{src\}\}/gi, t.src).replace("{{format}}", t.opts.videoFormat || t.opts.video.format || "").replace("{{poster}}", t.thumb || ""));
              break;
            case "inline":
              n(t.src).length ? a.setContent(t, n(t.src)) : a.setError(t);
              break;
            case "ajax":
              a.showLoading(t), i = n.ajax(n.extend({}, t.opts.ajax.settings, {
                url: t.src,
                success: function success(e, n) {
                  "success" === n && a.setContent(t, e);
                },
                error: function error(e, n) {
                  e && "abort" !== n && a.setError(t);
                }
              })), o.one("onReset", function () {
                i.abort();
              });
              break;
            default:
              a.setError(t);
          }
          return !0;
        }
      },
      setImage: function setImage(t) {
        var o,
          i = this;
        setTimeout(function () {
          var e = t.$image;
          i.isClosing || !t.isLoading || e && e.length && e[0].complete || t.hasError || i.showLoading(t);
        }, 50), i.checkSrcset(t), t.$content = n('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")), !1 !== t.opts.preload && t.opts.width && t.opts.height && t.thumb && (t.width = t.opts.width, t.height = t.opts.height, o = e.createElement("img"), o.onerror = function () {
          n(this).remove(), t.$ghost = null;
        }, o.onload = function () {
          i.afterLoad(t);
        }, t.$ghost = n(o).addClass("fancybox-image").appendTo(t.$content).attr("src", t.thumb)), i.setBigImage(t);
      },
      checkSrcset: function checkSrcset(e) {
        var n,
          o,
          i,
          a,
          s = e.opts.srcset || e.opts.image.srcset;
        if (s) {
          i = t.devicePixelRatio || 1, a = t.innerWidth * i, o = s.split(",").map(function (t) {
            var e = {};
            return t.trim().split(/\s+/).forEach(function (t, n) {
              var o = parseInt(t.substring(0, t.length - 1), 10);
              if (0 === n) return e.url = t;
              o && (e.value = o, e.postfix = t[t.length - 1]);
            }), e;
          }), o.sort(function (t, e) {
            return t.value - e.value;
          });
          for (var r = 0; r < o.length; r++) {
            var c = o[r];
            if ("w" === c.postfix && c.value >= a || "x" === c.postfix && c.value >= i) {
              n = c;
              break;
            }
          }
          !n && o.length && (n = o[o.length - 1]), n && (e.src = n.url, e.width && e.height && "w" == n.postfix && (e.height = e.width / e.height * n.value, e.width = n.value), e.opts.srcset = s);
        }
      },
      setBigImage: function setBigImage(t) {
        var o = this,
          i = e.createElement("img"),
          a = n(i);
        t.$image = a.one("error", function () {
          o.setError(t);
        }).one("load", function () {
          var e;
          t.$ghost || (o.resolveImageSlideSize(t, this.naturalWidth, this.naturalHeight), o.afterLoad(t)), o.isClosing || (t.opts.srcset && (e = t.opts.sizes, e && "auto" !== e || (e = (t.width / t.height > 1 && s.width() / s.height() > 1 ? "100" : Math.round(t.width / t.height * 100)) + "vw"), a.attr("sizes", e).attr("srcset", t.opts.srcset)), t.$ghost && setTimeout(function () {
            t.$ghost && !o.isClosing && t.$ghost.hide();
          }, Math.min(300, Math.max(1e3, t.height / 1600))), o.hideLoading(t));
        }).addClass("fancybox-image").attr("src", t.src).appendTo(t.$content), (i.complete || "complete" == i.readyState) && a.naturalWidth && a.naturalHeight ? a.trigger("load") : i.error && a.trigger("error");
      },
      resolveImageSlideSize: function resolveImageSlideSize(t, e, n) {
        var o = parseInt(t.opts.width, 10),
          i = parseInt(t.opts.height, 10);
        t.width = e, t.height = n, o > 0 && (t.width = o, t.height = Math.floor(o * n / e)), i > 0 && (t.width = Math.floor(i * e / n), t.height = i);
      },
      setIframe: function setIframe(t) {
        var e,
          o = this,
          i = t.opts.iframe,
          a = t.$slide;
        t.$content = n('<div class="fancybox-content' + (i.preload ? " fancybox-is-hidden" : "") + '"></div>').css(i.css).appendTo(a), a.addClass("fancybox-slide--" + t.contentType), t.$iframe = e = n(i.tpl.replace(/\{rnd\}/g, new Date().getTime())).attr(i.attr).appendTo(t.$content), i.preload ? (o.showLoading(t), e.on("load.fb error.fb", function (e) {
          this.isReady = 1, t.$slide.trigger("refresh"), o.afterLoad(t);
        }), a.on("refresh.fb", function () {
          var n,
            o,
            s = t.$content,
            r = i.css.width,
            c = i.css.height;
          if (1 === e[0].isReady) {
            try {
              n = e.contents(), o = n.find("body");
            } catch (t) {}
            o && o.length && o.children().length && (a.css("overflow", "visible"), s.css({
              width: "100%",
              "max-width": "100%",
              height: "9999px"
            }), void 0 === r && (r = Math.ceil(Math.max(o[0].clientWidth, o.outerWidth(!0)))), s.css("width", r || "").css("max-width", ""), void 0 === c && (c = Math.ceil(Math.max(o[0].clientHeight, o.outerHeight(!0)))), s.css("height", c || ""), a.css("overflow", "auto")), s.removeClass("fancybox-is-hidden");
          }
        })) : o.afterLoad(t), e.attr("src", t.src), a.one("onReset", function () {
          try {
            n(this).find("iframe").hide().unbind().attr("src", "//about:blank");
          } catch (t) {}
          n(this).off("refresh.fb").empty(), t.isLoaded = !1, t.isRevealed = !1;
        });
      },
      setContent: function setContent(t, e) {
        var o = this;
        o.isClosing || (o.hideLoading(t), t.$content && n.fancybox.stop(t.$content), t.$slide.empty(), l(e) && e.parent().length ? ((e.hasClass("fancybox-content") || e.parent().hasClass("fancybox-content")) && e.parents(".fancybox-slide").trigger("onReset"), t.$placeholder = n("<div>").hide().insertAfter(e), e.css("display", "inline-block")) : t.hasError || ("string" === n.type(e) && (e = n("<div>").append(n.trim(e)).contents()), t.opts.filter && (e = n("<div>").html(e).find(t.opts.filter))), t.$slide.one("onReset", function () {
          n(this).find("video,audio").trigger("pause"), t.$placeholder && (t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(), t.$placeholder = null), t.$smallBtn && (t.$smallBtn.remove(), t.$smallBtn = null), t.hasError || (n(this).empty(), t.isLoaded = !1, t.isRevealed = !1);
        }), n(e).appendTo(t.$slide), n(e).is("video,audio") && (n(e).addClass("fancybox-video"), n(e).wrap("<div></div>"), t.contentType = "video", t.opts.width = t.opts.width || n(e).attr("width"), t.opts.height = t.opts.height || n(e).attr("height")), t.$content = t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(), t.$content.siblings().hide(), t.$content.length || (t.$content = t.$slide.wrapInner("<div></div>").children().first()), t.$content.addClass("fancybox-content"), t.$slide.addClass("fancybox-slide--" + t.contentType), o.afterLoad(t));
      },
      setError: function setError(t) {
        t.hasError = !0, t.$slide.trigger("onReset").removeClass("fancybox-slide--" + t.contentType).addClass("fancybox-slide--error"), t.contentType = "html", this.setContent(t, this.translate(t, t.opts.errorTpl)), t.pos === this.currPos && (this.isAnimating = !1);
      },
      showLoading: function showLoading(t) {
        var e = this;
        (t = t || e.current) && !t.$spinner && (t.$spinner = n(e.translate(e, e.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"));
      },
      hideLoading: function hideLoading(t) {
        var e = this;
        (t = t || e.current) && t.$spinner && (t.$spinner.stop().remove(), delete t.$spinner);
      },
      afterLoad: function afterLoad(t) {
        var e = this;
        e.isClosing || (t.isLoading = !1, t.isLoaded = !0, e.trigger("afterLoad", t), e.hideLoading(t), !t.opts.smallBtn || t.$smallBtn && t.$smallBtn.length || (t.$smallBtn = n(e.translate(t, t.opts.btnTpl.smallBtn)).appendTo(t.$content)), t.opts.protect && t.$content && !t.hasError && (t.$content.on("contextmenu.fb", function (t) {
          return 2 == t.button && t.preventDefault(), !0;
        }), "image" === t.type && n('<div class="fancybox-spaceball"></div>').appendTo(t.$content)), e.adjustCaption(t), e.adjustLayout(t), t.pos === e.currPos && e.updateCursor(), e.revealContent(t));
      },
      adjustCaption: function adjustCaption(t) {
        var e,
          n = this,
          o = t || n.current,
          i = o.opts.caption,
          a = o.opts.preventCaptionOverlap,
          s = n.$refs.caption,
          r = !1;
        s.toggleClass("fancybox-caption--separate", a), a && i && i.length && (o.pos !== n.currPos ? (e = s.clone().appendTo(s.parent()), e.children().eq(0).empty().html(i), r = e.outerHeight(!0), e.empty().remove()) : n.$caption && (r = n.$caption.outerHeight(!0)), o.$slide.css("padding-bottom", r || ""));
      },
      adjustLayout: function adjustLayout(t) {
        var e,
          n,
          o,
          i,
          a = this,
          s = t || a.current;
        s.isLoaded && !0 !== s.opts.disableLayoutFix && (s.$content.css("margin-bottom", ""), s.$content.outerHeight() > s.$slide.height() + .5 && (o = s.$slide[0].style["padding-bottom"], i = s.$slide.css("padding-bottom"), parseFloat(i) > 0 && (e = s.$slide[0].scrollHeight, s.$slide.css("padding-bottom", 0), Math.abs(e - s.$slide[0].scrollHeight) < 1 && (n = i), s.$slide.css("padding-bottom", o))), s.$content.css("margin-bottom", n));
      },
      revealContent: function revealContent(t) {
        var e,
          o,
          i,
          a,
          s = this,
          r = t.$slide,
          c = !1,
          l = !1,
          d = s.isMoved(t),
          u = t.isRevealed;
        return t.isRevealed = !0, e = t.opts[s.firstRun ? "animationEffect" : "transitionEffect"], i = t.opts[s.firstRun ? "animationDuration" : "transitionDuration"], i = parseInt(void 0 === t.forcedDuration ? i : t.forcedDuration, 10), !d && t.pos === s.currPos && i || (e = !1), "zoom" === e && (t.pos === s.currPos && i && "image" === t.type && !t.hasError && (l = s.getThumbPos(t)) ? c = s.getFitPos(t) : e = "fade"), "zoom" === e ? (s.isAnimating = !0, c.scaleX = c.width / l.width, c.scaleY = c.height / l.height, a = t.opts.zoomOpacity, "auto" == a && (a = Math.abs(t.width / t.height - l.width / l.height) > .1), a && (l.opacity = .1, c.opacity = 1), n.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"), l), p(t.$content), void n.fancybox.animate(t.$content, c, i, function () {
          s.isAnimating = !1, s.complete();
        })) : (s.updateSlide(t), e ? (n.fancybox.stop(r), o = "fancybox-slide--" + (t.pos >= s.prevPos ? "next" : "previous") + " fancybox-animated fancybox-fx-" + e, r.addClass(o).removeClass("fancybox-slide--current"), t.$content.removeClass("fancybox-is-hidden"), p(r), "image" !== t.type && t.$content.hide().show(0), void n.fancybox.animate(r, "fancybox-slide--current", i, function () {
          r.removeClass(o).css({
            transform: "",
            opacity: ""
          }), t.pos === s.currPos && s.complete();
        }, !0)) : (t.$content.removeClass("fancybox-is-hidden"), u || !d || "image" !== t.type || t.hasError || t.$content.hide().fadeIn("fast"), void (t.pos === s.currPos && s.complete())));
      },
      getThumbPos: function getThumbPos(t) {
        var e,
          o,
          i,
          a,
          s,
          r = !1,
          c = t.$thumb;
        return !(!c || !g(c[0])) && (e = n.fancybox.getTranslate(c), o = parseFloat(c.css("border-top-width") || 0), i = parseFloat(c.css("border-right-width") || 0), a = parseFloat(c.css("border-bottom-width") || 0), s = parseFloat(c.css("border-left-width") || 0), r = {
          top: e.top + o,
          left: e.left + s,
          width: e.width - i - s,
          height: e.height - o - a,
          scaleX: 1,
          scaleY: 1
        }, e.width > 0 && e.height > 0 && r);
      },
      complete: function complete() {
        var t,
          e = this,
          o = e.current,
          i = {};
        !e.isMoved() && o.isLoaded && (o.isComplete || (o.isComplete = !0, o.$slide.siblings().trigger("onReset"), e.preload("inline"), p(o.$slide), o.$slide.addClass("fancybox-slide--complete"), n.each(e.slides, function (t, o) {
          o.pos >= e.currPos - 1 && o.pos <= e.currPos + 1 ? i[o.pos] = o : o && (n.fancybox.stop(o.$slide), o.$slide.off().remove());
        }), e.slides = i), e.isAnimating = !1, e.updateCursor(), e.trigger("afterShow"), o.opts.video.autoStart && o.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended", function () {
          Document.exitFullscreen ? Document.exitFullscreen() : this.webkitExitFullscreen && this.webkitExitFullscreen(), e.next();
        }), o.opts.autoFocus && "html" === o.contentType && (t = o.$content.find("input[autofocus]:enabled:visible:first"), t.length ? t.trigger("focus") : e.focus(null, !0)), o.$slide.scrollTop(0).scrollLeft(0));
      },
      preload: function preload(t) {
        var e,
          n,
          o = this;
        o.group.length < 2 || (n = o.slides[o.currPos + 1], e = o.slides[o.currPos - 1], e && e.type === t && o.loadSlide(e), n && n.type === t && o.loadSlide(n));
      },
      focus: function focus(t, o) {
        var i,
          a,
          s = this,
          r = ["a[href]", "area[href]", 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', "select:not([disabled]):not([aria-hidden])", "textarea:not([disabled]):not([aria-hidden])", "button:not([disabled]):not([aria-hidden])", "iframe", "object", "embed", "video", "audio", "[contenteditable]", '[tabindex]:not([tabindex^="-"])'].join(",");
        s.isClosing || (i = !t && s.current && s.current.isComplete ? s.current.$slide.find("*:visible" + (o ? ":not(.fancybox-close-small)" : "")) : s.$refs.container.find("*:visible"), i = i.filter(r).filter(function () {
          return "hidden" !== n(this).css("visibility") && !n(this).hasClass("disabled");
        }), i.length ? (a = i.index(e.activeElement), t && t.shiftKey ? (a < 0 || 0 == a) && (t.preventDefault(), i.eq(i.length - 1).trigger("focus")) : (a < 0 || a == i.length - 1) && (t && t.preventDefault(), i.eq(0).trigger("focus"))) : s.$refs.container.trigger("focus"));
      },
      activate: function activate() {
        var t = this;
        n(".fancybox-container").each(function () {
          var e = n(this).data("FancyBox");
          e && e.id !== t.id && !e.isClosing && (e.trigger("onDeactivate"), e.removeEvents(), e.isVisible = !1);
        }), t.isVisible = !0, (t.current || t.isIdle) && (t.update(), t.updateControls()), t.trigger("onActivate"), t.addEvents();
      },
      close: function close(t, e) {
        var o,
          i,
          a,
          s,
          r,
          c,
          l,
          u = this,
          f = u.current,
          h = function h() {
            u.cleanUp(t);
          };
        return !u.isClosing && (u.isClosing = !0, !1 === u.trigger("beforeClose", t) ? (u.isClosing = !1, d(function () {
          u.update();
        }), !1) : (u.removeEvents(), a = f.$content, o = f.opts.animationEffect, i = n.isNumeric(e) ? e : o ? f.opts.animationDuration : 0, f.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"), !0 !== t ? n.fancybox.stop(f.$slide) : o = !1, f.$slide.siblings().trigger("onReset").remove(), i && u.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration", i + "ms"), u.hideLoading(f), u.hideControls(!0), u.updateCursor(), "zoom" !== o || a && i && "image" === f.type && !u.isMoved() && !f.hasError && (l = u.getThumbPos(f)) || (o = "fade"), "zoom" === o ? (n.fancybox.stop(a), s = n.fancybox.getTranslate(a), c = {
          top: s.top,
          left: s.left,
          scaleX: s.width / l.width,
          scaleY: s.height / l.height,
          width: l.width,
          height: l.height
        }, r = f.opts.zoomOpacity, "auto" == r && (r = Math.abs(f.width / f.height - l.width / l.height) > .1), r && (l.opacity = 0), n.fancybox.setTranslate(a, c), p(a), n.fancybox.animate(a, l, i, h), !0) : (o && i ? n.fancybox.animate(f.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"), "fancybox-animated fancybox-fx-" + o, i, h) : !0 === t ? setTimeout(h, i) : h(), !0)));
      },
      cleanUp: function cleanUp(e) {
        var o,
          i,
          a,
          s = this,
          r = s.current.opts.$orig;
        s.current.$slide.trigger("onReset"), s.$refs.container.empty().remove(), s.trigger("afterClose", e), s.current.opts.backFocus && (r && r.length && r.is(":visible") || (r = s.$trigger), r && r.length && (i = t.scrollX, a = t.scrollY, r.trigger("focus"), n("html, body").scrollTop(a).scrollLeft(i))), s.current = null, o = n.fancybox.getInstance(), o ? o.activate() : (n("body").removeClass("fancybox-active compensate-for-scrollbar"), n("#fancybox-style-noscroll").remove());
      },
      trigger: function trigger(t, e) {
        var o,
          i = Array.prototype.slice.call(arguments, 1),
          a = this,
          s = e && e.opts ? e : a.current;
        if (s ? i.unshift(s) : s = a, i.unshift(a), n.isFunction(s.opts[t]) && (o = s.opts[t].apply(s, i)), !1 === o) return o;
        "afterClose" !== t && a.$refs ? a.$refs.container.trigger(t + ".fb", i) : r.trigger(t + ".fb", i);
      },
      updateControls: function updateControls() {
        var t = this,
          o = t.current,
          i = o.index,
          a = t.$refs.container,
          s = t.$refs.caption,
          r = o.opts.caption;
        o.$slide.trigger("refresh"), r && r.length ? (t.$caption = s, s.children().eq(0).html(r)) : t.$caption = null, t.hasHiddenControls || t.isIdle || t.showControls(), a.find("[data-fancybox-count]").html(t.group.length), a.find("[data-fancybox-index]").html(i + 1), a.find("[data-fancybox-prev]").prop("disabled", !o.opts.loop && i <= 0), a.find("[data-fancybox-next]").prop("disabled", !o.opts.loop && i >= t.group.length - 1), "image" === o.type ? a.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href", o.opts.image.src || o.src).show() : o.opts.toolbar && a.find("[data-fancybox-download],[data-fancybox-zoom]").hide(), n(e.activeElement).is(":hidden,[disabled]") && t.$refs.container.trigger("focus");
      },
      hideControls: function hideControls(t) {
        var e = this,
          n = ["infobar", "toolbar", "nav"];
        !t && e.current.opts.preventCaptionOverlap || n.push("caption"), this.$refs.container.removeClass(n.map(function (t) {
          return "fancybox-show-" + t;
        }).join(" ")), this.hasHiddenControls = !0;
      },
      showControls: function showControls() {
        var t = this,
          e = t.current ? t.current.opts : t.opts,
          n = t.$refs.container;
        t.hasHiddenControls = !1, t.idleSecondsCounter = 0, n.toggleClass("fancybox-show-toolbar", !(!e.toolbar || !e.buttons)).toggleClass("fancybox-show-infobar", !!(e.infobar && t.group.length > 1)).toggleClass("fancybox-show-caption", !!t.$caption).toggleClass("fancybox-show-nav", !!(e.arrows && t.group.length > 1)).toggleClass("fancybox-is-modal", !!e.modal);
      },
      toggleControls: function toggleControls() {
        this.hasHiddenControls ? this.showControls() : this.hideControls();
      }
    }), n.fancybox = {
      version: "3.5.7",
      defaults: a,
      getInstance: function getInstance(t) {
        var e = n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),
          o = Array.prototype.slice.call(arguments, 1);
        return e instanceof b && ("string" === n.type(t) ? e[t].apply(e, o) : "function" === n.type(t) && t.apply(e, o), e);
      },
      open: function open(t, e, n) {
        return new b(t, e, n);
      },
      close: function close(t) {
        var e = this.getInstance();
        e && (e.close(), !0 === t && this.close(t));
      },
      destroy: function destroy() {
        this.close(!0), r.add("body").off("click.fb-start", "**");
      },
      isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
      use3d: function () {
        var n = e.createElement("div");
        return t.getComputedStyle && t.getComputedStyle(n) && t.getComputedStyle(n).getPropertyValue("transform") && !(e.documentMode && e.documentMode < 11);
      }(),
      getTranslate: function getTranslate(t) {
        var e;
        return !(!t || !t.length) && (e = t[0].getBoundingClientRect(), {
          top: e.top || 0,
          left: e.left || 0,
          width: e.width,
          height: e.height,
          opacity: parseFloat(t.css("opacity"))
        });
      },
      setTranslate: function setTranslate(t, e) {
        var n = "",
          o = {};
        if (t && e) return void 0 === e.left && void 0 === e.top || (n = (void 0 === e.left ? t.position().left : e.left) + "px, " + (void 0 === e.top ? t.position().top : e.top) + "px", n = this.use3d ? "translate3d(" + n + ", 0px)" : "translate(" + n + ")"), void 0 !== e.scaleX && void 0 !== e.scaleY ? n += " scale(" + e.scaleX + ", " + e.scaleY + ")" : void 0 !== e.scaleX && (n += " scaleX(" + e.scaleX + ")"), n.length && (o.transform = n), void 0 !== e.opacity && (o.opacity = e.opacity), void 0 !== e.width && (o.width = e.width), void 0 !== e.height && (o.height = e.height), t.css(o);
      },
      animate: function animate(t, e, o, i, a) {
        var s,
          r = this;
        n.isFunction(o) && (i = o, o = null), r.stop(t), s = r.getTranslate(t), t.on(f, function (c) {
          (!c || !c.originalEvent || t.is(c.originalEvent.target) && "z-index" != c.originalEvent.propertyName) && (r.stop(t), n.isNumeric(o) && t.css("transition-duration", ""), n.isPlainObject(e) ? void 0 !== e.scaleX && void 0 !== e.scaleY && r.setTranslate(t, {
            top: e.top,
            left: e.left,
            width: s.width * e.scaleX,
            height: s.height * e.scaleY,
            scaleX: 1,
            scaleY: 1
          }) : !0 !== a && t.removeClass(e), n.isFunction(i) && i(c));
        }), n.isNumeric(o) && t.css("transition-duration", o + "ms"), n.isPlainObject(e) ? (void 0 !== e.scaleX && void 0 !== e.scaleY && (delete e.width, delete e.height, t.parent().hasClass("fancybox-slide--image") && t.parent().addClass("fancybox-is-scaling")), n.fancybox.setTranslate(t, e)) : t.addClass(e), t.data("timer", setTimeout(function () {
          t.trigger(f);
        }, o + 33));
      },
      stop: function stop(t, e) {
        t && t.length && (clearTimeout(t.data("timer")), e && t.trigger(f), t.off(f).css("transition-duration", ""), t.parent().removeClass("fancybox-is-scaling"));
      }
    }, n.fn.fancybox = function (t) {
      var e;
      return t = t || {}, e = t.selector || !1, e ? n("body").off("click.fb-start", e).on("click.fb-start", e, {
        options: t
      }, i) : this.off("click.fb-start").on("click.fb-start", {
        items: this,
        options: t
      }, i), this;
    }, r.on("click.fb-start", "[data-fancybox]", i), r.on("click.fb-start", "[data-fancybox-trigger]", function (t) {
      n('[data-fancybox="' + n(this).attr("data-fancybox-trigger") + '"]').eq(n(this).attr("data-fancybox-index") || 0).trigger("click.fb-start", {
        $trigger: n(this)
      });
    }), function () {
      var t = null;
      r.on("mousedown mouseup focus blur", ".fancybox-button", function (e) {
        switch (e.type) {
          case "mousedown":
            t = n(this);
            break;
          case "mouseup":
            t = null;
            break;
          case "focusin":
            n(".fancybox-button").removeClass("fancybox-focus"), n(this).is(t) || n(this).is("[disabled]") || n(this).addClass("fancybox-focus");
            break;
          case "focusout":
            n(".fancybox-button").removeClass("fancybox-focus");
        }
      });
    }();
  }
}(window, document, jQuery), function (t) {
  "use strict";

  var e = {
      youtube: {
        matcher: /(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,
        params: {
          autoplay: 1,
          autohide: 1,
          fs: 1,
          rel: 0,
          hd: 1,
          wmode: "transparent",
          enablejsapi: 1,
          html5: 1
        },
        paramPlace: 8,
        type: "iframe",
        url: "https://www.youtube-nocookie.com/embed/$4",
        thumb: "https://img.youtube.com/vi/$4/hqdefault.jpg"
      },
      vimeo: {
        matcher: /^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,
        params: {
          autoplay: 1,
          hd: 1,
          show_title: 1,
          show_byline: 1,
          show_portrait: 0,
          fullscreen: 1
        },
        paramPlace: 3,
        type: "iframe",
        url: "//player.vimeo.com/video/$2"
      },
      instagram: {
        matcher: /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,
        type: "image",
        url: "//$1/p/$2/media/?size=l"
      },
      gmap_place: {
        matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,
        type: "iframe",
        url: function url(t) {
          return "//maps.google." + t[2] + "/?ll=" + (t[9] ? t[9] + "&z=" + Math.floor(t[10]) + (t[12] ? t[12].replace(/^\//, "&") : "") : t[12] + "").replace(/\?/, "&") + "&output=" + (t[12] && t[12].indexOf("layer=c") > 0 ? "svembed" : "embed");
        }
      },
      gmap_search: {
        matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,
        type: "iframe",
        url: function url(t) {
          return "//maps.google." + t[2] + "/maps?q=" + t[5].replace("query=", "q=").replace("api=1", "") + "&output=embed";
        }
      }
    },
    n = function n(e, _n, o) {
      if (e) return o = o || "", "object" === t.type(o) && (o = t.param(o, !0)), t.each(_n, function (t, n) {
        e = e.replace("$" + t, n || "");
      }), o.length && (e += (e.indexOf("?") > 0 ? "&" : "?") + o), e;
    };
  t(document).on("objectNeedsType.fb", function (o, i, a) {
    var s,
      r,
      c,
      l,
      d,
      u,
      f,
      p = a.src || "",
      h = !1;
    s = t.extend(!0, {}, e, a.opts.media), t.each(s, function (e, o) {
      if (c = p.match(o.matcher)) {
        if (h = o.type, f = e, u = {}, o.paramPlace && c[o.paramPlace]) {
          d = c[o.paramPlace], "?" == d[0] && (d = d.substring(1)), d = d.split("&");
          for (var i = 0; i < d.length; ++i) {
            var s = d[i].split("=", 2);
            2 == s.length && (u[s[0]] = decodeURIComponent(s[1].replace(/\+/g, " ")));
          }
        }
        return l = t.extend(!0, {}, o.params, a.opts[e], u), p = "function" === t.type(o.url) ? o.url.call(this, c, l, a) : n(o.url, c, l), r = "function" === t.type(o.thumb) ? o.thumb.call(this, c, l, a) : n(o.thumb, c), "youtube" === e ? p = p.replace(/&t=((\d+)m)?(\d+)s/, function (t, e, n, o) {
          return "&start=" + ((n ? 60 * parseInt(n, 10) : 0) + parseInt(o, 10));
        }) : "vimeo" === e && (p = p.replace("&%23", "#")), !1;
      }
    }), h ? (a.opts.thumb || a.opts.$thumb && a.opts.$thumb.length || (a.opts.thumb = r), "iframe" === h && (a.opts = t.extend(!0, a.opts, {
      iframe: {
        preload: !1,
        attr: {
          scrolling: "no"
        }
      }
    })), t.extend(a, {
      type: h,
      src: p,
      origSrc: a.src,
      contentSource: f,
      contentType: "image" === h ? "image" : "gmap_place" == f || "gmap_search" == f ? "map" : "video"
    })) : p && (a.type = a.opts.defaultType);
  });
  var o = {
    youtube: {
      src: "https://www.youtube.com/iframe_api",
      "class": "YT",
      loading: !1,
      loaded: !1
    },
    vimeo: {
      src: "https://player.vimeo.com/api/player.js",
      "class": "Vimeo",
      loading: !1,
      loaded: !1
    },
    load: function load(t) {
      var e,
        n = this;
      if (this[t].loaded) return void setTimeout(function () {
        n.done(t);
      });
      this[t].loading || (this[t].loading = !0, e = document.createElement("script"), e.type = "text/javascript", e.src = this[t].src, "youtube" === t ? window.onYouTubeIframeAPIReady = function () {
        n[t].loaded = !0, n.done(t);
      } : e.onload = function () {
        n[t].loaded = !0, n.done(t);
      }, document.body.appendChild(e));
    },
    done: function done(e) {
      var n, o, i;
      "youtube" === e && delete window.onYouTubeIframeAPIReady, (n = t.fancybox.getInstance()) && (o = n.current.$content.find("iframe"), "youtube" === e && void 0 !== YT && YT ? i = new YT.Player(o.attr("id"), {
        events: {
          onStateChange: function onStateChange(t) {
            0 == t.data && n.next();
          }
        }
      }) : "vimeo" === e && void 0 !== Vimeo && Vimeo && (i = new Vimeo.Player(o), i.on("ended", function () {
        n.next();
      })));
    }
  };
  t(document).on({
    "afterShow.fb": function afterShowFb(t, e, n) {
      e.group.length > 1 && ("youtube" === n.contentSource || "vimeo" === n.contentSource) && o.load(n.contentSource);
    }
  });
}(jQuery), function (t, e, n) {
  "use strict";

  var o = function () {
      return t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.oRequestAnimationFrame || function (e) {
        return t.setTimeout(e, 1e3 / 60);
      };
    }(),
    i = function () {
      return t.cancelAnimationFrame || t.webkitCancelAnimationFrame || t.mozCancelAnimationFrame || t.oCancelAnimationFrame || function (e) {
        t.clearTimeout(e);
      };
    }(),
    a = function a(e) {
      var n = [];
      e = e.originalEvent || e || t.e, e = e.touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [e];
      for (var o in e) e[o].pageX ? n.push({
        x: e[o].pageX,
        y: e[o].pageY
      }) : e[o].clientX && n.push({
        x: e[o].clientX,
        y: e[o].clientY
      });
      return n;
    },
    s = function s(t, e, n) {
      return e && t ? "x" === n ? t.x - e.x : "y" === n ? t.y - e.y : Math.sqrt(Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2)) : 0;
    },
    r = function r(t) {
      if (t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe') || n.isFunction(t.get(0).onclick) || t.data("selectable")) return !0;
      for (var e = 0, o = t[0].attributes, i = o.length; e < i; e++) if ("data-fancybox-" === o[e].nodeName.substr(0, 14)) return !0;
      return !1;
    },
    c = function c(e) {
      var n = t.getComputedStyle(e)["overflow-y"],
        o = t.getComputedStyle(e)["overflow-x"],
        i = ("scroll" === n || "auto" === n) && e.scrollHeight > e.clientHeight,
        a = ("scroll" === o || "auto" === o) && e.scrollWidth > e.clientWidth;
      return i || a;
    },
    l = function l(t) {
      for (var e = !1;;) {
        if (e = c(t.get(0))) break;
        if (t = t.parent(), !t.length || t.hasClass("fancybox-stage") || t.is("body")) break;
      }
      return e;
    },
    d = function d(t) {
      var e = this;
      e.instance = t, e.$bg = t.$refs.bg, e.$stage = t.$refs.stage, e.$container = t.$refs.container, e.destroy(), e.$container.on("touchstart.fb.touch mousedown.fb.touch", n.proxy(e, "ontouchstart"));
    };
  d.prototype.destroy = function () {
    var t = this;
    t.$container.off(".fb.touch"), n(e).off(".fb.touch"), t.requestId && (i(t.requestId), t.requestId = null), t.tapped && (clearTimeout(t.tapped), t.tapped = null);
  }, d.prototype.ontouchstart = function (o) {
    var i = this,
      c = n(o.target),
      d = i.instance,
      u = d.current,
      f = u.$slide,
      p = u.$content,
      h = "touchstart" == o.type;
    if (h && i.$container.off("mousedown.fb.touch"), (!o.originalEvent || 2 != o.originalEvent.button) && f.length && c.length && !r(c) && !r(c.parent()) && (c.is("img") || !(o.originalEvent.clientX > c[0].clientWidth + c.offset().left))) {
      if (!u || d.isAnimating || u.$slide.hasClass("fancybox-animated")) return o.stopPropagation(), void o.preventDefault();
      i.realPoints = i.startPoints = a(o), i.startPoints.length && (u.touch && o.stopPropagation(), i.startEvent = o, i.canTap = !0, i.$target = c, i.$content = p, i.opts = u.opts.touch, i.isPanning = !1, i.isSwiping = !1, i.isZooming = !1, i.isScrolling = !1, i.canPan = d.canPan(), i.startTime = new Date().getTime(), i.distanceX = i.distanceY = i.distance = 0, i.canvasWidth = Math.round(f[0].clientWidth), i.canvasHeight = Math.round(f[0].clientHeight), i.contentLastPos = null, i.contentStartPos = n.fancybox.getTranslate(i.$content) || {
        top: 0,
        left: 0
      }, i.sliderStartPos = n.fancybox.getTranslate(f), i.stagePos = n.fancybox.getTranslate(d.$refs.stage), i.sliderStartPos.top -= i.stagePos.top, i.sliderStartPos.left -= i.stagePos.left, i.contentStartPos.top -= i.stagePos.top, i.contentStartPos.left -= i.stagePos.left, n(e).off(".fb.touch").on(h ? "touchend.fb.touch touchcancel.fb.touch" : "mouseup.fb.touch mouseleave.fb.touch", n.proxy(i, "ontouchend")).on(h ? "touchmove.fb.touch" : "mousemove.fb.touch", n.proxy(i, "ontouchmove")), n.fancybox.isMobile && e.addEventListener("scroll", i.onscroll, !0), ((i.opts || i.canPan) && (c.is(i.$stage) || i.$stage.find(c).length) || (c.is(".fancybox-image") && o.preventDefault(), n.fancybox.isMobile && c.parents(".fancybox-caption").length)) && (i.isScrollable = l(c) || l(c.parent()), n.fancybox.isMobile && i.isScrollable || o.preventDefault(), (1 === i.startPoints.length || u.hasError) && (i.canPan ? (n.fancybox.stop(i.$content), i.isPanning = !0) : i.isSwiping = !0, i.$container.addClass("fancybox-is-grabbing")), 2 === i.startPoints.length && "image" === u.type && (u.isLoaded || u.$ghost) && (i.canTap = !1, i.isSwiping = !1, i.isPanning = !1, i.isZooming = !0, n.fancybox.stop(i.$content), i.centerPointStartX = .5 * (i.startPoints[0].x + i.startPoints[1].x) - n(t).scrollLeft(), i.centerPointStartY = .5 * (i.startPoints[0].y + i.startPoints[1].y) - n(t).scrollTop(), i.percentageOfImageAtPinchPointX = (i.centerPointStartX - i.contentStartPos.left) / i.contentStartPos.width, i.percentageOfImageAtPinchPointY = (i.centerPointStartY - i.contentStartPos.top) / i.contentStartPos.height, i.startDistanceBetweenFingers = s(i.startPoints[0], i.startPoints[1]))));
    }
  }, d.prototype.onscroll = function (t) {
    var n = this;
    n.isScrolling = !0, e.removeEventListener("scroll", n.onscroll, !0);
  }, d.prototype.ontouchmove = function (t) {
    var e = this;
    return void 0 !== t.originalEvent.buttons && 0 === t.originalEvent.buttons ? void e.ontouchend(t) : e.isScrolling ? void (e.canTap = !1) : (e.newPoints = a(t), void ((e.opts || e.canPan) && e.newPoints.length && e.newPoints.length && (e.isSwiping && !0 === e.isSwiping || t.preventDefault(), e.distanceX = s(e.newPoints[0], e.startPoints[0], "x"), e.distanceY = s(e.newPoints[0], e.startPoints[0], "y"), e.distance = s(e.newPoints[0], e.startPoints[0]), e.distance > 0 && (e.isSwiping ? e.onSwipe(t) : e.isPanning ? e.onPan() : e.isZooming && e.onZoom()))));
  }, d.prototype.onSwipe = function (e) {
    var a,
      s = this,
      r = s.instance,
      c = s.isSwiping,
      l = s.sliderStartPos.left || 0;
    if (!0 !== c) "x" == c && (s.distanceX > 0 && (s.instance.group.length < 2 || 0 === s.instance.current.index && !s.instance.current.opts.loop) ? l += Math.pow(s.distanceX, .8) : s.distanceX < 0 && (s.instance.group.length < 2 || s.instance.current.index === s.instance.group.length - 1 && !s.instance.current.opts.loop) ? l -= Math.pow(-s.distanceX, .8) : l += s.distanceX), s.sliderLastPos = {
      top: "x" == c ? 0 : s.sliderStartPos.top + s.distanceY,
      left: l
    }, s.requestId && (i(s.requestId), s.requestId = null), s.requestId = o(function () {
      s.sliderLastPos && (n.each(s.instance.slides, function (t, e) {
        var o = e.pos - s.instance.currPos;
        n.fancybox.setTranslate(e.$slide, {
          top: s.sliderLastPos.top,
          left: s.sliderLastPos.left + o * s.canvasWidth + o * e.opts.gutter
        });
      }), s.$container.addClass("fancybox-is-sliding"));
    });else if (Math.abs(s.distance) > 10) {
      if (s.canTap = !1, r.group.length < 2 && s.opts.vertical ? s.isSwiping = "y" : r.isDragging || !1 === s.opts.vertical || "auto" === s.opts.vertical && n(t).width() > 800 ? s.isSwiping = "x" : (a = Math.abs(180 * Math.atan2(s.distanceY, s.distanceX) / Math.PI), s.isSwiping = a > 45 && a < 135 ? "y" : "x"), "y" === s.isSwiping && n.fancybox.isMobile && s.isScrollable) return void (s.isScrolling = !0);
      r.isDragging = s.isSwiping, s.startPoints = s.newPoints, n.each(r.slides, function (t, e) {
        var o, i;
        n.fancybox.stop(e.$slide), o = n.fancybox.getTranslate(e.$slide), i = n.fancybox.getTranslate(r.$refs.stage), e.$slide.css({
          transform: "",
          opacity: "",
          "transition-duration": ""
        }).removeClass("fancybox-animated").removeClass(function (t, e) {
          return (e.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
        }), e.pos === r.current.pos && (s.sliderStartPos.top = o.top - i.top, s.sliderStartPos.left = o.left - i.left), n.fancybox.setTranslate(e.$slide, {
          top: o.top - i.top,
          left: o.left - i.left
        });
      }), r.SlideShow && r.SlideShow.isActive && r.SlideShow.stop();
    }
  }, d.prototype.onPan = function () {
    var t = this;
    if (s(t.newPoints[0], t.realPoints[0]) < (n.fancybox.isMobile ? 10 : 5)) return void (t.startPoints = t.newPoints);
    t.canTap = !1, t.contentLastPos = t.limitMovement(), t.requestId && i(t.requestId), t.requestId = o(function () {
      n.fancybox.setTranslate(t.$content, t.contentLastPos);
    });
  }, d.prototype.limitMovement = function () {
    var t,
      e,
      n,
      o,
      i,
      a,
      s = this,
      r = s.canvasWidth,
      c = s.canvasHeight,
      l = s.distanceX,
      d = s.distanceY,
      u = s.contentStartPos,
      f = u.left,
      p = u.top,
      h = u.width,
      g = u.height;
    return i = h > r ? f + l : f, a = p + d, t = Math.max(0, .5 * r - .5 * h), e = Math.max(0, .5 * c - .5 * g), n = Math.min(r - h, .5 * r - .5 * h), o = Math.min(c - g, .5 * c - .5 * g), l > 0 && i > t && (i = t - 1 + Math.pow(-t + f + l, .8) || 0), l < 0 && i < n && (i = n + 1 - Math.pow(n - f - l, .8) || 0), d > 0 && a > e && (a = e - 1 + Math.pow(-e + p + d, .8) || 0), d < 0 && a < o && (a = o + 1 - Math.pow(o - p - d, .8) || 0), {
      top: a,
      left: i
    };
  }, d.prototype.limitPosition = function (t, e, n, o) {
    var i = this,
      a = i.canvasWidth,
      s = i.canvasHeight;
    return n > a ? (t = t > 0 ? 0 : t, t = t < a - n ? a - n : t) : t = Math.max(0, a / 2 - n / 2), o > s ? (e = e > 0 ? 0 : e, e = e < s - o ? s - o : e) : e = Math.max(0, s / 2 - o / 2), {
      top: e,
      left: t
    };
  }, d.prototype.onZoom = function () {
    var e = this,
      a = e.contentStartPos,
      r = a.width,
      c = a.height,
      l = a.left,
      d = a.top,
      u = s(e.newPoints[0], e.newPoints[1]),
      f = u / e.startDistanceBetweenFingers,
      p = Math.floor(r * f),
      h = Math.floor(c * f),
      g = (r - p) * e.percentageOfImageAtPinchPointX,
      b = (c - h) * e.percentageOfImageAtPinchPointY,
      m = (e.newPoints[0].x + e.newPoints[1].x) / 2 - n(t).scrollLeft(),
      v = (e.newPoints[0].y + e.newPoints[1].y) / 2 - n(t).scrollTop(),
      y = m - e.centerPointStartX,
      x = v - e.centerPointStartY,
      w = l + (g + y),
      $ = d + (b + x),
      S = {
        top: $,
        left: w,
        scaleX: f,
        scaleY: f
      };
    e.canTap = !1, e.newWidth = p, e.newHeight = h, e.contentLastPos = S, e.requestId && i(e.requestId), e.requestId = o(function () {
      n.fancybox.setTranslate(e.$content, e.contentLastPos);
    });
  }, d.prototype.ontouchend = function (t) {
    var o = this,
      s = o.isSwiping,
      r = o.isPanning,
      c = o.isZooming,
      l = o.isScrolling;
    if (o.endPoints = a(t), o.dMs = Math.max(new Date().getTime() - o.startTime, 1), o.$container.removeClass("fancybox-is-grabbing"), n(e).off(".fb.touch"), e.removeEventListener("scroll", o.onscroll, !0), o.requestId && (i(o.requestId), o.requestId = null), o.isSwiping = !1, o.isPanning = !1, o.isZooming = !1, o.isScrolling = !1, o.instance.isDragging = !1, o.canTap) return o.onTap(t);
    o.speed = 100, o.velocityX = o.distanceX / o.dMs * .5, o.velocityY = o.distanceY / o.dMs * .5, r ? o.endPanning() : c ? o.endZooming() : o.endSwiping(s, l);
  }, d.prototype.endSwiping = function (t, e) {
    var o = this,
      i = !1,
      a = o.instance.group.length,
      s = Math.abs(o.distanceX),
      r = "x" == t && a > 1 && (o.dMs > 130 && s > 10 || s > 50);
    o.sliderLastPos = null, "y" == t && !e && Math.abs(o.distanceY) > 50 ? (n.fancybox.animate(o.instance.current.$slide, {
      top: o.sliderStartPos.top + o.distanceY + 150 * o.velocityY,
      opacity: 0
    }, 200), i = o.instance.close(!0, 250)) : r && o.distanceX > 0 ? i = o.instance.previous(300) : r && o.distanceX < 0 && (i = o.instance.next(300)), !1 !== i || "x" != t && "y" != t || o.instance.centerSlide(200), o.$container.removeClass("fancybox-is-sliding");
  }, d.prototype.endPanning = function () {
    var t,
      e,
      o,
      i = this;
    i.contentLastPos && (!1 === i.opts.momentum || i.dMs > 350 ? (t = i.contentLastPos.left, e = i.contentLastPos.top) : (t = i.contentLastPos.left + 500 * i.velocityX, e = i.contentLastPos.top + 500 * i.velocityY), o = i.limitPosition(t, e, i.contentStartPos.width, i.contentStartPos.height), o.width = i.contentStartPos.width, o.height = i.contentStartPos.height, n.fancybox.animate(i.$content, o, 366));
  }, d.prototype.endZooming = function () {
    var t,
      e,
      o,
      i,
      a = this,
      s = a.instance.current,
      r = a.newWidth,
      c = a.newHeight;
    a.contentLastPos && (t = a.contentLastPos.left, e = a.contentLastPos.top, i = {
      top: e,
      left: t,
      width: r,
      height: c,
      scaleX: 1,
      scaleY: 1
    }, n.fancybox.setTranslate(a.$content, i), r < a.canvasWidth && c < a.canvasHeight ? a.instance.scaleToFit(150) : r > s.width || c > s.height ? a.instance.scaleToActual(a.centerPointStartX, a.centerPointStartY, 150) : (o = a.limitPosition(t, e, r, c), n.fancybox.animate(a.$content, o, 150)));
  }, d.prototype.onTap = function (e) {
    var o,
      i = this,
      s = n(e.target),
      r = i.instance,
      c = r.current,
      l = e && a(e) || i.startPoints,
      d = l[0] ? l[0].x - n(t).scrollLeft() - i.stagePos.left : 0,
      u = l[0] ? l[0].y - n(t).scrollTop() - i.stagePos.top : 0,
      f = function f(t) {
        var o = c.opts[t];
        if (n.isFunction(o) && (o = o.apply(r, [c, e])), o) switch (o) {
          case "close":
            r.close(i.startEvent);
            break;
          case "toggleControls":
            r.toggleControls();
            break;
          case "next":
            r.next();
            break;
          case "nextOrClose":
            r.group.length > 1 ? r.next() : r.close(i.startEvent);
            break;
          case "zoom":
            "image" == c.type && (c.isLoaded || c.$ghost) && (r.canPan() ? r.scaleToFit() : r.isScaledDown() ? r.scaleToActual(d, u) : r.group.length < 2 && r.close(i.startEvent));
        }
      };
    if ((!e.originalEvent || 2 != e.originalEvent.button) && (s.is("img") || !(d > s[0].clientWidth + s.offset().left))) {
      if (s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container")) o = "Outside";else if (s.is(".fancybox-slide")) o = "Slide";else {
        if (!r.current.$content || !r.current.$content.find(s).addBack().filter(s).length) return;
        o = "Content";
      }
      if (i.tapped) {
        if (clearTimeout(i.tapped), i.tapped = null, Math.abs(d - i.tapX) > 50 || Math.abs(u - i.tapY) > 50) return this;
        f("dblclick" + o);
      } else i.tapX = d, i.tapY = u, c.opts["dblclick" + o] && c.opts["dblclick" + o] !== c.opts["click" + o] ? i.tapped = setTimeout(function () {
        i.tapped = null, r.isAnimating || f("click" + o);
      }, 500) : f("click" + o);
      return this;
    }
  }, n(e).on("onActivate.fb", function (t, e) {
    e && !e.Guestures && (e.Guestures = new d(e));
  }).on("beforeClose.fb", function (t, e) {
    e && e.Guestures && e.Guestures.destroy();
  });
}(window, document, jQuery), function (t, e) {
  "use strict";

  e.extend(!0, e.fancybox.defaults, {
    btnTpl: {
      slideShow: '<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'
    },
    slideShow: {
      autoStart: !1,
      speed: 3e3,
      progress: !0
    }
  });
  var n = function n(t) {
    this.instance = t, this.init();
  };
  e.extend(n.prototype, {
    timer: null,
    isActive: !1,
    $button: null,
    init: function init() {
      var t = this,
        n = t.instance,
        o = n.group[n.currIndex].opts.slideShow;
      t.$button = n.$refs.toolbar.find("[data-fancybox-play]").on("click", function () {
        t.toggle();
      }), n.group.length < 2 || !o ? t.$button.hide() : o.progress && (t.$progress = e('<div class="fancybox-progress"></div>').appendTo(n.$refs.inner));
    },
    set: function set(t) {
      var n = this,
        o = n.instance,
        i = o.current;
      i && (!0 === t || i.opts.loop || o.currIndex < o.group.length - 1) ? n.isActive && "video" !== i.contentType && (n.$progress && e.fancybox.animate(n.$progress.show(), {
        scaleX: 1
      }, i.opts.slideShow.speed), n.timer = setTimeout(function () {
        o.current.opts.loop || o.current.index != o.group.length - 1 ? o.next() : o.jumpTo(0);
      }, i.opts.slideShow.speed)) : (n.stop(), o.idleSecondsCounter = 0, o.showControls());
    },
    clear: function clear() {
      var t = this;
      clearTimeout(t.timer), t.timer = null, t.$progress && t.$progress.removeAttr("style").hide();
    },
    start: function start() {
      var t = this,
        e = t.instance.current;
      e && (t.$button.attr("title", (e.opts.i18n[e.opts.lang] || e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"), t.isActive = !0, e.isComplete && t.set(!0), t.instance.trigger("onSlideShowChange", !0));
    },
    stop: function stop() {
      var t = this,
        e = t.instance.current;
      t.clear(), t.$button.attr("title", (e.opts.i18n[e.opts.lang] || e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"), t.isActive = !1, t.instance.trigger("onSlideShowChange", !1), t.$progress && t.$progress.removeAttr("style").hide();
    },
    toggle: function toggle() {
      var t = this;
      t.isActive ? t.stop() : t.start();
    }
  }), e(t).on({
    "onInit.fb": function onInitFb(t, e) {
      e && !e.SlideShow && (e.SlideShow = new n(e));
    },
    "beforeShow.fb": function beforeShowFb(t, e, n, o) {
      var i = e && e.SlideShow;
      o ? i && n.opts.slideShow.autoStart && i.start() : i && i.isActive && i.clear();
    },
    "afterShow.fb": function afterShowFb(t, e, n) {
      var o = e && e.SlideShow;
      o && o.isActive && o.set();
    },
    "afterKeydown.fb": function afterKeydownFb(n, o, i, a, s) {
      var r = o && o.SlideShow;
      !r || !i.opts.slideShow || 80 !== s && 32 !== s || e(t.activeElement).is("button,a,input") || (a.preventDefault(), r.toggle());
    },
    "beforeClose.fb onDeactivate.fb": function beforeCloseFb_onDeactivateFb(t, e) {
      var n = e && e.SlideShow;
      n && n.stop();
    }
  }), e(t).on("visibilitychange", function () {
    var n = e.fancybox.getInstance(),
      o = n && n.SlideShow;
    o && o.isActive && (t.hidden ? o.clear() : o.set());
  });
}(document, jQuery), function (t, e) {
  "use strict";

  var n = function () {
    for (var e = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"], ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror"], ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]], n = {}, o = 0; o < e.length; o++) {
      var i = e[o];
      if (i && i[1] in t) {
        for (var a = 0; a < i.length; a++) n[e[0][a]] = i[a];
        return n;
      }
    }
    return !1;
  }();
  if (n) {
    var o = {
      request: function request(e) {
        e = e || t.documentElement, e[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT);
      },
      exit: function exit() {
        t[n.exitFullscreen]();
      },
      toggle: function toggle(e) {
        e = e || t.documentElement, this.isFullscreen() ? this.exit() : this.request(e);
      },
      isFullscreen: function isFullscreen() {
        return Boolean(t[n.fullscreenElement]);
      },
      enabled: function enabled() {
        return Boolean(t[n.fullscreenEnabled]);
      }
    };
    e.extend(!0, e.fancybox.defaults, {
      btnTpl: {
        fullScreen: '<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'
      },
      fullScreen: {
        autoStart: !1
      }
    }), e(t).on(n.fullscreenchange, function () {
      var t = o.isFullscreen(),
        n = e.fancybox.getInstance();
      n && (n.current && "image" === n.current.type && n.isAnimating && (n.isAnimating = !1, n.update(!0, !0, 0), n.isComplete || n.complete()), n.trigger("onFullscreenChange", t), n.$refs.container.toggleClass("fancybox-is-fullscreen", t), n.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter", !t).toggleClass("fancybox-button--fsexit", t));
    });
  }
  e(t).on({
    "onInit.fb": function onInitFb(t, e) {
      var i;
      if (!n) return void e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove();
      e && e.group[e.currIndex].opts.fullScreen ? (i = e.$refs.container, i.on("click.fb-fullscreen", "[data-fancybox-fullscreen]", function (t) {
        t.stopPropagation(), t.preventDefault(), o.toggle();
      }), e.opts.fullScreen && !0 === e.opts.fullScreen.autoStart && o.request(), e.FullScreen = o) : e && e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide();
    },
    "afterKeydown.fb": function afterKeydownFb(t, e, n, o, i) {
      e && e.FullScreen && 70 === i && (o.preventDefault(), e.FullScreen.toggle());
    },
    "beforeClose.fb": function beforeCloseFb(t, e) {
      e && e.FullScreen && e.$refs.container.hasClass("fancybox-is-fullscreen") && o.exit();
    }
  });
}(document, jQuery), function (t, e) {
  "use strict";

  var n = "fancybox-thumbs";
  e.fancybox.defaults = e.extend(!0, {
    btnTpl: {
      thumbs: '<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'
    },
    thumbs: {
      autoStart: !1,
      hideOnClose: !0,
      parentEl: ".fancybox-container",
      axis: "y"
    }
  }, e.fancybox.defaults);
  var o = function o(t) {
    this.init(t);
  };
  e.extend(o.prototype, {
    $button: null,
    $grid: null,
    $list: null,
    isVisible: !1,
    isActive: !1,
    init: function init(t) {
      var e = this,
        n = t.group,
        o = 0;
      e.instance = t, e.opts = n[t.currIndex].opts.thumbs, t.Thumbs = e, e.$button = t.$refs.toolbar.find("[data-fancybox-thumbs]");
      for (var i = 0, a = n.length; i < a && (n[i].thumb && o++, !(o > 1)); i++);
      o > 1 && e.opts ? (e.$button.removeAttr("style").on("click", function () {
        e.toggle();
      }), e.isActive = !0) : e.$button.hide();
    },
    create: function create() {
      var t,
        o = this,
        i = o.instance,
        a = o.opts.parentEl,
        s = [];
      o.$grid || (o.$grid = e('<div class="' + n + " " + n + "-" + o.opts.axis + '"></div>').appendTo(i.$refs.container.find(a).addBack().filter(a)), o.$grid.on("click", "a", function () {
        i.jumpTo(e(this).attr("data-index"));
      })), o.$list || (o.$list = e('<div class="' + n + '__list">').appendTo(o.$grid)), e.each(i.group, function (e, n) {
        t = n.thumb, t || "image" !== n.type || (t = n.src), s.push('<a href="javascript:;" tabindex="0" data-index="' + e + '"' + (t && t.length ? ' style="background-image:url(' + t + ')"' : 'class="fancybox-thumbs-missing"') + "></a>");
      }), o.$list[0].innerHTML = s.join(""), "x" === o.opts.axis && o.$list.width(parseInt(o.$grid.css("padding-right"), 10) + i.group.length * o.$list.children().eq(0).outerWidth(!0));
    },
    focus: function focus(t) {
      var e,
        n,
        o = this,
        i = o.$list,
        a = o.$grid;
      o.instance.current && (e = i.children().removeClass("fancybox-thumbs-active").filter('[data-index="' + o.instance.current.index + '"]').addClass("fancybox-thumbs-active"), n = e.position(), "y" === o.opts.axis && (n.top < 0 || n.top > i.height() - e.outerHeight()) ? i.stop().animate({
        scrollTop: i.scrollTop() + n.top
      }, t) : "x" === o.opts.axis && (n.left < a.scrollLeft() || n.left > a.scrollLeft() + (a.width() - e.outerWidth())) && i.parent().stop().animate({
        scrollLeft: n.left
      }, t));
    },
    update: function update() {
      var t = this;
      t.instance.$refs.container.toggleClass("fancybox-show-thumbs", this.isVisible), t.isVisible ? (t.$grid || t.create(), t.instance.trigger("onThumbsShow"), t.focus(0)) : t.$grid && t.instance.trigger("onThumbsHide"), t.instance.update();
    },
    hide: function hide() {
      this.isVisible = !1, this.update();
    },
    show: function show() {
      this.isVisible = !0, this.update();
    },
    toggle: function toggle() {
      this.isVisible = !this.isVisible, this.update();
    }
  }), e(t).on({
    "onInit.fb": function onInitFb(t, e) {
      var n;
      e && !e.Thumbs && (n = new o(e), n.isActive && !0 === n.opts.autoStart && n.show());
    },
    "beforeShow.fb": function beforeShowFb(t, e, n, o) {
      var i = e && e.Thumbs;
      i && i.isVisible && i.focus(o ? 0 : 250);
    },
    "afterKeydown.fb": function afterKeydownFb(t, e, n, o, i) {
      var a = e && e.Thumbs;
      a && a.isActive && 71 === i && (o.preventDefault(), a.toggle());
    },
    "beforeClose.fb": function beforeCloseFb(t, e) {
      var n = e && e.Thumbs;
      n && n.isVisible && !1 !== n.opts.hideOnClose && n.$grid.hide();
    }
  });
}(document, jQuery), function (t, e) {
  "use strict";

  function n(t) {
    var e = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;",
      "/": "&#x2F;",
      "`": "&#x60;",
      "=": "&#x3D;"
    };
    return String(t).replace(/[&<>"'`=\/]/g, function (t) {
      return e[t];
    });
  }
  e.extend(!0, e.fancybox.defaults, {
    btnTpl: {
      share: '<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'
    },
    share: {
      url: function url(t, e) {
        return !t.currentHash && "inline" !== e.type && "html" !== e.type && (e.origSrc || e.src) || window.location;
      },
      tpl: '<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'
    }
  }), e(t).on("click", "[data-fancybox-share]", function () {
    var t,
      o,
      i = e.fancybox.getInstance(),
      a = i.current || null;
    a && ("function" === e.type(a.opts.share.url) && (t = a.opts.share.url.apply(a, [i, a])), o = a.opts.share.tpl.replace(/\{\{media\}\}/g, "image" === a.type ? encodeURIComponent(a.src) : "").replace(/\{\{url\}\}/g, encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g, n(t)).replace(/\{\{descr\}\}/g, i.$caption ? encodeURIComponent(i.$caption.text()) : ""), e.fancybox.open({
      src: i.translate(i, o),
      type: "html",
      opts: {
        touch: !1,
        animationEffect: !1,
        afterLoad: function afterLoad(t, e) {
          i.$refs.container.one("beforeClose.fb", function () {
            t.close(null, 0);
          }), e.$content.find(".fancybox-share__button").click(function () {
            return window.open(this.href, "Share", "width=550, height=450"), !1;
          });
        },
        mobile: {
          autoFocus: !1
        }
      }
    }));
  });
}(document, jQuery), function (t, e, n) {
  "use strict";

  function o() {
    var e = t.location.hash.substr(1),
      n = e.split("-"),
      o = n.length > 1 && /^\+?\d+$/.test(n[n.length - 1]) ? parseInt(n.pop(-1), 10) || 1 : 1,
      i = n.join("-");
    return {
      hash: e,
      index: o < 1 ? 1 : o,
      gallery: i
    };
  }
  function i(t) {
    "" !== t.gallery && n("[data-fancybox='" + n.escapeSelector(t.gallery) + "']").eq(t.index - 1).focus().trigger("click.fb-start");
  }
  function a(t) {
    var e, n;
    return !!t && (e = t.current ? t.current.opts : t.opts, "" !== (n = e.hash || (e.$orig ? e.$orig.data("fancybox") || e.$orig.data("fancybox-trigger") : "")) && n);
  }
  n.escapeSelector || (n.escapeSelector = function (t) {
    return (t + "").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g, function (t, e) {
      return e ? "\0" === t ? "�" : t.slice(0, -1) + "\\" + t.charCodeAt(t.length - 1).toString(16) + " " : "\\" + t;
    });
  }), n(function () {
    !1 !== n.fancybox.defaults.hash && (n(e).on({
      "onInit.fb": function onInitFb(t, e) {
        var n, i;
        !1 !== e.group[e.currIndex].opts.hash && (n = o(), (i = a(e)) && n.gallery && i == n.gallery && (e.currIndex = n.index - 1));
      },
      "beforeShow.fb": function beforeShowFb(n, o, i, s) {
        var r;
        i && !1 !== i.opts.hash && (r = a(o)) && (o.currentHash = r + (o.group.length > 1 ? "-" + (i.index + 1) : ""), t.location.hash !== "#" + o.currentHash && (s && !o.origHash && (o.origHash = t.location.hash), o.hashTimer && clearTimeout(o.hashTimer), o.hashTimer = setTimeout(function () {
          "replaceState" in t.history ? (t.history[s ? "pushState" : "replaceState"]({}, e.title, t.location.pathname + t.location.search + "#" + o.currentHash), s && (o.hasCreatedHistory = !0)) : t.location.hash = o.currentHash, o.hashTimer = null;
        }, 300)));
      },
      "beforeClose.fb": function beforeCloseFb(n, o, i) {
        i && !1 !== i.opts.hash && (clearTimeout(o.hashTimer), o.currentHash && o.hasCreatedHistory ? t.history.back() : o.currentHash && ("replaceState" in t.history ? t.history.replaceState({}, e.title, t.location.pathname + t.location.search + (o.origHash || "")) : t.location.hash = o.origHash), o.currentHash = null);
      }
    }), n(t).on("hashchange.fb", function () {
      var t = o(),
        e = null;
      n.each(n(".fancybox-container").get().reverse(), function (t, o) {
        var i = n(o).data("FancyBox");
        if (i && i.currentHash) return e = i, !1;
      }), e ? e.currentHash === t.gallery + "-" + t.index || 1 === t.index && e.currentHash == t.gallery || (e.currentHash = null, e.close()) : "" !== t.gallery && i(t);
    }), setTimeout(function () {
      n.fancybox.getInstance() || i(o());
    }, 50));
  });
}(window, document, jQuery), function (t, e) {
  "use strict";

  var n = new Date().getTime();
  e(t).on({
    "onInit.fb": function onInitFb(t, e, o) {
      e.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll", function (t) {
        var o = e.current,
          i = new Date().getTime();
        e.group.length < 2 || !1 === o.opts.wheel || "auto" === o.opts.wheel && "image" !== o.type || (t.preventDefault(), t.stopPropagation(), o.$slide.hasClass("fancybox-animated") || (t = t.originalEvent || t, i - n < 250 || (n = i, e[(-t.deltaY || -t.deltaX || t.wheelDelta || -t.detail) < 0 ? "next" : "previous"]())));
      });
    }
  });
}(document, jQuery);

},{}],4:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*
 * International Telephone Input v18.2.1
 * https://github.com/jackocnr/intl-tel-input.git
 * Licensed under the MIT license
 */

!function (a) {
  var b = function (a, b, c) {
    "use strict";

    return function () {
      function d(a, b) {
        if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
      }
      function e(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), Object.defineProperty(a, d.key, d);
        }
      }
      function f(a, b, c) {
        return b && e(a.prototype, b), c && e(a, c), a;
      }
      for (var g = [["Afghanistan (‫افغانستان‬‎)", "af", "93"], ["Albania (Shqipëri)", "al", "355"], ["Algeria (‫الجزائر‬‎)", "dz", "213"], ["American Samoa", "as", "1", 5, ["684"]], ["Andorra", "ad", "376"], ["Angola", "ao", "244"], ["Anguilla", "ai", "1", 6, ["264"]], ["Antigua and Barbuda", "ag", "1", 7, ["268"]], ["Argentina", "ar", "54"], ["Armenia (Հայաստան)", "am", "374"], ["Aruba", "aw", "297"], ["Australia", "au", "61", 0], ["Austria (Österreich)", "at", "43"], ["Azerbaijan (Azərbaycan)", "az", "994"], ["Bahamas", "bs", "1", 8, ["242"]], ["Bahrain (‫البحرين‬‎)", "bh", "973"], ["Bangladesh (বাংলাদেশ)", "bd", "880"], ["Barbados", "bb", "1", 9, ["246"]], ["Belarus (Беларусь)", "by", "375"], ["Belgium (België)", "be", "32"], ["Belize", "bz", "501"], ["Benin (Bénin)", "bj", "229"], ["Bermuda", "bm", "1", 10, ["441"]], ["Bhutan (འབྲུག)", "bt", "975"], ["Bolivia", "bo", "591"], ["Bosnia and Herzegovina (Босна и Херцеговина)", "ba", "387"], ["Botswana", "bw", "267"], ["Brazil (Brasil)", "br", "55"], ["British Indian Ocean Territory", "io", "246"], ["British Virgin Islands", "vg", "1", 11, ["284"]], ["Brunei", "bn", "673"], ["Bulgaria (България)", "bg", "359"], ["Burkina Faso", "bf", "226"], ["Burundi (Uburundi)", "bi", "257"], ["Cambodia (កម្ពុជា)", "kh", "855"], ["Cameroon (Cameroun)", "cm", "237"], ["Canada", "ca", "1", 1, ["204", "226", "236", "249", "250", "289", "306", "343", "365", "387", "403", "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579", "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905"]], ["Cape Verde (Kabu Verdi)", "cv", "238"], ["Caribbean Netherlands", "bq", "599", 1, ["3", "4", "7"]], ["Cayman Islands", "ky", "1", 12, ["345"]], ["Central African Republic (République centrafricaine)", "cf", "236"], ["Chad (Tchad)", "td", "235"], ["Chile", "cl", "56"], ["China (中国)", "cn", "86"], ["Christmas Island", "cx", "61", 2], ["Cocos (Keeling) Islands", "cc", "61", 1], ["Colombia", "co", "57"], ["Comoros (‫جزر القمر‬‎)", "km", "269"], ["Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)", "cd", "243"], ["Congo (Republic) (Congo-Brazzaville)", "cg", "242"], ["Cook Islands", "ck", "682"], ["Costa Rica", "cr", "506"], ["Côte d’Ivoire", "ci", "225"], ["Croatia (Hrvatska)", "hr", "385"], ["Cuba", "cu", "53"], ["Curaçao", "cw", "599", 0], ["Cyprus (Κύπρος)", "cy", "357"], ["Czech Republic (Česká republika)", "cz", "420"], ["Denmark (Danmark)", "dk", "45"], ["Djibouti", "dj", "253"], ["Dominica", "dm", "1", 13, ["767"]], ["Dominican Republic (República Dominicana)", "do", "1", 2, ["809", "829", "849"]], ["Ecuador", "ec", "593"], ["Egypt (‫مصر‬‎)", "eg", "20"], ["El Salvador", "sv", "503"], ["Equatorial Guinea (Guinea Ecuatorial)", "gq", "240"], ["Eritrea", "er", "291"], ["Estonia (Eesti)", "ee", "372"], ["Ethiopia", "et", "251"], ["Falkland Islands (Islas Malvinas)", "fk", "500"], ["Faroe Islands (Føroyar)", "fo", "298"], ["Fiji", "fj", "679"], ["Finland (Suomi)", "fi", "358", 0], ["France", "fr", "33"], ["French Guiana (Guyane française)", "gf", "594"], ["French Polynesia (Polynésie française)", "pf", "689"], ["Gabon", "ga", "241"], ["Gambia", "gm", "220"], ["Georgia (საქართველო)", "ge", "995"], ["Germany (Deutschland)", "de", "49"], ["Ghana (Gaana)", "gh", "233"], ["Gibraltar", "gi", "350"], ["Greece (Ελλάδα)", "gr", "30"], ["Greenland (Kalaallit Nunaat)", "gl", "299"], ["Grenada", "gd", "1", 14, ["473"]], ["Guadeloupe", "gp", "590", 0], ["Guam", "gu", "1", 15, ["671"]], ["Guatemala", "gt", "502"], ["Guernsey", "gg", "44", 1, ["1481", "7781", "7839", "7911"]], ["Guinea (Guinée)", "gn", "224"], ["Guinea-Bissau (Guiné Bissau)", "gw", "245"], ["Guyana", "gy", "592"], ["Haiti", "ht", "509"], ["Honduras", "hn", "504"], ["Hong Kong (香港)", "hk", "852"], ["Hungary (Magyarország)", "hu", "36"], ["Iceland (Ísland)", "is", "354"], ["India (भारत)", "in", "91"], ["Indonesia", "id", "62"], ["Iran (‫ایران‬‎)", "ir", "98"], ["Iraq (‫العراق‬‎)", "iq", "964"], ["Ireland", "ie", "353"], ["Isle of Man", "im", "44", 2, ["1624", "74576", "7524", "7924", "7624"]], ["Israel (‫ישראל‬‎)", "il", "972"], ["Italy (Italia)", "it", "39", 0], ["Jamaica", "jm", "1", 4, ["876", "658"]], ["Japan (日本)", "jp", "81"], ["Jersey", "je", "44", 3, ["1534", "7509", "7700", "7797", "7829", "7937"]], ["Jordan (‫الأردن‬‎)", "jo", "962"], ["Kazakhstan (Казахстан)", "kz", "7", 1, ["33", "7"]], ["Kenya", "ke", "254"], ["Kiribati", "ki", "686"], ["Kosovo", "xk", "383"], ["Kuwait (‫الكويت‬‎)", "kw", "965"], ["Kyrgyzstan (Кыргызстан)", "kg", "996"], ["Laos (ລາວ)", "la", "856"], ["Latvia (Latvija)", "lv", "371"], ["Lebanon (‫لبنان‬‎)", "lb", "961"], ["Lesotho", "ls", "266"], ["Liberia", "lr", "231"], ["Libya (‫ليبيا‬‎)", "ly", "218"], ["Liechtenstein", "li", "423"], ["Lithuania (Lietuva)", "lt", "370"], ["Luxembourg", "lu", "352"], ["Macau (澳門)", "mo", "853"], ["Macedonia (FYROM) (Македонија)", "mk", "389"], ["Madagascar (Madagasikara)", "mg", "261"], ["Malawi", "mw", "265"], ["Malaysia", "my", "60"], ["Maldives", "mv", "960"], ["Mali", "ml", "223"], ["Malta", "mt", "356"], ["Marshall Islands", "mh", "692"], ["Martinique", "mq", "596"], ["Mauritania (‫موريتانيا‬‎)", "mr", "222"], ["Mauritius (Moris)", "mu", "230"], ["Mayotte", "yt", "262", 1, ["269", "639"]], ["Mexico (México)", "mx", "52"], ["Micronesia", "fm", "691"], ["Moldova (Republica Moldova)", "md", "373"], ["Monaco", "mc", "377"], ["Mongolia (Монгол)", "mn", "976"], ["Montenegro (Crna Gora)", "me", "382"], ["Montserrat", "ms", "1", 16, ["664"]], ["Morocco (‫المغرب‬‎)", "ma", "212", 0], ["Mozambique (Moçambique)", "mz", "258"], ["Myanmar (Burma) (မြန်မာ)", "mm", "95"], ["Namibia (Namibië)", "na", "264"], ["Nauru", "nr", "674"], ["Nepal (नेपाल)", "np", "977"], ["Netherlands (Nederland)", "nl", "31"], ["New Caledonia (Nouvelle-Calédonie)", "nc", "687"], ["New Zealand", "nz", "64"], ["Nicaragua", "ni", "505"], ["Niger (Nijar)", "ne", "227"], ["Nigeria", "ng", "234"], ["Niue", "nu", "683"], ["Norfolk Island", "nf", "672"], ["North Korea (조선 민주주의 인민 공화국)", "kp", "850"], ["Northern Mariana Islands", "mp", "1", 17, ["670"]], ["Norway (Norge)", "no", "47", 0], ["Oman (‫عُمان‬‎)", "om", "968"], ["Pakistan (‫پاکستان‬‎)", "pk", "92"], ["Palau", "pw", "680"], ["Palestine (‫فلسطين‬‎)", "ps", "970"], ["Panama (Panamá)", "pa", "507"], ["Papua New Guinea", "pg", "675"], ["Paraguay", "py", "595"], ["Peru (Perú)", "pe", "51"], ["Philippines", "ph", "63"], ["Poland (Polska)", "pl", "48"], ["Portugal", "pt", "351"], ["Puerto Rico", "pr", "1", 3, ["787", "939"]], ["Qatar (‫قطر‬‎)", "qa", "974"], ["Réunion (La Réunion)", "re", "262", 0], ["Romania (România)", "ro", "40"], ["Russia (Россия)", "ru", "7", 0], ["Rwanda", "rw", "250"], ["Saint Barthélemy", "bl", "590", 1], ["Saint Helena", "sh", "290"], ["Saint Kitts and Nevis", "kn", "1", 18, ["869"]], ["Saint Lucia", "lc", "1", 19, ["758"]], ["Saint Martin (Saint-Martin (partie française))", "mf", "590", 2], ["Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)", "pm", "508"], ["Saint Vincent and the Grenadines", "vc", "1", 20, ["784"]], ["Samoa", "ws", "685"], ["San Marino", "sm", "378"], ["São Tomé and Príncipe (São Tomé e Príncipe)", "st", "239"], ["Saudi Arabia (‫المملكة العربية السعودية‬‎)", "sa", "966"], ["Senegal (Sénégal)", "sn", "221"], ["Serbia (Србија)", "rs", "381"], ["Seychelles", "sc", "248"], ["Sierra Leone", "sl", "232"], ["Singapore", "sg", "65"], ["Sint Maarten", "sx", "1", 21, ["721"]], ["Slovakia (Slovensko)", "sk", "421"], ["Slovenia (Slovenija)", "si", "386"], ["Solomon Islands", "sb", "677"], ["Somalia (Soomaaliya)", "so", "252"], ["South Africa", "za", "27"], ["South Korea (대한민국)", "kr", "82"], ["South Sudan (‫جنوب السودان‬‎)", "ss", "211"], ["Spain (España)", "es", "34"], ["Sri Lanka (ශ්‍රී ලංකාව)", "lk", "94"], ["Sudan (‫السودان‬‎)", "sd", "249"], ["Suriname", "sr", "597"], ["Svalbard and Jan Mayen", "sj", "47", 1, ["79"]], ["Swaziland", "sz", "268"], ["Sweden (Sverige)", "se", "46"], ["Switzerland (Schweiz)", "ch", "41"], ["Syria (‫سوريا‬‎)", "sy", "963"], ["Taiwan (台灣)", "tw", "886"], ["Tajikistan", "tj", "992"], ["Tanzania", "tz", "255"], ["Thailand (ไทย)", "th", "66"], ["Timor-Leste", "tl", "670"], ["Togo", "tg", "228"], ["Tokelau", "tk", "690"], ["Tonga", "to", "676"], ["Trinidad and Tobago", "tt", "1", 22, ["868"]], ["Tunisia (‫تونس‬‎)", "tn", "216"], ["Turkey (Türkiye)", "tr", "90"], ["Turkmenistan", "tm", "993"], ["Turks and Caicos Islands", "tc", "1", 23, ["649"]], ["Tuvalu", "tv", "688"], ["U.S. Virgin Islands", "vi", "1", 24, ["340"]], ["Uganda", "ug", "256"], ["Ukraine (Україна)", "ua", "380"], ["United Arab Emirates (‫الإمارات العربية المتحدة‬‎)", "ae", "971"], ["United Kingdom", "gb", "44", 0], ["United States", "us", "1", 0], ["Uruguay", "uy", "598"], ["Uzbekistan (Oʻzbekiston)", "uz", "998"], ["Vanuatu", "vu", "678"], ["Vatican City (Città del Vaticano)", "va", "39", 1, ["06698"]], ["Venezuela", "ve", "58"], ["Vietnam (Việt Nam)", "vn", "84"], ["Wallis and Futuna (Wallis-et-Futuna)", "wf", "681"], ["Western Sahara (‫الصحراء الغربية‬‎)", "eh", "212", 1, ["5288", "5289"]], ["Yemen (‫اليمن‬‎)", "ye", "967"], ["Zambia", "zm", "260"], ["Zimbabwe", "zw", "263"], ["Åland Islands", "ax", "358", 1, ["18"]]], h = 0; h < g.length; h++) {
        var i = g[h];
        g[h] = {
          name: i[0],
          iso2: i[1],
          dialCode: i[2],
          priority: i[3] || 0,
          areaCodes: i[4] || null
        };
      }
      a.intlTelInputGlobals = {
        getInstance: function getInstance(b) {
          var c = b.getAttribute("data-intl-tel-input-id");
          return a.intlTelInputGlobals.instances[c];
        },
        instances: {}
      };
      var j = 0,
        k = {
          allowDropdown: !0,
          autoHideDialCode: !0,
          autoPlaceholder: "polite",
          customContainer: "",
          customPlaceholder: null,
          dropdownContainer: null,
          excludeCountries: [],
          formatOnDisplay: !0,
          geoIpLookup: null,
          hiddenInput: "",
          initialCountry: "",
          localizedCountries: null,
          nationalMode: !0,
          onlyCountries: [],
          placeholderNumberType: "MOBILE",
          preferredCountries: ["us", "gb"],
          separateDialCode: !1,
          utilsScript: ""
        },
        l = ["800", "822", "833", "844", "855", "866", "877", "880", "881", "882", "883", "884", "885", "886", "887", "888", "889"];
      a.addEventListener("load", function () {
        a.intlTelInputGlobals.windowLoaded = !0;
      });
      var m = function m(a, b) {
          for (var c = Object.keys(a), d = 0; d < c.length; d++) b(c[d], a[c[d]]);
        },
        n = function n(b) {
          m(a.intlTelInputGlobals.instances, function (c) {
            a.intlTelInputGlobals.instances[c][b]();
          });
        },
        o = function () {
          function e(a, b) {
            var c = this;
            d(this, e), this.id = j++, this.a = a, this.b = null, this.c = null;
            var f = b || {};
            this.d = {}, m(k, function (a, b) {
              c.d[a] = f.hasOwnProperty(a) ? f[a] : b;
            }), this.e = Boolean(a.getAttribute("placeholder"));
          }
          return f(e, [{
            key: "_init",
            value: function value() {
              var a = this;
              if (this.d.nationalMode && (this.d.autoHideDialCode = !1), this.d.separateDialCode && (this.d.autoHideDialCode = this.d.nationalMode = !1), this.g = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), this.g && (b.body.classList.add("iti-mobile"), this.d.dropdownContainer || (this.d.dropdownContainer = b.body)), "undefined" != typeof Promise) {
                var c = new Promise(function (b, c) {
                    a.h = b, a.i = c;
                  }),
                  d = new Promise(function (b, c) {
                    a.i0 = b, a.i1 = c;
                  });
                this.promise = Promise.all([c, d]);
              } else this.h = this.i = function () {}, this.i0 = this.i1 = function () {};
              this.s = {}, this._b(), this._f(), this._h(), this._i(), this._i3();
            }
          }, {
            key: "_b",
            value: function value() {
              this._d(), this._d2(), this._e(), this.d.localizedCountries && this._d0(), (this.d.onlyCountries.length || this.d.localizedCountries) && this.p.sort(this._d1);
            }
          }, {
            key: "_c",
            value: function value(a, b, d) {
              b.length > this.dialCodeMaxLen && (this.dialCodeMaxLen = b.length), this.q.hasOwnProperty(b) || (this.q[b] = []);
              for (var e = 0; e < this.q[b].length; e++) if (this.q[b][e] === a) return;
              var f = d !== c ? d : this.q[b].length;
              this.q[b][f] = a;
            }
          }, {
            key: "_d",
            value: function value() {
              if (this.d.onlyCountries.length) {
                var a = this.d.onlyCountries.map(function (a) {
                  return a.toLowerCase();
                });
                this.p = g.filter(function (b) {
                  return a.indexOf(b.iso2) > -1;
                });
              } else if (this.d.excludeCountries.length) {
                var b = this.d.excludeCountries.map(function (a) {
                  return a.toLowerCase();
                });
                this.p = g.filter(function (a) {
                  return -1 === b.indexOf(a.iso2);
                });
              } else this.p = g;
            }
          }, {
            key: "_d0",
            value: function value() {
              for (var a = 0; a < this.p.length; a++) {
                var b = this.p[a].iso2.toLowerCase();
                this.d.localizedCountries.hasOwnProperty(b) && (this.p[a].name = this.d.localizedCountries[b]);
              }
            }
          }, {
            key: "_d1",
            value: function value(a, b) {
              return a.name.localeCompare(b.name);
            }
          }, {
            key: "_d2",
            value: function value() {
              this.dialCodeMaxLen = 0, this.q = {};
              for (var a = 0; a < this.p.length; a++) {
                var b = this.p[a];
                this._c(b.iso2, b.dialCode, b.priority);
              }
              for (var c = 0; c < this.p.length; c++) {
                var d = this.p[c];
                if (d.areaCodes) for (var e = this.q[d.dialCode][0], f = 0; f < d.areaCodes.length; f++) {
                  for (var g = d.areaCodes[f], h = 1; h < g.length; h++) {
                    var i = d.dialCode + g.substr(0, h);
                    this._c(e, i), this._c(d.iso2, i);
                  }
                  this._c(d.iso2, d.dialCode + g);
                }
              }
            }
          }, {
            key: "_e",
            value: function value() {
              this.preferredCountries = [];
              for (var a = 0; a < this.d.preferredCountries.length; a++) {
                var b = this.d.preferredCountries[a].toLowerCase(),
                  c = this._y(b, !1, !0);
                c && this.preferredCountries.push(c);
              }
            }
          }, {
            key: "_e2",
            value: function value(a, c, d) {
              var e = b.createElement(a);
              return c && m(c, function (a, b) {
                return e.setAttribute(a, b);
              }), d && d.appendChild(e), e;
            }
          }, {
            key: "_f",
            value: function value() {
              this.a.setAttribute("autocomplete", "off");
              var a = "iti";
              this.d.allowDropdown && (a += " iti--allow-dropdown"), this.d.separateDialCode && (a += " iti--separate-dial-code"), this.d.customContainer && (a += " ", a += this.d.customContainer);
              var b = this._e2("div", {
                "class": a
              });
              if (this.a.parentNode.insertBefore(b, this.a), this.k = this._e2("div", {
                "class": "iti__flag-container"
              }, b), b.appendChild(this.a), this.selectedFlag = this._e2("div", {
                "class": "iti__selected-flag",
                role: "combobox",
                "aria-owns": "country-listbox"
              }, this.k), this.l = this._e2("div", {
                "class": "iti__flag"
              }, this.selectedFlag), this.d.separateDialCode && (this.t = this._e2("div", {
                "class": "iti__selected-dial-code"
              }, this.selectedFlag)), this.d.allowDropdown && (this.selectedFlag.setAttribute("tabindex", "0"), this.u = this._e2("div", {
                "class": "iti__arrow"
              }, this.selectedFlag), this.m = this._e2("ul", {
                "class": "iti__country-list iti__hide",
                id: "country-listbox",
                "aria-expanded": "false",
                role: "listbox"
              }), this.preferredCountries.length && (this._g(this.preferredCountries, "iti__preferred"), this._e2("li", {
                "class": "iti__divider",
                role: "separator",
                "aria-disabled": "true"
              }, this.m)), this._g(this.p, "iti__standard"), this.d.dropdownContainer ? (this.dropdown = this._e2("div", {
                "class": "iti iti--container"
              }), this.dropdown.appendChild(this.m)) : this.k.appendChild(this.m)), this.d.hiddenInput) {
                var c = this.d.hiddenInput,
                  d = this.a.getAttribute("name");
                if (d) {
                  var e = d.lastIndexOf("[");
                  -1 !== e && (c = "".concat(d.substr(0, e), "[").concat(c, "]"));
                }
                this.hiddenInput = this._e2("input", {
                  type: "hidden",
                  name: c
                }), b.appendChild(this.hiddenInput);
              }
            }
          }, {
            key: "_g",
            value: function value(a, b) {
              for (var c = "", d = 0; d < a.length; d++) {
                var e = a[d];
                c += "<li class='iti__country ".concat(b, "' tabIndex='-1' id='iti-item-").concat(e.iso2, "' role='option' data-dial-code='").concat(e.dialCode, "' data-country-code='").concat(e.iso2, "'>"), c += "<div class='iti__flag-box'><div class='iti__flag iti__".concat(e.iso2, "'></div></div>"), c += "<span class='iti__country-name'>".concat(e.name, "</span>"), c += "<span class='iti__dial-code'>+".concat(e.dialCode, "</span>"), c += "</li>";
              }
              this.m.insertAdjacentHTML("beforeend", c);
            }
          }, {
            key: "_h",
            value: function value() {
              var a = this.a.value,
                b = this._5(a),
                c = this._w(a),
                d = this.d,
                e = d.initialCountry,
                f = d.nationalMode,
                g = d.autoHideDialCode,
                h = d.separateDialCode;
              b && !c ? this._v(a) : "auto" !== e && (e ? this._z(e.toLowerCase()) : b && c ? this._z("us") : (this.j = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.p[0].iso2, a || this._z(this.j)), a || f || g || h || (this.a.value = "+".concat(this.s.dialCode))), a && this._u(a);
            }
          }, {
            key: "_i",
            value: function value() {
              this._j(), this.d.autoHideDialCode && this._l(), this.d.allowDropdown && this._i2(), this.hiddenInput && this._i0();
            }
          }, {
            key: "_i0",
            value: function value() {
              var a = this;
              this._a14 = function () {
                a.hiddenInput.value = a.getNumber();
              }, this.a.form && this.a.form.addEventListener("submit", this._a14);
            }
          }, {
            key: "_i1",
            value: function value() {
              for (var a = this.a; a && "LABEL" !== a.tagName;) a = a.parentNode;
              return a;
            }
          }, {
            key: "_i2",
            value: function value() {
              var a = this;
              this._a9 = function (b) {
                a.m.classList.contains("iti__hide") ? a.a.focus() : b.preventDefault();
              };
              var b = this._i1();
              b && b.addEventListener("click", this._a9), this._a10 = function () {
                !a.m.classList.contains("iti__hide") || a.a.disabled || a.a.readOnly || a._n();
              }, this.selectedFlag.addEventListener("click", this._a10), this._a11 = function (b) {
                a.m.classList.contains("iti__hide") && -1 !== ["ArrowUp", "ArrowDown", " ", "Enter"].indexOf(b.key) && (b.preventDefault(), b.stopPropagation(), a._n()), "Tab" === b.key && a._2();
              }, this.k.addEventListener("keydown", this._a11);
            }
          }, {
            key: "_i3",
            value: function value() {
              var b = this;
              this.d.utilsScript && !a.intlTelInputUtils ? a.intlTelInputGlobals.windowLoaded ? a.intlTelInputGlobals.loadUtils(this.d.utilsScript) : a.addEventListener("load", function () {
                a.intlTelInputGlobals.loadUtils(b.d.utilsScript);
              }) : this.i0(), "auto" === this.d.initialCountry ? this._i4() : this.h();
            }
          }, {
            key: "_i4",
            value: function value() {
              a.intlTelInputGlobals.autoCountry ? this.handleAutoCountry() : a.intlTelInputGlobals.startedLoadingAutoCountry || (a.intlTelInputGlobals.startedLoadingAutoCountry = !0, "function" == typeof this.d.geoIpLookup && this.d.geoIpLookup(function (b) {
                a.intlTelInputGlobals.autoCountry = b.toLowerCase(), setTimeout(function () {
                  return n("handleAutoCountry");
                });
              }, function () {
                return n("rejectAutoCountryPromise");
              }));
            }
          }, {
            key: "_j",
            value: function value() {
              var a = this;
              this._a12 = function () {
                a._v(a.a.value) && a._8();
              }, this.a.addEventListener("keyup", this._a12), this._a13 = function () {
                setTimeout(a._a12);
              }, this.a.addEventListener("cut", this._a13), this.a.addEventListener("paste", this._a13);
            }
          }, {
            key: "_j2",
            value: function value(a) {
              var b = this.a.getAttribute("maxlength");
              return b && a.length > b ? a.substr(0, b) : a;
            }
          }, {
            key: "_l",
            value: function value() {
              var a = this;
              this._a8 = function () {
                a._l2();
              }, this.a.form && this.a.form.addEventListener("submit", this._a8), this.a.addEventListener("blur", this._a8);
            }
          }, {
            key: "_l2",
            value: function value() {
              if ("+" === this.a.value.charAt(0)) {
                var a = this._m(this.a.value);
                a && this.s.dialCode !== a || (this.a.value = "");
              }
            }
          }, {
            key: "_m",
            value: function value(a) {
              return a.replace(/\D/g, "");
            }
          }, {
            key: "_m2",
            value: function value(a) {
              var c = b.createEvent("Event");
              c.initEvent(a, !0, !0), this.a.dispatchEvent(c);
            }
          }, {
            key: "_n",
            value: function value() {
              this.m.classList.remove("iti__hide"), this.m.setAttribute("aria-expanded", "true"), this._o(), this.b && (this._x(this.b, !1), this._3(this.b, !0)), this._p(), this.u.classList.add("iti__arrow--up"), this._m2("open:countrydropdown");
            }
          }, {
            key: "_n2",
            value: function value(a, b, c) {
              c && !a.classList.contains(b) ? a.classList.add(b) : !c && a.classList.contains(b) && a.classList.remove(b);
            }
          }, {
            key: "_o",
            value: function value() {
              var c = this;
              if (this.d.dropdownContainer && this.d.dropdownContainer.appendChild(this.dropdown), !this.g) {
                var d = this.a.getBoundingClientRect(),
                  e = a.pageYOffset || b.documentElement.scrollTop,
                  f = d.top + e,
                  g = this.m.offsetHeight,
                  h = f + this.a.offsetHeight + g < e + a.innerHeight,
                  i = f - g > e;
                if (this._n2(this.m, "iti__country-list--dropup", !h && i), this.d.dropdownContainer) {
                  var j = !h && i ? 0 : this.a.offsetHeight;
                  this.dropdown.style.top = "".concat(f + j, "px"), this.dropdown.style.left = "".concat(d.left + b.body.scrollLeft, "px"), this._a4 = function () {
                    return c._2();
                  }, a.addEventListener("scroll", this._a4);
                }
              }
            }
          }, {
            key: "_o2",
            value: function value(a) {
              for (var b = a; b && b !== this.m && !b.classList.contains("iti__country");) b = b.parentNode;
              return b === this.m ? null : b;
            }
          }, {
            key: "_p",
            value: function value() {
              var a = this;
              this._a0 = function (b) {
                var c = a._o2(b.target);
                c && a._x(c, !1);
              }, this.m.addEventListener("mouseover", this._a0), this._a1 = function (b) {
                var c = a._o2(b.target);
                c && a._1(c);
              }, this.m.addEventListener("click", this._a1);
              var c = !0;
              this._a2 = function () {
                c || a._2(), c = !1;
              }, b.documentElement.addEventListener("click", this._a2);
              var d = "",
                e = null;
              this._a3 = function (b) {
                b.preventDefault(), "ArrowUp" === b.key || "ArrowDown" === b.key ? a._q(b.key) : "Enter" === b.key ? a._r() : "Escape" === b.key ? a._2() : /^[a-zA-ZÀ-ÿ ]$/.test(b.key) && (e && clearTimeout(e), d += b.key.toLowerCase(), a._s(d), e = setTimeout(function () {
                  d = "";
                }, 1e3));
              }, b.addEventListener("keydown", this._a3);
            }
          }, {
            key: "_q",
            value: function value(a) {
              var b = "ArrowUp" === a ? this.c.previousElementSibling : this.c.nextElementSibling;
              b && (b.classList.contains("iti__divider") && (b = "ArrowUp" === a ? b.previousElementSibling : b.nextElementSibling), this._x(b, !0));
            }
          }, {
            key: "_r",
            value: function value() {
              this.c && this._1(this.c);
            }
          }, {
            key: "_s",
            value: function value(a) {
              for (var b = 0; b < this.p.length; b++) if (this._t(this.p[b].name, a)) {
                var c = this.m.querySelector("#iti-item-".concat(this.p[b].iso2));
                this._x(c, !1), this._3(c, !0);
                break;
              }
            }
          }, {
            key: "_t",
            value: function value(a, b) {
              return a.substr(0, b.length).toLowerCase() === b;
            }
          }, {
            key: "_u",
            value: function value(b) {
              var c = b;
              if (this.d.formatOnDisplay && a.intlTelInputUtils && this.s) {
                var d = !this.d.separateDialCode && (this.d.nationalMode || "+" !== c.charAt(0)),
                  e = intlTelInputUtils.numberFormat,
                  f = e.NATIONAL,
                  g = e.INTERNATIONAL,
                  h = d ? f : g;
                c = intlTelInputUtils.formatNumber(c, this.s.iso2, h);
              }
              c = this._7(c), this.a.value = c;
            }
          }, {
            key: "_v",
            value: function value(a) {
              var b = a,
                c = this.s.dialCode,
                d = "1" === c;
              b && this.d.nationalMode && d && "+" !== b.charAt(0) && ("1" !== b.charAt(0) && (b = "1".concat(b)), b = "+".concat(b)), this.d.separateDialCode && c && "+" !== b.charAt(0) && (b = "+".concat(c).concat(b));
              var e = this._5(b),
                f = this._m(b),
                g = null;
              if (e) {
                var h = this.q[this._m(e)],
                  i = -1 !== h.indexOf(this.s.iso2) && f.length <= e.length - 1;
                if (!("1" === c && this._w(f)) && !i) for (var j = 0; j < h.length; j++) if (h[j]) {
                  g = h[j];
                  break;
                }
              } else "+" === b.charAt(0) && f.length ? g = "" : b && "+" !== b || (g = this.j);
              return null !== g && this._z(g);
            }
          }, {
            key: "_w",
            value: function value(a) {
              var b = this._m(a);
              if ("1" === b.charAt(0)) {
                var c = b.substr(1, 3);
                return -1 !== l.indexOf(c);
              }
              return !1;
            }
          }, {
            key: "_x",
            value: function value(a, b) {
              var c = this.c;
              c && c.classList.remove("iti__highlight"), this.c = a, this.c.classList.add("iti__highlight"), b && this.c.focus();
            }
          }, {
            key: "_y",
            value: function value(a, b, c) {
              for (var d = b ? g : this.p, e = 0; e < d.length; e++) if (d[e].iso2 === a) return d[e];
              if (c) return null;
              throw new Error("No country data for '".concat(a, "'"));
            }
          }, {
            key: "_z",
            value: function value(a) {
              var b = this.s.iso2 ? this.s : {};
              this.s = a ? this._y(a, !1, !1) : {}, this.s.iso2 && (this.j = this.s.iso2), this.l.setAttribute("class", "iti__flag iti__".concat(a));
              var c = a ? "".concat(this.s.name, ": +").concat(this.s.dialCode) : "Unknown";
              if (this.selectedFlag.setAttribute("title", c), this.d.separateDialCode) {
                var d = this.s.dialCode ? "+".concat(this.s.dialCode) : "";
                this.t.innerHTML = d;
                var e = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();
                this.a.style.paddingLeft = "".concat(e + 6, "px");
              }
              if (this._0(), this.d.allowDropdown) {
                var f = this.b;
                if (f && (f.classList.remove("iti__active"), f.setAttribute("aria-selected", "false")), a) {
                  var g = this.m.querySelector("#iti-item-".concat(a));
                  g.setAttribute("aria-selected", "true"), g.classList.add("iti__active"), this.b = g, this.m.setAttribute("aria-activedescendant", g.getAttribute("id"));
                }
              }
              return b.iso2 !== a;
            }
          }, {
            key: "_getHiddenSelectedFlagWidth",
            value: function value() {
              var a = this.a.parentNode.cloneNode();
              a.style.visibility = "hidden", b.body.appendChild(a);
              var c = this.selectedFlag.cloneNode(!0);
              a.appendChild(c);
              var d = c.offsetWidth;
              return a.remove(), d;
            }
          }, {
            key: "_0",
            value: function value() {
              var b = "aggressive" === this.d.autoPlaceholder || !this.e && "polite" === this.d.autoPlaceholder;
              if (a.intlTelInputUtils && b) {
                var c = intlTelInputUtils.numberType[this.d.placeholderNumberType],
                  d = this.s.iso2 ? intlTelInputUtils.getExampleNumber(this.s.iso2, this.d.nationalMode, c) : "";
                d = this._7(d), "function" == typeof this.d.customPlaceholder && (d = this.d.customPlaceholder(d, this.s)), this.a.setAttribute("placeholder", d);
              }
            }
          }, {
            key: "_1",
            value: function value(a) {
              var b = this._z(a.getAttribute("data-country-code"));
              this._2(), this._4(a.getAttribute("data-dial-code"), !0), this.a.focus();
              var c = this.a.value.length;
              this.a.setSelectionRange(c, c), b && this._8();
            }
          }, {
            key: "_2",
            value: function value() {
              this.m.classList.add("iti__hide"), this.m.setAttribute("aria-expanded", "false"), this.u.classList.remove("iti__arrow--up"), b.removeEventListener("keydown", this._a3), b.documentElement.removeEventListener("click", this._a2), this.m.removeEventListener("mouseover", this._a0), this.m.removeEventListener("click", this._a1), this.d.dropdownContainer && (this.g || a.removeEventListener("scroll", this._a4), this.dropdown.parentNode && this.dropdown.parentNode.removeChild(this.dropdown)), this._m2("close:countrydropdown");
            }
          }, {
            key: "_3",
            value: function value(c, d) {
              var e = this.m,
                f = a.pageYOffset || b.documentElement.scrollTop,
                g = e.offsetHeight,
                h = e.getBoundingClientRect().top + f,
                i = h + g,
                j = c.offsetHeight,
                k = c.getBoundingClientRect().top + f,
                l = k + j,
                m = k - h + e.scrollTop,
                n = g / 2 - j / 2;
              if (k < h) d && (m -= n), e.scrollTop = m;else if (l > i) {
                d && (m += n);
                var o = g - j;
                e.scrollTop = m - o;
              }
            }
          }, {
            key: "_4",
            value: function value(a, b) {
              var c,
                d = this.a.value,
                e = "+".concat(a);
              if ("+" === d.charAt(0)) {
                var f = this._5(d);
                c = f ? d.replace(f, e) : e;
              } else {
                if (this.d.nationalMode || this.d.separateDialCode) return;
                if (d) c = e + d;else {
                  if (!b && this.d.autoHideDialCode) return;
                  c = e;
                }
              }
              this.a.value = c;
            }
          }, {
            key: "_5",
            value: function value(a) {
              var b = "";
              if ("+" === a.charAt(0)) for (var c = "", d = 0; d < a.length; d++) {
                var e = a.charAt(d);
                if (!isNaN(parseInt(e, 10)) && (c += e, this.q[c] && (b = a.substr(0, d + 1)), c.length === this.dialCodeMaxLen)) break;
              }
              return b;
            }
          }, {
            key: "_6",
            value: function value() {
              var a = this.a.value.trim(),
                b = this.s.dialCode,
                c = this._m(a);
              return (this.d.separateDialCode && "+" !== a.charAt(0) && b && c ? "+".concat(b) : "") + a;
            }
          }, {
            key: "_7",
            value: function value(a) {
              var b = a;
              if (this.d.separateDialCode) {
                var c = this._5(b);
                if (c) {
                  c = "+".concat(this.s.dialCode);
                  var d = " " === b[c.length] || "-" === b[c.length] ? c.length + 1 : c.length;
                  b = b.substr(d);
                }
              }
              return this._j2(b);
            }
          }, {
            key: "_8",
            value: function value() {
              this._m2("countrychange");
            }
          }, {
            key: "handleAutoCountry",
            value: function value() {
              "auto" === this.d.initialCountry && (this.j = a.intlTelInputGlobals.autoCountry, this.a.value || this.setCountry(this.j), this.h());
            }
          }, {
            key: "handleUtils",
            value: function value() {
              a.intlTelInputUtils && (this.a.value && this._u(this.a.value), this._0()), this.i0();
            }
          }, {
            key: "destroy",
            value: function value() {
              var b = this.a.form;
              if (this.d.allowDropdown) {
                this._2(), this.selectedFlag.removeEventListener("click", this._a10), this.k.removeEventListener("keydown", this._a11);
                var c = this._i1();
                c && c.removeEventListener("click", this._a9);
              }
              this.hiddenInput && b && b.removeEventListener("submit", this._a14), this.d.autoHideDialCode && (b && b.removeEventListener("submit", this._a8), this.a.removeEventListener("blur", this._a8)), this.a.removeEventListener("keyup", this._a12), this.a.removeEventListener("cut", this._a13), this.a.removeEventListener("paste", this._a13), this.a.removeAttribute("data-intl-tel-input-id");
              var d = this.a.parentNode;
              d.parentNode.insertBefore(this.a, d), d.parentNode.removeChild(d), delete a.intlTelInputGlobals.instances[this.id];
            }
          }, {
            key: "getExtension",
            value: function value() {
              return a.intlTelInputUtils ? intlTelInputUtils.getExtension(this._6(), this.s.iso2) : "";
            }
          }, {
            key: "getNumber",
            value: function value(b) {
              if (a.intlTelInputUtils) {
                var c = this.s.iso2;
                return intlTelInputUtils.formatNumber(this._6(), c, b);
              }
              return "";
            }
          }, {
            key: "getNumberType",
            value: function value() {
              return a.intlTelInputUtils ? intlTelInputUtils.getNumberType(this._6(), this.s.iso2) : -99;
            }
          }, {
            key: "getSelectedCountryData",
            value: function value() {
              return this.s;
            }
          }, {
            key: "getValidationError",
            value: function value() {
              if (a.intlTelInputUtils) {
                var b = this.s.iso2;
                return intlTelInputUtils.getValidationError(this._6(), b);
              }
              return -99;
            }
          }, {
            key: "isValidNumber",
            value: function value() {
              var b = this._6().trim(),
                c = this.d.nationalMode ? this.s.iso2 : "";
              return a.intlTelInputUtils ? intlTelInputUtils.isValidNumber(b, c) : null;
            }
          }, {
            key: "setCountry",
            value: function value(a) {
              var b = a.toLowerCase();
              this.l.classList.contains("iti__".concat(b)) || (this._z(b), this._4(this.s.dialCode, !1), this._8());
            }
          }, {
            key: "setNumber",
            value: function value(a) {
              var b = this._v(a);
              this._u(a), b && this._8();
            }
          }, {
            key: "setPlaceholderNumberType",
            value: function value(a) {
              this.d.placeholderNumberType = a, this._0();
            }
          }]), e;
        }();
      a.intlTelInputGlobals.getCountryData = function () {
        return g;
      };
      var p = function p(a, c, d) {
        var e = b.createElement("script");
        e.onload = function () {
          n("handleUtils"), c && c();
        }, e.onerror = function () {
          n("rejectUtilsScriptPromise"), d && d();
        }, e.className = "iti-load-utils", e.async = !0, e.src = a, b.body.appendChild(e);
      };
      return a.intlTelInputGlobals.loadUtils = function (b) {
        if (!a.intlTelInputUtils && !a.intlTelInputGlobals.startedLoadingUtilsScript) {
          if (a.intlTelInputGlobals.startedLoadingUtilsScript = !0, "undefined" != typeof Promise) return new Promise(function (a, c) {
            return p(b, a, c);
          });
          p(b);
        }
        return null;
      }, a.intlTelInputGlobals.defaults = k, a.intlTelInputGlobals.version = "16.0.0", function (b, c) {
        var d = new o(b, c);
        return d._init(), b.setAttribute("data-intl-tel-input-id", d.id), a.intlTelInputGlobals.instances[d.id] = d, d;
      };
    }();
  }(window, document);
  "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = b : window.intlTelInput = b;
}();

},{}],5:[function(require,module,exports){
"use strict";

/*!
  Zoom 1.7.21
  license: MIT
  http://www.jacklmoore.com/zoom
*/
(function ($) {
  var defaults = {
    url: false,
    callback: false,
    target: false,
    duration: 120,
    on: 'mouseover',
    // other options: grab, click, toggle
    touch: true,
    // enables a touch fallback
    onZoomIn: false,
    onZoomOut: false,
    magnify: 1
  };

  // Core Zoom Logic, independent of event listeners.
  $.zoom = function (target, source, img, magnify) {
    var targetHeight,
      targetWidth,
      sourceHeight,
      sourceWidth,
      xRatio,
      yRatio,
      offset,
      $target = $(target),
      position = $target.css('position'),
      $source = $(source);

    // The parent element needs positioning so that the zoomed element can be correctly positioned within.
    target.style.position = /(absolute|fixed)/.test(position) ? position : 'relative';
    target.style.overflow = 'hidden';
    img.style.width = img.style.height = '';
    $(img).addClass('zoomImg').css({
      position: 'absolute',
      top: 0,
      left: 0,
      opacity: 0,
      width: img.width * magnify,
      height: img.height * magnify,
      border: 'none',
      maxWidth: 'none',
      maxHeight: 'none'
    }).appendTo(target);
    return {
      init: function init() {
        targetWidth = $target.outerWidth();
        targetHeight = $target.outerHeight();
        if (source === target) {
          sourceWidth = targetWidth;
          sourceHeight = targetHeight;
        } else {
          sourceWidth = $source.outerWidth();
          sourceHeight = $source.outerHeight();
        }
        xRatio = (img.width - targetWidth) / sourceWidth;
        yRatio = (img.height - targetHeight) / sourceHeight;
        offset = $source.offset();
      },
      move: function move(e) {
        var left = e.pageX - offset.left,
          top = e.pageY - offset.top;
        top = Math.max(Math.min(top, sourceHeight), 0);
        left = Math.max(Math.min(left, sourceWidth), 0);
        img.style.left = left * -xRatio + 'px';
        img.style.top = top * -yRatio + 'px';
      }
    };
  };
  $.fn.zoom = function (options) {
    return this.each(function () {
      var settings = $.extend({}, defaults, options || {}),
        //target will display the zoomed image
        target = settings.target && $(settings.target)[0] || this,
        //source will provide zoom location info (thumbnail)
        source = this,
        $source = $(source),
        img = document.createElement('img'),
        $img = $(img),
        mousemove = 'mousemove.zoom',
        clicked = false,
        touched = false;

      // If a url wasn't specified, look for an image element.
      if (!settings.url) {
        var srcElement = source.querySelector('img');
        if (srcElement) {
          settings.url = srcElement.getAttribute('data-src') || srcElement.currentSrc || srcElement.src;
        }
        if (!settings.url) {
          return;
        }
      }
      $source.one('zoom.destroy', function (position, overflow) {
        $source.off(".zoom");
        target.style.position = position;
        target.style.overflow = overflow;
        img.onload = null;
        $img.remove();
      }.bind(this, target.style.position, target.style.overflow));
      img.onload = function () {
        var zoom = $.zoom(target, source, img, settings.magnify);
        function start(e) {
          zoom.init();
          zoom.move(e);

          // Skip the fade-in for IE8 and lower since it chokes on fading-in
          // and changing position based on mousemovement at the same time.
          $img.stop().fadeTo($.support.opacity ? settings.duration : 0, 1, $.isFunction(settings.onZoomIn) ? settings.onZoomIn.call(img) : false);
        }
        function stop() {
          $img.stop().fadeTo(settings.duration, 0, $.isFunction(settings.onZoomOut) ? settings.onZoomOut.call(img) : false);
        }

        // Mouse events
        if (settings.on === 'grab') {
          $source.on('mousedown.zoom', function (e) {
            if (e.which === 1) {
              $(document).one('mouseup.zoom', function () {
                stop();
                $(document).off(mousemove, zoom.move);
              });
              start(e);
              $(document).on(mousemove, zoom.move);
              e.preventDefault();
            }
          });
        } else if (settings.on === 'click') {
          $source.on('click.zoom', function (e) {
            if (clicked) {
              // bubble the event up to the document to trigger the unbind.
              return;
            } else {
              clicked = true;
              start(e);
              $(document).on(mousemove, zoom.move);
              $(document).one('click.zoom', function () {
                stop();
                clicked = false;
                $(document).off(mousemove, zoom.move);
              });
              return false;
            }
          });
        } else if (settings.on === 'toggle') {
          $source.on('click.zoom', function (e) {
            if (clicked) {
              stop();
            } else {
              start(e);
            }
            clicked = !clicked;
          });
        } else if (settings.on === 'mouseover') {
          zoom.init(); // Preemptively call init because IE7 will fire the mousemove handler before the hover handler.

          $source.on('mouseenter.zoom', start).on('mouseleave.zoom', stop).on(mousemove, zoom.move);
        }

        // Touch fallback
        if (settings.touch) {
          $source.on('touchstart.zoom', function (e) {
            e.preventDefault();
            if (touched) {
              touched = false;
              stop();
            } else {
              touched = true;
              start(e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]);
            }
          }).on('touchmove.zoom', function (e) {
            e.preventDefault();
            zoom.move(e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]);
          }).on('touchend.zoom', function (e) {
            e.preventDefault();
            if (touched) {
              touched = false;
              stop();
            }
          });
        }
        if ($.isFunction(settings.callback)) {
          settings.callback.call(img);
        }
      };
      img.setAttribute('role', 'presentation');
      img.alt = '';
      img.src = settings.url;
    });
  };
  $.fn.zoom.defaults = defaults;
})(window.jQuery);

},{}],6:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
* country-region-selector
* ------------------------
* 1.0.0
* @author Ben Keen
* @repo https://github.com/benkeen/country-region-selector
* @licence MIT
*/

!function (a, n) {
  if ("function" == typeof define && define.amd) define([], n);else if ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports))) try {
    module.exports = n(require());
  } catch (a) {
    module.exports = n();
  } else a.crs = n();
}(void 0, function () {
  "use strict";

  var m = !0,
    h = !0,
    M = [],
    l = [["Afghanistan", "AF", "Badakhshan~BDS|Badghis~BDG|Baghlan~BGL|Balkh~BAL|Bamyan~BAM|Daykundi~DAY|Farah~FRA|Faryab~FYB|Ghazni~GHA|Ghor~GHO|Helmand~HEL|Herat~HER|Jowzjan~JOW|Kabul~KAB|Kandahar~KAN|Kapisa~KAP|Khost~KHO|Kunar~KNR|Kunduz~KDZ|Laghman~LAG|Logar~LOW|Maidan Wardak~WAR|Nangarhar~NAN|Nimruz~NIM|Nuristan~NUR|Paktia~PIA|Paktika~PKA|Panjshir~PAN|Parwan~PAR|Samangan~SAM|Sar-e Pol~SAR|Takhar~TAK|Urozgan~ORU|Zabul~ZAB"], ["Åland Islands", "AX", "Brändö~BR|Eckerö~EC|Finström~FN|Föglö~FG|Geta~GT|Hammarland~HM|Jomala~JM|Kumlinge~KM|Kökar~KK|Lemland~LE|Lumparland~LU|Mariehamn~MH|Saltvik~SV|Sottunga~ST|Sund~SD|Vårdö~VR"], ["Albania", "AL", "Berat~01|Dibër~09|Durrës~02|Elbasan~03|Fier~04|Gjirokastër~05|Korçë~06|Kukës~07|Lezhë~08|Shkodër~10|Tirana~11|Vlorë~12"], ["Algeria", "DZ", "Adrar~01|Aïn Defla~44|Aïn Témouchent~46|Algiers~16|Annaba~23|Batna~05|Béchar~08|Béjaïa~06|Biskra~07|Blida~09|Bordj Bou Arréridj~34|Bouïra~10|Boumerdès~35|Chlef~02|Constantine~25|Djelfa~17|El Bayadh~32|El Oued~39|El Tarf~36|Ghardaïa~47|Guelma~24|Illizi~33|Jijel~18|Khenchela~40|Laghouat~03|Mascara~29|Médéa~26|Mila~43|Mostaganem~27|Msila~28|Naâma~45|Oran~31|Ouargla~30|Oum el Bouaghi~04|Relizane~48|Saïda~20|Sétif~19|Sidi Bel Abbès~22|Skikda~21|Souk Ahras~41|Tamanghasset~11|Tébessa~12|Tiaret~14|Tindouf~37|Tipaza~42|Tissemsilt~38|Tizi Ouzou~15|Tlemcen~13"], ["American Samoa", "AS", "Tutuila~01|Aunu'u~02|Ta'ū~03|Ofu‑Olosega~04|Rose Atoll~21|Swains Island~22"], ["Andorra", "AD", "Andorra la Vella~07|Canillo~02|Encamp~03|Escaldes-Engordany~08|La Massana~04|Ordino~05|Sant Julià de Lòria~06"], ["Angola", "AO", "Bengo~BGO|Benguela~BGU|Bié~BIE|Cabinda~CAB|Cuando Cubango~CCU|Cuanza Norte~CNO|Cuanza Sul~CUS|Cunene~CNN|Huambo~HUA|Huíla~HUI|Luanda~LUA|Lunda Norte~LNO|Lunda Sul~LSU|Malanje~MAL|Moxico~MOX|Namibe~NAM|Uíge~UIG|Zaire~ZAI"], ["Anguilla", "AI", "Anguilla~01|Anguillita Island~02|Blowing Rock~03|Cove Cay~04|Crocus Cay~05|Deadman's Cay~06|Dog Island~07|East Cay~08|Little Island~09|Little Scrub Island~10|Mid Cay~11|North Cay~12|Prickly Pear Cays~13|Rabbit Island~14|Sandy Island/Sand Island~15|Scilly Cay~16|Scrub Island~17|Seal Island~18|Sombrero/Hat Island~19|South Cay~20|South Wager Island~21|West Cay~22"], ["Antarctica", "AQ", "Antarctica~AQ"], ["Antigua and Barbuda", "AG", "Antigua Island~01|Barbuda Island~02|Bird Island~04|Bishop Island~05|Blake Island~06|Crump Island~09|Dulcina Island~10|Exchange Island~11|Five Islands~12|Great Bird Island~13|Green Island~14|Guiana Island~15|Hawes Island~17|Hells Gate Island~16|Henry Island~18|Johnson Island~19|Kid Island~20|Lobster Island~22|Maiden Island~24|Moor Island~25|Nanny Island~26|Pelican Island~27|Prickly Pear Island~28|Rabbit Island~29|Red Head Island~31|Redonda Island~03|Sandy Island~32|Smith Island~33|The Sisters~34|Vernon Island~35|Wicked Will Island~36|York Island~37"], ["Argentina", "AR", "Buenos Aires~B|Capital Federal~C|Catamarca~K|Chaco~H|Chubut~U|Córdoba~X|Corrientes~W|Entre Ríos~E|Formosa~P|Jujuy~Y|La Pampa~L|La Rioja~F|Mendoza~M|Misiones~N|Neuquén~Q|Río Negro~R|Salta~A|San Juan~J|San Luis~D|Santa Cruz~Z|Santa Fe~S|Santiago del Estero~G|Tierra del Fuego~V|Tucumán~T"], ["Armenia", "AM", "Aragatsotn~AG|Ararat~AR|Armavir~AV|Gegharkunik~GR|Kotayk~KT|Lori~LO|Shirak~SH|Syunik~SU|Tavush~TV|Vayots Dzor~VD|Yerevan~ER"], ["Aruba", "AW", "Aruba~AW"], ["Australia", "AU", "Australian Capital Territory~ACT|New South Wales~NSW|Northern Territory~NT|Queensland~QLD|South Australia~SA|Tasmania~TAS|Victoria~VIC|Western Australia~WA"], ["Austria", "AT", "Burgenland~1|Kärnten~2|Niederösterreich~3|Oberösterreich~4|Salzburg~5|Steiermark~6|Tirol~7|Vorarlberg~8|Wien~9"], ["Azerbaijan", "AZ", "Abşeron~ABS|Ağcabədi~AGC|Ağdam~AGM|Ağdaş~AGS|Ağstafa~AGA|Ağsu~AGU|Astara~AST|Babək~BAB|Balakən~BAL|Bərdə~BAR|Beyləqan~BEY|Biləsuvar~BIL|Cəbrayıl~CAB|Cəlilabad~CAL|Culfa~CUL|Daşkəsən~DAS|Füzuli~FUZ|Gədəbəy~GAD|Goranboy~GOR|Göyçay~GOY|Göygöl~GYG|Hacıqabul~HAC|İmişli~IMI|İsmayıllı~ISM|Kəlbəcər~KAL|Kǝngǝrli~KAN|Kürdəmir~KUR|Laçın~LAC|Lənkəran~LAN|Lerik~LER|Masallı~MAS|Neftçala~NEF|Oğuz~OGU|Ordubad~ORD|Qəbələ~QAB|Qax~QAX|Qazax~QAZ|Qobustan~QOB|Quba~QBA|Qubadli~QBI|Qusar~QUS|Saatlı~SAT|Sabirabad~SAB|Şabran~SBN|Sədərək~SAD|Şahbuz~SAH|Şəki~SAK|Salyan~SAL|Şamaxı~SMI|Şəmkir~SKR|Samux~SMX|Şərur~SAR|Siyəzən~SIY|Şuşa~SUS|Tərtər~TAR|Tovuz~TOV|Ucar~UCA|Xaçmaz~XAC|Xızı~XIZ|Xocalı~XCI|Xocavənd~XVD|Yardımlı~YAR|Yevlax~YEV|Zəngilan~ZAN|Zaqatala~ZAQ|Zərdab~ZAR"], ["Bahamas", "BS", "Acklins Island~01|Berry Islands~22|Bimini~02|Black Point~23|Cat Island~03|Central Abaco~24|Crooked Island and Long Cay~28|East Grand Bahama~29|Exuma~04|Freeport~05|Fresh Creek~06|Governor's Harbour~07|Green Turtle Cay~08|Harbour Island~09|High Rock~10|Inagua~11|Kemps Bay~12|Long Island~13|Marsh Harbour~14|Mayaguana~15|Moore’s Island~40|New Providence~16|Nichollstown and Berry Islands~17|North Abaco~42|North Andros~41|North Eleuthera~33|Ragged Island~18|Rock Sound~19|San Salvador and Rum Cay~20|Sandy Point~21|South Abaco~35|South Andros~36|South Eleuthera~37|West Grand Bahama~39"], ["Bahrain", "BH", "Al Janūbīyah~14|Al Manāmah~13|Al Muḩarraq~15|Al Wusţá~16|Ash Shamālīyah~17"], ["Bangladesh", "BD", "Barisal~A|Chittagong~B|Dhaka~C|Khulna~D|Mymensingh~M|Rajshahi~E|Rangpur~F|Sylhet~G"], ["Barbados", "BB", "Christ Church~01|Saint Andrew~02|Saint George~03|Saint James~04|Saint John~05|Saint Joseph~06|Saint Lucy~07|Saint Michael~08|Saint Peter~09|Saint Philip~10|Saint Thomas~11"], ["Belarus", "BY", "Brest voblast~BR|Gorod Minsk~HO|Homiel voblast~HO|Hrodna voblast~HR|Mahilyow voblast~MA|Minsk voblast~MI|Vitsebsk voblast~VI"], ["Belgium", "BE", "Bruxelles-Capitale~BRU|Région Flamande~VLG|Région Wallonië~WAL"], ["Belize", "BZ", "Belize District~BZ|Cayo District~CY|Corozal District~CZL|Orange Walk District~OW|Stann Creek District~SC|Toledo District~TOL"], ["Benin", "BJ", "Alibori~AL|Atakora~AK|Atlantique~AQ|Borgou~BO|Collines Department~CO|Donga~DO|Kouffo~KO|Littoral Department~LI|Mono Department~MO|Ouémé~OU|Plateau~PL|Zou~ZO"], ["Bermuda", "BM", "City of Hamilton~03|Devonshire Parish~01|Hamilton Parish~02|Paget Parish~04|Pembroke Parish~05|Sandys Parish~08|Smith's Parish~09|Southampton Parish~10|St. George's Parish~07|Town of St. George~06|Warwick Parish~11"], ["Bhutan", "BT", "Bumthang~33|Chhukha~12|Dagana~22|Gasa~GA|Haa~13|Lhuntse~44|Mongar~42|Paro~11|Pemagatshel~43|Punakha~23|Samdrup Jongkhar~45|Samtse~14|Sarpang~31|Thimphu~15|Trashigang~41|Trashiyangtse~TY|Trongsa~32|Tsirang~21|Wangdue Phodrang~24|Zhemgang~34"], ["Bolivia", "BO", "Beni~B|Chuquisaca~H|Cochabamba~C|La Paz~L|Oruro~O|Pando~N|Potosí~P|Santa Cruz~S|Tarija~T"], ["Bonaire, Sint Eustatius and Saba", "BQ", "Bonaire~BO|Saba Isand~SA|Sint Eustatius~SE"], ["Bosnia and Herzegovina", "BA", "Brčko Distrikt~BRC|Federacija Bosne i Hercegovine~BIH|Republika Srpska~SRP"], ["Botswana", "BW", "Central~CE|Ghanzi~GH|Kgalagadi~KG|Kgatleng~KL|Kweneng~KW|North West~NW|North-East~NE|South East~SE|Southern~SO"], ["Bouvet Island", "BV", "Bouvet Island~BV"], ["Brazil", "BR", "Acre~AC|Alagoas~AL|Amapá~AP|Amazonas~AM|Bahia~BA|Ceará~CE|Distrito Federal~DF|Espírito Santo~ES|Goiás~GO|Maranhão~MA|Mato Grosso~MT|Mato Grosso do Sul~MS|Minas Gerais~MG|Pará~PA|Paraíba~PB|Paraná~PR|Pernambuco~PE|Piauí~PI|Rio de Janeiro~RJ|Rio Grande do Norte~RN|Rio Grande do Sul~RS|Rondônia~RO|Roraima~RR|Santa Catarina~SC|São Paulo~SP|Sergipe~SE|Tocantins~TO"], ["British Indian Ocean Territory", "IO", "British Indian Ocean Territory~IO"], ["Brunei Darussalam", "BN", "Belait~BE|Brunei Muara~BM|Temburong~TE|Tutong~TU"], ["Bulgaria", "BG", "Blagoevgrad~01|Burgas~02|Dobrich~08|Gabrovo~07|Jambol~28|Khaskovo~26|Kjustendil~10|Kurdzhali~09|Lovech~11|Montana~12|Pazardzhik~13|Pernik~14|Pleven~15|Plovdiv~16|Razgrad~17|Ruse~18|Shumen~27|Silistra~19|Sliven~20|Smoljan~21|Sofija~23|Sofija-Grad~22|Stara Zagora~24|Turgovishhe~25|Varna~03|Veliko Turnovo~04|Vidin~05|Vraca~06"], ["Burkina Faso", "BF", "Balé~BAL|Bam/Lake Bam~BAM|Banwa Province~BAN|Bazèga~BAZ|Bougouriba~BGR|Boulgou Province~BLG|Boulkiemdé~BLK|Comoé/Komoe~COM|Ganzourgou Province~GAN|Gnagna~GNA|Gourma Province~GOU|Houet~HOU|Ioba~IOB|Kadiogo~KAD|Kénédougou~KEN|Komondjari~KMD|Kompienga~KMP|Kossi Province~KOS|Koulpélogo~KOP|Kouritenga~KOT|Kourwéogo~KOW|Léraba~LER|Loroum~LOR|Mouhoun~MOU|Namentenga~NAM|Naouri/Nahouri~NAO|Nayala~NAY|Noumbiel~NOU|Oubritenga~OUB|Oudalan~OUD|Passoré~PAS|Poni~PON|Sanguié~SNG|Sanmatenga~SMT|Séno~SEN|Sissili~SIS|Soum~SOM|Sourou~SOR|Tapoa~TAP|Tui/Tuy~TUI|Yagha~YAG|Yatenga~YAT|Ziro~ZIR|Zondoma~ZON|Zoundwéogo~ZOU"], ["Burundi", "BI", "Bubanza~BB|Bujumbura Mairie~BM|Bujumbura Rural~BL|Bururi~BR|Cankuzo~CA|Cibitoke~CI|Gitega~GI|Karuzi~KR|Kayanza~KY|Kirundo~KI|Makamba~MA|Muramvya~MU|Muyinga~MY|Mwaro~MW|Ngozi~NG|Rutana~RT|Ruyigi~RY"], ["Cambodia", "KH", "Baat Dambang~2|Banteay Mean Chey~1|Kampong Chaam~3|Kampong Chhnang~4|Kampong Spueu~5|Kampong Thum~6|Kampot~7|Kandaal~8|Kaoh Kong~9|Kracheh~10|Krong Kaeb~23|Krong Pailin~24|Krong Preah Sihanouk~18|Mondol Kiri~11|Otdar Mean Chey~22|Phnom Penh~12|Pousaat~15|Preah Vihear~13|Prey Veaeng~14|Rotanah Kiri~16|Siem Reab~17|Stueng Treng~19|Svaay Rieng~20|Taakaev~21|Tbong Khmum~25"], ["Cameroon", "CM", "Adamaoua~AD|Centre~CE|Est~ES|Extrême-Nord~EN|Littoral~LT|Nord~NO|Nord-Ouest~NW|Ouest~OU|Sud~SU|Sud-Ouest~SW"], ["Canada", "CA", "Alberta~AB|British Columbia~BC|Manitoba~MB|New Brunswick~NB|Newfoundland and Labrador~NL|Northwest Territories~NT|Nova Scotia~NS|Nunavut~NU|Ontario~ON|Prince Edward Island~PE|Quebec~QC|Saskatchewan~SK|Yukon~YT"], ["Cape Verde", "CV", "Boa Vista~BV|Brava~BR|Calheta de São Miguel~CS|Maio~MA|Mosteiros~MO|Paúl~PA|Porto Novo~PN|Praia~PR|Ribeira Brava~RB|Ribeira Grande~RG|Sal~SL|Santa Catarina~CA|Santa Cruz~CR|São Domingos~SD|São Filipe~SF|São Nicolau~SN|São Vicente~SV|Tarrafal~TA|Tarrafal de São Nicolau~TS"], ["Cayman Islands", "KY", "Creek|Eastern|Midland|South Town|Spot Bay|Stake Bay|West End|Western"], ["Central African Republic", "CF", "Bamingui-Bangoran~BB|Bangui~BGF|Basse-Kotto~BK|Haute-Kotto~HK|Haut-Mbomou~HM|Kémo~KG|Lobaye~LB|Mambéré-Kadéï~HS|Mbomou~MB|Nana-Grebizi~10|Nana-Mambéré~NM|Ombella-M'Poko~MP|Ouaka~UK|Ouham~AC|Ouham Péndé~OP|Sangha-Mbaéré~SE|Vakaga~VK"], ["Chad", "TD", "Bahr el Ghazal~BG|Batha~BA|Borkou~BO|Chari-Baguirmi~CB|Ennedi-Est~EE|Ennedi-Ouest~EO|Guéra~GR|Hadjer Lamis~HL|Kanem~KA|Lac~LC|Logone Occidental~LO|Logone Oriental~LR|Mondoul~MA|Mayo-Kébbi-Est~ME|Moyen-Chari~MC|Ouaddai~OD|Salamat~SA|Sila~SI|Tandjilé~TA|Tibesti~TI|Ville de Ndjamena~ND|Wadi Fira~WF"], ["Chile", "CL", "Aisén del General Carlos Ibáñez del Campo~AI|Antofagasta~AN|Araucanía~AR|Arica y Parinacota~AP|Atacama~AT|Bío-Bío~BI|Coquimbo~CO|Libertador General Bernardo O'Higgins~LI|Los Lagos~LL|Los Ríos~LR|Magallanes y Antartica Chilena~MA|Marga-Marga~|Maule~ML|Región Metropolitana de Santiago~RM|Tarapacá~TA|Valparaíso~VS"], ["China", "CN", "Anhui~34|Beijing~11|Chongqing~50|Fujian~35|Gansu~62|Guangdong~44|Guangxi~45|Guizhou~52|Hainan~46|Hebei~13|Heilongjiang~23|Henan~41|Hong Kong~91|Hubei~42|Hunan~43|Inner Mongolia~15|Jiangsu~32|Jiangxi~36|Jilin~22|Liaoning~21|Macau~92|Ningxia~64|Qinghai~63|Shaanxi~61|Shandong~37|Shanghai~31|Shanxi~14|Sichuan~51|Tianjin~12|Tibet~54|Xinjiang~65|Yunnan~53|Zhejiang~33"], ["Christmas Island", "CX", "Christmas Island~CX"], ["Cocos (Keeling) Islands", "CC", "Direction Island~DI|Home Island~HM|Horsburgh Island~HR|North Keeling Island~NK|South Island~SI|West Island~WI"], ["Colombia", "CO", "Amazonas~AMA|Antioquia~ANT|Arauca~ARA|Archipiélago de San Andrés~SAP|Atlántico~ATL|Bogotá D.C.~DC|Bolívar~BOL|Boyacá~BOY|Caldas~CAL|Caquetá~CAQ|Casanare~CAS|Cauca~CAU|Cesar~CES|Chocó~CHO|Córdoba~COR|Cundinamarca~CUN|Guainía~GUA|Guaviare~GUV|Huila~HUI|La Guajira~LAG|Magdalena~MAG|Meta~MET|Nariño~NAR|Norte de Santander~NSA|Putumayo~PUT|Quindío~QUI|Risaralda~RIS|Santander~SAN|Sucre~SUC|Tolima~TOL|Valle del Cauca~VAC|Vaupés~VAU|Vichada~VID"], ["Comoros", "KM", "Andjazîdja~G|Andjouân~A|Moûhîlî~M"], ["Congo, Republic of the (Brazzaville)", "CG", "Bouenza~11|Brazzaville~BZV|Cuvette~8|Cuvette-Ouest~15|Kouilou~5|Lékoumou~2|Likouala~7|Niari~9|Plateaux~14|Pointe-Noire~16|Pool~12|Sangha~13"], ["Congo, the Democratic Republic of the (Kinshasa)", "CD", "Bandundu~BN|Bas-Congo~BC|Équateur~EQ|Kasaï-Occidental~KE|Kasaï-Oriental~KW|Katanga~KA|Kinshasa~KN|Maniema~MA|Nord-Kivu~NK|Orientale~OR|Sud-Kivu~SK"], ["Cook Islands", "CK", "Aitutaki|Atiu|Avarua|Mangaia|Manihiki|Ma'uke|Mitiaro|Nassau|Palmerston|Penrhyn|Pukapuka|Rakahanga"], ["Costa Rica", "CR", "Alajuela~2|Cartago~3|Guanacaste~5|Heredia~4|Limón~7|Puntarenas~6|San José~1"], ["Côte d'Ivoire, Republic of", "CI", "Agnéby~16|Bafing~17|Bas-Sassandra~09|Denguélé~10|Dix-Huit Montagnes~06|Fromager~18|Haut-Sassandra~02|Lacs~07|Lagunes~01|Marahoué~12|Moyen-Cavally~19|Moyen-Comoé~05|N'zi-Comoé~11|Savanes~03|Sud-Bandama~15|Sud-Comoé~13|Vallée du Bandama~04|Worodougou~14|Zanzan~08"], ["Croatia", "HR", "Bjelovarsko-Bilogorska Županija~07|Brodsko-Posavska Županija~12|Dubrovačko-Neretvanska Županija~19|Grad Zagreb~21|Istarska Županija~18|Karlovačka Županija~04|Koprivničko-Krizevačka Županija~06|Krapinsko-Zagorska Županija~02|Ličko-Senjska Županija~09|Međimurska Županija~20|Osječko-Baranjska Županija~14|Požeško-Slavonska Županija~11|Primorsko-Goranska Županija~08|Sisačko-Moslavačka Županija~03|Splitsko-Dalmatinska Županija~17|Sibensko-Kninska Županija~15|Varaždinska Županija~05|Virovitičko-Podravska Županija~10|Vukovarsko-Srijemska Županija~16|Zadarska Županija~13|Zagrebacka Zupanija~01"], ["Cuba", "CU", "Artemisa~15|Camagüey~09|Ciego de Ávila~08|Cienfuegos~06|Granma~12|Guantánamo~14|Holguín~11|Isla de la Juventud~99|La Habana~03|Las Tunas~10|Matanzas~04|Mayabeque~16|Pinar del Río~01|Sancti Spíritus~07|Santiago de Cuba~13|Villa Clara~05"], ["Curaçao", "CW", "Curaçao~CW"], ["Cyprus", "CY", "Ammochostos~04|Keryneia~05|Larnaka~03|Lefkosia~01|Lemesos~02|Pafos~05"], ["Czech Republic", "CZ", "Hlavní město Praha~PR|Jihočeský kraj~JC|Jihomoravský kraj~JM|Karlovarský kraj~KA|Královéhradecký kraj~KR|Liberecký kraj~LI|Moravskoslezský kraj~MO|Olomoucký kraj~OL|Pardubický kraj~PA|Plzeňský kraj~PL|Středočeský kraj~ST|Ústecký kraj~US|Vysočina~VY|Zlínský kraj~ZL"], ["Denmark", "DK", "Hovedstaden~84|Kujalleq~GL-KU|Midtjylland~82|Norderøerne~FO-01|Nordjylland~81|Østerø~FO-06|Qaasuitsup~GL-QA|Qeqqata~GL-QE|Sandø~FO-02|Sermersooq~GL-SM|Sjælland~85|Strømø~FO-03|Suderø~FO-04|Syddanmark~83|Vågø~FO-05"], ["Djibouti", "DJ", "Ali Sabieh~AS|Arta~AR|Dikhil~DI|Obock~OB|Tadjourah~TA"], ["Dominica", "DM", "Saint Andrew Parish~02|Saint David Parish~03|Saint George Parish~04|Saint John Parish~05|Saint Joseph Parish~06|Saint Luke Parish~07|Saint Mark Parish~08|Saint Patrick Parish~09|Saint Paul Parish~10|Saint Peter Parish~11"], ["Dominican Republic", "DO", "Cibao Central~02|Del Valle~37|Distrito Nacional~01|Enriquillo~38|Norcentral~04|Nordeste~34|Noroeste~34|Norte~35|Valdesia~42"], ["Ecuador", "EC", "Azuay~A|Bolívar~B|Cañar~F|Carchi~C|Chimborazo~H|Cotopaxi~X|El Oro~O|Esmeraldas~E|Galápagos~W|Guayas~G|Imbabura~I|Loja~L|Los Ríos~R|Manabí~M|Morona-Santiago~S|Napo~N|Orellana~D|Pastaza~Y|Pichincha~P|Santa Elena~SE|Santo Domingo de los Tsáchilas~SD|Sucumbíos~U|Tungurahua~T|Zamora-Chinchipe~Z"], ["Egypt", "EG", "Alexandria~ALX|Aswan~ASN|Asyout~AST|Bani Sueif~BNS|Beheira~BH|Cairo~C|Daqahlia~DK|Dumiat~DT|El Bahr El Ahmar~BA|El Ismailia~IS|El Suez~SUZ|El Wadi El Gedeed~WAD|Fayoum~FYM|Gharbia~GH|Giza~SUZ|Helwan~HU|Kafr El Sheikh~KFS|Luxor~LX|Matrouh~MT|Menia~MN|Menofia~MNF|North Sinai~SIN|Port Said~PTS|Qalubia~KB|Qena~KN|Sharqia~SHR|Sixth of October~SU|Sohag~SHG|South Sinai~JS"], ["El Salvador", "SV", "Ahuachapán~AH|Cabañas~CA|Cuscatlán~CU|Chalatenango~CH|La Libertad~LI|La Paz~PA|La Unión~UN|Morazán~MO|San Miguel~SM|San Salvador~SS|Santa Ana~SA|San Vicente~SV|Sonsonate~SO|Usulután~US"], ["Equatorial Guinea", "GQ", "Annobón~AN|Bioko Norte~BN|Bioko Sur~BS|Centro Sur~CS|Kié-Ntem~KN|Litoral~LI|Wele-Nzas~WN"], ["Eritrea", "ER", "Anseba~AN|Debub~DU|Debub-Keih-Bahri~DK|Gash-Barka~GB|Maekel~MA|Semien-Keih-Bahri~SK"], ["Estonia", "EE", "Harjumaa (Tallinn)~37|Hiiumaa (Kardla)~39|Ida-Virumaa (Johvi)~44|Järvamaa (Paide)~41|Jõgevamaa (Jogeva)~49|Läänemaa~57|Lääne-Virumaa (Rakvere)~59|Pärnumaa (Parnu)~67|Põlvamaa (Polva)~65|Raplamaa (Rapla)~70|Saaremaa (Kuessaare)~74|Tartumaa (Tartu)~78|Valgamaa (Valga)~82|Viljandimaa (Viljandi)~84|Võrumaa (Voru)~86"], ["Ethiopia", "ET", "Addis Ababa~AA|Afar~AF|Amhara~AM|Benshangul-Gumaz~BE|Dire Dawa~DD|Gambela~GA|Harari~HA|Oromia~OR|Somali~SO|Southern Nations Nationalities and People's Region~SN|Tigray~TI"], ["Falkland Islands (Islas Malvinas)", "FK", "Falkland Islands (Islas Malvinas)"], ["Faroe Islands", "FO", "Bordoy|Eysturoy|Mykines|Sandoy|Skuvoy|Streymoy|Suduroy|Tvoroyri|Vagar"], ["Fiji", "FJ", "Ba~01|Bua~01|Cakaudrove~03|Kadavu~04|Lau~05|Lomaiviti~06|Macuata~07|Nadroga and Navosa~08|Naitasiri~09|Namosi~10|Ra~011|Rewa~12|Rotuma~R|Serua~12|Tailevu~14"], ["Finland", "FI", "Ahvenanmaan lääni~AL|Etelä-Suomen lääni~ES|Itä-Suomen lääni~IS|Länsi-Suomen lääni~LS|Lapin lääni~LL|Oulun lääni~OL"], ["France", "FR", "Auvergne-Rhône-Alpes~ARA|Bourgogne-Franche-Comté~BFC|Bretagne~BRE|Centre-Val de Loire~CVL|Corse~COR|Grand Est~GES|Hauts-de-France~HDF|Île-de-France~IDF|Normandie~NOR|Nouvelle-Aquitaine~NAQ|Occitanie~OCC|Pays de la Loire~PDL|Provence-Alpes-Cote d'Azur~PAC|Clipperton~CP|Guadeloupe~GP|Guyane~GF|Martinique~MQ|Mayotte~YT|Novelle-Calédonie~NC|Polynésie~PF|Saint-Pierre-et-Miquelon~PM|Saint Barthélemy~BL|Saint Martin~MF|Réunion~RE|Terres Australes Françaises~TF|Wallis-et-Futuna~WF"], ["French Guiana", "GF", "French Guiana"], ["French Polynesia", "PF", "Archipel des Marquises|Archipel des Tuamotu|Archipel des Tubuai|Iles du Vent|Iles Sous-le-Vent"], ["French Southern and Antarctic Lands", "TF", "Adelie Land|Ile Crozet|Iles Kerguelen|Iles Saint-Paul et Amsterdam"], ["Gabon", "GA", "Estuaire~1|Haut-Ogooué~2|Moyen-Ogooué~3|Ngounié~4|Nyanga~5|Ogooué-Ivindo~6|Ogooué-Lolo~7|Ogooué-Maritime~8|Woleu-Ntem~9"], ["Gambia, The", "GM", "Banjul~B|Central River~M|Lower River~L|North Bank~N|Upper River~U|Western~W"], ["Georgia", "GE", "Abkhazia (Sokhumi)~AB|Ajaria (Bat'umi)~AJ|Guria~GU|Imereti~IM|K'akheti~KA|Kvemo Kartli~KK|Mtshkheta-Mtianeti~MM|Rach'a-Lexhkumi-KvemoSvaneti~RL|Samegrelo-Zemo Svaneti~SZ|Samtskhe-Javakheti~SJ|Shida Kartli~SK|Tbilisi~TB"], ["Germany", "DE", "Baden-Württemberg~BW|Bayern~BY|Berlin~BE|Brandenburg~BB|Bremen~HB|Hamburg~HH|Hessen~HE|Mecklenburg-Vorpommern~MV|Niedersachsen~NI|Nordrhein-Westfalen~NW|Rheinland-Pfalz~RP|Saarland~SL|Sachsen~SN|Sachsen-Anhalt~ST|Schleswig-Holstein~SH|Thüringen~TH"], ["Ghana", "GH", "Ashanti~AH|Brong-Ahafo~BA|Central~CP|Eastern~EP|Greater Accra~AA|Northern~NP|Upper East~UE|Upper West~UW|Volta~TV|Western~WP"], ["Gibraltar", "GI", "Gibraltar"], ["Greece", "GR", "Anatolikí Makedonía kai Thráki~A|Attikḯ~I|Dytikí Elláda~G|Dytikí Makedonía~C|Ionía Nísia~F|Kentrikí Makedonía~B|Krítí~M|Notío Aigaío~L|Peloponnísos~J|Stereá Elláda~H|Thessalía~E|Voreío Aigaío~K|Ípeiros~D|Ágion Óros~69"], ["Greenland", "GL", "Kommune Kujalleq~KU|Kommuneqarfik Sermersooq~SM|Qaasuitsup Kommunia~QA|Qeqqata Kommunia~QE"], ["Grenada", "GD", "Saint Andrew~01|Saint David~02|Saint George~03|Saint John~04|Saint Mark~05|Saint Patrick~06|Southern Grenadine Islands~10"], ["Guadeloupe", "GP", "Guadeloupe"], ["Guam", "GU", "Guam"], ["Guatemala", "GT", "Alta Verapaz~AV|Baja Verapaz~BV|Chimaltenango~CM|Chiquimula~CQ|El Progreso~PR|Escuintla~ES|Guatemala~GU|Huehuetenango~HU|Izabal~IZ|Jalapa~JA|Jutiapa~JU|Petén~PE|Quetzaltenango~QZ|Quiché~QC|Retalhuleu~Re|Sacatepéquez~SA|San Marcos~SM|Santa Rosa~SR|Sololá~SO|Suchitepéquez~SU|Totonicapán~TO|Zacapa~ZA"], ["Guernsey", "GG", "Castel|Forest|St. Andrew|St. Martin|St. Peter Port|St. Pierre du Bois|St. Sampson|St. Saviour|Torteval|Vale"], ["Guinea", "GN", "Boké~B|Conakry~C|Faranah~F|Kankan~K|Kindia~D|Labé~L|Mamou~M|Nzérékoré~N"], ["Guinea-Bissau", "GW", "Bafatá~BA|Biombo~BM|Bissau~BS|Bolama-Bijagos~BL|Cacheu~CA|Gabú~GA|Oio~OI|Quinara~QU|Tombali~TO"], ["Guyana", "GY", "Barima-Waini~BA|Cuyuni-Mazaruni~CU|Demerara-Mahaica~DE|East Berbice-Corentyne~EB|Essequibo Islands-West Demerara~ES|Mahaica-Berbice~MA|Pomeroon-Supenaam~PM|Potaro-Siparuni~PT|Upper Demerara-Berbice~UD|Upper Takutu-Upper Essequibo~UT"], ["Haiti", "HT", "Artibonite~AR|Centre~CE|Grand'Anse~GA|Nippes~NI|Nord~ND|Nord-Est~NE|Nord-Ouest~NO|Ouest~OU|Sud~SD|Sud-Est~SE"], ["Heard Island and McDonald Islands", "HM", "Heard Island and McDonald Islands"], ["Holy See (Vatican City)", "VA", "Holy See (Vatican City)~01"], ["Honduras", "HN", "Atlántida~AT|Choluteca~CH|Colón~CL|Comayagua~CM|Copán~CP|Cortés~CR|El Paraíso~EP|Francisco Morazan~FM|Gracias a Dios~GD|Intibucá~IN|Islas de la Bahía~IB|La Paz~LP|Lempira~LE|Ocotepeque~OC|Olancho~OL|Santa Bárbara~SB|Valle~VA|Yoro~YO"], ["Hong Kong", "HK", "Hong Kong"], ["Hungary", "HU", "Bács-Kiskun~BK|Baranya~BA|Békés~BE|Békéscsaba~BC|Borsod-Abauj-Zemplen~BZ|Budapest~BU|Csongrád~CS|Debrecen~DE|Dunaújváros~DU|Eger~EG|Érd~ER|Fejér~FE|Győr~GY|Győr-Moson-Sopron~GS|Hajdú-Bihar~HB|Heves~HE|Hódmezővásárhely~HV|Jász-Nagykun-Szolnok~N|Kaposvár~KV|Kecskemét~KM|Komárom-Esztergom~KE|Miskolc~MI|Nagykanizsa~NK|Nógrád~NO|Nyíregyháza~NY|Pécs~PS|Pest~PE|Salgótarján~ST|Somogy~SO|Sopron~SN|Szabolcs-á-Bereg~SZ|Szeged~SD|Székesfehérvár~SF|Szekszárd~SS|Szolnok~SK|Szombathely~SH|Tatabánya~TB|Tolna~TO|Vas~VA|Veszprém~VE|Veszprém (City)~VM|Zala~ZA|Zalaegerszeg~ZE"], ["Iceland", "IS", "Austurland~7|Höfuðborgarsvæði utan Reykjavíkur~1|Norðurland eystra~6|Norðurland vestra~5|Suðurland~8|Suðurnes~2|Vestfirðir~4|Vesturland~3"], ["India", "IN", "Andaman and Nicobar Islands~AN|Andhra Pradesh~AP|Arunachal Pradesh~AR|Assam~AS|Bihar~BR|Chandigarh~CH|Chhattisgarh~CT|Dadra and Nagar Haveli~DN|Daman and Diu~DD|Delhi~DL|Goa~GA|Gujarat~GJ|Haryana~HR|Himachal Pradesh~HP|Jammu and Kashmir~JK|Jharkhand~JH|Karnataka~KA|Kerala~KL|Lakshadweep~LD|Madhya Pradesh~MP|Maharashtra~MH|Manipur~MN|Meghalaya~ML|Mizoram~MZ|Nagaland~NL|Odisha~OR|Puducherry~PY|Punjab~PB|Rajasthan~RJ|Sikkim~WK|Tamil Nadu~TN|Telangana~TG|Tripura~TR|Uttarakhand~UT|Uttar Pradesh~UP|West Bengal~WB"], ["Indonesia", "ID", "Aceh~AC|Bali~BA|Bangka Belitung~BB|Banten~BT|Bengkulu~BE|Gorontalo~GO|Jakarta Raya~JK|Jambi~JA|Jawa Barat~JB|Jawa Tengah~JT|Jawa Timur~JI|Kalimantan Barat~KB|Kalimantan Selatan~KS|Kalimantan Tengah~KT|Kalimantan Timur~KI|Kalimantan Utara~KU|Kepulauan Riau~KR|Lampung~LA|Maluku~MA|Maluku Utara~MU|Nusa Tenggara Barat~NB|Nusa Tenggara Timur~NT|Papua~PA|Papua Barat~PB|Riau~RI|Sulawesi Selatan~SR|Sulawesi Tengah~ST|Sulawesi Tenggara~SG|Sulawesi Utara~SA|Sumatera Barat~SB|Sumatera Selatan~SS|Sumatera Utara~SU|Yogyakarta~YO"], ["Iran, Islamic Republic of", "IR", "Alborz~32|Ardabīl~03|Āz̄arbāyjān-e Gharbī~02|Āz̄arbāyjān-e Sharqī~01|Būshehr~06|Chahār Maḩāl va Bakhtīārī~08|Eşfahān~04|Fārs~14|Gīlān~19|Golestān~27|Hamadān~24|Hormozgān~23|Īlām~05|Kermān~15|Kermānshāh~17|Khorāsān-e Jonūbī~29|Khorāsān-e Raẕavī~30|Khorāsān-e Shomālī~61|Khūzestān~10|Kohgīlūyeh va Bowyer Aḩmad~18|Kordestān~16|Lorestān~20|Markazi~22|Māzandarān~21|Qazvīn~28|Qom~26|Semnān~12|Sīstān va Balūchestān~13|Tehrān~07|Yazd~25|Zanjān~11"], ["Iraq", "IQ", "Al Anbār~AN|Al Başrah~BA|Al Muthanná~MU|Al Qādisīyah~QA|An Najaf~NA|Arbīl~AR|As Sulaymānīyah~SU|Bābil~BB|Baghdād~BG|Dohuk~DA|Dhī Qār~DQ|Diyālá~DI|Karbalā'~KA|Kirkuk~KI|Maysān~MA|Nīnawá~NI|Şalāḩ ad Dīn~SD|Wāsiţ~WA"], ["Ireland", "IE", "Carlow~CW|Cavan~CN|Clare~CE|Cork~CO|Donegal~DL|Dublin~D|Galway~G|Kerry~KY|Kildare~KE|Kilkenny~KK|Laois~LS|Leitrim~LM|Limerick~LK|Longford~LD|Louth~LH|Mayo~MO|Meath~MH|Monaghan~MN|Offaly~OY|Roscommon~RN|Sligo~SO|Tipperary~TA|Waterford~WD|Westmeath~WH|Wexford~WX|Wicklow~WW"], ["Isle of Man", "IM", "Isle of Man"], ["Israel", "IL", "HaDarom~D|HaMerkaz~M|HaTsafon~Z|H̱efa~HA|Tel-Aviv~TA|Yerushalayim~JM"], ["Italy", "IT", "Abruzzo~65|Basilicata~77|Calabria~78|Campania~72|Emilia-Romagna~45|Friuli-Venezia Giulia~36|Lazio~62|Liguria~42|Lombardia~25|Marche~57|Molise~67|Piemonte~21|Puglia~75|Sardegna~88|Sicilia~82|Toscana~52|Trentino-Alto Adige~32|Umbria~55|Valle d'Aosta~23|Veneto~34"], ["Jamaica", "JM", "Clarendon~13|Hanover~09|Kingston~01|Manchester~12|Portland~04|Saint Andrew~02|Saint Ann~06|Saint Catherine~14|Saint Elizabeth~11|Saint James~08|Saint Mary~05|Saint Thomas~03|Trelawny~07|Westmoreland~10"], ["Japan", "JP", "Aichi~23|Akita~05|Aomori~02|Chiba~12|Ehime~38|Fukui~18|Fukuoka~40|Fukushima~07|Gifu~21|Gunma~10|Hiroshima~34|Hokkaido~01|Hyogo~28|Ibaraki~08|Ishikawa~17|Iwate~03|Kagawa~37|Kagoshima~46|Kanagawa~14|Kochi~39|Kumamoto~43|Kyoto~26|Mie~24|Miyagi~04|Miyazaki~45|Nagano~20|Nagasaki~42|Nara~29|Niigata~15|Oita~44|Okayama~33|Okinawa~47|Osaka~27|Saga~41|Saitama~11|Shiga~25|Shimane~32|Shizuoka~22|Tochigi~09|Tokushima~36|Tokyo~13|Tottori~31|Toyama~16|Wakayama~30|Yamagata~06|Yamaguchi~35|Yamanashi~19"], ["Jersey", "JE", "Jersey"], ["Jordan", "JO", "‘Ajlūn~AJ|Al 'Aqabah~AQ|Al Balqā’~BA|Al Karak~KA|Al Mafraq~MA|Al ‘A̅şimah~AM|Aţ Ţafīlah~AT|Az Zarqā’~AZ|Irbid~IR|Jarash~JA|Ma‘ān~MN|Mādabā~MD"], ["Kazakhstan", "KZ", "Almaty~ALA|Aqmola~AKM|Aqtobe~AKT|Astana~AST|Atyrau~ATY|Batys Qazaqstan~ZAP|Bayqongyr|Mangghystau~MAN|Ongtustik Qazaqstan~YUZ|Pavlodar~PAV|Qaraghandy~KAR|Qostanay~KUS|Qyzylorda~KZY|Shyghys Qazaqstan~VOS|Soltustik Qazaqstan~SEV|Zhambyl~ZHA"], ["Kenya", "KE", "Baringo~01|Bomet~02|Bungoma~03|Busia~04|Eleyo/Marakwet~05|Embu~06|Garissa~07|Homa Bay~08|Isiolo~09|Kajiado~10|Kakamega~11|Kericho~12|Kiambu~13|Kilifi~14|Kirinyaga~15|Kisii~16|Kisumu~17|Kitui~18|Kwale~19|Laikipia~20|Lamu~21|Machakos~22|Makueni~23|Mandera~24|Marsabit~25|Meru~26|Migori~27|Mombasa~28|Murang'a~29|Nairobi City~30|Nakuru~31|Nandi~32|Narok~33|Nyamira~34|Nyandarua~35|Nyeri~36|Samburu~37|Siaya~38|Taita/Taveta~39|Tana River~40|Tharaka-Nithi~41|Trans Nzoia~42|Turkana~43|Uasin Gishu~44|Vihiga~45|Wajir~46|West Pokot~47"], ["Kiribati", "KI", "Abaiang|Abemama|Aranuka|Arorae|Banaba|Beru|Butaritari|Central Gilberts|Gilbert Islands~G|Kanton|Kiritimati|Kuria|Line Islands~L|Maiana|Makin|Marakei|Nikunau|Nonouti|Northern Gilberts|Onotoa|Phoenix Islands~P|Southern Gilberts|Tabiteuea|Tabuaeran|Tamana|Tarawa|Teraina"], ["Korea, Democratic People's Republic of", "KP", "Chagang-do (Chagang Province)~04|Hamgyong-bukto (North Hamgyong Province)~09|Hamgyong-namdo (South Hamgyong Province)~08|Hwanghae-bukto (North Hwanghae Province)~06|Hwanghae-namdo (South Hwanghae Province)~05|Kangwon-do (Kangwon Province)~07|Nasŏn (Najin-Sŏnbong)~13|P'yongan-bukto (North P'yongan Province)~03|P'yongan-namdo (South P'yongan Province)~02|P'yongyang-si (P'yongyang City)~01|Yanggang-do (Yanggang Province)~10"], ["Korea, Republic of", "KR", "Ch'ungch'ongbuk-do~43|Ch'ungch'ongnam-do~44|Cheju-do~49|Chollabuk-do~45|Chollanam-do~46|Inch'on-Kwangyokhi~28|Kang-won-do~42|Kwangju-Kwangyokshi~28|Kyonggi-do~41|Kyongsangbuk-do~47|Kyongsangnam-do~48|Pusan-Kwangyokshi~26|Seoul-T'ukpyolshi~11|Sejong~50|Taegu-Kwangyokshi~27|Taejon-Kwangyokshi~30|Ulsan-Kwangyokshi~31"], ["Kuwait", "KW", "Al Aḩmadi~AH|Al Farwānīyah~FA|Al Jahrā’~JA|Al ‘Āşimah~KU|Ḩawallī~HA|Mubārak al Kabir~MU"], ["Kyrgyzstan", "KG", "Batken Oblasty~B|Bishkek Shaary~GB|Chuy Oblasty (Bishkek)~C|Jalal-Abad Oblasty~J|Naryn Oblasty~N|Osh Oblasty~O|Talas Oblasty~T|Ysyk-Kol Oblasty (Karakol)~Y"], ["Laos", "LA", "Attapu~AT|Bokèo~BK|Bolikhamxai~BL|Champasak~CH|Houaphan~HO|Khammouan~KH|Louang Namtha~LM|Louangphabang~LP|Oudômxai~OU|Phôngsali~PH|Salavan~SL|Savannakhét~SV|Vientiane~VI|Xaignabouli~XA|Xékong~XE|Xaisomboun~XS|Xiangkhouang~XI"], ["Latvia", "LV", "Aglona~001|Aizkraukle~002|Aizpute~003|Aknīste~004|Aloja~005|Alsunga~06|Alūksne~007|Amata~008|Ape~009|Auce~010|Ādaži~011|Babīte~012|Baldone~013|Baltinava~014|Balvi~015|Bauska~016|Beverīna~017|Brocēni~018|Burtnieki~019|Carnikava~020|Cesvaine~021|Cēsis~022|Cibla~023|Dagda~024|Daugavpils~025|Daugavpils (City)~DGV|Dobele~026|Dundaga~027|Durbe~028|Engure~029|Ērgļi~030|Garkalne~031|Grobiņa~032|Gulbene~033|Iecava~034|Ikšķile~035|Ilūkste~036|Inčukalns~037|Jaunjelgava~038|Jaunpiebalga~039|Jaunpils~040|Jelgava~041|Jelgava (City)~JEL|Jēkabpils~042|Jēkabpils (City)~JKB|Jūrmala (City)~JUR|Kandava~043|Kārsava~044|Kocēni~045|Koknese~046|Krāslava~047|Krimulda~048|Krustpils~049|Kuldīga~050|Ķegums~051|Ķekava~052|Lielvārde~053|Liepāja~LPX|Limbaži~054|Līgatne~055|Līvāni~056|Lubāna~057|Ludza~058|Madona~059|Mazsalaca~060|Mālpils~061|Mārupe~062|Mērsrags~063|Naukšēni~064|Nereta~065|Nīca~066|Ogre~067|Olaine~068|Ozolnieki~069|Pārgauja~070|Pāvilosta~071|Pļaviņas~072|Preiļi~073|Priekule~074|Priekuļi~075|Rauna~076|Rēzekne~077|Rēzekne (City)~REZ|Riebiņi~078|Rīga~RIX|Roja~079|Ropaži~080|Rucava~081|Rugāji~082|Rundāle~083|Rūjiena~084|Sala~085|Salacgrīva~086|Salaspils~087|Saldus~088|Saulkrasti~089|Sēja~090|Sigulda~091|Skrīveri~092|Skrunda~093|Smiltene~094|Stopiņi~095|Strenči~096|Talsi~097|Tērvete~098|Tukums~099|Vaiņode~100|Valka~101|Valmiera~VMR|Varakļāni~102|Vārkava~103|Vecpiebalga~104|Vecumnieki~105|Ventspils~106|Ventspils (City)~VEN|Viesīte~107|Viļaka~108|Viļāni~109|Zilupe~110"], ["Lebanon", "LB", "Aakkâr~AK|Baalbelk-Hermel~BH|Béqaa~BI|Beyrouth~BA|Liban-Nord~AS|Liban-Sud~JA|Mont-Liban~JL|Nabatîyé~NA"], ["Lesotho", "LS", "Berea~D|Butha-Buthe~B|Leribe~C|Mafeteng~E|Maseru~A|Mohales Hoek~F|Mokhotlong~J|Qacha's Nek~H|Quthing~G|Thaba-Tseka~K"], ["Liberia", "LR", "Bomi~BM|Bong~BG|Gbarpolu~GP|Grand Bassa~GB|Grand Cape Mount~CM|Grand Gedeh~GG|Grand Kru~GK|Lofa~LO|Margibi~MG|Maryland~MY|Montserrado~MO|Nimba~NI|River Cess~RI|River Geee~RG|Sinoe~SI"], ["Libya", "LY", "Al Buţnān~BU|Al Jabal al Akhḑar~JA|Al Jabal al Gharbī~JG|Al Jafārah~JA|Al Jufrah~JU|Al Kufrah~FK|Al Marj~MJ|Al Marquab~MB|Al Wāḩāt~WA|An Nuqaţ al Khams~NQ|Az Zāwiyah~ZA|Banghāzī~BA|Darnah~DR|Ghāt~GH|Mişrātah~MI|Murzuq~MQ|Nālūt~NL|Sabhā~SB|Surt~SR|Ţarābulus~TB|Yafran~WD|Wādī ash Shāţiʾ~WS"], ["Liechtenstein", "LI", "Balzers~01|Eschen~02|Gamprin~03|Mauren~04|Planken~05|Ruggell~06|Schaan~07|Schellenberg~08|Triesen~09|Triesenberg~10|Vaduz~11"], ["Lithuania", "LT", "Alytaus~AL|Kauno~KU|Klaipėdos~KL|Marijampolės~MR|Panevėžio~PN|Šiaulių~SA|Tauragės~TA|Telšių~TE|Utenos~UT|Vilniaus~VL"], ["Luxembourg", "LU", "Capellen~CA|Clevaux~CL|Diekirch~DI|Echternach~EC|Esch-sur-Alzette~ES|Grevenmacher~GR|Luxembourg~LU|Mersch~ME|Redange~RD|Remich~RM|Vianden~VD|Wiltz~WI"], ["Macao", "MO", "Macao"], ["Macedonia, Republic of", "MK", "Aračinovo~02|Berovo~03|Bitola~04|Bogdanci~05|Bogovinje~06|Bosilovo~07|Brvenica~08|Centar Župa~78|Čaška~08|Češinovo-Obleševo~81|Čučer Sandevo~82|Debar~21|Debarca~22|Delčevo~23|Demir Hisar~25|Demir Kapija~24|Doran~26|Dolneni~27|Gevgelija~18|Gostivar~19|Gradsko~20|Ilinden~34|Jegunovce~35|Karbinci~37|Kavadarci~36|Kičevo~40|Kočani~42|Konče~41|Kratovo~43|Kriva Palanka~44|Krivogaštani~45|Kruševo~46|Kumanovo~47|Lipkovo~48|Lozovo~49|Makedonska Kamenica~51|Makedonski Brod~52|Mavrovo i Rostuša~50|Mogila~53|Negotino~54|Novaci~55|Novo Selo~56|Ohrid~58|Pehčevo~60|Petrovec~59|Plasnica~61|Prilep~62|Probištip~63|Radoviš~|Rankovce~65|Resen~66|Rosoman~67|Skopje~85|Sopište~70|Staro Nagoričane~71|Struga~72|Strumica~73|Studeničani~74|Sveti Nikole~69|Štip~83|Tearce~75|Tetovo~76|Valandovo~10|Vasilevo~11|Veles~13|Vevčani~12|Vinica~14|Vrapčište~16|Zelenikovo~32|Zrnovci~33|Želino~30"], ["Madagascar", "MG", "Antananarivo~T|Antsiranana~D|Fianarantsoa~F|Mahajanga~M|Toamasina~A|Toliara~U"], ["Malawi", "MW", "Balaka~BA|Blantyre~BL|Chikwawa~CK|Chiradzulu~CR|Chitipa~CT|Dedza~DE|Dowa~DO|Karonga~KR|Kasungu~KS|Likoma~LK|Lilongwe~LI|Machinga~MH|Mangochi~MG|Mchinji~MC|Mulanje~MU|Mwanza~MW|Mzimba~MZ|Nkhata Bay~NE|Nkhotakota~NB|Nsanje~NS|Ntcheu~NU|Ntchisi~NI|Phalombe~PH|Rumphi~RU|Salima~SA|Thyolo~TH|Zomba~ZO"], ["Malaysia", "MY", "Johor~01|Kedah~02|Kelantan~03|Melaka~04|Negeri Sembilan~05|Pahang~06|Perak~08|Perlis~09|Pulau Pinang~07|Sabah~12|Sarawak~13|Selangor~10|Terengganu~11|Wilayah Persekutuan (Kuala Lumpur)~14|Wilayah Persekutuan (Labuan)~15|Wilayah Persekutuan (Putrajaya)~16"], ["Maldives", "MV", "Alifu Alifu~02|Alifu Dhaalu~00|Baa~20|Dhaalu~17|Faafu~14|Gaafu Alifu~27|Gaafu Dhaalu~28|Gnaviyani~29|Haa Alifu~07|Haa Dhaalu~23|Kaafu~29|Laamu~05|Lhaviyani~03|Malé~MLE|Meemu~12|Noonu~25|Raa~13|Seenu~01|Shaviyani~24|Thaa~08|Vaavu~04"], ["Mali", "ML", "Bamako~BKO|Gao~7|Kayes~1|Kidal~8|Koulikoro~2|Mopti~5|Segou~4|Sikasso~3|Tombouctou~6"], ["Malta", "MT", "Attard~01|Balzan~02|Birgu~03|Birkirkara~04|Birżebbuġa~05|Bormla~06|Dingli~07|Fgura~08|Floriana~09|Fontana~10|Guda~11|Gżira~12|Għajnsielem~13|Għarb~14|Għargħur~15|Għasri~16|Għaxaq~17|Ħamrun~18|Iklin~19|Isla~20|Kalkara~21|Kerċem~22|Kirkop~23|Lija~24|Luqa~25|Marsa~26|Marsaskala~27|Marsaxlokk~28|Mdina~29|Mellieħa~30|Mġarr~31|Mosta~32|Mqabba~33|Msida~34|Mtarfa~35|Munxar~36|Nadur~37|Naxxar~38|Paola~39|Pembroke~40|Pietà~41|Qala~42|Qormi~43|Qrendi~44|Rabat Għawdex~45|Rabat Malta~46|Safi~47|San Ġiljan~48|San Ġwann~49|San Lawrenz~50|San Pawl il-Baħar~51|Sannat~52|Santa Luċija~53|Santa Venera~54|Siġġiewi~55|Sliema~56|Swieqi~57|Tai Xbiex~58|Tarzien~59|Valletta~60|Xagħra~61|Xewkija~62|Xgħajra~63|Żabbar~64|Żebbuġ Għawde~65|Żebbuġ Malta~66|Żejtun~67|Żurrieq~68"], ["Marshall Islands", "MH", "Ailinglaplap~ALL|Ailuk~ALK|Arno~ARN|Aur~AUR|Bikini and Kili~KIL|Ebon~EBO|Jabat~JAB|Jaluit~JAL|Kwajalein~KWA|Lae~LAE|Lib~LIB|Likiep~LIK|Majuro~MAJ|Maloelap~MAL|Mejit~MEJ|Namdrik~NMK|Namu~NMU|Rongelap~RON|Ujae~UJA|Utrik~UTI|Wotho~WTH|Wotje~WTJ"], ["Martinique", "MQ", "Martinique"], ["Mauritania", "MR", "Adrar~07|Assaba~03|Brakna~05|Dakhlet Nouadhibou~08|Gorgol~04|Guidimaka~10|Hodh Ech Chargui~01|Hodh El Gharbi~02|Inchiri~12|Nouakchott Nord~14|Nouakchott Ouest~13|Nouakchott Sud~15|Tagant~09|Tiris Zemmour~11|Trarza~06"], ["Mauritius", "MU", "Agalega Islands~AG|Beau Bassin-Rose Hill~BR|Black River~BL|Cargados Carajos Shoals~CC|Curepipe~CU|Flacq~FL|Grand Port~GP|Moka~MO|Pamplemousses~PA|Plaines Wilhems~PW|Port Louis (City)~PU|Port Louis~PL|Riviere du Rempart~RR|Rodrigues Island~RO|Savanne~SA|Vacoas-Phoenix~CP"], ["Mayotte", "YT", "Dzaoudzi~01|Pamandzi~02|Mamoudzou~03|Dembeni~04|Bandrélé~05|Kani-Kéli~06|Bouéni~07|Chirongui~08|Sada~09|Ouangani~10|Chiconi~11|Tsingoni~12|M'Tsangamouji~13|Acoua~14|Mtsamboro~15|Bandraboua~16|Koungou~17"], ["Mexico", "MX", "Aguascalientes~AGU|Baja California~BCN|Baja California Sur~BCS|Campeche~CAM|Ciudad de México~DIF|Chiapas~CHP|Chihuahua~CHH|Coahuila de Zaragoza~COA|Colima~COL|Durango~DUR|Estado de México~MEX|Guanajuato~GUA|Guerrero~GRO|Hidalgo~HID|Jalisco~JAL|Michoacán de Ocampo~MIC|Morelos~MOR|Nayarit~NAY|Nuevo León~NLE|Oaxaca~OAX|Puebla~PUE|Querétaro de Arteaga~QUE|Quintana Roo~ROO|San Luis Potosí~SLP|Sinaloa~SIN|Sonora~SON|Tabasco~TAB|Tamaulipas~TAM|Tlaxcala~TLA|Veracruz~VER|Yucatán~YUC|Zacatecas~ZAC"], ["Micronesia, Federated States of", "FM", "Chuuk (Truk)~TRK|Kosrae~KSA|Pohnpei~PNI|Yap~YAP"], ["Moldova", "MD", "Aenii Noi~AN|Basarabeasca~BS|Bălți~BA|Bender~BD|Briceni~BR|Cahul~CA|Cantemir~CT|Călărași~CL|Căușeni~CS|Chișinău~CU|Cimișlia~CM|Criuleni~CR|Dondușeni~DO|Drochia~DR|Dubăsari~DU|Edineț~ED|Fălești~FA|Florești~FL|Găgăuzia~GA|Glodeni~GL|Hîncești~HI|Ialoveni~IA|Leova~LE|Nisporeni~NI|Ocnița~OC|Orhei~OR|Rezina~RE|Rîșcani~RI|Sîngerei~SI|Soroca~SO|Stînga Nistrului~SN|Strășeni~ST|Șoldănești~SD|Ștefan Vodă~SV|Taraclia~TA|Telenești~TE|Ungheni~UN"], ["Monaco", "MC", "Colle~CL|Condamine~CO|Fontvieille~FO|Gare~GA|Jardin Exotique~JE|Larvotto~LA|Malbousquet~MA|Monaco-Ville~MO|Moneghetti~MG|Monte-Carlo~MC|Moulins~MU|Port-Hercule~PH|Saint-Roman~SR|Sainte-Dévote~SD|Source~SO|Spélugues~SP|Vallon de la Rousse~VR"], ["Mongolia", "MN", "Arhangay~073|Bayan-Olgiy~071|Bayanhongor~069|Bulgan~067|Darhan~037|Dornod~061|Dornogovi~063|Dundgovi~059|Dzavhan~065|Govi-Altay~065|Govi-Sumber~064|Hovd~043|Hovsgol~041|Omnogovi~053|Ovorhangay~055|Selenge~049|Suhbaatar~051|Tov~047|Ulaanbaatar~1|Uvs~046"], ["Montenegro", "ME", "Andrijevica~01|Bar~02|Berane~03|Bijelo Polje~04|Budva~05|Cetinje~06|Danilovgrad~07|Gusinje~22|Herceg Novi~08|Kolašin~09|Kotor~10|Mojkovac~11|Nikšić~12|Petnica~23|Plav~13|Plužine~14|Pljevlja~15|Podgorica~16|Rožaje~17|Šavnik~18|Tivat~19|Ulcinj~20|Žabljak~21"], ["Montserrat", "MS", "Saint Anthony|Saint Georges|Saint Peter's"], ["Morocco", "MA", "Chaouia-Ouardigha~09|Doukhala-Abda~10|Fès-Boulemane~05|Gharb-Chrarda-Beni Hssen~02|Grand Casablanca~08|Guelmim-Es Semara~14|Laâyoune-Boujdour-Sakia el Hamra~15|Marrakech-Tensift-Al Haouz~11|Meknès-Tafilalet~06|Oriental~04|Oued ed Dahab-Lagouira~16|Souss-Massa-Drâa~13|Tadla-Azilal~12|Tanger-Tétouan~01|Taza-Al Hoceima-Taounate~03"], ["Mozambique", "MZ", "Cabo Delgado~P|Gaza~G|Inhambane~I|Manica~B|Maputo~L|Maputo (City)~MPM|Nampula~N|Niassa~A|Sofala~S|Tete~T|Zambezia~Q"], ["Myanmar", "MM", "Ayeyarwady~07|Bago~02|Chin~14|Kachin~11|Kayah~12|Kayin~13|Magway~03|Mandalay~04|Mon~15|Nay Pyi Taw~18|Rakhine~16|Sagaing~01|Shan~17|Tanintharyi~05|Yangon~06"], ["Namibia", "NA", "Erongo~ER|Hardap~HA|Kavango East~KE|Kavango West~KW|Karas~KA|Khomas~KH|Kunene~KU|Ohangwena~OW|Omaheke~OH|Omusati~OS|Oshana~ON|Oshikoto~OT|Otjozondjupa~OD|Zambezi~CA"], ["Nauru", "NR", "Aiwo~01|Anabar~02|Anetan~03|Anibare~04|Baiti~05|Boe~06|Buada~07|Denigomodu~08|Ewa~09|Ijuw~10|Meneng~11|Nibok~12|Uaboe~13|Yaren~14"], ["Nepal", "NP", "Bagmati~BA|Bheri~BH|Dhawalagiri~DH|Gandaki~GA|Janakpur~JA|Karnali~KA|Kosi~KO|Lumbini~LU|Mahakali~MA|Mechi~ME|Narayani~NA|Rapti~RA|Sagarmatha~SA|Seti~SE"], ["Netherlands", "NL", "Drenthe~DR|Flevoland~FL|Friesland~FR|Gelderland~GE|Groningen~GR|Limburg~LI|Noord-Brabant~NB|Noord-Holland~NH|Overijssel~OV|Utrecht~UT|Zeeland~ZE|Zuid-Holland~ZH"], ["New Caledonia", "NC", "Iles Loyaute|Nord|Sud"], ["New Zealand", "NZ", "Auckland~AUK|Bay of Plenty~BOP|Canterbury~CAN|Gisborne~GIS|Hawke's Bay~HKB|Marlborough~MBH|Manawatu-Wanganui~MWT|Northland~NTL|Nelson~NSN|Otago~OTA|Southland~STL|Taranaki~TKI|Tasman~TAS|Waikato~WKO|Wellington~WGN|West Coast~WTC|Chatham Islands Territory~CIT"], ["Nicaragua", "NI", "Boaco~BO|Carazo~CA|Chinandega~CI|Chontales~CO|Estelí~ES|Granada~GR|Jinotega~JI|León~LE|Madriz~MD|Managua~MN|Masaya~MS|Matagalpa~MT|Nueva Segovia~NS|Río San Juan~SJ|Rivas~RI|Atlántico Norte~AN|Atlántico Sur~AS"], ["Niger", "NE", "Agadez~1|Diffa~2|Dosso~3|Maradi~4|Niamey~8|Tahoua~5|Tillabéri~6|Zinder~7"], ["Nigeria", "NG", "Abia~AB|Abuja Federal Capital Territory~FC|Adamawa~AD|Akwa Ibom~AK|Anambra~AN|Bauchi~BA|Bayelsa~BY|Benue~BE|Borno~BO|Cross River~CR|Delta~DE|Ebonyi~EB|Edo~ED|Ekiti~EK|Enugu~EN|Gombe~GO|Imo~IM|Jigawa~JI|Kaduna~KD|Kano~KN|Katsina~KT|Kebbi~KE|Kogi~KO|Kwara~KW|Lagos~LA|Nassarawa~NA|Niger~NI|Ogun~OG|Ondo~ON|Osun~OS|Oyo~OY|Plateau~PL|Rivers~RI|Sokoto~SO|Taraba~TA|Yobe~YO|Zamfara~ZA"], ["Niue", "NU", "Niue"], ["Norfolk Island", "NF", "Norfolk Island"], ["Northern Mariana Islands", "MP", "Northern Islands|Rota|Saipan|Tinian"], ["Norway", "NO", "Akershus~02|Aust-Agder~09|Buskerud~06|Finnmark~20|Hedmark~04|Hordaland~12|Møre og Romsdal~15|Nordland~18|Nord-Trøndelag~17|Oppland~05|Oslo~03|Rogaland~11|Sogn og Fjordane~14|Sør-Trøndelag~16|Telemark~08|Troms~19|Vest-Agder~10|Vestfold~07|Østfold~01|Jan Mayen~22|Svalbard~21"], ["Oman", "OM", "Ad Dakhiliyah~DA|Al Buraymi~BU|Al Wusta~WU|Az Zahirah~ZA|Janub al Batinah~BS|Janub ash Sharqiyah~SS|Masqat~MA|Musandam~MU|Shamal al Batinah~BJ|Shamal ash Sharqiyah~SJ|Zufar~ZU"], ["Pakistan", "PK", "Āzād Kashmīr~JK|Balōchistān~BA|Gilgit-Baltistān~GB|Islāmābād~IS|Khaībar Pakhtūnkhwās~KP|Punjāb~PB|Sindh~SD|Federally Administered Tribal Areas~TA"], ["Palau", "PW", "Aimeliik~002|Airai~004|Angaur~010|Hatobohei~050|Kayangel~100|Koror~150|Melekeok~212|Ngaraard~214|Ngarchelong~218|Ngardmau~222|Ngatpang~224|Ngchesar~226|Ngeremlengui~227|Ngiwal~228|Peleliu~350|Sonsoral~350"], ["Palestine, State of", "PS", "Ak Khalīl~HBN|Al Quds~JEM|Arīḩā wal Aghwār~JRH|Bayt Laḩm~BTH|Dayr al Balaḩ~DEB|Ghazzah~GZA|Janīn~JEN|Khān Yūnis~KYS|Nāblus~NBS|Qalqīyah~QQA|Rafaḩ~RFH|Rām Allāh wal Bīrah~RBH|Salfīt~SLT|Shamāl Ghazzah~NGZ|Ţūbās~TBS|Ţūlkarm~TKM"], ["Panama", "PA", "Bocas del Toro~1|Chiriquí~4|Coclé~2|Colón~3|Darién~5|Emberá~EM|Herrera~6|Kuna Yala~KY|Los Santos~7|Ngäbe-Buglé~NB|Panamá~8|Panamá Oeste~10|Veraguas~9"], ["Papua New Guinea", "PG", "Bougainville~NSB|Central~CPM|Chimbu~CPK|East New Britain~EBR|East Sepik~ESW|Eastern Highlands~EHG|Enga~EPW|Gulf~GPK|Hela~HLA|Jiwaka~JWK|Madang~MOM|Manus~MRL|Milne Bay~MBA|Morobe~MPL|Port Moresby~NCD|New Ireland~NIK|Northern~NPP|Southern Highlands~SHM|West New Britain~WBK|West Sepik~SAN|Western~WPD|Western Highlands~WHM"], ["Paraguay", "PY", "Alto Paraguay~16|Alto Parana~10|Amambay~13|Asuncion~ASU|Caaguazu~5|Caazapa~6|Canindeyu~14|Central~11|Concepcion~1|Cordillera~3|Guaira~4|Itapua~7|Misiones~8|Neembucu~12|Paraguari~9|Presidente Hayes~15|San Pedro~2"], ["Peru", "PE", "Amazonas~AMA|Ancash~ANC|Apurimac~APU|Arequipa~ARE|Ayacucho~AYA|Cajamarca~CAJ|Callao~CAL|Cusco~CUS|Huancavelica~HUV|Huanuco~HUC|Ica~ICA|Junin~JUN|La Libertad~LAL|Lambayeque~LAM|Lima~LIM|Loreto~LOR|Madre de Dios~MDD|Moquegua~MOQ|Municipalidad Metropolitana de Lima~LMA|Pasco~PAS|Piura~PIU|Puno~PUN|San Martin~SAM|Tacna~TAC|Tumbes~TUM|Ucayali~UCA"], ["Philippines", "PH", "Abra~ABR|Agusan del Norte~AGN|Agusan del Sur~AGS|Aklan~AKL|Albay~ALB|Antique~ANT|Apayao~APA|Aurora~AUR|Basilan~BAS|Bataan~BAN|Batanes~BTN|Batangas~BTG|Benguet~BEN|Biliran~BIL|Bohol~BOH|Bukidnon~BUK|Bulacan~BUL|Cagayan~CAG|Camarines Norte~CAN|Camarines Sur~CAS|Camiguin~CAM|Capiz~CAP|Catanduanes~CAT|Cavite~CAV|Cebu~CEB|Compostela~COM|Cotabato~NCO|Davao del Norte~DAV|Davao del Sur~DAS|Davao Occidental~DVO|Davao Oriental~DAO|Dinagat Islands~DIN|Eastern Samar~EAS|Guimaras~GUI|Ifugao~IFU|Ilocos Norte~ILN|Ilocos Sur~ILS|Iloilo~ILI|Isabela~ISA|Kalinga~KAL|La Union~LUN|Laguna~LAG|Lanao del Norte~LAN|Lanao del Sur~LAS|Leyte~LEY|Maguindanao~MAG|Masbate~MAS|Metro Manila~00|Mindoro Occidental~MDC|Mindoro Oriental~MDR|Misamis Occidental~MSC|Misamis Oriental~MSR|Mountain Province~MOU|Negros Occidental~NEC|Negros Oriental~NER|Northern Samar~NSA|Nueva Ecija~NUE|Nueva Vizcaya~NUV|Palawan~PLW|Pampanga~PAM|Pangasinan~PAN|Quezon~QUE|Quirino~QUI|Rizal~RIZ|Romblon~ROM|Samar~WSA|Sarangani~SAR|Siquijor~SIG|Sorsogon~SOR|Southern Leyte~SLE|Sultan Kudarat~AUK|Sulu~SLU|Surigao del Norte~SUN|Surigao del Sur~SUR|Tarlac~TAR|Tawi-Tawi~TAW|Zambales~ZMB|Zamboanga del Norte~ZAN|Zamboanga del Sur~ZAS|Zamboanga Sibugay~ZSI"], ["Pitcairn", "PN", "Pitcairn Islands"], ["Poland", "PL", "Dolnośląskie~DS|Kujawsko-pomorskie~KP|Łódzkie~LD|Lubelskie~LU|Lubuskie~LB|Malopolskie~MA|Mazowieckie~MZ|Opolskie~OP|Podkarpackie~PK|Podlaskie~PD|Pomorskie~PM|Śląskie~SL|Świętokrzyskie~SK|Warmińsko-mazurskie~WN|Wielkopolskie~WP|Zachodniopomorskie~ZP"], ["Portugal", "PT", "Acores~20|Aveiro~01|Beja~02|Braga~03|Braganca~04|Castelo Branco~05|Coimbra~06|Evora~07|Faro~08|Guarda~09|Leiria~10|Lisboa~11|Madeira~30|Portalegre~12|Porto~13|Santarem~14|Setubal~15|Viana do Castelo~16|Vila Real~17|Viseu~18"], ["Puerto Rico", "PR", "Adjuntas|Aguada|Aguadilla|Aguas Buenas|Aibonito|Anasco|Arecibo|Arroyo|Barceloneta|Barranquitas|Bayamon|Cabo Rojo|Caguas|Camuy|Canovanas|Carolina|Cat|Ceiba|Ciales|Cidra|Coamo|Comerio|Corozal|Culebra|Dorado|Fajardo|Florida|Guanica|Guayama|Guayanilla|Guaynabo|Gurabo|Hatillo|Hormigueros|Humacao|Isabe|Juana Diaz|Juncos|Lajas|Lares|Las Marias|Las oiza|Luquillo|Manati|Maricao|Maunabo|Mayaguez|Moca|Morovis|Naguabo|Naranjito|Orocovis|Patillas|Penuelas|Ponce|Quebradillas|Rincon|Rio Grande|Sabana linas|San German|San Juan|San Lorenzo|San Sebastian|Santa Isabel|Toa Alta|Toa Baja|Trujillo Alto|Utuado|Vega Alta|Vega ues|Villalba|Yabucoa|Yauco"], ["Qatar", "QA", "Ad Dawḩah~DA|Al Khawr wa adh Dhakhīrah~KH|Al Wakrah~WA|Ar Rayyān~RA|Ash Shamāl~MS|Az̧ Za̧`āyin~ZA|Umm Şalāl~US"], ["Réunion", "RE", "Réunion"], ["Romania", "RO", "Alba~AB|Arad~AR|Arges~AG|Bacau~BC|Bihor~BH|Bistrita-Nasaud~BN|Botosani~BT|Braila~BR|Brasov~BV|Bucuresti~B|Buzau~BZ|Calarasi~CL|Caras-Severin~CS|Cluj~CJ|Constanta~CT|Covasna~CV|Dambovita~DB|Dolj~DJ|Galati~GL|Giurgiu~GR|Gorj~GJ|Harghita~HR|Hunedoara~HD|Ialomita~IL|Iasi~IS|Maramures~MM|Mehedinti~MH|Mures~MS|Neamt~NT|Olt~OT|Prahova~PH|Salaj~SJ|Satu Mare~SM|Sibiu~SB|Suceava~SV|Teleorman~TR|Timis~TM|Tulcea~TL|Valcea~VL|Vaslui~VS|Vrancea~VN"], ["Russian Federation", "RU", "Republic of Adygea~AD|Republic of Altai (Gorno-Altaysk)~AL|Altai Krai~ALT|Amur Oblast~AMU|Arkhangelsk Oblast~ARK|Astrakhan Oblast~AST|Republic of Bashkortostan~BA|Belgorod Oblast~BEL|Bryansk Oblast~BRY|Republic of Buryatia~BU|Chechen Republic~CE|Chelyabinsk Oblast~CHE|Chukotka Autonomous Okrug~CHU|Chuvash Republic~CU|Republic of Dagestan~DA|Republic of Ingushetia~IN|Irkutsk Oblast~IRK|Ivanovo Oblast~IVA|Jewish Autonomous Oblast~JEW|Kabardino-Balkar Republic~KB|Kaliningrad Oblast~KLN|Republic of Kalmykia~KL|Kaluga Oblast~KLU|Kamchatka Krai~KAM|Karachay-Cherkess Republic~KC|Republic of Karelia~KR|Khabarovsk Krai~KHA|Republic of Khakassia~KK|Khanty-Mansi Autonomous Okrug - Yugra~KHM|Kemerovo Oblast~KEM|Kirov Oblast~KIR|Komi Republic~KO|Kostroma Oblast~KOS|Krasnodar Krai~KDA|Krasnoyarsk Krai~KYA|Kurgan Oblast~KGN|Kursk Oblast~KRS|Leningrad Oblast~LEN|Lipetsk Oblast~LIP|Magadan Oblast~MAG|Mari El Republic~ME|Republic of Mordovia~MO|Moscow Oblast~MOS|Moscow~MOW|Murmansk Oblast~MU|Nenets Autonomous Okrug~NEN|Nizhny Novgorod Oblast~NIZ|Novgorod Oblast~NGR|Novosibirsk Oblast~NVS|Omsk Oblast~OMS|Orenburg Oblast~ORE|Oryol Oblast~ORL|Penza Oblast~PNZ|Perm Krai~PER|Primorsky Krai~PRI|Pskov Oblast~PSK|Rostov Oblast~ROS|Ryazan Oblast~RYA|Saint Petersburg~SPE|Sakha (Yakutia) Republic~SA|Sakhalin Oblast~SAK|Samara Oblast~SAM|Saratov Oblast~SAR|Republic of North Ossetia-Alania~NOA|Smolensk Oblast~SMO|Stavropol Krai~STA|Sverdlovsk Oblast~SVE|Tambov Oblast~TAM|Republic of Tatarstan~TA|Tomsk Oblast~TOM|Tuva Republic~TU|Tula Oblast~TUL|Tver Oblast~TVE|Tyumen Oblast~TYU|Udmurt Republic~UD|Ulyanovsk Oblast~ULY|Vladimir Oblast~VLA|Volgograd Oblast~VGG|Vologda Oblast~VLG|Voronezh Oblast~VOR|Yamalo-Nenets Autonomous Okrug~YAN|Yaroslavl Oblast~YAR|Zabaykalsky Krai~ZAB"], ["Rwanda", "RW", "Kigali~01|Eastern~02|Northern~03|Western~04|Southern~05"], ["Saint Barthélemy", "BL", "Au Vent~02|Sous le Vent~01"], ["Saint Helena, Ascension and Tristan da Cunha", "SH", "Ascension~AC|Saint Helena~HL|Tristan da Cunha~TA"], ["Saint Kitts and Nevis", "KN", "Saint Kitts~K|Nevis~N"], ["Saint Lucia", "LC", "Anse-la-Raye~01|Canaries~12|Castries~02|Choiseul~03|Dennery~05|Gros Islet~06|Laborie~07|Micoud~08|Soufriere~10|Vieux Fort~11"], ["Saint Martin", "MF", "Saint Martin"], ["Saint Pierre and Miquelon", "PM", "Miquelon|Saint Pierre"], ["Saint Vincent and the Grenadines", "VC", "Charlotte~01|Grenadines~06|Saint Andrew~02|Saint David~03|Saint George~04|Saint Patrick~05"], ["Samoa", "WS", "A'ana~AA|Aiga-i-le-Tai~AL|Atua~AT|Fa'asaleleaga~FA|Gaga'emauga~GE|Gagaifomauga~GI|Palauli~PA|Satupa'itea~SA|Tuamasaga~TU|Va'a-o-Fonoti~VF|Vaisigano~VS"], ["San Marino", "SM", "Acquaviva~01|Borgo Maggiore~06|Chiesanuova~02|Domagnano~03|Faetano~04|Fiorentino~05|Montegiardino~08|San Marino~07|Serravalle~09"], ["Sao Tome and Principe", "ST", "Principe~P|Sao Tome~S"], ["Saudi Arabia", "SA", "'Asir~14|Al Bahah~11|Al Hudud ash Shamaliyah~08|Al Jawf~12|Al Madinah al Munawwarah~03|Al Qasim~05|Ar Riyad~01|Ash Sharqiyah~04|Ha'il~06|Jazan~09|Makkah al Mukarramah~02|Najran~10|Tabuk~07"], ["Senegal", "SN", "Dakar~DK|Diourbel~DB|Fatick~FK|Kaffrine~KA|Kaolack~KL|Kedougou~KE|Kolda~KD|Louga~LG|Matam~MT|Saint-Louis~SL|Sedhiou~SE|Tambacounda~TC|Thies~TH|Ziguinchor~ZG"], ["Serbia", "RS", "Beograd (Belgrade)~00|Borski~14|Braničevski~11|Jablanički~23|Južnobački~06|Južnobanatski~04|Kolubarski~09|Kosovski~25|Kosovsko-Mitrovački~28|Kosovsko-Pomoravski~29|Mačvanski~08|Moravički~17|Nišavski~20|Pčinjski~24|Pećki~26|Pirotski~22|Podunavski~10|Pomoravski~13|Prizrenski~27|Rasinski~19|Raški~18|Severnobački~01|Severnobanatski~03|Srednjebanatski~02|Sremski~07|Šumadijski~12|Toplički~21|Zaječarski~15|Zapadnobački~05|Zlatiborski~16"], ["Seychelles", "SC", "Anse aux Pins~01|Anse Boileau~02|Anse Etoile~03|Anse Royale~05|Anu Cap~04|Baie Lazare~06|Baie Sainte Anne~07|Beau Vallon~08|Bel Air~09|Bel Ombre~10|Cascade~11|Glacis~12|Grand'Anse Mahe~13|Grand'Anse Praslin~14|La Digue~15|La Riviere Anglaise~16|Les Mamelles~24|Mont Buxton~17|Mont Fleuri~18|Plaisance~19|Pointe La Rue~20|Port Glaud~21|Roche Caiman~25|Saint Louis~22|Takamaka~23"], ["Sierra Leone", "SL", "Eastern~E|Northern~N|Southern~S|Western~W"], ["Singapore", "SG", "Central Singapore~01|North East~02|North West~03|South East~04|South West~05"], ["Sint Maarten (Dutch part)", "SX", "Sint Maarten"], ["Slovakia", "SK", "Banskobystricky~BC|Bratislavsky~BL|Kosicky~KI|Nitriansky~NI|Presovsky~PV|Trenciansky~TC|Trnavsky~TA|Zilinsky~ZI"], ["Slovenia", "SI", "Ajdovscina~001|Apace~195|Beltinci~002|Benedikt~148|Bistrica ob Sotli~149|Bled~003|Bloke~150|Bohinj~004|Borovnica~005|Bovec~006|Braslovce~151|Brda~007|Brezice~009|Brezovica~008|Cankova~152|Celje~011|Cerklje na Gorenjskem~012|Cerknica~013|Cerkno~014|Cerkvenjak~153|Cirkulane~196|Crensovci~015|Crna na Koroskem~016|Crnomelj~017|Destrnik~018|Divaca~019|Dobje~154|Dobrepolje~020|Dobrna~155|Dobrova-Polhov Gradec~021|Dobrovnik~156|Dol pri Ljubljani~022|Dolenjske Toplice~157|Domzale~023|Dornava~024|Dravograd~025|Duplek~026|Gorenja Vas-Poljane~027|Gorisnica~028|Gorje~207|Gornja Radgona~029|Gornji Grad~030|Gornji Petrovci~031|Grad~158|Grosuplje~032|Hajdina~159|Hoce-Slivnica~160|Hodos~161|Horjul~162|Hrastnik~034|Hrpelje-Kozina~035|Idrija~036|Ig~037|Ilirska Bistrica~038|Ivancna Gorica~039|Izola~040s|Jesenice~041|Jursinci~042|Kamnik~043|Kanal~044|Kidricevo~045|Kobarid~046|Kobilje~047|Kocevje~048|Komen~049|Komenda~164|Koper~050|Kodanjevica na Krki~197|Kostel~165|Kozje~051|Kranj~052|Kranjska Gora~053|Krizevci~166|Krsko~054|Kungota~055|Kuzma~056|Lasko~057|Lenart~058|Lendava~059|Litija~068|Ljubljana~061|Ljubno~062|Ljutomer~063|Log-Dragomer~208|Logatec~064|Loska Dolina~065|Loski Potok~066|Lovrenc na Pohorju~167|Lukovica~068|Luce~067|Majsperk~069|Makole~198|Maribor~070|Markovci~168|Medvode~071|Menges~072|Metlika~073|Mezica~074|Miklavz na Dravskem Polju~169|Miren-Kostanjevica~075|Mirna~212|Mirna Pec~170|Mislinja~076|Mokronog-Trebelno~199|Moravce~077|Moravske Toplice~078|Mozirje~079|Murska Sobota~080|Naklo~082|Nazarje~083|Nova Gorica~084|Novo Mesto~085|Odranci~086|Ormoz~087|Osilnica~088|Pesnica~089|Piran~090|Pivka~091|Podcetrtek~092|Podlehnik~172|Podvelka~093|Poljcane~200|Postojna~094|Prebold~174|Preddvor~095|Prevalje~175|Ptuj~096|Race-Fram~098|Radece~099|Radenci~100|Radlje ob Dravi~101|Radovljica~102|Ravne na Koroskem~103|Razkrizje~176|Recica ob Savinji~209|Rence-Vogrsko~201|Ribnica~104|Ribnica na Poboriu~177|Rogaska Slatina~106|Rogasovci~105|Rogatec~107|Ruse~108|Salovci~033|Selnica ob Dravi~178|Semic~109|Sempeter-Vrtojba~183|Sencur~117|Sentilj~118|Sentjernej~119|Sentjur~120|Sentrupert~211|Sevnica~110|Sezana~111|Skocjan~121|Skofja Loka~122|Skofljica~123|Slovenj Gradec~112|Slovenska Bistrica~113|Slovenske Konjice~114|Smarje pri elsah~124|Smarjeske Toplice~206|Smartno ob Paki~125|Smartno pri Litiji~194|Sodrazica~179|Solcava~180|Sostanj~126|Sredisce ob Dravi~202|Starse~115|Store~127|Straza~203|Sveta Ana~181|Sveta Trojica v Slovenskih Goricah~204|Sveta Andraz v Slovenskih Goricah~182|Sveti Jurij~116|Sveti Jurij v Slovenskih Goricah~210|Sveti Tomaz~205|Tabor~184|Tisina~128|Tolmin~128|Trbovlje~129|Trebnje~130|Trnovska Vas~185|Trzin~186|Trzic~131|Turnisce~132|Velenje~133|Velika Polana~187|Velike Lasce~134|Verzej~188|Videm~135|Vipava~136|Vitanje~137|Vodice~138|Vojnik~139|Vransko~189|Vrhnika~140|Vuzenica~141|Zagorje ob Savi~142|Zavrc~143|Zrece~144|Zalec~190|Zelezniki~146|Zetale~191|Ziri~147|Zirovnica~192|Zuzemberk~193"], ["Solomon Islands", "SB", "Central~CE|Choiseul~CH|Guadalcanal~GU|Honiara~CT|Isabel~IS|Makira-Ulawa~MK|Malaita~ML|Rennell and Bellona~RB|Temotu~TE|Western~WE"], ["Somalia", "SO", "Awdal~AW|Bakool~BK|Banaadir~BN|Bari~BR|Bay~BY|Galguduud~GA|Gedo~GE|Hiiraan~HI|Jubbada Dhexe~JD|Jubbada Hoose~JH|Mudug~MU|Nugaal~NU|Sanaag~SA|Shabeellaha Dhexe~SD|Shabeellaha Hoose~SH|Sool~SO|Togdheer~TO|Woqooyi Galbeed~WO"], ["South Africa", "ZA", "Eastern Cape~EC|Free State~FS|Gauteng~GT|KwaZulu-Natal~NL|Limpopo~LP|Mpumalanga~MP|Northern Cape~NC|North West~NW|Western Cape~WC"], ["South Georgia and South Sandwich Islands", "GS", "Bird Island|Bristol Island|Clerke Rocks|Montagu Island|Saunders Island|South Georgia|Southern Thule|Traversay Islands"], ["South Sudan", "SS", "Central Equatoria~CE|Eastern Equatoria~EE|Jonglei~JG|Lakes~LK|Northern Bahr el Ghazal~BN|Unity~UY|Upper Nile~NU|Warrap~WR|Western Bahr el Ghazal~BW|Western Equatoria~EW"], ["Spain", "ES", "Albacete~CM|Alicante~VC|Almería~AN|Araba/Álava~VI|Asturias~O|Ávila~AV|Badajoz~BA|Barcelona~B|Bizkaia~BI|Burgos~BU|Cáceres~CC|Cádiz~CA|Cantabria~S|Castellón~CS|Cueta~CU|Ciudad Real~CR|Córdoba~CO|A Coruña~C|Cuenca~CU|Gipuzkoa~SS|Girona~GI|Granada~GR|Guadalajara~GU|Huelva~H|Huesca~HU|Illes Balears~PM|Jaén~J|León~LE|Lleida~L|Lugo~LU|Madrid~M|Málaga~MA|Melilla~ML|Murcia~MU|Navarre~NA|Ourense~OR|Palencia~P|Las Palmas~GC|Pontevedra~PO|La Rioja~LO|Salamanca~SA|Santa Cruz de Tenerife~TF|Segovia~SG|Sevilla~SE|Soria~SO|Tarragona~T|Teruel~TE|Toledo~TO|Valencia~V|Valladolid~VA|Zamora~ZA|Zaragoza~Z"], ["Sri Lanka", "LK", "Basnahira~1|Dakunu~3|Madhyama~2|Naegenahira~5|Sabaragamuwa~9|Uturu~4|Uturumaeda~7|Vayamba~6|Uva~8"], ["Sudan", "SD", "Al Bahr al Ahmar~RS|Al Jazirah~GZ|Al Khartum~KH|Al Qadarif~GD|An Nil al Abyad~NW|An Nil al Azraq~NB|Ash Shamaliyah~NO|Gharb Darfur~DW|Gharb Kurdufan~GK|Janub Darfur~DS|Janub Kurdufan~KS|Kassala~KA|Nahr an Nil~NR|Shamal Darfur~DN|Sharq Darfur~DE|Shiamal Kurdufan~KN|Sinnar~SI|Wasat Darfur Zalinjay~DC"], ["Suriname", "SR", "Brokopondo~BR|Commewijne~CM|Coronie~CR|Marowijne~MA|Nickerie~NI|Para~PR|Paramaribo~PM|Saramacca~SA|Sipaliwini~SI|Wanica~WA"], ["Swaziland", "SZ", "Hhohho~HH|Lubombo~LU|Manzini~MA|Shiselweni~SH"], ["Sweden", "SE", "Blekinge~K|Dalarnas~W|Gotlands~X|Gavleborgs~I|Hallands~N|Jamtlands~Z|Jonkopings~F|Kalmar~H|Kronobergs~G|Norrbottens~BD|Orebro~T|Ostergotlands~E|Skane~M|Sodermanlands~D|Stockholm~AB|Varmlands~S|Vasterbottens~AC|Vasternorrlands~Y|Vastmanlands~U|Vastra Gotalands~O"], ["Switzerland", "CH", "Aargau~AG|Appenzell Ausserrhoden~AR|Appenzell Innerhoden~AI|Basel-Landschaft~BL|Basel-Stadt~BS|Bern~BE|Fribourg~FR|Genève~GE|Glarus~GL|Graubünden~GR|Jura~JU|Luzern~LU|Neuchâtel~NE|Nidwalden~NW|Obwalden~OW|Sankt Gallen~SG|Schaffhausen~SH|Schwyz~SZ|Solothurn~SO|Thurgau~TG|Ticino~TI|Uri~UR|Valais~VS|Vaud~VD|Zug~ZG|Zürich~ZH"], ["Syrian Arab Republic", "SY", "Al Hasakah~HA|Al Ladhiqiyah~LA|Al Qunaytirah~QU|Ar Raqqah~RA|As Suwayda'~SU|Dar'a~DR|Dayr az Zawr~DY|Dimashq~DI|Halab~HL|Hamah~HM|Hims~HI|Idlib~ID|Rif Dimashq~RD|Tartus~TA"], ["Taiwan", "TW", "Chang-hua~CHA|Chia-i~CYQ|Hsin-chu~HSQ|Hua-lien~HUA|Kao-hsiung~KHH|Keelung~KEE|Kinmen~KIN|Lienchiang~LIE|Miao-li~MIA|Nan-t'ou~NAN|P'eng-hu~PEN|New Taipei~NWT|P'ing-chung~PIF|T'ai-chung~TXG|T'ai-nan~TNN|T'ai-pei~TPE|T'ai-tung~TTT|T'ao-yuan~TAO|Yi-lan~ILA|Yun-lin~YUN"], ["Tajikistan", "TJ", "Dushanbe~DU|Kŭhistoni Badakhshon~GB|Khatlon~KT|Sughd~SU"], ["Tanzania, United Republic of", "TZ", "Arusha~01|Coast~19|Dar es Salaam~02|Dodoma~03|Iringa~04|Kagera~05|Kigoma~08|Kilimanjaro~09|Lindi~12|Manyara~26|Mara~13|Mbeya~14|Morogoro~16|Mtwara~17|Mwanza~18|Pemba North~06|Pemba South~10|Rukwa~20|Ruvuma~21|Shinyanga~22|Singida~23|Tabora~24|Tanga~25|Zanzibar North~07|Zanzibar Central/South~11|Zanzibar Urban/West~15"], ["Thailand", "TH", "Amnat Charoen~37|Ang Thong~15|Bueng Kan~38|Buri Ram~31|Chachoengsao~24|Chai Nat~18|Chaiyaphum~36|Chanthaburi~22|Chiang Mai~50|Chiang Rai~57|Chon Buri~20|Chumphon~86|Kalasin~46|Kamphaeng Phet~62|Kanchanaburi~71|Khon Kaen~40|Krabi~81|Krung Thep Mahanakhon (Bangkok)~10|Lampang~52|Lamphun~51|Loei~42|Lop Buri~16|Mae Hong Son~58|Maha Sarakham~44|Mukdahan~49|Nakhon Nayok~26|Nakhon Phathom~73|Nakhon Phanom~48|Nakhon Ratchasima~30|Nakhon Sawan~60|Nakhon Si Thammarat~80|Nan~55|Narathiwat~96|Nong Bua Lam Phu~39|Nong Khai~43|Nonthaburi~12|Pathum Thani~13|Pattani~94|Phangnga~82|Phatthalung~93|Phayao~56|Phetchabun~76|Phetchaburi~76|Phichit~66|Phitsanulok~65|Phra Nakhon Si Ayutthaya~14|Phrae~54|Phuket~83|Prachin Buri~25|Prachuap Khiri Khan~77|Ranong~85|Ratchaburi~70|Rayong~21|Roi Et~45|Sa Kaeo~27|Sakon Nakhon~47|Samut Prakan~11|Samut Sakhon~74|Samut Songkhram~75|Saraburi~19|Satun~91|Sing Buri~17|Si Sa ket~33|Songkhla~90|Sukhothai~64|Suphan Buri~72|Surat Thani~84|Surin~32|Tak~63|Trang~92|Trat~23|Ubon Ratchathani~34|Udon Thani~41|Uthai Thani~61|Uttaradit~53|Yala~95|Yasothon~35"], ["Timor-Leste", "TL", "Aileu~AL|Ainaro~AN|Baucau~BA|Bobonaro~BO|Cova Lima~CO|Dili~DI|Ermera~ER|Lautem~LA|Liquica~LI|Manatuto~MT|Manufahi~MF|Oecussi~OE|Viqueque~VI"], ["Togo", "TG", "Centre~C|Kara~K|Maritime~M|Plateaux~P|Savannes~S"], ["Tokelau", "TK", "Atafu|Fakaofo|Nukunonu"], ["Tonga", "TO", "'Eua~01|Ha'apai~02|Niuas~03|Tongatapu~04|Vava'u~05"], ["Trinidad and Tobago", "TT", "Arima~ARI|Chaguanas~CHA|Couva-Tabaquite-Talparo~CTT|Diefo Martin~DMN|Mayaro-Rio Claro~MRC|Penal-Debe~PED|Point Fortin~PTF|Port-of-Spain~POS|Princes Town~PRT|San Fernando~SFO|San Juan-Laventille~SJL|Sangre Grande~SGE|Siparia~SIP|Tobago~TOB|Tunapuna-Piarco~TUP"], ["Tunisia", "TN", "Ariana~12|Beja~31|Ben Arous~13|Bizerte~23|Gabes~81|Gafsa~71|Jendouba~32|Kairouan~41|Kasserine~42|Kebili~73|Kef~33|Mahdia~53|Medenine~82|Monastir~52|Nabeul~21|Sfax~61|Sidi Bouzid~43|Siliana~34|Sousse~51|Tataouine~83|Tozeur~72|Tunis~11|Zaghouan~22"], ["Turkey", "TR", "Adana~01|Adiyaman~02|Afyonkarahisar~03|Agri~04|Aksaray~68|Amasya~05|Ankara~06|Antalya~07|Ardahan~75|Artvin~08|Aydin~09|Balikesir~10|Bartin~74|Batman~72|Bayburt~69|Bilecik~11|Bingol~12|Bitlis~13|Bolu~14|Burdur~15|Bursa~16|Canakkale~17|Cankiri~18|Corum~19|Denizli~20|Diyarbakir~21|Duzce~81|Edirne~22|Elazig~23|Erzincan~24|Erzurum~25|Eskisehir~26|Gaziantep~27|Giresun~28|Gumushane~29|Hakkari~30|Hatay~31|Igdir~76|Isparta~32|Istanbul~34|Izmir~35|Kahramanmaras~46|Karabuk~78|Karaman~70|Kars~36|Kastamonu~37|Kayseri~38|Kilis~79|Kirikkale~71|Kirklareli~39|Kirsehir~40|Kocaeli~41|Konya~42|Kutahya~43|Malatya~44|Manisa~45|Mardin~47|Mersin~33|Mugla~48|Mus~49|Nevsehir~50|Nigde~51|Ordu~52|Osmaniye~80|Rize~53|Sakarya~54|Samsun~55|Sanliurfa~63|Siirt~56|Sinop~57|Sirnak~73|Sivas~58|Tekirdag~59|Tokat~60|Trabzon~61|Tunceli~62|Usak~64|Van~65|Yalova~77|Yozgat~66|Zonguldak~67"], ["Turkmenistan", "TM", "Ahal~A|Asgabat~S|Balkan~B|Dashoguz~D|Lebap~L|Mary~M"], ["Turks and Caicos Islands", "TC", "Turks and Caicos Islands"], ["Tuvalu", "TV", "Funafuti~FUN|Nanumanga~NMG|Nanumea~NMA|Niutao~NIT|Nui~NUI|Nukufetau~NKF|Nukulaelae~NKL|Vaitupu~VAU"], ["Uganda", "UG", "Abim~317|Adjumani~301|Amolatar~314|Amuria~216|Amuru~319|Apac~302|Arua~303|Budaka~217|Bududa~223|Bugiri~201|Bukedea~224|Bukwa~218|Buliisa~419|Bundibugyo~401|Bushenyi~402|Busia~202|Butaleja~219|Dokolo~318|Gulu~304|Hoima~403|Ibanda~416|Iganga~203|Isingiro~417|Jinja~204|Kaabong~315|Kabale~404|Kabarole~405|Kaberamaido~213|Kalangala~101|Kaliro~220|Kampala~102|Kamuli~205|Kamwenge~413|Kanungu~414|Kapchorwa~206|Kasese~406|Katakwi~207|Kayunga~112|Kibaale~407|Kiboga~103|Kiruhura~418|Kisoro~408|Kitgum~305|Koboko~316|Kotido~306|Kumi~208|Kyenjojo~415|Lira~307|Luwero~104|Lyantonde~116|Manafwa~221|Maracha~320|Masaka~105|Masindi~409|Mayuge~214|Mbale~209|Mbarara~410|Mityana~114|Moroto~308|Moyo~309|Mpigi~106|Mubende~107|Mukono~108|Nakapiripirit~311|Nakaseke~115|Nakasongola~109|Namutumba~222|Nebbi~310|Ntungamo~411|Oyam~321|Pader~312|Pallisa~210|Rakai~110|Rukungiri~412|Sembabule~111|Sironko~215|Soroti~211|Tororo~212|Wakiso~113|Yumbe~313"], ["Ukraine", "UA", "Cherkasy~71|Chernihiv~74|Chernivtsi~77|Dnipropetrovsk~12|Donetsk~14|Ivano-Frankivsk~26|Kharkiv~63|Kherson~65|Khmelnytskyi~68|Kiev~32|Kirovohrad~35|Luhansk~09|Lviv~46|Mykolaiv~48|Odessa~51|Poltava~53|Rivne~56|Sumy~59|Ternopil~61|Vinnytsia~05|Volyn~07|Zakarpattia~21|Zaporizhia~23|Zhytomyr~18|Avtonomna Respublika Krym~43|Kyïv~30|Sevastopol~40"], ["United Arab Emirates", "AE", "Abu Dhabi~AZ|Ajman~AJ|Dubai~DU|Fujairah~FU|Ras al Khaimah~RK|Sharjah~SH|Umm Al Quwain~UQ"], ["United Kingdom", "GB", "Avon~AVN|Bedfordshire~BDF|Berkshire~BRK|Bristol, City of~COB|Buckinghamshire~BKM|Cambridgeshire~CAM|Cheshire~CHS|Cleveland~CLV|Cornwall~CON|Cumbria~CMA|Derbyshire~DBY|Devon~DEV|Dorset~DOR|Durham~DUR|East Sussex~SXE|Essex~ESS|Gloucestershire~GLS|Greater London~LND|Greater Manchester~GTM|Hampshire (County of Southampton)~HAM|Hereford and Worcester~HWR|Herefordshire~HEF|Hertfordshire~HRT|Isle of Wight~IOW|Kent~KEN|Lancashire~LAN|Leicestershire~LEI|Lincolnshire~LIN|London~LDN|Merseyside~MSY|Middlesex~MDX|Norfolk~NFK|Northamptonshire~NTH|Northumberland~NBL|North Humberside~NHM|North Yorkshire~NYK|Nottinghamshire~NTT|Oxfordshire~OXF|Rutland~RUT|Shropshire~SAL|Somerset~SOM|South Humberside~SHM|South Yorkshire~SYK|Staffordshire~STS|Suffolk~SFK|Surrey~SRY|Tyne and Wear~TWR|Warwickshire~WAR|West Midlands~WMD|West Sussex~SXW|West Yorkshire~WYK|Wiltshire~WIL|Worcestershire~WOR|Antrim~ANT|Armagh~ARM|Belfast, City of~BLF|Down~DOW|Fermanagh~FER|Londonderry~LDY|Derry, City of~DRY|Tyrone~TYR|Aberdeen, City of~AN|Aberdeenshire~ABD|Angus (Forfarshire)~ANS|Argyll~AGB|Ayrshire~ARG|Banffshire~BAN|Berwickshire~BEW|Bute~BUT|Caithness~CAI|Clackmannanshire~CLK|Cromartyshire~COC|Dumfriesshire~DFS|Dunbartonshire (Dumbarton)~DNB|Dundee, City of~DD|East Lothian (Haddingtonshire)~ELN|Edinburgh, City of~EB|Fife~FIF|Glasgow, City of~GLA|Inverness-shire~INV|Kincardineshire~KCD|Kinross-shire~KRS|Kirkcudbrightshire~KKD|Lanarkshire~LKS|Midlothian (County of Edinburgh)~MLN|Moray (Elginshire)~MOR|Nairnshire~NAI|Orkney~OKI|Peeblesshire~PEE|Perthshire~PER|Renfrewshire~RFW|Ross and Cromarty~ROC|Ross-shire~ROS|Roxburghshire~ROX|Selkirkshire~SEL|Shetland (Zetland)~SHI|Stirlingshire~STI|Sutherland~SUT|West Lothian (Linlithgowshire)~WLN|Wigtownshire~WIG|Clwyd~CWD|Dyfed~DFD|Gwent~GNT|Gwynedd~GWN|Mid Glamorgan~MGM|Powys~POW|South Glamorgan~SGM|West Glamorgan~WGM"], ["United States", "US", "Alabama~AL|Alaska~AK|American Samoa~AS|Arizona~AZ|Arkansas~AR|California~CA|Colorado~CO|Connecticut~CT|Delaware~DE|District of Columbia~DC|Micronesia~FM|Florida~FL|Georgia~GA|Guam~GU|Hawaii~HI|Idaho~ID|Illinois~IL|Indiana~IN|Iowa~IA|Kansas~KS|Kentucky~KY|Louisiana~LA|Maine~ME|Marshall Islands~MH|Maryland~MD|Massachusetts~MA|Michigan~MI|Minnesota~MN|Mississippi~MS|Missouri~MO|Montana~MT|Nebraska~NE|Nevada~NV|New Hampshire~NH|New Jersey~NJ|New Mexico~NM|New York~NY|North Carolina~NC|North Dakota~ND|Northern Mariana Islands~MP|Ohio~OH|Oklahoma~OK|Oregon~OR|Palau~PW|Pennsylvania~PA|Puerto Rico~PR|Rhode Island~RI|South Carolina~SC|South Dakota~SD|Tennessee~TN|Texas~TX|Utah~UT|Vermont~VT|Virgin Islands~VI|Virginia~VA|Washington~WA|West Virginia~WV|Wisconsin~WI|Wyoming~WY|Armed Forces Americas~AA|Armed Forces Europe, Canada, Africa and Middle East~AE|Armed Forces Pacific~AP"], ["United States Minor Outlying Islands", "UM", "Baker Island~81|Howland Island~84|Jarvis Island~86|Johnston Atoll~67|Kingman Reef~89|Midway Islands~71|Navassa Island~76|Palmyra Atoll~95|Wake Island~79|Bajo Nuevo Bank~BN|Serranilla Bank~SB"], ["Uruguay", "UY", "Artigas~AR|Canelones~CA|Cerro Largo~CL|Colonia~CO|Durazno~DU|Flores~FS|Florida~FD|Lavalleja~LA|Maldonado~MA|Montevideo~MO|Paysandú~PA|Río Negro~RN|Rivera~RV|Rocha~RO|Salto~SA|San José~SJ|Soriano~SO|Tacuarembó~TA|Treinta y Tres~TT"], ["Uzbekistan", "UZ", "Toshkent shahri~TK|Andijon~AN|Buxoro~BU|Farg‘ona~FA|Jizzax~JI|Namangan~NG|Navoiy~NW|Qashqadaryo (Qarshi)~QA|Samarqand~SA|Sirdaryo (Guliston)~SI|Surxondaryo (Termiz)~SU|Toshkent wiloyati~TO|Xorazm (Urganch)~XO|Qoraqalpog‘iston Respublikasi (Nukus)~QR"], ["Vanuatu", "VU", "Malampa~MAP|Pénama~PAM|Sanma~SAM|Shéfa~SEE|Taféa~TAE|Torba~TOB"], ["Venezuela, Bolivarian Republic of", "VE", "Dependencias Federales~W|Distrito Federal~A|Amazonas~Z|Anzoátegui~B|Apure~C|Aragua~D|Barinas~E|Bolívar~F|Carabobo~G|Cojedes~H|Delta Amacuro~Y|Falcón~I|Guárico~J|Lara~K|Mérida~L|Miranda~M|Monagas~N|Nueva Esparta~O|Portuguesa~P|Sucre~R|Táchira~S|Trujillo~T|Vargas~X|Yaracuy~U|Zulia~V"], ["Vietnam", "VN", "Đồng Nai~39|Đồng Tháp~45|Gia Lai~30|Hà Giang~03|Hà Nam~63|Hà Tây~15|Hà Tĩnh~23|Hải Dương~61|Hậu Giang~73|Hòa Bình~14|Hưng Yên~66|Khánh Hòa~34|Kiên Giang~47|Kon Tum~28|Lai Châu~01|Lâm Đồng~35|Lạng Sơn~09|Lào Cai~02|Long An~41|Nam Định~67|Nghệ An~22|Ninh Bình~18|Ninh Thuận~36|Phú Thọ~68|Phú Yên~32|Quảng Bình~24|Quảng Nam~27|Quảng Ngãi~29|Quảng Ninh~13|Quảng Trị~25|Sóc Trăng~52|Sơn La~05|Tây Ninh~37|Thái Bình~20|Thái Nguyên~69|Thanh Hóa~21|Thừa Thiên–Huế~26|Tiền Giang~46|Trà Vinh~51|Tuyên Quang~07|Vĩnh Long~49|Vĩnh Phúc~70|Yên Bái~06|Cần Thơ~CT|Đà Nẵng~DN|Hà Nội~HN|Hải Phòng~HP|Hồ Chí Minh (Sài Gòn)~SG"], ["Virgin Islands, British", "VG", "Anegada~ANG|Jost Van Dyke~JVD|Tortola~TTA|Virgin Gorda~VGD"], ["Virgin Islands, U.S.", "VI", "St. Thomas~STH|St. John~SJO|St. Croix~SCR"], ["Wallis and Futuna", "WF", "Alo~ALO|Sigave~SIG|Wallis~WAL"], ["Western Sahara", "EH", "Es Smara~ESM|Boujdour~BOD|Laâyoune~LAA|Aousserd~AOU|Oued ed Dahab~OUD"], ["Yemen", "YE", "Abyān~AB|'Adan~AD|Aḑ Ḑāli'~DA|Al Bayḑā'~BA|Al Ḩudaydah~HU|Al Jawf~JA|Al Mahrah~MR|Al Maḩwīt~MW|'Amrān~AM|Dhamār~DH|Ḩaḑramawt~HD|Ḩajjah~HJ|Ibb~IB|Laḩij~LA|Ma'rib~MA|Raymah~RA|Şā‘dah~SD|Şan‘ā'~SN|Shabwah~SH|Tā‘izz~TA"], ["Zambia", "ZM", "Central~02|Copperbelt~08|Eastern~03|Luapula~04|Lusaka~09|Northern~05|North-Western~06|Southern~07|Western~01"], ["Zimbabwe", "ZW", "Bulawayo~BU|Harare~HA|Manicaland~MA|Mashonaland Central~MC|Mashonaland East~ME|Mashonaland West~MW|Masvingo~MV|Matabeleland North~MN|Matabeleland South~MS|Midlands~MI"]],
    a = function a() {
      $(".crs-country").each(n);
    },
    n = function n() {
      var a = this;
      if ("true" !== a.getAttribute("data-crs-loaded")) {
        a.length = 0;
        var n = $(a).attr("data-default-option"),
          i = n || "Select country",
          e = a.getAttribute("data-show-default-option");
        m = null === e || "true" === e;
        var r = $(a).attr("data-default-value"),
          o = $(a).attr("data-value"),
          l = 0;
        m && (this.options[0] = new Option(i, "")), k({
          whitelist: a.getAttribute("data-whitelist"),
          blacklist: a.getAttribute("data-blacklist"),
          preferred: a.getAttribute("data-preferred"),
          preferredDelim: a.getAttribute("data-preferred-delim")
        });
        for (var t = 0; t < M.length; t++) {
          var s = "shortcode" == o || "2-char" === o ? M[t][1] : M[t][0];
          M[t][4] && (s = ""), a.options[a.length] = new Option(M[t][0], s), null != r && r === s && (l = t, m && l++);
        }
        this.selectedIndex = l;
        var u = $(a).attr("data-region-id");
        if (u) {
          var d = $("#" + u)[0];
          if (d) {
            if (B(d), $(this).on("change", function () {
              b(a, d);
            }), r && 0 < a.selectedIndex) {
              b(a, d);
              var h = $(d).attr("data-default-value"),
                S = "shortcode" === d.getAttribute("data-value");
              if (null !== h) {
                var A = m ? a.selectedIndex - 1 : a.selectedIndex,
                  g = M[A][3];
                c(d, g, h, S);
              }
            } else !1 === m && b(a, d);
          } else console.error("Region dropdown DOM node with ID " + u + " not found.");
          a.setAttribute("data-crs-loaded", "true");
        } else console.error("Missing data-region-id on country-region-selector country field.");
      }
    },
    B = function B(a) {
      var n = $(a).attr("data-blank-option"),
        i = n || "-",
        e = a.getAttribute("data-show-default-option");
      h = null === e || "true" === e, a.length = 0, h && (a.options[0] = new Option(i, ""), a.selectedIndex = 0);
    },
    k = function k(a) {
      var n = l,
        i = [],
        e = 0;
      if (a.whitelist) {
        var r = a.whitelist.split(",");
        for (e = 0; e < l.length; e++) -1 !== r.indexOf(l[e][1]) && i.push(l[e]);
        n = i;
      } else if (a.blacklist) {
        var o = a.blacklist.split(",");
        for (e = 0; e < l.length; e++) -1 === o.indexOf(l[e][1]) && i.push(l[e]);
        n = i;
      }
      a.preferred && (n = s(n, a.preferred, a.preferredDelim)), M = n, t();
    },
    t = function t() {
      for (var a = 0; a < M.length; a++) {
        for (var n = {
            hasShortcodes: /~/.test(M[a][2]),
            regions: []
          }, i = M[a][2].split("|"), e = 0; e < i.length; e++) {
          var r = i[e].split("~");
          n.regions.push([r[0], r[1]]);
        }
        M[a][3] = n;
      }
    },
    c = function c(a, n, i, e) {
      for (var r = 0; r < n.regions.length; r++) {
        if ((e && n.hasShortcodes && n.regions[r][1] ? n.regions[r][1] : n.regions[r][0]) === i) {
          a.selectedIndex = h ? r + 1 : r;
          break;
        }
      }
    },
    b = function b(a, n) {
      var i = m ? a.selectedIndex - 1 : a.selectedIndex,
        e = $(n).attr("data-default-option"),
        r = n.getAttribute("data-value"),
        o = e || "Select region";
      if ("" === a.value) B(n);else {
        n.length = 0, h && (n.options[0] = new Option(o, ""));
        var l = M[i][3],
          t = "shortcode" === r && l.hasShortcodes,
          s = t ? 1 : 0;
        l.regions.sort(function (a, n) {
          var i = a[s].toLowerCase(),
            e = n[s].toLowerCase();
          return i < e ? -1 : e < i ? 1 : 0;
        });
        for (var u = 0; u < l.regions.length; u++) {
          var d = t ? l.regions[u][1] : l.regions[u][0];
          n.options[n.length] = new Option(l.regions[u][0], d);
        }
        n.selectedIndex = 0;
      }
    },
    s = function s(a, n, i) {
      var e = n.split(",").reverse(),
        r = {},
        o = !1,
        l = a.filter(function (a) {
          return -1 === e.indexOf(a[1]) || (r[a[1]] = a, !(o = !0));
        });
      o && i && l.unshift([i, "", "", {}, !0]);
      for (var t = 0; t < e.length; t++) {
        var s = e[t];
        l.unshift(r[s]);
      }
      return l;
    };
  return $(a), {
    init: a
  };
});

},{}],7:[function(require,module,exports){
"use strict";

var $ = require('jquery');
window.$ = window.jQuery = $;
require('./jquery.crs.min');
require('./jQuery-zoom');
require('./parsley.min');
window.popper = require('./popper');
window.tippy = require('./tippy');
window.Splide = require('./splide');
require('./splide-grid');
window.intlTelInput = require('./intlTelInput');
window.zenscroll = require('./zenscroll');
window.fancybox = require('./fancybox.min');

/** -- Globals */
/** Constants / Variables / Utils / Ajax */
var constants = require('./modules/constants');
var variables = require('./modules/variables');
var utils = require('./modules/utils');
var ajax = require('./modules/ajax');
Object.assign(window, constants, variables, utils, ajax);

/** -- Append Elements */
/* Page Tips */
window.PageTip = require('./modules/dynamic/pageTip');
/* Backdrop */
window.Backdrop = require('./modules/dynamic/backdrop');
/* Page Confetti */
window.PageConfetti = require('./modules/dynamic/page-confetti');
/* Ask Modal */
window.AskModal = require('./modules/dynamic/ask-modal');
/* Loader Root */
window.rootLoader = require('./modules/dynamic/root-loader');
/* Sign Up price alerts */
require('./modules/dynamic/price-modal');

/** -- Page Elements */
// Login
require('./modules/login');

/** Header / Footer
 * @type Objects
 */
window.header = require('./modules/elements/header');
window.footer = require('./modules/elements/footer');

/** Page Elements
 * @type Object
 */
window.pageEls = require('./modules/elements/page-elements');
window.pageReviews = require('./modules/elements/page-reviews');
window.heroSplide = require('./modules/elements/hero-splide');
window.pageAlerts = require('./modules/elements/page-alerts');
window.sirvCards = require('./modules/elements/sirv');

/** Modals
 * Currency / Cart / Menu / Mail / Quiz / Sign / Menu
 * @type Obejcts
 */
window.currencyModal = require('./modules/modals/currency-modal');
window.cartModal = require('./modules/modals/cart-modal');
// window.bookModal = require('./modules/modals/book-modal')
window.mailModal = require('./modules/modals/mail-modal');
window.quizModal = require('./modules/modals/quiz-modal');
window.salesModal = require('./modules/modals/sales-modal');
var noticeModal = require('./modules/modals/notice-modal');
var Menu = require('./modules/modals/menu');
var AddCartModal = require('./modules/dynamic/add-cart-modal');
// const ShareButtons = require('./modules/elements/share-buttons')

/** PG Filters/Select/Modal
 * @type Objects
 */
window.pgSelect = require('./modules/elements/pg-select');
window.pgModal = require('./modules/elements/pg-modal');

/** -- Pages */
var /* Loan App : /financing */
  LoanApp = require('./modules/pages/loan-app'),
  /* Job Apply : /apply-job */
  JobApp = require('./modules/pages/job-app'),
  /* Sell Watch : /sell-my-watch */
  SellWatch = require('./modules/pages/sell-watch'),
  /* Loose Diamonds : /loose-diamonds */
  LooseDiamonds = require('./modules/pages/loose-diamonds'),
  /* Homepage : /index */
  Homepage = require('./modules/pages/homepage'),
  ResultsPage = require('./modules/pages/results'),
  ProductPage = require('./modules/pages/product'),
  /* My Bag : /cart */
  myBag = require('./modules/pages/my-bag'),
  /* Account Profile : /account */
  account = require('./modules/pages/account-page'),
  /* Locations : /locations */
  locationPage = require('./modules/pages/location-page'),
  /* Sell Pages : /sell */
  sellPage = require('./modules/pages/sell-page'),
  /* Pass Reset : /pass-reset */
  passReset = require('./modules/pages/pass-reset'),
  /* Blog : /blog */
  blogPage = require('./modules/pages/blog-page'),
  /* Form Page : /form */
  formPage = require('./modules/pages/form-page'),
  /* Tag Preview : /tag */
  tagPreview = require('./modules/pages/tag-preview');
var sirvCards = require('./modules/elements/sirv');

// Product Cards media loader
document.addEventListener('DOMContentLoaded', function () {
  initLazyLoadForProductCards();
});

/** -- Initialize Page Objects */
var pageObjectsArr = [header, cartModal, currencyModal, pgModal, footer, pageEls, myBag, account, locationPage, pageAlerts, sirvCards, sellPage,
// bookModal,
passReset, pageReviews, blogPage, heroSplide, mailModal, quizModal, salesModal, formPage, tagPreview];
var initPageObjects = function initPageObjects() {
  for (var _i = 0, _pageObjectsArr = pageObjectsArr; _i < _pageObjectsArr.length; _i++) {
    var obj = _pageObjectsArr[_i];
    try {
      if (typeof obj.init === "function") {
        obj.init();
      } else {
        console.log(obj);
        console.log('No init function');
      }
    } catch (err) {
      console.error("Error initializing ".concat(obj, ":"), err);
    }
  }
};

/** -- Init Page Objects */
document.addEventListener("DOMContentLoaded", function () {
  initPageObjects();
  window.pageTip = new PageTip();

  // Loan App
  var loanCaseHolder = document.querySelector('[data-id="loan-apply"]');
  if (loanCaseHolder) {
    window.loanApp = new LoanApp(loanCaseHolder);
  }

  // Job Apply
  var jobCaseHolder = document.querySelector('[data-id="job-apply"]');
  if (jobCaseHolder) {
    window.jobApp = new JobApp(jobCaseHolder);
  }

  // Form Page
  var form = document.querySelector('form#sell_my_watch');
  if (form) {
    window.sellMyWatch = new SellWatch();
  }

  // Loose Diamonds
  var looseDiamondsMain = document.querySelector('.loose_diamonds');
  if (looseDiamondsMain) {
    window.loose = new LooseDiamonds();
  }

  // Menu
  var menuElem = document.querySelector('.menu');
  if (menuElem) {
    window.menu = new Menu('.menu');
  }

  // Homepage
  new Homepage();

  // Results
  var resultsMain = document.querySelector('.main_results');
  if (resultsMain) {
    new ResultsPage();
  }
  var productMain = document.querySelector('.main_product');
  if (productMain) {
    window.productPage = new ProductPage();
  }

  // Notice modal
  window.noticeModal = new noticeModal();

  // Add to cart Modal
  window.addCartModal = new AddCartModal();

  // Share Buttons
  // const shareButtons = new ShareButtons()
});
document.addEventListener('DOMContentLoaded', function () {
  var _document$querySelect;
  return;
  var text = (_document$querySelect = document.querySelector('#item_name')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.textContent;
});

},{"./fancybox.min":3,"./intlTelInput":4,"./jQuery-zoom":5,"./jquery.crs.min":6,"./modules/ajax":8,"./modules/constants":9,"./modules/dynamic/add-cart-modal":10,"./modules/dynamic/ask-modal":11,"./modules/dynamic/backdrop":12,"./modules/dynamic/page-confetti":13,"./modules/dynamic/pageTip":14,"./modules/dynamic/price-modal":15,"./modules/dynamic/root-loader":16,"./modules/elements/footer":18,"./modules/elements/header":19,"./modules/elements/hero-splide":20,"./modules/elements/page-alerts":21,"./modules/elements/page-elements":22,"./modules/elements/page-reviews":23,"./modules/elements/pg-modal":24,"./modules/elements/pg-select":25,"./modules/elements/sirv":26,"./modules/login":27,"./modules/modals/cart-modal":29,"./modules/modals/currency-modal":30,"./modules/modals/mail-modal":31,"./modules/modals/menu":32,"./modules/modals/notice-modal":33,"./modules/modals/quiz-modal":34,"./modules/modals/sales-modal":35,"./modules/pages/account-page":36,"./modules/pages/blog-page":37,"./modules/pages/form-page":38,"./modules/pages/homepage":39,"./modules/pages/job-app":40,"./modules/pages/loan-app":41,"./modules/pages/location-page":42,"./modules/pages/loose-diamonds":43,"./modules/pages/my-bag":44,"./modules/pages/pass-reset":45,"./modules/pages/product":46,"./modules/pages/results":47,"./modules/pages/sell-page":48,"./modules/pages/sell-watch":49,"./modules/pages/tag-preview":50,"./modules/utils":51,"./modules/variables":52,"./parsley.min":53,"./popper":54,"./splide":56,"./splide-grid":55,"./tippy":57,"./zenscroll":58,"jquery":2}],8:[function(require,module,exports){
"use strict";

function applyRedeemCode() {
  var value = $('#redeem_input').val();
  if (value != '') {
    $.ajax({
      url: '/json/redeem-promo-code',
      type: 'POST',
      data: {
        code: value
      },
      success: function success(data) {
        var r = $.parseJSON(data);
        if (!r.error) {
          $('.checkout-redeem').show();
        } else {
          showMessage('error', 'Error', r.msg);
        }
      }
    });
  }
}
module.exports = {
  applyRedeemCode: applyRedeemCode
};

},{}],9:[function(require,module,exports){
"use strict";

var constants = {
  IS_VISIBLE: "is-visible",
  IS_ACTIVE: "is-active",
  BUTTON_LOADING: "button_loading",
  IS_HIDDEN: 'is-hidden',
  IS_EXPANDED: 'is-expanded',
  IS_MINIMIZED: 'is-minimized',
  IS_COPIED: 'is-copied',
  IS_ERROR: 'is-error',
  IS_EMPTY: 'is-empty',
  __TRUE: '--true',
  __FALSE: '--false',
  __FADE: '--fade',
  __HALF: '--half',
  __SELECTED: '--selected',
  __LOADED: '--loaded',
  __HIDDEN: '--hidden',
  __VISIBLE: '--visible',
  __VALID: '--valid',
  __INVALID: '--invalid',
  __PENDING: '--pending',
  __LOCKED: '--locked',
  __ACTIVE: '--active',
  __EXPANDED: '--expanded',
  paceOptions: {
    ajax: true,
    document: true,
    elements: {
      selectors: ['main']
    }
  }
};
module.exports = constants;

},{}],10:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var AddCartModal = /*#__PURE__*/function () {
  function AddCartModal() {
    _classCallCheck(this, AddCartModal);
    this.heading = 'Item added to cart.';
    this.product = null;
    this.elem = null;
    this.backdropInstance = null;
  }

  /** @param {Object} product */
  return _createClass(AddCartModal, [{
    key: "create",
    value: function create(product) {
      this.product = product;
      if (!this.product) {
        throw new Error('AddCartModal : Product not found');
      }
      this._createElem();
      this.show();
    }

    // Create Element
  }, {
    key: "_renderItemHTML",
    value: function _renderItemHTML() {
      var _this$product = this.product,
        title = _this$product.title,
        image = _this$product.image,
        price = _this$product.price,
        show_discount = _this$product.show_discount,
        original_price = _this$product.original_price,
        category = _this$product.category;
      var renderSalePrice = function renderSalePrice() {
        return show_discount && original_price ? "<span class=\"cart-item-price_sale\">".concat(original_price, "</span>") : '';
      };
      return "\n    <div class=\"cart-item\">\n      <div class=\"cart-item__media\">\n        <img src=\"".concat(image, "\">\n      </div>\n      <div class=\"cart-item__details\">\n      <div class=\"cart-item__category\">").concat(category ? category : '', "</div>\n      <h3 class=\"cart-item-name\">").concat(title, "</h3>\n      <div class=\"cart-item__price-row\">\n        <span class=\"cart-item-price\">").concat(price, "</span>\n        ").concat(renderSalePrice(), "\n      </div>\n      </div>\n    </div>\n    ");
    }
  }, {
    key: "_renderHTML",
    value: function _renderHTML() {
      return "\n    <div class=\"add-cart-modal__container\">\n      <div class=\"add-cart-modal__header\">\n        <h3>".concat(this.heading, "</h3>\n        <button data-evt=\"closeAddCartModal\">\n          <svg width=\"100%\" height=\"100%\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M3 3L21 21\" stroke=\"currentColor\" stroke-width=\"3\"></path>\n            <path d=\"M21 3L3 21\" stroke=\"currentColor\" stroke-width=\"3\"></path>\n          </svg>\n        </button>\n      </div>\n      ").concat(this._renderItemHTML(), "\n      <div class=\"add-cart-modal__footer\">\n        <a href=\"javascript:void(0)\" data-evt=\"closeAddCartModal\" class=\"--sub\">Back To Shopping</a>\n        <a href=\"/cart\">Go To Checkout</a>\n      </div>\n    </div>\n    ");
    }
  }, {
    key: "_createElem",
    value: function _createElem() {
      this.elem = createElem('div', {
        className: 'add-cart-modal',
        innerHTML: this._renderHTML()
      });
      this.attachEvents();
    }

    // Attach Event
  }, {
    key: "attachEvents",
    value: function attachEvents() {
      var _this = this;
      var closeEvt = this.elem.querySelectorAll('[data-evt="closeAddCartModal"]');
      var _iterator = _createForOfIteratorHelper(closeEvt),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var evt = _step.value;
          evt.onclick = function () {
            _this.destroy();
          };
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    // Visibility
  }, {
    key: "show",
    value: function show() {
      var _this2 = this;
      if (this.elem) {
        lockScroll();
        document.querySelector('header').appendChild(this.elem);
        this.elem.style.display = 'block';
        requestAnimationFrame(function () {
          _this2.elem.classList.add(__VISIBLE);
        });
        this.backdropInstance = new Backdrop({
          opacity: 0.7,
          zIndex: 90,
          callback: function callback() {
            _this2.destroy();
          }
        });
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this3 = this;
      if (this.elem) {
        unlockScroll();
        this.elem.classList.remove(__VISIBLE);
        var backdrop = this.backdropInstance;
        if (backdrop) {
          backdrop.hide(true);
          this.backdropInstance = null;
        }
        setTimeout(function () {
          _this3.elem.remove();
          _this3.elem = null;
          _this3.product = null;
        }, getTransitionTime(this.elem));
      }
    }
  }]);
}();
module.exports = AddCartModal;

},{}],11:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var AskModal = /*#__PURE__*/function () {
  function AskModal() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, AskModal);
    this.heading = settings.heading || 'Are You Sure You Want To Exit?';
    this.subheading = settings.subheading || 'You will lose all unsaved progress.';
    this.exitText = settings.exitText || 'Exit';
    this.keepText = settings.keepText || 'Keep';
    this.exitCallback = settings.exitCallback;
    this.keepCallback = this.destroy;
  }
  return _createClass(AskModal, [{
    key: "renderHTML",
    get: function get() {
      return "\n      <div data-evt=\"closeAskModal\"></div>\n      <div>\n        <h4>".concat(this.heading, "</h4>\n        <p>").concat(this.subheading, "</p>\n        <div>\n          <button>").concat(this.exitText, "</button>\n          <button>").concat(this.keepText, "</button>\n        </div>\n      </div>\n    ");
    }
  }, {
    key: "create",
    value: function create() {
      var _this = this;
      var modal = createElem('div', {
        className: 'ask-modal',
        innerHTML: this.renderHTML
      });
      var buttons = _toConsumableArray(modal.querySelectorAll('button'));
      var closeEvt = _toConsumableArray(modal.querySelectorAll('[data-evt="closeAskModal"]'));
      buttons[0].onclick = function () {
        _this.destroy();
        _this.exitCallback();
      };
      buttons[1].onclick = function () {
        _this.keepCallback();
      };
      var _iterator = _createForOfIteratorHelper(closeEvt),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var evt = _step.value;
          evt.onclick = function () {
            _this.destroy();
          };
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return modal;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      unlockScroll();
      var modal = document.querySelector('.ask-modal');
      if (modal) {
        modal.remove();
      }
    }
  }, {
    key: "show",
    value: function show() {
      lockScroll();
      var elem = this.create();
      document.body.appendChild(elem);
    }
  }]);
}();
module.exports = AskModal;

},{}],12:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * @typedef {Object} BackdropSettings
 */
var Backdrop = /*#__PURE__*/function () {
  /** @param {BackdropSettings} [settings] */
  function Backdrop() {
    var _this = this;
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Backdrop);
    this.el = createElem('div', {
      className: 'page-backdrop'
    });
    this.callback = settings.callback || null;
    this.zIndex = settings.zIndex || undefined;
    this.background = settings.background || undefined;
    this.half = settings.half || false;
    this.opacity = settings.opacity || 1;
    this.show();
    this.el.addEventListener('click', function (e) {
      if (e.target === _this.el) {
        _this.hide();
      }
    });
  }
  return _createClass(Backdrop, [{
    key: "show",
    value: function show() {
      var _this2 = this;
      document.body.appendChild(this.el);
      if (this.zIndex) {
        this.el.style.zIndex = this.zIndex;
      }
      if (this.half) {
        this.el.classList.add(__HALF);
      }
      this.el.style.display = 'block';
      setTimeout(function () {
        _this2.el.style.opacity = _this2.opacity;
      }, 1);
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this3 = this;
      var ignoreCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.el.style.opacity = '0';
      setTimeout(function () {
        _this3.el.style.display = 'none';
        _this3.el.remove();
      }, getTransitionTime(this.el));
      if (this.callback && !ignoreCallback) {
        this.callback();
      }
    }
  }]);
}();
module.exports = Backdrop;

},{}],13:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PageConfetti = /*#__PURE__*/function () {
  function PageConfetti() {
    _classCallCheck(this, PageConfetti);
    this.el = null;
    this.containerEl = null;
    this.confettiFrequency = 3;
    this.confettiInterval = 50;
    this.timeToDestroy = 8000;
    this.confettiColors = ['#0095c6', '#1ab8ec', '#8cdffa', '#d8f3fc'];
    this.confettiAnimations = ['slow', 'medium', 'fast'];
  }
  return _createClass(PageConfetti, [{
    key: "createHolder",
    value: function createHolder() {
      this.el = createElem('div', {
        className: 'confetti-holder'
      });
      document.body.appendChild(this.el);
    }
  }, {
    key: "setup",
    value: function setup() {
      var containerEl = createElem('div', {
        className: 'confetti-container'
      });
      this.el.appendChild(containerEl);
      this.containerEl = containerEl;
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;
      this.confettiInterval = setInterval(function () {
        var confettiEl = document.createElement('div');
        var confettiSize = Math.floor(Math.random() * 3) + 7 + 'px';
        var confettiBackground = _this.confettiColors[Math.floor(Math.random() * _this.confettiColors.length)];
        var confettiLeft = Math.floor(Math.random() * _this.el.offsetWidth) + 'px';
        var confettiAnimation = _this.confettiAnimations[Math.floor(Math.random() * _this.confettiAnimations.length)];
        confettiEl.classList.add('confetti', 'confetti--animation-' + confettiAnimation);
        confettiEl.style.left = confettiLeft;
        confettiEl.style.width = confettiSize;
        confettiEl.style.height = confettiSize;
        confettiEl.style.backgroundColor = confettiBackground;
        confettiEl.removeTimeout = setTimeout(function () {
          confettiEl.parentNode.removeChild(confettiEl);
        }, 3000);
        _this.containerEl.appendChild(confettiEl);
      }, this.confettiInterval);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var el = this.el;
      if (el) {
        el.style.opacity = '0';
        setTimeout(function () {
          document.body.removeChild(el);
        }, getTransitionTime(el));
      }
    }
  }, {
    key: "push",
    value: function push() {
      var _this2 = this;
      var infinity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.createHolder();
      this.setup();
      this.render();
      if (!infinity) {
        setTimeout(function () {
          _this2.destroy();
        }, this.timeToDestroy);
      }
    }
  }]);
}();
module.exports = PageConfetti;

},{}],14:[function(require,module,exports){
(function (global){(function (){
"use strict";

/**
 * Page Tips
 */
(function (global) {
  function PageTip() {
    this.tipElem = null;
    this.currentTarget = null;
    this.scrollHandler = this.handleScroll.bind(this); // Привязываем контекст и сохраняем ссылку на функцию
    this.handleHover();
  }
  PageTip.prototype.handleHover = function () {
    var _this = this;
    document.querySelectorAll('[data-tip]').forEach(function (elem) {
      elem.addEventListener('mouseenter', function (e) {
        if (window.innerWidth < 992) return;
        _this.createTip(elem);
        _this.tipElem.textContent = elem.dataset.tip;
        _this.setTipPosition(elem);

        // Добавляем обработчик события scroll
        window.addEventListener('scroll', _this.scrollHandler);
      });
      elem.addEventListener('mouseleave', function (e) {
        _this.destroyTip();

        // Убираем обработчик события scroll
        window.removeEventListener('scroll', _this.scrollHandler);
      });
    });
  };
  PageTip.prototype.createTip = function (target) {
    if (!this.tipElem) {
      this.tipElem = document.createElement('div');
      this.tipElem.classList.add('page-tip');
      this.tipElem.style.position = 'absolute'; // Устанавливаем позиционирование на absolute
      this.tipElem.style.opacity = '0'; // Начальная непрозрачность
      this.tipElem.style.transition = 'opacity 0.3s ease, transform 0.3s ease'; // Переходы для анимации
      document.body.append(this.tipElem);
      if (target) {
        var extraClass = target.dataset.tipClass;
        if (extraClass) {
          this.tipElem.classList.add("--".concat(extraClass));
        }
      }

      // Сохраняем текущий целевой элемент
      this.currentTarget = target;
    }
  };
  PageTip.prototype.setTipPosition = function (elem) {
    var _this2 = this;
    var rect = elem.getBoundingClientRect();
    var tipRect = this.tipElem.getBoundingClientRect();
    var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
    var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    var elemHeight = elem.offsetHeight;
    var elemWidth = elem.offsetWidth;
    var topPosition = rect.top + scrollTop - tipRect.height - 4;
    var leftPosition = rect.left + scrollLeft + elemWidth / 2 - tipRect.width / 2;

    // Сбрасываем классы
    this.tipElem.classList.remove('--top', '--bottom', '--left', '--right');

    // Определяем, сверху или снизу отображать подсказку
    var isBelow = false;
    if (topPosition < scrollTop + 100) {
      // Учитываем позицию прокрутки
      topPosition = rect.top + scrollTop + elemHeight + 4;
      this.tipElem.classList.add('--bottom');
      isBelow = true;
    } else {
      this.tipElem.classList.add('--top');
    }
    if (leftPosition < 0) {
      leftPosition = rect.left + scrollLeft;
      this.tipElem.classList.add('--left');
    }
    this.tipElem.style.top = "".concat(topPosition, "px");
    this.tipElem.style.left = "".concat(leftPosition, "px");

    // Устанавливаем начальные стили для анимации
    if (isBelow) {
      this.tipElem.style.transform = 'translateY(8px)';
    } else {
      this.tipElem.style.transform = 'translateY(-8px)';
    }

    // Используем requestAnimationFrame для обеспечения правильного применения стилей
    requestAnimationFrame(function () {
      _this2.tipElem.style.opacity = '1';
      _this2.tipElem.style.transform = 'translateY(0px)';
    });
  };
  PageTip.prototype.handleScroll = function () {
    this.destroyTip();

    // Убираем обработчик события scroll
    window.removeEventListener('scroll', this.scrollHandler);
  };
  PageTip.prototype.destroyTip = function () {
    if (this.tipElem) {
      this.tipElem.remove();
      this.tipElem = null;
      this.currentTarget = null;
    }
  };

  // Экспортируем класс PageTip
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = PageTip;
  } else {
    global.PageTip = PageTip;
  }
})(typeof window !== "undefined" ? window : global);

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],15:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PriceModal = /*#__PURE__*/function () {
  function PriceModal(card, id) {
    _classCallCheck(this, PriceModal);
    if (!card) {
      console.warn('Missing card');
      return;
    }
    this.card = card;
    this.id = id;
    this.name = undefined;
    this.imgSrc = undefined;
    this.elem = undefined;
    this.input = undefined;
    this.closeArr = [];
    this.submitArr = [];
    this.setup();
    this.show();
  }
  return _createClass(PriceModal, [{
    key: "signup",
    value: function signup() {
      this.reset();
      var email = this.input.value;
      var reg = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      if (!reg.test(String(email).toLowerCase())) {
        this.error('Invalid email address');
        return;
      }
      this.elem.classList.add('--loading');
      var _error = this.error.bind(this);
      var _success = this.success.bind(this);
      $.ajax({
        url: '/json/signup-price',
        type: 'POST',
        data: {
          id: this.id,
          email: email
        },
        success: function success(data) {
          var r = $.parseJSON(data);
          if (!r.error) {
            _success();
          } else {
            _error(r.msg);
          }
        },
        error: function error() {
          _error('Something went wrong');
        }
      });
    }
  }, {
    key: "error",
    value: function error(msg) {
      this.reset();
      this.elem.classList.add('--error');
      this.elem.querySelector('.price-modal__error').textContent = msg;
    }
  }, {
    key: "success",
    value: function success() {
      var _this = this;
      var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Great! You are signed up!';
      this.reset();
      this.elem.classList.add('--success');
      this.elem.querySelector('.price-modal__error').textContent = msg;
      setTimeout(function () {
        if (window.priceModal) {
          _this.destroy();
        }
      }, 1300);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.elem.classList.remove('--error');
      this.elem.classList.remove('--loading');
    }
  }, {
    key: "setup",
    value: function setup() {
      var nameElem = this.card.querySelector('.product-card__name');
      var imgElem = this.card.querySelector('.product-card__img');
      if (!nameElem || !imgElem) {
        console.warn('Missing name element or img');
        return;
      }
      this.name = nameElem.textContent;
      this.imgSrc = imgElem.getAttribute('src');
    }
  }, {
    key: "renderHTML",
    get: function get() {
      return "\n\t\t\t<div class=\"price-modal__header\">\n\t\t\t\t<h2>Sign up for price alerts</h2>\n\t\t\t\t<p>We'll send you an email if price is changed.</p>\n\t\t\t</div>\n\t\t\t<div class=\"price-modal__item\">\n\t\t\t\t<img src=\"".concat(this.imgSrc, "\" alt=\"\">\n\t\t\t\t<div><h3>").concat(this.name, "</h3></div>\n\t\t\t</div>\n\t\t\t<div class=\"price-modal__main\">\n\t\t\t\t<input type=\"text\" placeholder=\"Your Email Address...\">\n        <div class=\"price-modal__error\">Something went wrong</div>\n\t\t\t\t<div class=\"price-modal__footer\">\n\t\t\t\t\t<button class=\"--sub\">Close</button>\n\t\t\t\t\t<button data-evt=\"submit\">Submit</button>\n\t\t\t\t</div>\n\t\t\t</div>\n    ");
    }
  }, {
    key: "create",
    value: function create() {
      var modal = createElem('div', {
        className: 'price-modal',
        innerHTML: this.renderHTML
      });
      return modal;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this2 = this;
      unlockScroll();
      this.elem.classList.remove(__VISIBLE);
      var backdrop = window.priceModalBackdrop;
      if (backdrop) {
        backdrop.hide(true);
      }
      setTimeout(function () {
        _this2.elem.remove();
        window.priceModalBackdrop = undefined;
        window.signPriceModal = undefined;
      }, getTransitionTime(this.elem));
    }
  }, {
    key: "show",
    value: function show() {
      var _this3 = this;
      lockScroll();
      this.elem = this.create();
      this.input = this.elem.querySelector('input');
      document.body.appendChild(this.elem);
      this.input.focus();
      this.closeArr.push(this.elem.querySelector('.--sub'));
      this.submitArr.push(this.elem.querySelector('[data-evt="submit"]'));
      var _iterator = _createForOfIteratorHelper(this.closeArr),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var elem = _step.value;
          elem.addEventListener('click', function () {
            _this3.destroy();
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _iterator2 = _createForOfIteratorHelper(this.submitArr),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _elem = _step2.value;
          _elem.addEventListener('click', function () {
            _this3.signup();
          });
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      this.input.addEventListener('input', function () {
        _this3.reset();
        if (_this3.input.value) {
          _this3.elem.classList.add('--unlocked');
        } else {
          _this3.elem.classList.remove('--unlocked');
        }
      });
      this.input.addEventListener('keydown', function (e) {
        var keyIsEnter = e.key === 'Enter';
        if (keyIsEnter && _this3.input.value) {
          e.preventDefault();
          _this3.submitArr[0].click();
        }
      });
      requestAnimationFrame(function () {
        _this3.elem.classList.add(__VISIBLE);
        window.priceModalBackdrop = new Backdrop({
          half: true,
          callback: function callback() {
            _this3.destroy();
          }
        });
      });
    }
  }]);
}();
module.exports = PriceModal;

},{}],16:[function(require,module,exports){
"use strict";

var rootLoader = new Object({
  "class": 'root_loader',
  renderHTML: function renderHTML() {
    return "<div class=".concat(rootLoader["class"], "></div>");
  },
  isExist: function isExist() {
    return $(document).find(".".concat(rootLoader["class"])).length ? true : false;
  },
  push: function push() {
    var noLock = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    if (!noLock) {
      lockScroll();
    }
    if (!this.isExist()) {
      $body.append(rootLoader.renderHTML());
    }
  },
  remove: function remove() {
    var noUnlock = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    if (!noUnlock) unlockScroll();
    if (this.isExist()) {
      $(document).find(".".concat(rootLoader["class"])).remove();
    }
  }
});
module.exports = rootLoader;

},{}],17:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ZoomGallery = /*#__PURE__*/function () {
  function ZoomGallery(mediaArr, scrollIndex) {
    _classCallCheck(this, ZoomGallery);
    this.elem = null;
    this.mediaArr = mediaArr;
    this.scrollIndex = scrollIndex || undefined;
    this.init();
  }

  // Render HTML
  return _createClass(ZoomGallery, [{
    key: "_renderMediaHTML",
    value: function _renderMediaHTML() {
      var html = '';
      var _iterator = _createForOfIteratorHelper(this.mediaArr),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var media = _step.value;
          var clone = media.cloneNode(true);
          clone.removeAttribute('style');
          clone.className = 'product-media';
          html += clone.outerHTML;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return html;
    }
  }, {
    key: "_renderInnerHTML",
    value: function _renderInnerHTML() {
      var name = document.querySelector('#item_name');
      return "\n    <div class=\"zoom2__wrapper\">\n      <div class=\"zoom2__scroller\">\n        <div class=\"zoom2__header\">\n          <h4>".concat(name.textContent, "</h4>\n          <button data-zoom-close class=\"zoom2__close-btn\"></button>\n        </div>\n        ").concat(this._renderMediaHTML(), "\n      </div>\n      <div data-zoom-close class=\"zoom2__footer\">\n        <span>Get Back</span>\n      </div>\n    </div>\n    ");
    }
  }, {
    key: "_create",
    value: function _create() {
      this.elem = document.createElement('div');
      this.elem.className = 'zoom2';
      this.elem.innerHTML = this._renderInnerHTML();
      document.body.append(this.elem);
    }
  }, {
    key: "_scrollToIndex",
    value: function _scrollToIndex() {
      if (this.scrollIndex) {
        var scroller = this.elem.querySelector('.zoom2__scroller');
        var mediaHeight = this.elem.querySelector('.product-media').offsetHeight;
        scroller.scrollTop = mediaHeight * this.scrollIndex;
      }
    }

    // Methods
  }, {
    key: "hide",
    value: function hide() {
      var _this = this;
      if (this.elem) {
        unlockScroll();
        this.elem.classList.remove(__VISIBLE);
        setTimeout(function () {
          _this.elem.style.display = 'none';
          _this.destroy();
        }, getTransitionTime(this.elem));
      }
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;
      if (!this.elem) throw new Error('No element created Zoom2 ZoomGallery');
      lockScroll();
      this.elem.style.display = 'block';
      this._scrollToIndex();
      requestAnimationFrame(function () {
        _this2.elem.classList.add(__VISIBLE);
      });
    }

    // Events
  }, {
    key: "_bindInnerEvents",
    value: function _bindInnerEvents() {
      var _this3 = this;
      if (this.elem) {
        var closeArr = _toConsumableArray(this.elem.querySelectorAll('[data-zoom-close]'));
        closeArr.forEach(function (closeElem) {
          closeElem.addEventListener('click', _this3.hide.bind(_this3));
        });
      }
    }

    // Init
  }, {
    key: "init",
    value: function init() {
      this._create();
      this._bindInnerEvents();
      this.open();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.elem) {
        this.elem.remove();
        this.elem = null;
      }
    }
  }]);
}();
module.exports = ZoomGallery;

},{}],18:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var footer = new Object({
  bindEvents: function bindEvents() {
    if (window.innerWidth < 480) {
      var evtArr = _toConsumableArray(document.querySelectorAll('.footer__col-head'));
      var _iterator = _createForOfIteratorHelper(evtArr),
        _step;
      try {
        var _loop = function _loop() {
            var elem = _step.value;
            var col = elem.closest('.footer__col');
            if (!col) return {
              v: void 0
            };
            if (!col.classList.contains('.--static')) {
              elem.addEventListener('click', function () {
                col.classList.toggle('--open');
              });
            }
          },
          _ret;
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _ret = _loop();
          if (_ret) return _ret.v;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  },
  init: function init() {
    this.bindEvents();
  }
});
module.exports = footer;

},{}],19:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var header = {
  init: function init() {
    this.renderDOM();
    this.bindEvents();
    this.setDropdowns();
  },
  renderDOM: function renderDOM() {
    // Login Dropdown
    this.loginBtn = $('[data-evt="toggleAccountDropdown"]');
    this.loginDropdown = $(".login-dropdown");

    // Search
    this.searchBtn = $('[data-evt="toggleSearch"]');
    this.searchBlock = $(".header-search");
    this.loginLink = $('.login-nav__link');
  },
  bindEvents: function bindEvents() {
    this.loginBtn.on('mouseover mouseleave', function (evt) {
      var dd = header.loginDropdown;
      if (dd.length) {
        switch (evt.type) {
          case 'mouseover':
            dd.css({
              display: 'block',
              opacity: 1
            });
            break;
          case 'mouseleave':
            dd.css({
              display: 'none',
              opacity: 0
            });
            break;
        }
      }
    });
    this.loginLink.click(function (e) {
      e.stopPropagation();
    });
    this.searchBtn.click(function () {
      var el = header.searchBlock;
      function hideSearch() {
        el.removeClass(IS_VISIBLE);
        unlockScroll();
      }
      if (el.hasClass(IS_VISIBLE)) {
        hideSearch();
        if (window.searchBackdrop) {
          window.searchBackdrop.hide();
        }
      } else {
        lockScroll();
        el.addClass(IS_VISIBLE);
        el.find("input").focus();
        window.searchBackdrop = new Backdrop({
          half: true,
          zIndex: getZIndex(document.querySelector('header')) - 1,
          callback: hideSearch
        });
      }
    });
  },
  setDropdowns: function setDropdowns() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    args = Array.from(document.querySelectorAll('.header__sub-link'));
    if (args.length !== 0 && args) {
      var dd = document.querySelector('.nav-drop');
      var cont = _toConsumableArray(document.querySelectorAll('.nav-drop__content'));
      var subLink = _toConsumableArray(document.querySelectorAll('.nav-drop_more'));
      var IS_ACTIVE = 'is-active';
      var hideDelayTime, showDelayTime;
      if (dd && cont && subLink) {
        var pos = function pos(el) {
          return {
            top: el.getBoundingClientRect().top + el.offsetHeight,
            left: el.getBoundingClientRect().left + el.offsetWidth / 2 - dd.offsetWidth / 2
          };
        };
        var fn = {
          initial: function initial() {
            dd.style.top = "".concat(pos(args[0]).top, "px");
            dd.style.left = "".concat(pos(args[0]).left, "px");
          },
          hide: function hide() {
            dd.style.opacity = 0;
            dd.style.display = 'none';
            args.forEach(function (el) {
              return el.classList.remove(IS_ACTIVE);
            });
          },
          show: function show(el) {
            args.forEach(function (el) {
              return el.classList.remove(IS_ACTIVE);
            });
            el.classList.add(IS_ACTIVE);
            dd.style.display = 'block';
            dd.style.top = "".concat(pos(el).top, "px");
            dd.style.left = "".concat(pos(el).left, "px");
            dd.style.opacity = 1;
          },
          switchContent: function switchContent(attr) {
            cont.forEach(function (el) {
              return el.style.display = 'none';
            });
            cont.filter(function (el) {
              return el.id == "dd_".concat(attr);
            }).forEach(function (el) {
              return el.style.display = 'block';
            });
          }
        };
        var setInitial = fn.initial,
          hide = fn.hide,
          show = fn.show,
          switchContent = fn.switchContent;
        var _loop = function _loop() {
          var el = subLink[i],
            content = el.querySelector('.nav-drop__sub');
          el.onmouseover = function () {
            content.style.display = 'block';
          };
          el.onmouseleave = function () {
            content.style.display = 'none';
          };
        };
        for (var i = 0; i < subLink.length; i++) {
          _loop();
        }
        dd.onmouseover = function (e) {
          if (hideDelayTime) window.clearTimeout(hideDelayTime);
        };
        dd.onmouseleave = function (e) {
          window.clearTimeout(showDelayTime);
          hideDelayTime = window.setTimeout(function () {
            hide();
          }, 150);
        };
        args.forEach(function (el) {
          el.onmouseover = function (e) {
            var attr = el.dataset.dropdown;
            if (attr) {
              window.clearTimeout(hideDelayTime);
              showDelayTime = window.setTimeout(function () {
                switchContent(attr);
                show(el);
              }, 200);
            }
          };
          el.onmouseleave = function (e) {
            window.clearTimeout(showDelayTime);
            hideDelayTime = window.setTimeout(function () {
              hide();
            }, 150);
          };
        });
        window.onscroll = function () {
          window.clearTimeout(showDelayTime);
          hide();
          setInitial();
        };
        setInitial();
      }
    }
  }
};
module.exports = header;

},{}],20:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var heroSplide = {
  init: function init() {
    try {
      this.initSplide();
    } catch (err) {
      console.log(err.message);
    }
  },
  initSplide: function initSplide() {
    var heroSplide = _toConsumableArray(document.querySelectorAll('.hero_splide'));
    if (heroSplide.length !== 0) {
      heroSplide.forEach(function (slide) {
        var slider = new Splide(slide, {
          type: "slider",
          perPage: 4,
          perMove: 2,
          autoplay: 0,
          gap: "12px",
          arrows: 1,
          pagination: 0,
          speed: 750,
          breakpoints: {
            991: {
              perPage: 2.5
            },
            767: {
              perPage: 2,
              perMove: 1
            },
            478: {
              perPage: 1.4,
              perMove: 1,
              gap: 8
            }
          }
        });
        slider.mount();
      });
    }
  }
};
module.exports = heroSplide;

},{}],21:[function(require,module,exports){
"use strict";

var pageAlerts = {
  classes: {
    fullWidth: 'page-alert_backdrop',
    error: 'page-alert_error',
    warning: 'page-alert_warning',
    info: 'page-alert_info',
    visible: 'is-visible'
  },
  init: function init() {
    this.cacheDOM();
    this.bindEvents();
    // this.fullWidth()
  },
  cacheDOM: function cacheDOM() {
    this.container = $('.page-alert');
    this.title = $('.page-alert-title');
    this.subtitle = $('.page-alert-text');
    this.close = $('[data-evt="hidePageAlert"]');
  },
  bindEvents: function bindEvents() {
    this.close.click(this.hideAlert.bind(this));
    clearTimeout(alertTimer);
  },
  fullWidth: function fullWidth() {
    this.container.addClass(this.classes.fullWidth);
  },
  showAlert: function showAlert() {
    var errorType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
      pageAlerts.resetAlert();
    };
    var title = arguments.length > 1 ? arguments[1] : undefined;
    var text = arguments.length > 2 ? arguments[2] : undefined;
    var hideTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2500;
    clearTimeout(alertTimer);
    this.resetAlert();
    this.container.addClass(this.classes.visible).addClass(errorType);
    this.changeMsg(title, text);
    alertTimer = window.setTimeout(function () {
      pageAlerts.hideAlert();
    }, hideTime);
  },
  hideAlert: function hideAlert() {
    this.container.removeClass(this.classes.visible);
  },
  changeMsg: function changeMsg(title, text) {
    this.title.html(title);
    this.subtitle.html(text);
  },
  resetAlert: function resetAlert() {
    this.container.removeClass(function () {
      var i = pageAlerts.classes;
      return "".concat(i.warning, " ").concat(i.info, " ").concat(i.error);
    });
  }
};
module.exports = pageAlerts;

},{}],22:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _this = void 0,
  _templateObject,
  _templateObject2,
  _templateObject3;
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _taggedTemplateLiteral(e, t) { return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } })); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var pageEls = new Object({
  init: function init() {
    Object.values(this.attachEvent).forEach(function (target) {
      if (typeof target === 'function') {
        try {
          target();
        } catch (err) {
          console.error(err);
        }
      }
    });
  },
  attachEvent: {
    // Youtube videos / Youtube row
    bindYoutubeVideos: function bindYoutubeVideos() {
      // Create Player
      var createPlayer = function createPlayer(url) {
        var render = function render() {
          return "\n  <div class=\"yt-controls\">\n    <button data-evt=\"closeYoutube\" class=\"yt-float__btn\"></button>\n  </div>\n  <div class=\"yt-float__video-box\">\n    <div style=\"padding-top:56.17021276595745%\" class=\"yt-float__video\">\n      <iframe src=\"".concat(url, "\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\">\n      </iframe>\n    </div>\n  </div>\n          ");
        };
        var player = createElem('div', {
          className: 'yt-float',
          innerHTML: render()
        });
        document.body.appendChild(player);
        player.addEventListener('click', function (e) {
          if (e.target.closest('.yt-float__btn')) {
            player.remove();
          }
        });
      };
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (target.closest('.yt-item') && target.closest('[data-url]')) {
          var ytElement = document.querySelector('.yt-float');
          if (ytElement) {
            ytElement.remove();
          }
          var url = target.closest('[data-url]').dataset.url;
          createPlayer(url);
        }
      });

      // Expand Youtube row
      var expandArr = _toConsumableArray(document.querySelectorAll('[data-evt="expandYoutubeRow"]'));
      var ytRow = document.querySelector('.yt-row');
      if (ytRow) {
        var _iterator = _createForOfIteratorHelper(expandArr),
          _step;
        try {
          var _loop = function _loop() {
            var elem = _step.value;
            elem.addEventListener('click', function () {
              ytRow.classList.add('--expanded');
              elem.innerHTML = 'No more videos...';
              elem.disabled = true;
            });
          };
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    },
    // Set capitalize for all subcategories tabs
    changeToLowerCaseSubcategories: function changeToLowerCaseSubcategories() {
      var tabs = _toConsumableArray(document.querySelectorAll('.results__subcategories-wrap .custom-checkbox'));
      var _iterator2 = _createForOfIteratorHelper(tabs),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var tab = _step2.value;
          var span = tab.querySelector('span');
          if (span) {
            var text = span.textContent;
            var toUpperCase = function toUpperCase(str) {
              return str[0].toUpperCase() + str.slice(1);
            };
            var correctText = text.toLowerCase().split(' ').map(toUpperCase).join(' ');
            span.textContent = correctText;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    },
    // Page Share Button
    bindPageShareButton: function bindPageShareButton() {
      var elemArr = _toConsumableArray(document.querySelectorAll('[data-share-page]'));
      var _iterator3 = _createForOfIteratorHelper(elemArr),
        _step3;
      try {
        var _loop2 = function _loop2() {
          var elem = _step3.value;
          elem.addEventListener('click', function () {
            var span = elem.querySelector('span');
            navigator.clipboard.writeText(window.location.href).then(function () {
              span.textContent = 'Share';
              span.textContent = 'URL Copied!';
              setTimeout(function () {
                span.textContent = 'Share';
              }, 800);
            })["catch"](function (err) {
              throw new Error('Copying error occured', err);
            });
          });
        };
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    },
    // Floating Whatsapp Button
    observeFloatWhatsapp: function observeFloatWhatsapp() {
      var elem = document.querySelector('.wa-float');
      var triggerElem = document.querySelector('.footer');
      if (!elem || !triggerElem) return;
      var offset = 120;
      var observer = null;
      var callback = function callback(entries) {
        entries.forEach(function (entry) {
          if (entry.isIntersecting) {
            elem.classList.add(__HIDDEN);
          } else {
            elem.classList.remove(__HIDDEN);
          }
        });
      };
      observer = new IntersectionObserver(callback, {
        root: null,
        rootMargin: "0px 0px -".concat(offset, "px 0px"),
        threshold: 0
      });
      observer.observe(triggerElem);
    },
    // Copy Elements
    copyEvents: function copyEvents() {
      var copyArr = _toConsumableArray(document.querySelectorAll('[data-evt-copy]'));
      if (copyArr.length) {
        var _iterator4 = _createForOfIteratorHelper(copyArr),
          _step4;
        try {
          var _loop3 = function _loop3() {
            var btn = _step4.value;
            btn.addEventListener('click', function () {
              var textToCopy = btn.dataset.evtCopy;
              if (textToCopy) {
                navigator.clipboard.writeText(textToCopy);
              }
            });
          };
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            _loop3();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    },
    // Track Order
    trackOrderSwitch: function trackOrderSwitch() {
      var arr = document.querySelectorAll('input[name="track_with"]');
      if (arr.length) {
        var toggleInput = function toggleInput(value) {
          var elements = {
            phone: document.querySelector('#form_track_order .iti'),
            email: document.querySelector('#input_track_email')
          };
          if (!elements.phone || !elements.email) {
            console.error('phone or email not found');
            return;
          }
          if (elements[value]) {
            Object.keys(elements).forEach(function (key) {
              elements[key].style.display = key === value ? 'block' : 'none';
            });
          } else {
            console.error("Invalid value: ".concat(value));
          }
        };
        arr.forEach(function (input) {
          input.addEventListener('change', function () {
            toggleInput(input.value);
          });
        });
      }
    },
    resetTrackOrderForm: function resetTrackOrderForm() {
      var elem = document.querySelector('[data-evt="reset_track_form"]');
      if (elem) {
        elem.addEventListener('click', function (e) {
          e.preventDefault();
          var form = document.querySelector('#form_track_order');
          if (!form) {
            console.error('form not found');
            return;
          }
          form.reset();
        });
      }
    },
    // Other
    filterDropdown: function filterDropdown() {
      var dropdownEls = Array.from($('.filter-dropdown'));
      for (var i = 0; i < dropdownEls.length; i++) {
        var el = dropdownEls[i];
        $(el).hover(function () {
          var thisCurrent = $(this).find('.filter-dropdown__current'),
            list = $(this).find('.filter-dropdown__list'),
            scrollContainer = list.find('> div'),
            buttons = Array.from(scrollContainer.find('> div')),
            main = $(this).find('.filter-dropdown__main');
          var scrollH = scrollContainer[0].scrollHeight;
          if (list.height() == 0) {
            list.css({
              height: "".concat(scrollH, "px")
            });
            main.addClass(IS_ACTIVE);
          } else {
            list.css({
              height: '0px'
            });
            main.removeClass(IS_ACTIVE);
          }
          $.each(buttons, function (i) {
            buttons[i].onclick = function () {
              var sibs = $(buttons[i]).siblings();
              sibs.removeClass(IS_ACTIVE);
              buttons[i].classList.add(IS_ACTIVE);
              var val = $(buttons[i]).html();
              thisCurrent.html(val);
            };
          });
        });
      }
    },
    trackingDateUpdate: function trackingDateUpdate() {
      var dates = _toConsumableArray(document.querySelectorAll('[data-track="updated_date"]'));
      var nowDate = new Date();
      if (dates.length) {
        var day = nowDate.getDate();
        var month = nowDate.toLocaleDateString('en-US', {
          month: 'short'
        });
        var year = nowDate.getFullYear();
        var hours = nowDate.getHours();
        var minutes = nowDate.getMinutes().toString().padStart(2, '0');
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12 || 12;
        var _iterator5 = _createForOfIteratorHelper(dates),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var date = _step5.value;
            date.innerHTML = "".concat(day, " ").concat(month, ", ").concat(year, ", ").concat(hours, ":").concat(minutes, " ").concat(ampm);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    },
    pageFilters: function pageFilters() {
      var filterRows = Array.from($('.filter-row'));
      var _loop4 = function _loop4() {
        var el = $(filterRows[i]),
          header = el.find('.filter-row__header'),
          body = el.find('.filter-row__body'),
          container = el.find('.filter-row__container'),
          icon = header.find('svg');
        header.click(function () {
          var currentBodyHeight = body.height();
          if (currentBodyHeight !== 0) {
            body.css({
              height: "".concat(currentBodyHeight, "px")
            });
            setTimeout(function () {
              body.css({
                height: 0
              });
              container.css({
                transform: 'translateY(-24px)',
                opacity: 0
              });
              icon.css({
                transform: 'rotate(0deg)'
              });
            }, 1);
          } else {
            var scrollH = container[0].scrollHeight;
            body.css({
              height: scrollH
            });
            container.css({
              transform: 'translateY(0px)',
              opacity: 1
            });
            icon.css({
              transform: 'rotate(180deg)'
            });
          }
        });
      };
      for (var i = 0; i < filterRows.length; i++) {
        _loop4();
      }
    },
    faqLists: function faqLists() {
      var headArr = _toConsumableArray(document.querySelectorAll('.faq-head'));
      var liArr = [];
      var _iterator6 = _createForOfIteratorHelper(headArr),
        _step6;
      try {
        var _loop5 = function _loop5() {
          var faqHead = _step6.value;
          var li = faqHead.closest('li');
          var body = faqHead.nextElementSibling;
          if (li && body) {
            liArr.push(li);
            li.show = function () {
              li.classList.add(__ACTIVE);
              var scrollHeight = body.scrollHeight;
              body.style.height = "".concat(scrollHeight, "px");
              setTimeout(function () {
                body.style.height = 'auto';
              }, 1);
            };
            li.hide = function () {
              li.classList.remove(__ACTIVE);
              body.style.height = 0;
            };
            faqHead.onclick = function () {
              console.log(body);
              if (body.offsetHeight !== 0) {
                li.hide();
              } else {
                li.show();
              }
            };

            // Transform letters
            var h6 = faqHead.querySelector('h6');
            if (h6) {
              var capitalized = h6.textContent.toLowerCase().replace(/(\b)(\w)/g, function (match, p1, p2) {
                return p2.toUpperCase();
              });
              h6.textContent = capitalized;
            }

            // Reveal first
            if (liArr[0] === li) li.show();
          }
        };
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop5();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    },
    listings: function listings() {
      var listings = _toConsumableArray(document.querySelectorAll('.listing-set'));
      var _iterator7 = _createForOfIteratorHelper(listings),
        _step7;
      try {
        var _loop6 = function _loop6() {
          var listing = _step7.value;
          var buttonArray = _toConsumableArray(listing.querySelectorAll('.listing-btn:not(.--disabled)'));
          buttonArray.forEach(function (btn) {
            btn.addEventListener('click', function () {
              btn.classList.add(IS_ACTIVE);
              buttonArray.forEach(function (arrBtn) {
                if (arrBtn != btn) arrBtn.classList.remove(IS_ACTIVE);
              });
            });
          });
        };
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          _loop6();
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    },
    removeZeroSubheading: function removeZeroSubheading() {
      var arr = _toConsumableArray(document.querySelectorAll('.results__subheading'));
      var _iterator8 = _createForOfIteratorHelper(arr),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var subheading = _step8.value;
          if (subheading.innerHTML.length < 1) {
            subheading.remove();
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    },
    initTelInput: function initTelInput() {
      var telInputArr = Array.from($('[data-input="tel"]'));
      for (var i = 0; i < telInputArr.length; i++) {
        var iti = intlTelInput(telInputArr[i], {
          initialCountry: "auto",
          preferredCountries: ["us", "gb", "br", "cn", "es", "it"],
          autoPlaceholder: "aggressive",
          useFullscreenPopup: true,
          utilsScript: "/assets/public-2020/js/plugins/phone/utils.js",
          geoIpLookup: function geoIpLookup(callback) {
            fetch("https://ipinfo.io/json", {
              cache: "reload"
            }).then(function (response) {
              if (response.ok) {
                return response.json();
              }
              throw new Error("Failed: " + response.status);
            }).then(function (ipjson) {
              callback(ipjson.country);
            })["catch"](function (e) {
              callback("us");
            });
          }
        });
      }
    },
    initCustomUploads: function initCustomUploads() {
      var arr = _toConsumableArray(document.querySelectorAll('[data-custom-upload]'));
      var renderOutputFile = function renderOutputFile(file) {
        var imgSrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var imgElem = imgSrc ? "<div class=\"--filled\" style=\"background-image: url(".concat(imgSrc, ")\"></div>") : "<div></div>";
        return "\n        <div class=\"custom-upload__file\">\n          <div>\n            ".concat(imgElem, "\n            <span data-custom-name>").concat(file.name, "</span>\n          </div>\n          <div>\n            <div data-evt=\"custom_upload_remove\" class=\"--remove\"></div>\n          </div>\n        </div>\n        ");
      };
      var bindBoxEvents = function bindBoxEvents(box, input) {
        box.ondragover = function (e) {
          e.preventDefault();
          box.classList.add(__ACTIVE);
        };
        box.ondragleave = function (e) {
          e.preventDefault();
          box.classList.remove(__ACTIVE);
        };
        box.addEventListener('drop', function (e) {
          e.preventDefault();
          box.classList.remove(__ACTIVE);
          var files = e.dataTransfer.files;
          var newDataTransfer = new DataTransfer();
          var _iterator9 = _createForOfIteratorHelper(files),
            _step9;
          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var file = _step9.value;
              newDataTransfer.items.add(file);
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
          input.files = newDataTransfer.files;
          input.dispatchEvent(new Event('change', {
            'bubbles': true
          }));
        });
        box.addEventListener('click', function (e) {
          input.click();
        });
      };
      var setIndexes = function setIndexes(upload) {
        var files = _toConsumableArray(upload.querySelectorAll('.custom-upload__file'));
        for (var i = 0; i < files.length; i++) {
          files[i].dataset.customIndex = i;
        }
      };
      var processFiles = function processFiles(files, upload) {
        var output = upload.querySelector('.custom-upload__files');
        var currentFiles = _toConsumableArray(upload.querySelectorAll('.custom-upload__file'));
        var _iterator10 = _createForOfIteratorHelper(currentFiles),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var file = _step10.value;
            file.remove();
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
        var _iterator11 = _createForOfIteratorHelper(files),
          _step11;
        try {
          var _loop7 = function _loop7() {
            var file = _step11.value;
            var fileIsImage = file.type.match('image.*');
            if (fileIsImage) {
              var reader = new FileReader();
              reader.onload = function (e) {
                output.insertAdjacentHTML('beforeend', renderOutputFile(file, e.target.result));
              };
              reader.readAsDataURL(file);
            } else {
              output.insertAdjacentHTML('beforeend', renderOutputFile(file));
            }
          };
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            _loop7();
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
        setIndexes(upload);
      };
      var _iterator12 = _createForOfIteratorHelper(arr),
        _step12;
      try {
        var _loop8 = function _loop8() {
          var upload = _step12.value;
          var box = upload.querySelector('.custom-upload__box');
          var input = upload.querySelector('input');
          if (box) {
            bindBoxEvents(box, input);
          }
          input.addEventListener('change', function (e) {
            var files = e.target.files;
            processFiles(files, upload);
          });
        };
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          _loop8();
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (e.target.closest('[data-evt="custom_upload_remove"]')) {
          var upload = target.closest('[data-custom-upload]');
          if (!upload) throw new Error('data-custom-upload not found');
          var input = upload.querySelector('input[type="file"]');
          if (!input) throw new Error('input[type="file"] not found');
          var nameEl = e.target.closest('.custom-upload__file').querySelector('*[data-custom-name]');
          if (!nameEl) throw new Error('data-custom-name not found');
          var name = nameEl.innerHTML;
          var newDataTransfer = new DataTransfer();
          var files = input.files;
          for (var i = 0; i < files.length; i++) {
            if (files[i].name !== name) {
              newDataTransfer.items.add(files[i]);
            }
          }
          if (newDataTransfer.items.length === 0) {
            input.value = '';
          } else {
            input.files = newDataTransfer.files;
          }
          input.dispatchEvent(new Event('change', {
            'bubbles': true
          }));
        }
      });
    },
    attachPayModal: function attachPayModal() {
      var evtOpenLater = $('[data-evt="payModalLater"]'),
        evtOpenCrypto = $('[data-evt="payModalCrypto"]'),
        evtClose = $('[data-evt="closePayModal"]'),
        crypto = $('#payModalCrypto'),
        later = $('#payModalLater'),
        modal = $('.pay-modal');
      var openModal = function openModal() {
        lockScroll();
        modal.show();
        setTimeout(function () {
          modal.css({
            opacity: 1
          });
        }, 1);
      };
      var closeModal = function closeModal() {
        unlockScroll();
        modal.css({
          opacity: 0
        });
        setTimeout(function () {
          modal.hide();
        }, getTransitionTime(modal));
      };
      evtOpenLater.add(evtOpenCrypto).click(function () {
        openModal();
        crypto.add(later).hide();
        if ($(this).is(evtOpenCrypto)) {
          crypto.show();
        }
        if ($(this).is(evtOpenLater)) {
          later.show();
        }
      });
      evtClose.click(function () {
        closeModal();
      });
    },
    attachToggleInputs: function attachToggleInputs() {
      var arr = _toConsumableArray(document.querySelectorAll('[data-input-toggle]'));
      var _iterator13 = _createForOfIteratorHelper(arr),
        _step13;
      try {
        var _loop9 = function _loop9() {
          var input = _step13.value;
          var btn = input.parentNode.querySelector('button') || input.parentNode.querySelector('input[type="submit"]');
          if (btn) {
            input.addEventListener('input', function () {
              var value = input.value;
              if (value) {
                btn.disabled = false;
                return;
              }
              btn.disabled = true;
              return;
            });
            input.addEventListener('keydown', function (e) {
              var keyIsEnter = e.key === 'Enter';
              if (keyIsEnter) {
                e.preventDefault();
                btn.click();
              }
            });
            btn.addEventListener('click', function () {
              var value = input.value;
              input.value = '';
              input.dispatchEvent(new Event('input'));
            });
          }
        };
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          _loop9();
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    },
    initProductZoom: function initProductZoom() {
      var isDesktop = window.innerWidth > 991;
      window.removeSlider = function (target) {
        unlockScroll();
        var slider = target.closest('.zoom_slider');
        slider.css({
          opacity: 0
        });
        setTimeout(function () {
          slider.hide();
        }, 400);
      };
      var setDesktopZoom = function setDesktopZoom() {
        _toConsumableArray(document.querySelectorAll('.product-media-img')).reduce(function (acc, el) {
          if (el && el !== null) {
            if (!/(placeholder|store|pay)/gi.test(el.getAttribute('src'))) {
              acc.push($(el).parent('.product-media__inner-wrap'));
            }
          }
          return acc;
        }, []).forEach(function (el) {
          $(el).zoom({
            magnify: 1.9,
            on: 'click'
          });
          $(el).on('mouseleave', function () {
            $(document).trigger('click');
          });
        });
      };
      var setMobileZoom = function setMobileZoom() {
        var sliders = _toConsumableArray(document.querySelectorAll('.product-slider')); // Get all existing sliders

        sliders.forEach(function (slider, index) {
          var button = $('<button/>', {
            "class": "product__zoom-btn zoom_btn".concat(index)
          });
          button.appendTo($(slider)); // Create & append zoom button
          var renderNewSlider = function renderNewSlider(slider, index) {
            // Get HTML new zoom slider
            var mediaArr = _toConsumableArray(slider.querySelectorAll('img')).reduce(function (acc, img) {
              var src = img.getAttribute('src');
              if (!acc.includes(src) && !/(placeholder|store|pay)/gi.test(src)) {
                acc.push(src);
              }
              return acc;
            }, []).sort();
            _this.renderMedia = function () {
              return mediaArr.reduce(function (acc, src) {
                acc += "<div class=\"splide__slide\"><img src=\"".concat(src, "\"></div>");
                return acc;
              }, '');
            };
            return "\n            <div class=\"zoom_slider zsl".concat(index, "\">\n              <div>\n                <div class=\"zoom_slider_logo\"><img src=\"").concat(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral(["\themesdefault\frontendoct-2023/assets/logo.svg"], ["\\themes\\default\\frontend\\oct-2023/assets/logo.svg"]))), "\"></div>\n                <button class=\"zoom_slider-close\" onclick=\"removeSlider($(this))\"></button>\n                <div class=\"zoom-sl").concat(index, " splide\">\n                  <div class=\"splide__track\">\n                    <div class=\"splide__list\">\n                    ").concat(_this.renderMedia(), "\n                    </div>\n                  </div>\n                  <div class=\"splide__arrows\">\n                    <div class=\"splide__arrow--prev\"></div>\n                    <div class=\"splide__arrow--next\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>");
          };
          var appendNewSlider = function appendNewSlider(html) {
            $body.append(html);
          }; // Append Zoom Slider
          var initNewSlider = function initNewSlider(index) {
            // Splide Initialization
            _this.settings = {
              type: "loop",
              perPage: 1,
              perMove: 1,
              autoplay: 0,
              gap: "12px",
              arrows: 1,
              pagination: 0,
              speed: 800,
              drag: false,
              dragAngleThreshold: 0
            };
            var zoomSlider = new Splide(".zoom-sl".concat(index), _this.settings);
            zoomSlider.mount();
          };
          var initZoom = function initZoom(index) {
            // Initialize jQuery zoom for the new slider
            var slides = _toConsumableArray(document.querySelector(".zoom_slider.zsl".concat(index)).querySelectorAll('.splide__slide'));
            slides.forEach(function (slide) {
              $(slide).zoom({
                magnify: 1.4,
                onZoomIn: function onZoomIn() {
                  $(this).closest('.splide').css('border-color', '#e6eaec');
                },
                onZoomOut: function onZoomOut() {
                  $(this).closest('.splide').css('border-color', '#0095c6');
                }
              });
            });
          };
          var showNewSlider = function showNewSlider(index) {
            var localSlider = $(".zoom_slider.zsl".concat(index));
            if (localSlider) {
              localSlider.show();
              lockScroll();
              setTimeout(function () {
                localSlider.css({
                  opacity: 1
                });
              }, 1);
            }
          };
          var openSlider = function openSlider(index) {
            var slider = $(".zoom_slider.zsl".concat(index));
            if (slider) {
              slider.show();
              lockScroll();
              setTimeout(function () {
                slider.css({
                  opacity: 1
                });
              }, 1);
            }
          };
          button.click(function () {
            var localSlider = document.querySelector(".zoom_slider.zsl".concat(index));
            if (!localSlider) {
              appendNewSlider(renderNewSlider(slider, index));
              initNewSlider(index);
              initZoom(index);
              showNewSlider(index);
            } else {
              openSlider(index);
            }
          });
        });
      };
      var setZoom = function setZoom() {
        $(document).ready(function () {
          if (document.querySelector('.main_product_zoom') == null) {
            if (isDesktop && $('.main_product').length) {
              setDesktopZoom();
            } else {
              setMobileZoom();
            }
          }
        });
      };
      return setZoom();
    },
    initTestProductZoom: function initTestProductZoom() {
      var zoomOpenCount = 0;
      var setZoom = function setZoom() {
        var srcIsValid = function srcIsValid(src) {
            return !/(placeholder|store|pay)/gi.test(src);
          },
          filterMedia = function filterMedia(arr) {
            return arr.reduce(function (acc, media) {
              var img = media.querySelector('img'),
                thumbAncestor = media.closest('.product-slider_thumbnails'),
                zoomAncestor = media.closest('.zoom-modal');
              if (img && img !== null && thumbAncestor == null && zoomAncestor == null) {
                var src = img.getAttribute('src');
                if (srcIsValid(src)) {
                  acc.push(media);
                }
              }
              return acc;
            }, []);
          },
          getSrcArr = function getSrcArr(arr) {
            return arr.reduce(function (acc, media) {
              var img = media.querySelector('img');
              if (img !== null) {
                if (img.hasAttribute('src')) {
                  var src = img.getAttribute('src');
                  if (srcIsValid(src) && !acc.includes(src)) {
                    acc.push(src);
                  }
                }
              }
              return acc;
            }, []);
          },
          renderSlidesHTML = function renderSlidesHTML(srcArr) {
            return srcArr.reduce(function (acc, src) {
              acc += "<div style=\"cursor: zoom-in\" class=\"zoom-modal__slide splide__slide\"><img loading=\"eager\" alt=\"\" src=\"".concat(src, "\"></div>");
              return acc;
            }, '');
          },
          renderSplideHTML = function renderSplideHTML(slidesHTML) {
            var productTitle = $('.product__item-title').html(),
              price = $('.product__item-price').eq(-1).html();
            return "\n          <div class=\"zoom-modal splide\">\n            <button data-evt=\"closeZoomModal\" class=\"zoom-modal__close-btn\"></button>\n            <div class=\"zoom-modal__holder\">\n              <div class=\"splide__arrows\">\n                <div class=\"splide__arrow--prev\"></div>\n                <div class=\"splide__arrow--next\"></div>\n              </div>\n              <div class=\"zoom-modal__header\">\n                <img src=\"".concat(String.raw(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\themesdefault\frontendoct-2023/assets/logo.svg"], ["\\themes\\default\\frontend\\oct-2023/assets/logo.svg"]))), "\" loading=\"lazy\" alt=\"\">\n                <img style=\"display: none\" src=\"").concat(String.raw(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["./assets/logo.svg"]))), "\" loading=\"lazy\" alt=\"\">\n              </div>\n              <div class=\"zoom-modal__footer\">\n                <h1 class=\"zoom-modal__name\">").concat(productTitle, "</h1>\n                <a href=\"javascript:void(0)\" data-evt=\"closeZoomModal\" class=\"zoom-modal__buy-btn\" onclick=\"addToCart()\">Add To Cart<span>").concat(price, " USD</span></a>\n              </div>\n              <div class=\"zoom-modal__slider\">\n                <div class=\"splide__track\">\n                  <div class=\"splide__list\">\n                    ").concat(slidesHTML, "\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          ");
          },
          initZoomSlider = function initZoomSlider() {
            var indexToGo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var settings = {
                type: "loop",
                perPage: 1,
                perMove: 1,
                autoplay: 0,
                gap: "12px",
                arrows: 1,
                pagination: 0,
                speed: 800,
                drag: false,
                dragAngleThreshold: 0
              },
              slider = document.querySelector('.zoom-modal');
            if (slider !== null) {
              var zoomSlider = new Splide('.zoom-modal', settings);
              zoomSlider.mount();
              zoomSlider.go(indexToGo);
            }
          },
          initPressZoom = function initPressZoom(slider) {
            var slides = _toConsumableArray(slider.querySelectorAll('.splide__slide')),
              zoomValue = window.innerWidth > 479 ? 2.2 : 1.6;
            slides.forEach(function (slide) {
              $(slide).zoom({
                magnify: zoomValue,
                on: 'grab',
                onZoomIn: function onZoomIn() {
                  $('.zoom-modal .splide__arrows').css({
                    opacity: 0
                  });
                  $('.zoom-hint').css({
                    opacity: 0
                  });
                },
                onZoomOut: function onZoomOut() {
                  $('.zoom-modal .splide__arrows').css({
                    opacity: 1
                  });
                }
              });
            });
          };
        var mediaArr = filterMedia(_toConsumableArray(document.querySelectorAll('.product-media')));
        mediaArr.forEach(function (el) {
          el.onclick = function () {
            lockScroll();
            try {
              var sibSrcArr = getSrcArr(filterMedia(_toConsumableArray(el.parentNode.closest('div').querySelectorAll('.product-media')))),
                splideHTML = renderSplideHTML(renderSlidesHTML(sibSrcArr));
              $body.append(splideHTML);
              initZoomSlider(sibSrcArr.indexOf(el.querySelector('img').getAttribute('src')));
              var zoomModal = document.querySelector('.zoom-modal'),
                holder = zoomModal.querySelector('.zoom-modal__holder');
              initPressZoom(zoomModal);
              var zoomHint = $('<\div>', {
                "class": 'zoom-hint'
              });
              setTimeout(function () {
                zoomModal.style.opacity = 1;
                if (zoomOpenCount <= 1) {
                  $(holder).append(zoomHint);
                  setTimeout(function () {
                    zoomHint.css({
                      opacity: 1
                    });
                  }, 500);
                }
              }, 1);
              zoomModal.addEventListener('mousedown', function () {
                zoomHint.css({
                  opacity: 0
                });
                setTimeout(function () {
                  zoomHint.remove();
                }, 450);
              });
              document.onkeydown = function (e) {
                e = e || window.event;
                var isEsc = false;
                if ('key' in e) {
                  isEsc = e.key === "Escape" || e.key === "Esc";
                } else {
                  isEsc = e.keyCode === 27;
                }
                if (isEsc) {
                  e.preventDefault();
                  unlockScroll();
                  var modal = $('.zoom-modal');
                  if (modal.length) {
                    modal.css({
                      opacity: 0
                    });
                    setTimeout(function () {
                      modal.remove();
                    }, getTransitionTime(modal));
                  }
                }
              };
              zoomOpenCount++;
            } catch (_unused) {
              throw new Error('JS : Init Product Zoom Error');
            }
          };
        });
        $(document).on('click', '[data-evt="closeZoomModal"]', function () {
          unlockScroll();
          var modal = $('.zoom-modal');
          if (modal.length) {
            modal.css({
              opacity: 0
            });
            setTimeout(function () {
              modal.remove();
            }, getTransitionTime(modal));
          }
        });
      };
      if (document.querySelector('.main_product_zoom') !== null) {
        setZoom();
      }
    },
    attachStickyScroll: function attachStickyScroll() {
      var bar = $('.filter-sidebar'),
        overlay = $('.filter-sidebar__overlay');
      if (bar.length && overlay.length) {
        var els = bar.find('.filter-row');
        $.each(els, function (i) {
          var _this2 = this;
          els[i].onclick = function () {
            var cont = $(_this2).find('.filter-row__container');
            setTimeout(function () {
              var currentHeight = bar.height();
              var scrollHeight = bar[0].scrollHeight;
              if (currentHeight - scrollHeight <= -5) {
                overlay.css({
                  opacity: 1
                });
              } else {
                overlay.css({
                  opacity: 0
                });
              }
            }, getTransitionTime(cont));
          };
        });
        bar[0].addEventListener('scroll', function (e) {
          if (this.scrollTop + this.clientHeight >= this.scrollHeight) {
            overlay.css({
              opacity: 0
            });
          } else {
            overlay.css({
              opacity: 1
            });
          }
        });
      }
    },
    attachCheckoutCopy: function attachCheckoutCopy() {
      var btnArr = [].concat(_toConsumableArray(document.querySelectorAll('.crypto-how-btn')), _toConsumableArray(document.querySelectorAll('.copy-address-btn')));
      if (btnArr.length) {
        btnArr.forEach(function (btn) {
          btn.onclick = function () {
            if (!window.getSelection().toString()) {
              var details = btn.closest('.checkout-form__radio-details');
              if (details !== null) {
                var copyAddress = /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                      while (1) switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;
                          _context.next = 3;
                          return navigator.clipboard.writeText(address);
                        case 3:
                          details.classList.add(IS_COPIED);
                          setTimeout(function () {
                            details.classList.remove(IS_COPIED);
                          }, 1300);
                          _context.next = 11;
                          break;
                        case 7:
                          _context.prev = 7;
                          _context.t0 = _context["catch"](0);
                          details.classList.remove(IS_COPIED, IS_ERROR);
                          setTimeout(function () {
                            details.classList.remove(IS_COPIED, IS_ERROR);
                          }, 2100);
                        case 11:
                        case "end":
                          return _context.stop();
                      }
                    }, _callee, null, [[0, 7]]);
                  }));
                  return function copyAddress() {
                    return _ref.apply(this, arguments);
                  };
                }();
                var address = details.querySelector('.copy-address-btn__typo').innerHTML;
                copyAddress();
              }
            }
          };
        });
      }
    },
    adjustStickyEls: function adjustStickyEls() {
      var elsArr = [].concat(_toConsumableArray(document.querySelectorAll('.filter-sidebar.to-stick')), _toConsumableArray(document.querySelectorAll('.sticky-filters')));
      var header = document.querySelector('.header');
      if (elsArr.length && header) {
        var adjust = function adjust() {
          var headerHeight = parseInt(window.getComputedStyle(header).getPropertyValue('height'));
          elsArr.forEach(function (el) {
            var topValue = $(window).width() > 991 ? headerHeight + 24 : headerHeight;
            Object.assign(el.style, {
              top: "".concat(topValue, "px")
            });
          });
        };
        ['load', 'resize'].forEach(function (event) {
          window.addEventListener(event, function () {
            adjust();
          });
        });
      }
    },
    bindCardFav: function bindCardFav() {
      var buttons = document.querySelectorAll('.card-item-fav');
      buttons.forEach(function (btn) {
        return btn.onclick = function () {
          if (btn.classList.contains(IS_ACTIVE)) {
            btn.classList.remove(IS_ACTIVE);
          } else {
            btn.classList.add(IS_ACTIVE);
          }
        };
      });
    },
    observeSmartPictures: function observeSmartPictures() {
      var smartPictures = document.querySelectorAll('.smart-picture');
      smartPictures.forEach(function (el) {
        var img = el.querySelector('img');
        if (img) {
          img.addEventListener('load', function () {
            el.classList.add('--loaded');
          });
          if (img.complete) {
            el.classList.add('--loaded');
          }
        } else {
          el.classList.add('--loaded');
        }
      });
    }
  }
});
module.exports = pageEls;

},{}],23:[function(require,module,exports){
"use strict";

var pageReviews = {
  init: function init() {
    if (document.querySelector('.page-reviews.splide') !== null) {
      this.initSplide();
    }
  },
  initSplide: function initSplide() {
    try {
      var main = new Splide('.page-reviews', {
        type: "slider",
        perPage: 3.4,
        perMove: 1,
        autoplay: 0,
        pauseOnHover: 1,
        pauseOnFocus: 1,
        gap: 12,
        arrows: 1,
        pagination: 1,
        speed: 500,
        breakpoints: {
          991: {
            perPage: 2.2
          },
          620: {
            perPage: 1.3
          }
        }
      });
      main.mount();
    } catch (_unused) {
      console.log('Page Review SPLIDE ERR');
    }
  }
};
module.exports = pageReviews;

},{}],24:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var pgModal = new Object({
  initialized: undefined,
  init: function init() {
    this.renderDOM();
    this.bindEvents();
    Object.values(this.initFn).forEach(function (target) {
      if (typeof target === "function") target();
    });
    this.intialized = true;
  },
  renderDOM: function renderDOM() {
    // Root
    this.modal = $(".pg-modal");
    this.container = $(".pg-modal__container");
    this.backdrop = $(".pg-modal__backdrop");
    this.close = $('[data-evt="closePgModal"]');

    // Sections
    this.section = $(".pg-section");
    this.row = $(".pg-row");
    this.scrollContainer = $(".pg-modal__overscroll");
    this.sectionBracelets = this.section.filter("#pgBracelets");
    this.sectionDiamonds = this.section.filter("#pgDiamonds");
    this.sectionRings = this.section.filter("#pgRings");
    this.sectionNecklaces = this.section.filter("#pgNecklaces");

    // Controls
    this.switchBtn = $(".pg-switch-btn");

    // Select Tabs
    this.selectArr = Array.from($(".pg-select"));
    this.selectBtn = $(".pg-select-btn");
  },
  bindEvents: function bindEvents() {
    this.close.click(function () {
      pgModal.fn.closeModal();
    });
  },
  fn: {
    openModal: function openModal(target) {
      lockScroll();
      pgModal.modal.show();
      setTimeout(function () {
        pgModal.backdrop.css({
          opacity: 1
        });
        pgModal.container.removeClass("is-hidden");
      }, 1);
      var att = $(target).attr("data-pg-open");
      pgModal.section.hide();
      switch (att) {
        case "diamonds":
          pgModal.sectionDiamonds.show();
          break;
        case "rings":
          pgModal.sectionRings.show();
          break;
        case "bracelets":
          pgModal.sectionBracelets.show();
          break;
        case "necklaces":
          pgModal.sectionNecklaces.show();
          break;
        default:
          pgModal.section[0].show();
          break;
      }
      pgModal.scrollContainer[0].scrollTop = 0;
      pgSelect.attachControls(pgModal.selectArr, pgModal.selectBtn);
    },
    closeModal: function closeModal() {
      unlockScroll();
      pgModal.backdrop.css({
        opacity: 0
      });
      pgModal.container.addClass("is-hidden");
      setTimeout(function () {
        pgModal.modal.hide();
      }, 475);
    },
    setMobile: function setMobile() {
      if ($(window).width() < 480) {
        var arr = Array.from(pgModal.section);
        var _loop = function _loop() {
          var nArr = Array.from($(arr[i]).find(pgModal.row));
          $.each(nArr, function (i) {
            if (i > 0) {
              $(nArr[i]).hide();
            }
          });
        };
        for (var i = 0; i < arr.length; i++) {
          _loop();
        }
      }
    },
    attachSectionControls: function attachSectionControls() {
      pgModal.section.each(function () {
        var btnArr = _toConsumableArray($(this).find(pgModal.switchBtn));
        var rowArr = _toConsumableArray($(this).find(pgModal.row));
        $.each(btnArr, function (i) {
          var _this = this;
          btnArr[i].onclick = function () {
            $.each(rowArr, function (i) {
              $(rowArr[i]).hide();
            });
            $.each(btnArr, function (i) {
              $(btnArr[i]).removeClass("is-active");
            });
            $(_this).addClass("is-active");
            $(rowArr[i]).show();
          };
        });
      });
    }
  },
  initFn: {
    setInitial: function setInitial() {
      pgModal.fn.closeModal();
      pgModal.fn.setMobile();
      pgModal.fn.attachSectionControls();
    }
  }
});
module.exports = pgModal;

},{}],25:[function(require,module,exports){
"use strict";

var pgSelect = {
  initalized: undefined,
  init: function init() {
    this.renderDOM();
    this.initalized = true;
  },
  getAttrDOM: function getAttrDOM(att) {
    return $("[data-pg-set=\"".concat(att, "\"]"));
  },
  renderDOM: function renderDOM() {
    // Shape
    this.shapeImg = this.getAttrDOM("shapeImg");
    this.shapeTitle = this.getAttrDOM("shapeTitle");
    this.shapeDescription = this.getAttrDOM("shapeDescription");

    // Color
    this.colorImg = this.getAttrDOM("colorImg");
    this.colorTitle = this.getAttrDOM("colorTitle");
    this.colorDescription = this.getAttrDOM("colorDescription");

    // Clarity
    this.clarityImg = this.getAttrDOM("clarityImg");
    this.clartyTitle = this.getAttrDOM("clarityTitle");
    this.clarityDescription = this.getAttrDOM("clarityDescription");

    // Ring Size
    this.currentSize = this.getAttrDOM("currentSize");
    this.circSize = this.getAttrDOM("circSize");
    this.dSize = this.getAttrDOM("dSize");
    this.euSize = this.getAttrDOM("euSize");
    this.ukSize = this.getAttrDOM("ukSize");
  },
  attachControls: function attachControls(sArr, sBtn) {
    if (!this.initalized) {
      pgSelect.init();
    }
    var selectArr = sArr,
      selectBtn = sBtn;
    var _loop = function _loop() {
      var thisAttr = selectArr[i].getAttribute("data-pg-select"),
        btnArr = Array.from($(selectArr[i]).find(selectBtn));
      function setPgSelectEvent() {
        var dataSet;
        switch (thisAttr) {
          case "shape":
            dataSet = pgSelect.shape;
            break;
          case "color":
            dataSet = pgSelect.color;
            break;
          case "clarity":
            dataSet = pgSelect.clarity;
            break;
          case "ring-size":
            dataSet = pgSelect.ringSize;
            break;
        }
        return {
          dataSet: dataSet
        };
      }
      $.each(btnArr, function (i) {
        var _this = this;
        btnArr[i].onclick = function () {
          setPgSelectEvent().dataSet.changeDetails(i);
          $.each(btnArr, function (i) {
            btnArr[i].classList.remove("is-active");
          });
          $(_this).addClass("is-active");
        };
      });
    };
    for (var i = 0; i < selectArr.length; i++) {
      _loop();
    }
  },
  shape: {
    changeDetails: function changeDetails(index) {
      pgSelect.shapeImg.attr("src", pgSelect.data.shape[index].url);
      pgSelect.shapeTitle.html(pgSelect.data.shape[index].title);
      pgSelect.shapeDescription.html(pgSelect.data.shape[index].description);
    }
  },
  color: {
    changeDetails: function changeDetails(index) {
      pgSelect.colorImg.attr("src", pgSelect.data.color[index].url);
      pgSelect.colorTitle.html(pgSelect.data.color[index].title);
      pgSelect.colorDescription.html(pgSelect.data.color[index].description);
    }
  },
  clarity: {
    changeDetails: function changeDetails(index) {
      pgSelect.clarityImg.attr("src", pgSelect.data.clarity[index].url);
      pgSelect.clartyTitle.html(pgSelect.data.clarity[index].title);
      pgSelect.clarityDescription.html(pgSelect.data.clarity[index].description);
    }
  },
  ringSize: {
    changeDetails: function changeDetails(index) {
      pgSelect.currentSize.html(pgSelect.data.ringSize[index].us);
      pgSelect.circSize.html(pgSelect.data.ringSize[index].circ);
      pgSelect.dSize.html(pgSelect.data.ringSize[index].diameter);
      pgSelect.euSize.html(pgSelect.data.ringSize[index].europe);
      pgSelect.ukSize.html(pgSelect.data.ringSize[index].uk);
    }
  },
  data: {
    shape: [{
      url: "https://i.ibb.co/ZBmcG0f/dmg-shape-round.png",
      title: "Round",
      description: "A classic and timeless shape, the round diamond is known for its brilliant sparkle and perfect symmetry."
    }, {
      url: "https://i.ibb.co/rdNkYyp/dmg-shape-priness.png",
      title: "Princess",
      description: "A square-shaped diamond with sharp corners and exceptional brilliance, known for its modern and clean lines."
    }, {
      url: "https://i.ibb.co/271bsCZ/dmg-shape-oval.png",
      title: "Oval",
      description: "A modified brilliant cut diamond with an elongated shape, known for its brilliance and ability to create the illusion of longer, slender fingers."
    }, {
      url: "https://i.ibb.co/qyQnV1f/dmg-shape-pear.png",
      title: "Pear",
      description: "An elegant combination of a round and marquise shape, sometimes called a teardrop, offering a unique and graceful appearance."
    }, {
      url: "https://i.ibb.co/NVdgJtv/dmg-shape-emerald.png",
      title: "Emerald",
      description: "A rectangular shape with stepped facets, highlighting the diamonds clarity and showcasing a timeless and sophisticated look."
    }],
    color: [{
      url: "https://i.ibb.co/MDnYmGh/dmg-color-near.png",
      title: "K - Last Grade",
      description: "The color may be visible to the unaided eye. Diamonds with a K-color grade can be a smart choice, offering excellent value for money."
    }, {
      url: "https://i.ibb.co/MDnYmGh/dmg-color-near.png",
      title: "J - Last Grade",
      description: 'Color in diamonds graded as "near-colorless" may be slightly visible to the naked eye, especially in fancy shapes or diamonds larger than 1 carat.'
    }, {
      url: "https://i.ibb.co/JkK4B3C/dmg-color-slight.png",
      title: "I - Slightly Detectable",
      description: "Upon close examination, the color may be barely noticeable, but it still provides exceptional value."
    }, {
      url: "https://i.ibb.co/J2JhPM4/dmg-color-clear.png",
      title: "H - Near Colorless",
      description: 'The "near-colorless" grade of CA exhibits noticeable color only when compared to much higher color grades, offering excellent value.'
    }, {
      url: "https://i.ibb.co/J2JhPM4/dmg-color-clear.png",
      title: "G - Almost Colorless",
      description: 'This grade is the highest level of "near-colorless" and may show some color in comparison to the even higher "colorless" grades, but it offers excellent value.'
    }, {
      url: "https://i.ibb.co/J2JhPM4/dmg-color-clear.png",
      title: "F - Colorless",
      description: 'The "colorless" grade is most valued when placed in platinum or white gold, with a faint color that can be identified by a skilled gemologist.'
    }, {
      url: "https://i.ibb.co/J2JhPM4/dmg-color-clear.png",
      title: "E - Colorless",
      description: 'This grade, best showcased in platinum or white gold, is so "colorless" that even trained eyes would struggle to detect traces of color.'
    }],
    clarity: [{
      url: "https://i.ibb.co/Gp8pKwK/clarity-i3.png",
      title: "I1, I2, I3 - Included",
      description: "Diamonds in this clarity range have inclusions that are easily visible under 10x magnification and may also be visible to the naked eye. These diamonds may have reduced brilliance and sparkle due to their inclusions."
    }, {
      url: "https://i.ibb.co/ZHBvJz9/clarity-si1-si2.png",
      title: "SI1 & SI2 - Slightly Included",
      description: "These grades have noticeable inclusions under 10x magnification, some of which might be visible to the naked eye. SI diamonds generally offer good value as they have inclusions that might not significantly affect the appearance of the diamond."
    }, {
      url: "https://i.ibb.co/27xG7GC/clarity-vs1-vs2.png",
      title: "VS1 & VS2 - Very Slightly Included",
      description: "These grades have minor inclusions that are visible under 10x magnification but are considered relatively small and not easily noticeable to the naked eye."
    }, {
      url: "https://i.ibb.co/d61wnL9/clarity-vvs1-vvs2.png",
      title: "VVS1 & VVS2 - Very, Very Slightly Included",
      description: "These grades indicate that inclusions are extremely difficult to see even under 10x magnification. VVS diamonds may have minor inclusions that are barely visible to a skilled grader."
    }, {
      url: "https://i.ibb.co/WKsqs99/clarity-fl-if.png",
      title: "FL & IF - Flawless",
      description: "These are the highest clarity grades. Flawless diamonds have no visible inclusions or blemishes under 10x magnification, even by a skilled grader. Internally Flawless diamonds have no internal inclusions but may have minor surface blemishes."
    }],
    ringSize: [{
      us: 4,
      europe: "47",
      uk: "H 1/2",
      diameter: "14.9",
      circ: "46.8"
    }, {
      us: 4.5,
      europe: "48",
      uk: "I 1/2",
      diameter: "15.3",
      circ: "48"
    }, {
      us: 5,
      europe: "49",
      uk: "J 1/2",
      diameter: "15.7",
      circ: "49.3"
    }, {
      us: 5.5,
      europe: "51",
      uk: "K 1/2",
      diameter: "16.1",
      circ: "50.6"
    }, {
      us: 6,
      europe: "52",
      uk: "L 1/2",
      diameter: "16.5",
      circ: "51.9"
    }, {
      us: 6.5,
      europe: "53",
      uk: "M 1/2",
      diameter: "16.9",
      circ: "53.1"
    }, {
      us: 7,
      europe: "54",
      uk: "N 1/2",
      diameter: "17.3",
      circ: "54.4"
    }, {
      us: 7.5,
      europe: "55",
      uk: "O 1/2",
      diameter: "17.7",
      circ: "55.7"
    }, {
      us: 8,
      europe: "57",
      uk: "P 1/2",
      diameter: "18.1",
      circ: "57.0"
    }, {
      us: 8.5,
      europe: "58",
      uk: "Q 1/2",
      diameter: "18.5",
      circ: "58.3"
    }, {
      us: 9,
      europe: "59",
      uk: "R 1/2",
      diameter: "19.0",
      circ: "59.5"
    }, {
      us: 9.5,
      europe: "61",
      uk: "S 1/2",
      diameter: "19.4",
      circ: "60.8"
    }, {
      us: 10,
      europe: "62",
      uk: "T 1/2",
      diameter: "19.8",
      circ: "62.1"
    }, {
      us: 10.5,
      europe: "63",
      uk: "U 1/2",
      diameter: "20.2",
      circ: "63.4"
    }, {
      us: 11,
      europe: "64",
      uk: "V 1/2",
      diameter: "20.6",
      circ: "64.6"
    }, {
      us: 11.5,
      europe: "66",
      uk: "W 1/2",
      diameter: "21.0",
      circ: "65.9"
    }, {
      us: 12,
      europe: "67",
      uk: "X 1/2",
      diameter: "21.4",
      circ: "67.2"
    }, {
      us: 12.5,
      europe: "68",
      uk: "Z 1/2",
      diameter: "21.8",
      circ: "68.5"
    }]
  }
};
module.exports = pgSelect;

},{}],26:[function(require,module,exports){
"use strict";

window.sirvTimer = null;
var sirvCards = {
  visibleClass: 'is-visible',
  init: function init() {
    this.cacheDOM();
    this.bindEvents();
  },
  cacheDOM: function cacheDOM() {
    this.cards = $('.product-card');
  },
  bindEvents: function bindEvents() {
    if (this.cards) {
      this.cards.on('mouseenter mouseleave touchstart touchend', function (e) {
        switch (e.type) {
          case 'touchstart':
            sirvCards.toggleSirv($(this), 1);
            break;
          case 'touchend':
            sirvCards.toggleSirv($(this), 0);
            break;
          case 'mouseenter':
            sirvCards.toggleSirv($(this), 1);
            break;
          case 'mouseleave':
            sirvCards.toggleSirv($(this), 0);
            break;
        }
      });
    }
  },
  toggleSirv: function toggleSirv($this, state) {
    var _this = this;
    var sirv = $this.find('.product-picture_sirv');
    if (sirv.length !== 0) {
      var id = sirv.find('.Sirv').attr('id');
      if (state !== 0) {
        sirv.show();
        setTimeout(function () {
          sirv.addClass(_this.visibleClass);
        }, 1);
        Sirv.instance(id).play();
      } else {
        Sirv.instance(id).pause();
        sirv.removeClass(this.visibleClass);
        sirvTimer = window.setTimeout(function () {
          sirv.hide();
        }, 300);
      }
    }
  }
};
module.exports = sirvCards;

},{}],27:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function initValidators() {
  $(".needs-validation").parsley({
    errorClass: 'is-invalid text-danger',
    successClass: 'is-valid',
    errorsWrapper: '<div class="invalid-feedback"></div>',
    errorTemplate: '<span></span>',
    trigger: 'change'
  });
}
function resetBtnStates(el) {
  el.removeClass('is-successful');
  el.removeClass('is-failed');
}
function showAlternativeBtnText(el, msg, css_class) {
  var original_msg = $(el).html();
  resetBtnStates($(el));
  $(el).addClass(css_class).html(msg);
  setTimeout(function () {
    resetBtnStates($(el));
    $(el).html(original_msg);
  }, 4000);
}
function resetSignMessage() {
  var el = document.querySelector('.sign-modal__message');
  if (el) {
    el.classList.remove('is-successful');
    el.classList.remove('is-failed');
    el.style.display = 'none';
    el.innerHTML = '';
  }
}
function showSignMessage(msg, css_class) {
  var el = document.querySelector('.sign-modal__message');
  if (el) {
    var original_msg = el.innerHTML;
    resetSignMessage();
    el.classList.add(css_class);
    el.style.display = 'flex';
    el.innerHTML = msg;
    setTimeout(function () {
      resetSignMessage();
      el.innerHTML = original_msg;
    }, 4000);
  }
}
window.Parsley.on('form:submit', function () {
  //console.log("submit form");
  var form = $(this.$element[0]);
  var url = form.attr('action');
  var btn = form.find(".js-loading-btn");
  $.ajax({
    type: "POST",
    url: url,
    data: form.serialize(),
    // serializes the form's elements.
    success: function success(data) {
      var r = $.parseJSON(data);
      if (!r.error) {
        //show success state on button and return message in r.msg
        showSignMessage(r.msg, 'is-successful');
        window.setTimeout(function () {
          if (r.link != undefined && r.link != '') {
            window.location.href = r.link;
          } else {
            window.location.reload();
          }
        }, 3000);
      } else {
        //show failed state on button and return message in r.msg
        showSignMessage(r.msg, 'is-failed');
      }
    }
  });
  return false;
});
var SignModal = /*#__PURE__*/function () {
  function SignModal(rootEl) {
    _classCallCheck(this, SignModal);
    this.rootEl = rootEl;
    this.adjustEl = rootEl.querySelector('.sign-modal__adjust');
    this.backdrop = rootEl.querySelector('.sign-modal__backdrop');
    this.container = rootEl.querySelector('.sign-modal__container');
    this.formsArr = _toConsumableArray(rootEl.querySelectorAll('.needs-validation'));
    this.evtOpenArr = document.querySelectorAll('[data-evt="openSignModal"]');
    this.evtCloseArr = document.querySelectorAll('[data-evt="closeSignModal"]');
    this.evtJsToggleSign = document.querySelectorAll('.js-toggle-sign');
    this.contentArr = _toConsumableArray(rootEl.querySelectorAll('[data-sign-content]'));
    this.evtSwitchContentArr = rootEl.querySelectorAll('[data-sign-switch]');
    this.evtTogglePassword = _toConsumableArray(rootEl.querySelectorAll('[data-evt="togglePassword"]'));
    this.loader = rootEl.querySelector('.sign-modal__loader');
    this.jsSubmitArr = _toConsumableArray(rootEl.querySelectorAll('.js-submit'));
    this.otpArr = _toConsumableArray(this.rootEl.querySelectorAll('input.--otp'));
    this.locked = false;
    this.opened = true;
    this.activeContent = undefined;
  }

  /**
   * Getters
   */
  return _createClass(SignModal, [{
    key: "getActiveContent",
    get: function get() {
      return this.contentArr.find(function (e) {
        return window.getComputedStyle(e).display !== 'none';
      });
    }

    /**
     * Utils
     */
  }, {
    key: "lockModal",
    value: function lockModal() {
      this.rootEl.classList.add(__LOCKED);
      this.locked = true;
    }
  }, {
    key: "unlockModal",
    value: function unlockModal() {
      this.rootEl.classList.remove(__LOCKED);
      this.locked = false;
    }

    /**
     * Methods
     */
  }, {
    key: "switch",
    value: function _switch(contentType) {
      var _this = this;
      var section = this.contentArr.find(function (e) {
        return e.dataset.signContent === contentType;
      }) || this.contentArr[0];
      var activeSection = this.contentArr.find(function (el) {
        var displayProperty = window.getComputedStyle(el).display;
        return displayProperty !== 'none';
      });
      if (!section) throw new Error("Expected to find section with data-sign-content=".concat(contentType));
      if (activeSection == section) return;
      if (contentType == 'otp') {
        this.otpArr.forEach(function (el) {
          el.value = '';
        });
      }
      this.activeContent = section;
      this.lockModal();
      var currentHeight = this.adjustEl.offsetHeight;
      this.adjustEl.style.opacity = 0;
      this.adjustEl.style.height = "".concat(currentHeight, "px");
      setTimeout(function () {
        _this.contentArr.forEach(function (e) {
          return e.style.display = 'none';
        });
        section.style.display = 'flex';
        var newHeight = section.scrollHeight;
        _this.adjustEl.style.height = "".concat(newHeight, "px");
        setTimeout(function () {
          _this.adjustEl.style.opacity = '1';
          _this.unlockModal();
        }, 5);
        setTimeout(function () {
          _this.adjustEl.style.height = 'auto';
        }, getTransitionTime(_this.adjustEl));
      }, getTransitionTime(this.adjustEl));
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.opened) {
        this.close();
      } else {
        this.open();
      }
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;
      if (!this.opened) {
        if (window.menu) {
          if (window.menu.state) {
            window.menu.state = false;
          }
        }
        var content = this.contentArr.find(function (e) {
          return e.dataset.signContent == 'sms';
        }) || this.contentArr[0];
        this.opened = true;
        this.rootEl.style.display = 'block';
        this.adjustEl.style.height = 'auto';
        this.contentArr.forEach(function (e) {
          return e.style.display = 'none';
        });
        content.style.display = 'flex';
        // content.querySelector('input').focus()
        lockScroll();
        var show = function show() {
          _this2.backdrop.style.opacity = 1;
          _this2.container.classList.remove(IS_HIDDEN);
        };
        setTimeout(show, 1);
      }
    }
  }, {
    key: "close",
    value: function close() {
      var _this3 = this;
      if (this.opened) {
        this.opened = false;
        this.backdrop.style.opacity = 0;
        this.container.classList.add(IS_HIDDEN);
        unlockScroll();
        setTimeout(function () {
          _this3.rootEl.style.display = 'none';
        }, getTransitionTime(this.backdrop));
      }
    }
  }, {
    key: "startLoading",
    value: function startLoading() {
      var _this4 = this;
      if (this.loader && !this.locked) {
        this.unlockModal();
        this.loader.style.display = 'flex';
        setTimeout(function () {
          _this4.loader.style.opacity = '1';
        }, 10);
      }
    }
  }, {
    key: "stopLoading",
    value: function stopLoading() {
      var _this5 = this;
      if (this.loader) {
        this.loader.style.opacity = '0';
        setTimeout(function () {
          _this5.loader.style.display = 'none';
          _this5.locked = false;
        }, getTransitionTime(this.loader));
      }
    }

    /**
     * Bind Events
     */
  }, {
    key: "bindToggleVisiblity",
    value: function bindToggleVisiblity() {
      var _this6 = this;
      // Open
      var _iterator = _createForOfIteratorHelper(this.evtOpenArr),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var el = _step.value;
          el.addEventListener('click', function (e) {
            e.preventDefault();
            _this6.toggle();
          });
        }
        // Close
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _iterator2 = _createForOfIteratorHelper(this.evtCloseArr),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _el = _step2.value;
          _el.addEventListener('click', function (e) {
            e.preventDefault();
            _this6.close();
          });
        }
        // Toggle
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var _iterator3 = _createForOfIteratorHelper(this.evtJsToggleSign),
        _step3;
      try {
        var _loop = function _loop() {
          var el = _step3.value;
          el.addEventListener('click', function (e) {
            e.preventDefault();
            _this6.toggle();
            var contentName = el.dataset.signSwitch;
            if (contentName) {
              _this6["switch"](contentName);
            }
          });
        };
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "bindSwitchContent",
    value: function bindSwitchContent() {
      var _this7 = this;
      var _iterator4 = _createForOfIteratorHelper(this.evtSwitchContentArr),
        _step4;
      try {
        var _loop2 = function _loop2() {
          var el = _step4.value;
          el.addEventListener('click', function (e) {
            e.preventDefault();
            var contentName = el.dataset.signSwitch;
            _this7["switch"](contentName);
          });
        };
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "bindOTPInput",
    value: function bindOTPInput() {
      var inputs = this.otpArr;
      var _iterator5 = _createForOfIteratorHelper(inputs),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var input = _step5.value;
          input.addEventListener('paste', function (e) {
            var data = e.clipboardData.getData('text');
            var value = data.split("");
            if (value.length === inputs.length) {
              inputs.forEach(function (input, index) {
                return input.value = value[index];
              });
            }
          });
          input.addEventListener('input', function (e) {
            var value = e.target.value;
            if (value.length > 1) {
              e.target.value = value.replace(/./g, '');
            }
            if (value.match(/\D/g)) {
              e.target.value = '';
            }
            if (value.length > 0) {
              var nextInput = e.target.nextElementSibling;
              var valueIsDigit = value.match(/\d/g);
              if (nextInput && valueIsDigit) {
                nextInput.focus();
              }
            }
          });
          input.addEventListener('keydown', function (e) {
            if (e.key === 'Backspace') {
              e.target.value = '';
              var prevInput = e.target.previousElementSibling;
              if (prevInput) {
                prevInput.focus();
              }
            }
            if (e.key === 'ArrowLeft') {
              var _prevInput = e.target.previousElementSibling;
              if (_prevInput) {
                _prevInput.focus();
              }
            } else if (e.key === 'ArrowRight') {
              var nextInput = e.target.nextElementSibling;
              if (nextInput) {
                nextInput.focus();
              }
            }
          });
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "bindTogglePassword",
    value: function bindTogglePassword() {
      var _iterator6 = _createForOfIteratorHelper(this.evtTogglePassword),
        _step6;
      try {
        var _loop3 = function _loop3() {
          var btn = _step6.value;
          btn.addEventListener('click', function (e) {
            e.preventDefault();
            var input = btn.parentNode.querySelector('input');
            if (input) {
              var type = input.getAttribute('type') === 'password' ? 'text' : 'password';
              var svgShow = btn.querySelector('.svg_pass_show');
              var svgHide = btn.querySelector('.svg_pass_hide');
              input.type = type;
              if (svgShow && svgHide) {
                if (type === 'text') {
                  svgShow.style.display = 'none';
                  svgHide.style.display = 'inline';
                } else {
                  svgShow.style.display = 'inline';
                  svgHide.style.display = 'none';
                }
              }
            }
          });
        };
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop3();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  }, {
    key: "bindSubmit",
    value: function bindSubmit() {
      var _this8 = this;
      this.formsArr.forEach(function (form, index) {
        form.addEventListener('submit', function () {
          if ($(form).parsley().isValid()) {
            _this8.startLoading();
          }
        });
      });
    }
  }, {
    key: "bindKeyPress",
    value: function bindKeyPress() {
      var _this9 = this;
      document.addEventListener('keypress', function (e) {
        var isEnter = e.key === 'Enter' || e.keyCode === 13;
        if (isEnter && _this9.opened) {
          e.preventDefault();
          var activeSection = _this9.getActiveContent;
          var btnGroup = activeSection.querySelector('.sign-form__btn-group');
          if (btnGroup) {
            btnGroup.querySelector('button').click();
          }
        }
      });
    }

    /**
     * Initialize
     */
  }, {
    key: "initialSetup",
    value: function initialSetup() {
      this.rootEl.style.display = 'none';
      this.close();
      this["switch"]('phone_register');
    }
  }, {
    key: "init",
    value: function init() {
      if (this.rootEl) {
        this.bindToggleVisiblity();
        this.bindSwitchContent();
        this.bindOTPInput();
        this.bindTogglePassword();
        this.bindSubmit();
        this.initialSetup();
        this.bindKeyPress();
      }
    }
  }]);
}();
document.addEventListener('DOMContentLoaded', function () {
  var modal = document.querySelector('.sign-modal');
  if (modal) {
    window.signModal = new SignModal(modal);
    window.signModal.init();
    initValidators();
  }
});
$(document).ready(function () {
  $('#btn_confirm_otp').on('click', function () {
    confirmLoginOtp();
  });
  $('#resend-otp-btn').on('click', function () {
    resendOtp();
  });
  $('#frm_login_otp').on('submit', function (e) {
    var phoneField = document.querySelector('#phone_input_Login');
    var iti = window.intlTelInputGlobals.getInstance(phoneField);
    e.preventDefault();
    var fullPhone = iti.getNumber();
    var countryCode = '+' + iti.getSelectedCountryData().dialCode;
    var phone = fullPhone.replace(countryCode, '');
    var btn = $(e.target).find(".js-loading-btn");
    $('#otp_phone').val(phone);
    $('#otp_country').val(countryCode);
    $.ajax({
      url: '/send-otp',
      type: 'POST',
      data: {
        country_code: countryCode,
        phone_number: phone
      },
      success: function success(data) {
        var r = $.parseJSON(data);
        var MsgClass = r.error ? 'is-failed' : 'is-successful';
        showSignMessage(r.msg, MsgClass);
        if (!r.error) {
          $('.sign-modal__phone-span').html(fullPhone);
          window.signModal["switch"]('otp');
        }
      }
    });
  });
});
function confirmLoginOtp() {
  var otp = $('#otp_1').val() + $('#otp_2').val() + $('#otp_3').val() + $('#otp_4').val();
  var phone = $('#otp_phone').val();
  var countryCode = $('#otp_country').val();
  var btn = '#btn_confirm_otp';
  if (otp != '' && otp.length == 4) {
    window.signModal.startLoading();
    $.ajax({
      url: '/confirm-otp',
      type: 'POST',
      data: {
        country_code: countryCode,
        phone_number: phone,
        otp_code: otp
      },
      success: function success(data) {
        var r = $.parseJSON(data);
        var MsgClass = r.error ? 'is-failed' : 'is-successful';
        window.signModal.stopLoading();
        showSignMessage(r.msg, MsgClass);
        if (!r.error) {
          window.location.reload();
        }
      }
    });
  } else {
    showSignMessage('Enter 4 digits OTP', 'is-failed');
  }
}
function resendOtp() {
  var phone = $('#otp_phone').val();
  var countryCode = $('#otp_country').val();
  var btn = '#resend-otp-btn';
  window.signModal.startLoading();
  $.ajax({
    url: '/resend-otp',
    type: 'POST',
    data: {
      country_code: countryCode,
      phone_number: phone
    },
    success: function success(data) {
      var r = $.parseJSON(data);
      var MsgClass = r.error ? 'is-failed' : 'is-successful';
      window.signModal.stopLoading();
      showSignMessage(r.msg, MsgClass);
    }
  });
}

},{}],28:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var CareModal = /*#__PURE__*/function () {
  function CareModal() {
    _classCallCheck(this, CareModal);
    this.elem = document.querySelector('.care-modal');
    this.openArr = _toConsumableArray(document.querySelectorAll('[data-care-open]'));
    this.closeArr = _toConsumableArray(document.querySelectorAll('[data-care-close]'));
    this.contentArr = _toConsumableArray(document.querySelectorAll('[data-care-content]'));
    this.activeSection = undefined;
    this.opened = false;
    this.init();
  }
  return _createClass(CareModal, [{
    key: "init",
    value: function init() {
      this.bindEvents();
      this.setSoapOverlay();
    }

    // Utils
  }, {
    key: "reset",
    value: function reset() {
      this.contentArr.forEach(function (e) {
        return e.style.display = 'none';
      });
      this.contentArr[0].style.display = 'block';
    }

    // Events
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this = this;
      // Open
      var _iterator = _createForOfIteratorHelper(this.openArr),
        _step;
      try {
        var _loop = function _loop() {
          var elem = _step.value;
          elem.addEventListener('click', function () {
            _this.switchContent(elem.dataset.careOpen);
            _this.show();
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
        // Hide
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _iterator2 = _createForOfIteratorHelper(this.closeArr),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var elem = _step2.value;
          elem.addEventListener('click', function () {
            _this.hide();
          });
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (_this.opened && !target.closest('.care-modal') && !target.closest('[data-care-open]')) {
          _this.hide();
        }
      });
    }

    // Toggle view
  }, {
    key: "hide",
    value: function hide() {
      var _this2 = this;
      if (window.careBackdrop) {
        window.careBackdrop.hide(true);
      }
      this.opened = false;
      unlockScroll();
      this.elem.classList.remove(__VISIBLE);
      setTimeout(function () {
        _this2.elem.style.display = 'none';
        _this2.reset();
      }, getTransitionTime(this.elem));
    }
  }, {
    key: "show",
    value: function show() {
      var _this3 = this;
      window.careBackdrop = new window.Backdrop({
        half: true,
        callback: function callback() {
          _this3.hide();
        }
      });
      this.opened = true;
      lockScroll();
      this.elem.style.display = 'block';
      if (this.activeSection) {
        var body = this.activeSection.querySelector('.care-modal__body');
        if (body) {
          body.scrollTop = 0;
        }
      }
      requestAnimationFrame(function () {
        _this3.elem.classList.add(__VISIBLE);
      });
    }
  }, {
    key: "switchContent",
    value: function switchContent(type) {
      var sectionToShow = this.contentArr.find(function (e) {
        return e.dataset.careContent === type;
      }) || this.contentArr[0];
      this.activeSection = sectionToShow;
      this.contentArr.forEach(function (e) {
        return e.style.display = 'none';
      });
      sectionToShow.style.display = 'block';
    }

    // Animation Background
  }, {
    key: "setSoapOverlay",
    value: function setSoapOverlay() {
      var isMobile = function isMobile() {
        return window.innerWidth < 992;
      };
      var canvas = document.querySelector('#soap_overlay');
      var ctx = canvas.getContext('2d');
      var bubbles = [];
      var bubbleCount = isMobile() ? 20 : 35;
      var bubbleSpeed = isMobile() ? 1.6 : 2.2;
      var popLines = 6;
      var popDistance = 10;
      var strokeColor = '#fffffff8';

      // Переменные для размеров пузырьков
      var minBubbleSize = 4; // Минимальный размер пузырька
      var maxBubbleSize = isMobile() ? 28 : 46; // Максимальный размер пузырька
      var randomBubbleSize = true; // true для случайных размеров, false для фиксированного размера

      // Переменные для контроля прозрачности пузырьков (от 0 до 1)
      var bubbleOpacity = 1; // Максимальная прозрачность пузырьков
      var minimalOpacity = 1; // Минимальная прозрачность пузырьков
      var randomOpacity = false; // true для случайной прозрачности, false для фиксированной

      // Переменная для процента пузырьков, которые будут лопаться сами по себе
      var popPercentage = 98; // Процент пузырьков, которые будут лопаться (от 0 до 100)

      // Переменная для управления плавным исчезновением пузырьков
      var fadeOut = true; // true для включения эффекта плавного исчезновения, false для отключения

      // Функция для установки размеров canvas
      function setCanvasSize() {
        canvas.width = canvas.clientWidth;
        canvas.height = canvas.clientHeight;
      }

      // Устанавливаем размеры canvas при загрузке страницы
      setCanvasSize();

      // --------------
      // Цикл анимации
      // --------------

      function animate() {
        // Очистка Canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Рисуем пузырьки
        ctx.beginPath();
        for (var i = 0; i < bubbles.length; i++) {
          bubbles[i].position.x = Math.sin(bubbles[i].count / bubbles[i].distanceBetweenWaves) * 50 + bubbles[i].xOff;
          bubbles[i].position.y = bubbles[i].count;
          bubbles[i].render();
          if (bubbles[i].count < 0 - bubbles[i].radius) {
            bubbles[i].count = canvas.height + bubbles[i].yOff;
            bubbles[i].resetProperties();
          } else {
            bubbles[i].count -= bubbleSpeed;
          }

          // Логика автономного лопания пузырька
          if (!bubbles[i].popping && bubbles[i].shouldPop()) {
            bubbles[i].initiatePop();
          }
        }
        window.requestAnimationFrame(animate);
      }
      window.requestAnimationFrame(animate);

      // ------------------
      // Конструктор пузырька
      // ------------------

      var createBubble = function createBubble() {
        this.position = {
          x: 0,
          y: 0
        };
        this.radius = getBubbleRadius();
        this.xOff = Math.random() * canvas.width - this.radius;
        this.yOff = Math.random() * canvas.height;
        this.distanceBetweenWaves = 50 + Math.random() * 40;
        this.count = canvas.height + this.yOff;
        this.color = strokeColor;
        this.lines = [];
        this.popping = false;
        this.maxRotation = 140;
        this.rotation = Math.floor(Math.random() * (this.maxRotation * 2)) - this.maxRotation;
        this.rotationDirection = 'forward';
        this.opacity = getBubbleOpacity(); // Устанавливаем начальную прозрачность

        // Добавляем линии для анимации лопания
        for (var i = 0; i < popLines; i++) {
          var tempLine = new createLine();
          tempLine.bubble = this;
          tempLine.index = i;
          this.lines.push(tempLine);
        }

        // Флаг, указывающий, должен ли пузырек лопнуть
        this.willPop = Math.random() < popPercentage / 100;
        // Точка, в которой пузырек лопнет (случайная позиция по Y)
        this.popPoint = Math.random() * canvas.height;
        this.resetProperties = function () {
          this.radius = getBubbleRadius();
          this.xOff = Math.random() * canvas.width - this.radius;
          this.yOff = Math.random() * canvas.height;
          this.distanceBetweenWaves = 50 + Math.random() * 40;
          this.popping = false;
          this.willPop = Math.random() < popPercentage / 100;
          this.popPoint = Math.random() * canvas.height;
          this.opacity = getBubbleOpacity(); // Сбрасываем прозрачность

          // Сбрасываем состояния линий
          for (var i = 0; i < this.lines.length; i++) {
            this.lines[i].resetValues();
          }
        };

        // Проверяем, должен ли пузырек лопнуть в текущей позиции
        this.shouldPop = function () {
          return this.willPop && this.position.y <= this.popPoint;
        };

        // Инициализируем процесс лопания
        this.initiatePop = function () {
          this.popping = true;
          for (var a = 0; a < this.lines.length; a++) {
            this.lines[a].popping = true;
          }
        };

        // Рендеринг пузырька
        this.render = function () {
          if (this.rotationDirection === 'forward') {
            if (this.rotation < this.maxRotation) {
              this.rotation++;
            } else {
              this.rotationDirection = 'backward';
            }
          } else {
            if (this.rotation > -this.maxRotation) {
              this.rotation--;
            } else {
              this.rotationDirection = 'forward';
            }
          }
          ctx.save();
          ctx.translate(this.position.x, this.position.y);
          ctx.rotate(this.rotation * Math.PI / 180);

          // Обновляем прозрачность, если включен эффект fadeOut
          if (fadeOut && !this.popping) {
            var distanceRemaining = this.position.y + this.radius;
            var totalDistance = canvas.height + this.radius;
            var fadeOpacity = this.opacity * (distanceRemaining / totalDistance);
            ctx.globalAlpha = fadeOpacity < 0 ? 0 : fadeOpacity; // Обеспечиваем, что прозрачность не отрицательная
          } else {
            ctx.globalAlpha = this.opacity;
          }
          if (!this.popping) {
            // Рисуем внешний контур пузырька
            ctx.beginPath();
            ctx.strokeStyle = this.color;
            ctx.lineWidth = 1;
            ctx.arc(0, 0, this.radius, 0, Math.PI * 2, false);
            ctx.stroke();

            // Рисуем блик
            ctx.beginPath();
            var gradient = ctx.createRadialGradient(-this.radius / 3, -this.radius / 3, 0, -this.radius / 3, -this.radius / 3, this.radius);
            gradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');
            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
            ctx.fillStyle = gradient;
            ctx.arc(-this.radius / 3, -this.radius / 3, this.radius, 0, Math.PI * 2, false);
            ctx.fill();
          }
          ctx.restore();
          ctx.globalAlpha = 1; // Сбрасываем прозрачность для других элементов

          // Рисуем линии при лопании
          for (var a = 0; a < this.lines.length; a++) {
            if (this.lines[a].popping) {
              if (this.lines[a].lineLength < popDistance && !this.lines[a].inversePop) {
                this.lines[a].popDistance += 0.06;
              } else {
                if (this.lines[a].popDistance >= 0) {
                  this.lines[a].inversePop = true;
                  this.lines[a].popDistanceReturn += 1;
                  this.lines[a].popDistance -= 0.03;
                } else {
                  this.lines[a].resetValues();
                  this.resetProperties();
                  // Перезапускаем пузырек после лопания
                  this.count = canvas.height + this.yOff;
                }
              }
              this.lines[a].updateValues();
              this.lines[a].render();
            }
          }
        };
      };

      // Функция для определения радиуса пузырька
      function getBubbleRadius() {
        if (randomBubbleSize) {
          // Случайный размер между минимальным и максимальным
          return minBubbleSize + Math.random() * (maxBubbleSize - minBubbleSize);
        } else {
          // Фиксированный размер (среднее значение между минимальным и максимальным)
          return (minBubbleSize + maxBubbleSize) / 2;
        }
      }

      // Функция для определения прозрачности пузырька
      function getBubbleOpacity() {
        if (randomOpacity) {
          // Случайная прозрачность между минимальной и максимальной
          return minimalOpacity + Math.random() * (bubbleOpacity - minimalOpacity);
        } else {
          // Фиксированная прозрачность
          return bubbleOpacity;
        }
      }

      // ----------------
      // Создаем пузырьки
      // ----------------

      for (var i = 0; i < bubbleCount; i++) {
        var tempBubble = new createBubble();
        bubbles.push(tempBubble);
      }

      // ----------------
      // Конструктор линии
      // ----------------

      function createLine() {
        this.lineLength = 0;
        this.popDistance = 0;
        this.popDistanceReturn = 0;
        this.inversePop = false;
        this.popping = false;
        this.resetValues = function () {
          this.lineLength = 0;
          this.popDistance = 0;
          this.popDistanceReturn = 0;
          this.inversePop = false;
          this.popping = false;
          this.updateValues();
        };
        this.updateValues = function () {
          this.x = this.bubble.position.x + (this.bubble.radius + this.popDistanceReturn) * Math.cos(2 * Math.PI * this.index / this.bubble.lines.length);
          this.y = this.bubble.position.y + (this.bubble.radius + this.popDistanceReturn) * Math.sin(2 * Math.PI * this.index / this.bubble.lines.length);
          this.lineLength = this.bubble.radius * this.popDistance;
          this.endX = this.lineLength;
          this.endY = this.lineLength;
        };
        this.render = function () {
          this.updateValues();
          ctx.beginPath();
          ctx.strokeStyle = this.bubble.color;
          ctx.lineWidth = 2;
          ctx.moveTo(this.x, this.y);
          if (this.x < this.bubble.position.x) {
            this.endX = this.lineLength * -1;
          }
          if (this.y < this.bubble.position.y) {
            this.endY = this.lineLength * -1;
          }
          if (this.y === this.bubble.position.y) {
            this.endY = 0;
          }
          if (this.x === this.bubble.position.x) {
            this.endX = 0;
          }
          ctx.lineTo(this.x + this.endX, this.y + this.endY);
          ctx.stroke();
        };
      }

      // ---------------
      // Обработчики событий
      // ---------------

      // Функция для обновления размеров canvas при изменении размера окна
      window.addEventListener('resize', function () {
        setCanvasSize();
      });
    }
  }]);
}();
module.exports = CareModal;

},{}],29:[function(require,module,exports){
"use strict";

var cartModal = new Object({
  init: function init() {
    this.renderDOM();
    this.bindToggle();
  },
  renderDOM: function renderDOM() {
    this._ = $(".cart-modal");
    this.backdrop = this._.find(".cart-modal__backdrop");
    this.container = this._.find(".cart-modal__container");
    this.evtToggle = getEvtDOM("toggleCart");
  },
  bindToggle: function bindToggle() {
    $(document).on('click', '[data-evt="toggleCart"]', function () {
      var el = $(".cart-modal");
      if (el.length) {
        var container = $(".cart-modal__container"),
          backdrop = $(".cart-modal__backdrop");
        if (elemDisplayed(el)) {
          unlockScroll();
          Object.assign(backdrop[0].style, {
            opacity: 0
          });
          Object.assign(container[0].style, {
            transform: "translateX(100%)"
          });
          setTimeout(function () {
            el.hide();
          }, getTransitionTime(container));
        } else {
          lockScroll();
          el.show();
          setTimeout(function () {
            Object.assign(backdrop[0].style, {
              opacity: 1
            });
            Object.assign(container[0].style, {
              transform: "translateX(0%)"
            });
          }, 1);
        }
      }
    });
  },
  toggle: function toggle() {
    var el = cartModal._;
    if (el.length) {
      if (elemDisplayed(el)) {
        cartModal.close();
      } else {
        cartModal.open();
      }
    }
  },
  open: function open() {
    var _this$_,
      _this = this;
    lockScroll();
    (_this$_ = this._) === null || _this$_ === void 0 || _this$_.show();
    setTimeout(function () {
      Object.assign(_this.backdrop[0].style, {
        opacity: 1
      });
      Object.assign(_this.container[0].style, {
        transform: "translateX(0%)"
      });
    }, 1);
  },
  close: function close() {
    var _this2 = this;
    unlockScroll();
    Object.assign(this.backdrop[0].style, {
      opacity: 0
    });
    Object.assign(this.container[0].style, {
      transform: "translateX(100%)"
    });
    setTimeout(function () {
      _this2._.hide();
    }, getTransitionTime(cartModal.container));
  }
});
module.exports = cartModal;

},{}],30:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var currencyModal = new Object({
  init: function init() {
    this.renderDOM();
    this.bindEvents();
  },
  renderDOM: function renderDOM() {
    this._ = $(".cur-modal");
    this.backdrop = this._.find(".cur-modal__backdrop");
    this.container = this._.find(".cur-modal__container");
    this.evtToggle = getEvtDOM("toggleCurrency");
    this.input = this._.find("input");
  },
  bindEvents: function bindEvents() {
    if (currencyModal.evtToggle.length) {
      $.each(currencyModal.evtToggle, function (i) {
        currencyModal.evtToggle[i].onclick = function () {
          currencyModal.toggle();
        };
      });
    }
    if (currencyModal.input.length) {
      currencyModal.input.on("keyup", function () {
        currencyModal.intraSearch($(this));
      });
    }
  },
  toggle: function toggle() {
    this.input.val("").trigger("keyup");
    var modal = currencyModal._;
    if (modal.length) {
      if (elemDisplayed(modal)) {
        currencyModal.close();
      } else {
        currencyModal.open();
      }
    }
  },
  open: function open() {
    var _this = this;
    lockScroll();
    this._.show();
    setTimeout(function () {
      _this.backdrop.css({
        opacity: 1
      });
      _this.container.css({
        transform: "translateX(0%)"
      });
    }, 1);
  },
  close: function close() {
    var _this2 = this;
    unlockScroll();
    this.backdrop.css({
      opacity: 0
    });
    this.container.css({
      transform: "translateX(100%)"
    });
    setTimeout(function () {
      _this2._.hide();
    }, getTransitionTime(currencyModal.backdrop));
  },
  intraSearch: function intraSearch(input) {
    var val = input.val().toLowerCase(),
      arr = _toConsumableArray($(".cur-item"));
    $.each(arr, function (index) {
      var txt = $(arr[index]).find(".cur-item__name").text().toLowerCase();
      if (~txt.indexOf(val)) {
        $(arr[index]).show();
      } else {
        $(arr[index]).hide();
      }
    });
  }
});
module.exports = currencyModal;

},{}],31:[function(require,module,exports){
"use strict";

var mailModal = new Object({
  object_to_render: null,
  init: function init() {
    this.renderDOM();
    if (this.modal.length) {
      this.bindEvents();
    }
  },
  renderDOM: function renderDOM() {
    this.modal = $('.mail-modal');
    this.backdrop = $('.mail-modal__backdrop');
    this.container = $('.mail-modal__container');
    this.evtClose = $('[data-mail-modal="close"]');
  },
  bindEvents: function bindEvents() {
    this.evtClose.on('click', function () {
      mailModal.close();
    });
  },
  open: function open(object) {
    var _this = this;
    lockScroll();
    this.modal.show();
    this.modal.find('input').focus();
    setTimeout(function () {
      _this.modal.addClass(__ACTIVE);
    }, 5);
    if (object) {
      this.object_to_render = object;
    }
  },
  close: function close() {
    var _this2 = this;
    unlockScroll();
    this.modal.removeClass(__ACTIVE);
    setTimeout(function () {
      _this2.modal.hide();
    }, getTransitionTime(this.container));
    if (this.object_to_render) {
      window.addCartModal.create(this.object_to_render);
    }
  }
});
module.exports = mailModal;

},{}],32:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Menu = /*#__PURE__*/function () {
  function Menu() {
    var rootSelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.menu';
    _classCallCheck(this, Menu);
    this._state = false;
    this.overState = false;
    this.rootEl = document.querySelector(rootSelector);
    if (!this.rootEl) {
      return;
    }
    this.contentList = this.rootEl.querySelector('.menu__content-list');
    this.overList = this.rootEl.querySelector('.menu__over-list');
    this.subListArr = _toConsumableArray(this.rootEl.querySelectorAll('[data-menu-list]'));
    this.activeListName = this.rootEl.querySelector('#activeListName');
    this.init();
  }
  return _createClass(Menu, [{
    key: "state",
    get: function get() {
      return this._state;
    },
    set: function set(value) {
      this._state = value;
      if (this._state) {
        this.open(true);
      } else {
        this.close(true);
      }
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;
      var fromSetter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (!fromSetter) {
        this._state = true;
      }
      this.rootEl.style.display = 'block';
      setTimeout(function () {
        lockScroll();
        _this.rootEl.classList.add(__ACTIVE);
        window.menuBackdrop = new Backdrop({
          half: true,
          callback: function callback() {
            _this.close();
          }
        });
      }, 5);
    }
  }, {
    key: "close",
    value: function close() {
      var _this2 = this;
      var fromSetter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (!fromSetter) {
        this._state = false;
      }
      if (window.menuBackdrop) {
        window.menuBackdrop.hide(true);
      }
      unlockScroll();
      this.rootEl.classList.remove(__ACTIVE);
      if (this.overState) {
        this.closeOverList();
      }
      setTimeout(function () {
        _this2.contentList.scrollTop = 0;
        _this2.rootEl.style.display = 'none';
      }, getTransitionTime(this.rootEl));
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.state = !this.state;
    }
  }, {
    key: "openOverList",
    value: function openOverList() {
      var _this3 = this;
      if (!this.overState) {
        this.overState = true;
        this.overList.style.display = 'block';
        this.overList.scrollTop = 0;
        this.rootEl.classList.add('--over-active');
        setTimeout(function () {
          _this3.contentList.classList.add(__HIDDEN);
          _this3.overList.classList.add(__VISIBLE);
        }, 5);
      }
    }
  }, {
    key: "closeOverList",
    value: function closeOverList() {
      var _this4 = this;
      if (this.overState) {
        this.overState = false;
        this.contentList.classList.remove(__HIDDEN);
        this.overList.classList.remove(__VISIBLE);
        this.rootEl.classList.remove('--over-active');
        this.contentList.scrollTop = 0;
        setTimeout(function () {
          _this4.overList.style.display = 'none';
        }, getTransitionTime(this.overList));
        if (this.activeListName) {
          this.activeListName.innerHTML = this.activeListName.dataset.title || 'Explore Icebox';
        }
      }
    }
  }, {
    key: "goToNavList",
    value: function goToNavList(name) {
      var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      if (name) {
        var list = this.subListArr.find(function (el) {
          return el.dataset.menuList === name;
        });
        if (!list) throw new Error('data-menu-list not found');
        this.subListArr.forEach(function (el) {
          if (el !== list) {
            el.style.display = 'none';
          } else {
            el.style.display = 'block';
          }
        });
        if (this.activeListName && item) {
          this.activeListName.innerHTML = item.querySelectorAll('span')[0].innerHTML;
        }
        this.openOverList();
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.state = false;
      this.overState = false;
      this.contentList.scrolTop = 0;
      this.overList.scrollTop = 0;
    }

    // Events
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this5 = this;
      var evtNavArr = _toConsumableArray(document.querySelectorAll('[data-menu-nav]'));
      evtNavArr.forEach(function (item) {
        item.onclick = function () {
          if (_this5.state && !_this5.overState) {
            var listName = item.dataset.menuNav;
            _this5.goToNavList(listName, item);
          }
        };
      });
      var evtToggleMenuArr = _toConsumableArray(document.querySelectorAll('[data-evt="toggleMenu"]'));
      evtToggleMenuArr.forEach(function (el) {
        el.addEventListener('click', function () {
          _this5.open();
        });
      });
    }
  }, {
    key: "init",
    value: function init() {
      this.reset();
      this.bindEvents();
    }
  }]);
}();
module.exports = Menu;

},{}],33:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var NoticeModal = /*#__PURE__*/function () {
  function NoticeModal() {
    _classCallCheck(this, NoticeModal);
    this.init();
    this.elem = null;
    this.text = null;
    this.show = this.show.bind(this);
    this.hide = this.hide.bind(this);
    this._bindPullDown = this._bindPullDown.bind(this);
    this._unbindPullDown = this._unbindPullDown.bind(this);
  }
  return _createClass(NoticeModal, [{
    key: "init",
    value: function init() {
      this._bindDocumentClick();
    }

    // Events
  }, {
    key: "_bindDocumentClick",
    value: function _bindDocumentClick() {
      var _this = this;
      document.addEventListener('click', function (e) {
        if (window.innerWidth > 991) return;
        var elem = e.target.closest('[data-notice]');
        if (!elem) return;
        var text = elem.getAttribute('data-notice');
        if (!text) return;
        _this.create(text);
        _this.show();
      });
    }

    // Bind Pull-Down Gesture
  }, {
    key: "_bindPullDown",
    value: function _bindPullDown() {
      var _this2 = this;
      if (!this.elem) return;
      var startY = 0;
      var currentY = 0;
      var isDragging = false;
      var isMoving = false;
      var modal = this.elem;
      var transition = window.getComputedStyle(modal).transition;

      // Touch Start
      var onTouchStart = function onTouchStart(e) {
        var touch = e.touches[0];
        startY = touch.clientY;
        isDragging = true;
        isMoving = false;
        modal.style.transition = 'none';
      };

      // Touch Move
      var onTouchMove = function onTouchMove(e) {
        if (!isDragging) return;
        currentY = e.touches[0].clientY;
        var diffY = currentY - startY;
        if (diffY > 0) {
          isMoving = true;
          e.preventDefault();
          modal.style.transform = "translateY(".concat(diffY, "px)");
        }
      };

      // Touch End
      var onTouchEnd = function onTouchEnd() {
        if (!isDragging) return;
        isDragging = false;
        if (isMoving) {
          var diffY = currentY - startY;
          var hideOffset = modal.offsetHeight * 0.2;
          modal.style.transition = 'transform 0.3s ease';
          if (diffY > hideOffset) {
            modal.style.transform = "translateY(100%)";
            _this2.hide();
          } else {
            modal.style.transform = "translateY(0%)";
            modal.removeAttribute('style');
          }
        }
      };
      this._pullDownHandlers = {
        onTouchStart: onTouchStart,
        onTouchMove: onTouchMove,
        onTouchEnd: onTouchEnd
      };
      modal.addEventListener('touchstart', onTouchStart, {
        passive: false
      });
      modal.addEventListener('touchmove', onTouchMove, {
        passive: false
      });
      modal.addEventListener('touchend', onTouchEnd);
    }

    // Unbind Pull-Down Gesture
  }, {
    key: "_unbindPullDown",
    value: function _unbindPullDown() {
      if (!this.elem || !this._pullDownHandlers) return;
      var _this$_pullDownHandle = this._pullDownHandlers,
        onTouchStart = _this$_pullDownHandle.onTouchStart,
        onTouchMove = _this$_pullDownHandle.onTouchMove,
        onTouchEnd = _this$_pullDownHandle.onTouchEnd;
      this.elem.removeEventListener('touchstart', onTouchStart);
      this.elem.removeEventListener('touchmove', onTouchMove);
      this.elem.removeEventListener('touchend', onTouchEnd);
      this._pullDownHandlers = null;
    }

    // Show & Hide
  }, {
    key: "show",
    value: function show() {
      var _this3 = this;
      if (this.elem) {
        lockScroll();
        this.elem.style.display = 'flex';
        requestAnimationFrame(function () {
          _this3.elem.classList.add(__VISIBLE);
          _this3._bindPullDown();
          window.noticeBackdrop = new window.Backdrop({
            half: true,
            callback: _this3.hide
          });
        });
      }
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this4 = this;
      if (this.elem) {
        unlockScroll();
        this.elem.classList.remove(__VISIBLE);
        var backdrop = window.noticeBackdrop;
        if (backdrop) {
          backdrop.hide(true);
        }
        setTimeout(function () {
          if (_this4.elem) {
            _this4.elem.style.display = 'none';
            _this4.destroy();
          }
          _this4._unbindPullDown();
        }, getTransitionTime(this.elem));
      }
    }

    // Create & Destroy
  }, {
    key: "create",
    value: function create() {
      var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Something went wrong...";
      var modal = document.createElement('div');
      modal.className = 'notice-modal';
      modal.innerHTML = "<div class=\"notice-modal__typo\">".concat(text, "</div>");
      this.elem = modal;
      this.text = text;
      document.body.append(modal);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.elem) {
        this.elem.remove();
        this.elem = null;
        this.text = null;
      }
    }
  }]);
}();
module.exports = NoticeModal;

},{}],34:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var quizModal = {
  currentStep: undefined,
  isFinished: undefined,
  pollLength: undefined,
  maxStep: undefined,
  isInitialized: undefined,
  init: function init() {
    this.renderDOM();
    this.setInitial();
    this.bindEvents();
  },
  renderDOM: function renderDOM() {
    this.modal = $('.quiz-modal');
    this.container = this.modal.find('.quiz-container');
    this.backdrop = this.modal.find('.quiz-modal__backdrop');
    this.heightContainer = this.modal.find('.quiz-container-height');
    this.poll = this.modal.find('.quiz-poll');
    this.pollArr = _toConsumableArray(this.poll);
    this.answers = this.modal.find('.quiz-answer');
    this.fullStepText = this.modal.find('.quiz-step-text');
    this.currentStepText = this.modal.find('.quiz-current-step');
    this.maxStepText = this.modal.find('.quiz-max-step');
    this.bar = this.modal.find('.quiz-bar');
    this.evtGoNext = $('[data-evt="quizGoNext"]');
    this.evtOpen = $('[data-evt="openQuizModal"]');
    this.closeBtn = $('[data-evt="closeQuizModal"]');
  },
  bindEvents: function bindEvents() {
    this.evtGoNext.click(function () {
      quizModal.goNextStep();
    });
    this.closeBtn.click(function () {
      quizModal.close();
    });
    this.evtOpen.click(function () {
      quizModal.open();
    });
  },
  setInitial: function setInitial() {
    this.currentStep = 1, this.isFinished = false, this.pollLength = this.pollArr.length, this.maxStep = this.pollLength;
    if (this.pollLength !== 0 && this.pollLength !== undefined && this.isInitialized !== true) {
      this.isInitialized = true;
      quizModal.currentStepText.html(quizModal.currentStep);
      quizModal.maxStepText.html(quizModal.maxStep);
      this.modal.find('input[type="radio"]').prop('checked', false);
      this.evtGoNext.html('Next');
      // Object.assign(this.heightContainer[0].style, { height: `${this.getObjectScrollHeight(this.pollArr[0])}` })
      Object.assign(this.bar[0].style, {
        width: "".concat(100 / this.pollLength, "%")
      });
    } else {
      return false;
    }
  },
  // utils
  getObjectScrollHeight: function getObjectScrollHeight(obj) {
    if (obj instanceof jQuery) {
      return "".concat(obj[0].scrollHeight, "px");
    } else {
      return "".concat(obj.scrollHeight, "px");
    }
  },
  noEmptyAnswers: function noEmptyAnswers() {
    var parent = $(quizModal.pollArr[quizModal.currentStep - 1]),
      checkedRadio = parent.find('input[type="radio"]:checked'),
      answers = parent.find(quizModal.answers);
    if (checkedRadio.length == 0) {
      answers.css({
        opacity: '0.3'
      });
      setTimeout(function () {
        answers.css({
          opacity: 1
        });
      }, 375);
    } else {
      return true;
    }
  },
  goNextStep: function goNextStep() {
    if (quizModal.currentStep !== quizModal.maxStep) {
      if (quizModal.noEmptyAnswers()) {
        Object.assign(quizModal.pollArr[quizModal.currentStep - 1].style, {
          opacity: 0
        });
        Object.assign(quizModal.bar[0].style, {
          width: "".concat(100 / quizModal.pollLength * (quizModal.currentStep + 1), "%")
        });
        $.each(quizModal.pollArr, function (i) {
          Object.assign(quizModal.pollArr[i].style, {
            transform: "translateX(-".concat(quizModal.currentStep * 100, "%)")
          });
        });
        Object.assign(quizModal.heightContainer[0].style, {
          height: "".concat(quizModal.pollArr[quizModal.currentStep].scrollHeight, "px")
        });
        ++quizModal.currentStep;
        quizModal.currentStepText.html(quizModal.currentStep);
        if (quizModal.currentStep == quizModal.maxStep) {
          quizModal.evtGoNext.html('Show Results');
        }
      }
    } else {
      if (quizModal.noEmptyAnswers()) {
        Object.assign(quizModal.heightContainer[0].style, {
          height: '0px'
        });
        Object.assign(quizModal.bar[0].style, {
          width: '5%'
        });
        $.each(quizModal.pollArr, function (i) {
          Object.assign(quizModal.pollArr[i].style, {
            transform: "translateX(-".concat(quizModal.currentStep * 100, "%)")
          });
        });
        Object.assign(quizModal.pollArr[quizModal.currentStep - 1].style, {
          opacity: 0
        });
        quizModal.evtGoNext.prop('disabled', true);
        quizModal.fullStepText.text('FINDING WATCHES');
        $('.quiz-close-btn').remove();
        quizModal.isFinished = true;
        setTimeout(function () {
          quizModal.bar.animate({
            width: '100%'
          }, 3000, function () {
            quizModal.close();
          });
        }, 600);
      }
    }
  },
  open: function open() {
    lockScroll();
    quizModal.modal.show();
    Object.assign(this.heightContainer[0].style, {
      height: "".concat(this.getObjectScrollHeight(this.pollArr[quizModal.currentStep - 1]))
    });
    setTimeout(function () {
      Object.assign(quizModal.backdrop[0].style, {
        opacity: 1
      });
      Object.assign(quizModal.container[0].style, {
        transform: 'translateY(0px)',
        opacity: 1
      });
    }, 1);
  },
  close: function close() {
    unlockScroll();
    var timeToHide = parseFloat(window.getComputedStyle(quizModal.backdrop[0]).transitionDuration) * 1000;
    Object.assign(quizModal.backdrop[0].style, {
      opacity: 0
    });
    Object.assign(quizModal.container[0].style, {
      transform: 'translateY(32px)',
      opacity: 0
    });
    setTimeout(function () {
      quizModal.modal.hide();
    }, timeToHide);
  }
};
module.exports = quizModal;

},{}],35:[function(require,module,exports){
"use strict";

var salesModal = {
  init: function init() {
    this.renderDOM();
    if (this.modal.length) {
      this.bindEvents();
    }
  },
  renderDOM: function renderDOM() {
    this.modal = $('.sale-history-modal');
    this.container = $('.sale-history__container');
    this.evtClose = $('[data-evt="closeSalesModal"]');
  },
  bindEvents: function bindEvents() {
    this.evtClose.click(function () {
      salesModal.close();
    });
  },
  open: function open() {
    var _this = this;
    window.addEventListener('keydown', function (evt) {
      if (evt.key === 'Escape') {
        evt.preventDefault();
        salesModal.close();
      }
    }, {
      once: true
    });
    lockScroll();
    this.modal.show();
    setTimeout(function () {
      _this.modal.css({
        'background-color': "rgba(13, 16, 26, .7)"
      });
      _this.container.css({
        'transform': 'translateX(0%)'
      });
    }, 1);
  },
  close: function close() {
    var _this2 = this;
    unlockScroll();
    this.modal.css({
      'background-color': "rgba(13, 16, 26, 0)"
    });
    this.container.css({
      'transform': 'translateX(100%)'
    });
    setTimeout(function () {
      _this2.modal.hide();
    }, getTransitionTime(this.modal));
  }
};
module.exports = salesModal;

},{}],36:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var account = new Object({
  init: function init() {
    Object.values(this.attachEvents).forEach(function (fn) {
      if (fn !== undefined && typeof fn == 'function') fn();
    });
  },
  attachEvents: {
    editAddress: function editAddress() {
      var evtEditAddress = Array.from($('[data-edit="address"]'));
      for (var i = 0; i < evtEditAddress.length; i++) {
        var el = evtEditAddress[i];
        $(el).click(function () {
          var details = $(this).closest('.profile-card').find('.profile-card__details'),
            form = details.filter('.form');
          if (elemDisplayed(form)) {
            details.hide().not(form).show();
          } else {
            details.show().not(form).hide();
          }
        });
      }
    },
    toggleInvoiceHeight: function toggleInvoiceHeight() {
      var invoiceArr = _toConsumableArray(document.querySelectorAll('.order__invoice'));
      var _iterator = _createForOfIteratorHelper(invoiceArr),
        _step;
      try {
        var _loop = function _loop() {
          var invoice = _step.value;
          var header = invoice.querySelector('.order__invoice-header');
          var body = invoice.querySelector('.order__invoice-body');
          header.onclick = function () {
            var toClose = invoice.classList.contains(__ACTIVE);
            if (toClose) {
              invoice.classList.remove(__ACTIVE);
              body.style.height = "80px";
            } else {
              invoice.classList.add(__ACTIVE);
              var scrollHeight = body.scrollHeight;
              body.style.height = "".concat(scrollHeight, "px");
            }
          };
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }
});
module.exports = account;

},{}],37:[function(require,module,exports){
"use strict";

var blogPage = {
  init: function init() {
    Object.values(this.initFn).forEach(function (fn) {
      if (typeof fn === 'function') {
        try {
          fn();
        } catch (_unused) {
          console.log('blog JS ERR');
        }
      }
    });
  },
  initFn: {
    attachCommentSubmit: function attachCommentSubmit() {
      var commentArea = document.querySelector('[data-article="commentArea"]');
      var commentSubmit = document.querySelector('[data-article="commentSubmit"]');
      var holder = document.querySelector('.article__comments-wrap');
      if (commentArea !== null && commentSubmit !== null) {
        var submit = function submit() {
          var val = commentArea.value;
          if (val.length !== 0) {
            var user = 'Guets',
              date = new Date().toLocaleDateString('en-us', {
                year: "numeric",
                month: "short",
                day: "numeric"
              }),
              html = "\n              <div class=\"article-comment\"><span>".concat(user, "</span><span>").concat(val, "</span><span>").concat(date, "</span></div>\n              ");
            holder.insertAdjacentHTML("beforeend", html);
            commentArea.value = '';
          }
        };
        commentSubmit.onclick = function () {
          submit();
        };
        commentArea.onkeydown = function (e) {
          var isEnter = e.key === 'Enter' || e.keyCode === 13;
          if (isEnter) {
            e.preventDefault();
            submit();
          }
        };
      }
    },
    createProgressBar: function createProgressBar() {
      var readContent = document.querySelector('.article__read-content');
      if (!readContent) return;
      var y = 0;
      var fullHeight = readContent.getBoundingClientRect().bottom + 120 - window.innerHeight * 0.7;
      var calculatePercentage = function calculatePercentage(number, total) {
        return number / total * 100;
      };
      var setElementWidthPercent = function setElementWidthPercent(el, percent) {
        el.style.width = "".concat(percent, "%");
      };
      var bar = document.createElement('div'),
        progress = document.createElement('div');
      bar.className = 'blog-progress';
      bar.appendChild(progress);
      document.body.appendChild(bar);
      window.onscroll = function () {
        y = window.scrollY;
        var f = calculatePercentage(y, fullHeight);
        setElementWidthPercent(progress, f);
      };
    },
    setReadingTime: function setReadingTime() {
      var readContent = document.querySelector('.article__read-content'),
        timeEl = document.querySelector('.read-time');
      if (!readContent || !timeEl) return;
      var wordsPerMinute = 200,
        textContent = readContent.textContent,
        wordCount = textContent.split(/\s/g).length,
        readingTime = Math.ceil(wordCount / wordsPerMinute);
      timeEl.textContent = "".concat(readingTime, " min reading");
    },
    attachScroll: function attachScroll() {
      return;
      var img = document.querySelector('.article-top-cover img');
      if (img !== null) {
        var max = img.offsetHeight + 100;
        window.onscroll = function () {
          var y = window.scrollY;
          if (max > y) {
            var f = 1 - y * 100 / max * 0.01;
            img.style.marginTop = "-".concat(y * 0.08, "px");
            img.style.opacity = f;
          }
        };
      }
    }
  }
};
module.exports = blogPage;

},{}],38:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var formPage = new Object({
  uploadedImages: [],
  init: function init() {
    if (document.querySelector('.main_formpage')) {
      this.bindEvents();
      // this.imgUpload()
      this.attachImagesUploader();
      this.attachWatchesUpload();
    }
  },
  bindEvents: function bindEvents() {
    $('.formpage__upload-btn').click(function () {
      if ($('#image_upload').length) {
        $('#image_upload').trigger('click');
      }
    });
    // $('#formpage_form').on('submit', function (e) {
    //   e.preventDefault();
    //   formPage.submitAjax();
    // });
  },
  submitAjax: function submitAjax() {},
  attachImagesUploader: function attachImagesUploader() {
    var uploadLabel = document.querySelector('#formpage_img-uploader'),
      uploadInput = document.querySelector('#image_upload'),
      imagesWrap = $('.formpage__images-thumbnails');

    // Setting drag&drop event
    if (uploadLabel !== null) {
      uploadLabel.ondragover = function (evt) {
        evt.preventDefault();
        uploadLabel.classList.add(IS_ACTIVE);
      };
      uploadLabel.ondragleave = function (evt) {
        evt.preventDefault();
        uploadLabel.classList.remove(IS_ACTIVE);
      };
      uploadLabel.ondrop = function (evt) {
        evt.preventDefault();
        uploadLabel.classList.remove(IS_ACTIVE);
        $('#image_upload').prop('files', evt.dataTransfer.files);
        var files = [],
          items = _toConsumableArray(evt.dataTransfer.items);
        items.forEach(function (item, i) {
          if (item.kind === 'file') {
            files.push(item.getAsFile());
          }
        });
        if (files.length) {
          $('.formpage__images-thumbnails').empty();
        }
        processFiles([].concat(files));
      };
    }

    // Setting manual files upload
    if (uploadInput !== null) {
      uploadInput.onchange = function (evt) {
        var files = _toConsumableArray(evt.target.files);
        $('.formpage__images-thumbnails').empty();
        processFiles(files);
      };
    }
    function processFiles(files) {
      if (files.length) {
        files.forEach(function (file, i) {
          if (!file.type.match('image.*')) {
            return;
          }
          var getIndex = function getIndex() {
            return $('.formpage__upload').length + 1;
          };
          var reader = new FileReader();
          reader.onload = function (e) {
            var html = "\n               <div class=\"formpage__upload\" data-img-id=\"".concat(getIndex(), "\">\n                 <div class=\"formpage__input-boxes\">\n                   <div>\n                     <input value=\"1\" name=\"visible_image_").concat(i, "\" id=\"image_").concat(i + 1, "\" type=\"checkbox\" checked>\n                     <label for=\"image_").concat(getIndex(), "\"></label>\n                   </div>\n                 </div>\n                   <div data-name=\"").concat(file.name, "\" style=\"background-image: url(").concat(e.target.result, ")\" class=\"formpage__upload-bg\">\n                 </div>\n               </div>\n             ");
            imagesWrap.append(html);
          };
          reader.readAsDataURL(file);
        });
      }
    }

    // Setting checkbox toggle on appended images
    $body.on('click', ".formpage__upload-bg", function () {
      lockScroll();
      var html = "\n      <div class=\"formpage-zoom\">\n        <div data-evt=\"closeFormpageZoom\"></div>\n        <div data-block=\"formpageZoom\"></div>\n      </div>\n      ";
      $body.append(html);
      $('[data-block="formpageZoom"]').attr('style', $(this).attr('style'));
    });
    $body.on('click', '[data-evt="closeFormpageZoom"]', function () {
      unlockScroll();
      $('.formpage-zoom').remove();
    });
  },
  attachWatchesUpload: function attachWatchesUpload() {
    var container = document.querySelector('#watches_upload_label'),
      input = document.querySelector('#watches_upload');
    container.addEventListener("dragover", function (e) {
      e.preventDefault();
    }, false);
    container.addEventListener("dragenter", function () {
      container.classList.add(__ACTIVE);
    });
    container.addEventListener("dragleave", function () {
      container.classList.remove(__ACTIVE);
    });
    container.addEventListener("drop", function (e) {
      e.preventDefault();
      container.classList.remove(__ACTIVE);
      input.files = e.dataTransfer.files;
    });
  }
});
module.exports = formPage;

},{}],39:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Homepage = /*#__PURE__*/function () {
  function Homepage() {
    _classCallCheck(this, Homepage);
    this.init();
  }

  // Splides
  return _createClass(Homepage, [{
    key: "initCategoriesSplide",
    value: function initCategoriesSplide() {
      var categoriesElem = document.querySelector('.home-categories-splide');
      if (categoriesElem) {
        var slider = new Splide(categoriesElem, {
          type: "loop",
          perPage: 7,
          perMove: 2,
          autoplay: 0,
          gap: "8px",
          arrows: 1,
          pagination: 0,
          speed: 750,
          breakpoints: {
            1680: {
              perPage: 6
            },
            1120: {
              perPage: 5
            },
            767: {
              perPage: 3,
              perMove: 2
            },
            600: {
              perPage: 2,
              gap: 6
            }
          }
        });
        slider.mount();
      }
    }
  }, {
    key: "initSplide",
    value: function initSplide() {
      var splideArr = _toConsumableArray(document.querySelectorAll('.home-splide'));
      if (splideArr.length) {
        splideArr.forEach(function (elem) {
          var slider = new Splide(elem, {
            type: "loop",
            perPage: 5,
            perMove: 1,
            autoplay: 0,
            gap: "8px",
            arrows: 1,
            pagination: 0,
            speed: 750,
            breakpoints: {
              1980: {
                perPage: 5
              },
              1680: {
                perPage: 4
              },
              991: {
                perPage: 4,
                perMove: 1
              },
              767: {
                grid: {
                  rows: 2,
                  cols: 3,
                  gap: {
                    row: "24px",
                    col: "8px"
                  }
                }
              },
              478: {
                grid: {
                  rows: 2,
                  cols: 2
                }
              }
            }
          });
          slider.mount(window.splide.Extensions);
        });
      }
    }
  }, {
    key: "init",
    value: function init() {
      this.initCategoriesSplide();
      this.initSplide();
    }
  }]);
}();
module.exports = Homepage;

},{}],40:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var JobApp = /*#__PURE__*/function () {
  function JobApp(holder) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, JobApp);
    this.holder = holder;
    this.filesHolder = this.holder.querySelector('#job_files_upload');
    this.sections = _toConsumableArray(this.holder.querySelectorAll('[data-loan-section]'));
    this.content = this.holder.querySelector('.loan-case__content');
    this.scroller = this.holder.querySelector('.loan-scroller');
    this.footer = this.holder.querySelector('.loan-case__footer');
    this.btnGroup = this.holder.querySelector('.loan-case__btn-group');
    this.evtGo = _toConsumableArray(this.holder.querySelectorAll('[data-loan-evt="go"]'));
    this.evtToggle = _toConsumableArray(this.holder.querySelectorAll('[data-loan-evt="toggle"]'));
    this.evtSubmit = _toConsumableArray(this.holder.querySelectorAll('[data-loan-evt="submit"]'));
    this.evtBack = _toConsumableArray(this.holder.querySelectorAll('[data-loan-evt="back"]'));
    this.bar = this.holder.querySelector('.loan-bar');
    this.bar_progress = this.holder.querySelector('.loan-bar__progress');
    this.flow = this.holder.querySelector('.loan-flow');
    this.finish = this.holder.querySelector('.loan-finish');
    this.maxSteps = undefined;
    this.currentStep = undefined;
    this.stepsLeft = undefined;
    this.endReached = undefined;
    this.atStart = undefined;
    this.sliding = false;
    this.data = {};
    this.settings = {
      scrollSpeed: settings.scrollSpeed || 600,
      easing: settings.easing || 'cubic-bezier(.39, .575, .565, 1)'
    };
    if (this.holder) {
      this.init();
    }
  }

  /**
   * Utils
   */
  return _createClass(JobApp, [{
    key: "getLeftSteps",
    get: function get() {
      return this.steps - this.currentStep;
    }
  }, {
    key: "getActiveSection",
    get: function get() {
      return this.sections[this.currentStep];
    }
  }, {
    key: "getActiveInput",
    get: function get() {
      var section = this.getActiveSection;
      if (section && section.contains(document.activeElement)) {
        if (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'SELECT') {
          return document.activeElement;
        }
      } else {
        return undefined;
      }
    }
  }, {
    key: "getLoaderHTML",
    get: function get() {
      return "\n                            <div>\n                                <div>\n                                    <svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"40px\" height=\"40px\" viewBox=\"0 0 40 40\" enable-background=\"new 0 0 40 40\" xml:space=\"preserve\">\n                                        <path opacity=\"0.2\" fill=\"#000\" d=\"M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946 s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634 c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z\"></path>\n                                        <path fill=\"#000\" d=\"M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0C22.32,8.481,24.301,9.057,26.013,10.047z\"></path>\n                                        <animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" from=\"0 20 20\" to=\"360 20 20\" dur=\"0.5s\" repeatCount=\"indefinite\"></animateTransform>\n                                    </svg>\n                                </div>\n                            </div>\n    ";
    }
  }, {
    key: "createElem",
    value: function createElem(tagName, options) {
      var className = options.className,
        id = options.id,
        innerHTML = options.innerHTML,
        style = options.style,
        attributes = options.attributes,
        toAppend = options.toAppend;
      var elem = document.createElement(tagName);
      if (className) elem.className = className;
      if (id) elem.id = id;
      if (innerHTML) elem.innerHTML = innerHTML;
      if (style) {
        for (var key in options.style) {
          elem.style[key] = options.style[key];
        }
      }
      if (attributes) {
        for (var _key in options.attributes) {
          elem.setAttribute(_key, options.attributes[_key]);
        }
      }
      if (toAppend) {
        var _iterator = _createForOfIteratorHelper(toArray(toAppend)),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            elem.appendChild(child);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return elem;
    }
  }, {
    key: "toArray",
    value: function toArray(target) {
      return Array.isArray(target) ? target : [target];
    }
  }, {
    key: "loadingOn",
    value: function loadingOn(timeToRemove) {
      var _this = this;
      if (this.holder.querySelector('.loan-case-loader')) return;
      var loader = createElem('div', {
        className: 'loan-case-loader',
        innerHTML: this.getLoaderHTML
      });
      this.holder.appendChild(loader);
      setTimeout(function () {
        _this.holder.classList.add(__LOCKED);
        if (timeToRemove) {
          setTimeout(function () {
            _this.holder.classList.remove(__LOCKED);
            setTimeout(function () {
              loader.remove();
            }, 350);
          }, timeToRemove);
        }
      }, 1);
    }
  }, {
    key: "loadingOff",
    value: function loadingOff() {
      this.holder.classList.remove(__LOCKED);
      var loader = this.holder.querySelector('.loan-case-loader');
      if (loader) {
        setTimeout(function () {
          loader.remove();
        }, 350);
      }
    }
  }, {
    key: "showInputError",
    value: function showInputError(input, text) {
      var err = document.querySelector('.loan-input-error') ? document.querySelector('.loan-input-error') : createElem('div', {
        className: 'loan-input-error',
        innerHTML: text
      });
      if (input) {
        input.classList.add(__INVALID);
      }
      this.footer.prepend(err);
    }
  }, {
    key: "clearErrors",
    value: function clearErrors() {
      var activeSection = this.getActiveSection;
      var inputs = [].concat(_toConsumableArray(activeSection.querySelectorAll('input')), _toConsumableArray(activeSection.querySelectorAll('select')));
      inputs.forEach(function (input) {
        return input.classList.remove(__INVALID);
      });
      var err = this.holder.querySelector('.loan-input-error');
      if (err) err.remove();
    }
  }, {
    key: "observeBar",
    value: function observeBar() {
      var prevSections = this.sections.slice(0, this.currentStep).length;
      var progress = (prevSections + 1) / this.steps * 100;
      this.bar_progress.style.width = "".concat(progress, "%");
    }
  }, {
    key: "clearAllFields",
    value: function clearAllFields() {
      var inputs = _toConsumableArray(this.holder.querySelectorAll('input:not([type="checkbox"])'));
      var selects = _toConsumableArray(this.holder.querySelectorAll('select'));
      var checkboxes = _toConsumableArray(this.holder.querySelectorAll('input[type="checkbox"]'));
      var fullArr = [].concat(_toConsumableArray(inputs), _toConsumableArray(selects), _toConsumableArray(checkboxes));
      inputs.forEach(function (input) {
        return input.value = '';
      });
      selects.forEach(function (select) {
        return select.selectedIndex = 0;
      });
      checkboxes.forEach(function (checkbox) {
        checkbox.checked = false;
      });
      fullArr.forEach(function (elem) {
        return elem.dispatchEvent(new Event('change'));
      });
    }

    /**
     * Main
     */
  }, {
    key: "save",
    value: function save() {
      $('#job_application_form').submit();
    }
  }, {
    key: "finishMessage",
    value: function finishMessage() {
      var _this2 = this;
      this.loadingOn(1000);
      setTimeout(function () {
        _this2.flow.style.opacity = 0;
        var currentHeight = _this2.holder.offsetHeight;
        _this2.holder.style.height = "".concat(currentHeight, "px");
        setTimeout(function () {
          _this2.finish.style.display = 'block';
          var scrollH = _this2.finish.scrollHeight;
          _this2.holder.style.height = "".concat(scrollH, "px");
          setTimeout(function () {
            _this2.finish.style.opacity = 1;
            window.scrollTo(0, 0);
            var confetti = new PageConfetti();
            confetti.push(false);
          }, 10);
        }, getTransitionTime(_this2.flow) + 10);
      }, 800);
    }
  }, {
    key: "slide",
    value: function slide(section) {
      var _this3 = this;
      section.style.display = 'flex';
      var height = section.scrollHeight;
      var pxToTransform = this.sections.slice(0, this.currentStep).reduce(function (acc, el) {
        return acc + el.scrollHeight;
      }, 0);
      this.content.style.height = "".concat(height, "px");
      this.scroller.style.transform = "translateY(-".concat(pxToTransform, "px)");
      this.sections.forEach(function (e) {
        return e.classList.remove(IS_ACTIVE);
      });
      section.classList.add(IS_ACTIVE);
      setTimeout(function () {
        _this3.sliding = false;
      }, getTransitionTime(this.scroller));
    }
  }, {
    key: "go",
    value: function go(toStep) {
      var _this4 = this;
      if (this.holder.classList.contains(__LOCKED)) return;
      var inputs = [].concat(_toConsumableArray(this.holder.querySelectorAll('input')), _toConsumableArray(this.holder.querySelectorAll('select')));
      var step = toStep || this.currentStep || 0;
      var nextStep = step + 1;
      var nextSection = this.sections[nextStep];
      if (!this.sections[nextStep + 1]) {
        this.evtGo.forEach(function (btn) {
          btn.innerHTML = 'Submit';
        });
      }
      if (nextSection) {
        this.sliding = true;
        inputs.forEach(function (input) {
          return input.blur();
        });
        this.loadingOn();
        setTimeout(function () {
          _this4.currentStep = nextStep;
          _this4.slide(nextSection);
          _this4.loadingOff();
          _this4.observeBar();
        }, 600);
      } else {
        this.save();
        this.finishMessage();
      }
    }
  }, {
    key: "back",
    value: function back(toStep) {
      if (this.holder.classList.contains(__LOCKED)) return;
      this.clearErrors();
      var step = toStep || this.currentStep || 0;
      var prevStep = step - 1;
      var prevSection = this.sections[prevStep];
      if (prevSection) {
        this.evtGo.forEach(function (btn) {
          btn.innerHTML = 'Next';
        });
        this.currentStep = prevStep;
        this.slide(prevSection);
      } else {
        this.toggle();
      }
    }
  }, {
    key: "validate",
    value: function validate(section) {
      var requiredTextInputs = [].concat(_toConsumableArray(section.querySelectorAll('input[type="text"][required]:not(.--disabled')), _toConsumableArray(section.querySelectorAll('input[type="email"][required]')));
      var emptyInputs = requiredTextInputs.filter(function (input) {
        return !input.value;
      });
      var numberInputs = section.querySelectorAll('input[data-validate="number"]');
      var selectInputs = section.querySelectorAll('select[required]');
      var emailInputs = section.querySelectorAll('input[data-validate="email"]');
      var zipInputs = section.querySelectorAll('input[data-validate="zip_code"]');
      var fileInputs = section.querySelectorAll('input[required][type="file"]');
      var sectionID = section.dataset.loanSection;
      if (requiredTextInputs.some(function (input) {
        return input.classList.contains(__INVALID);
      })) return false;
      if (selectInputs.length) {
        var _iterator2 = _createForOfIteratorHelper(selectInputs),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var select = _step2.value;
            if (!select.value) {
              this.showInputError(select, 'Please select an option');
              return false;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (numberInputs.length) {
        var value = numberInputs[0].value;
        var regex = /^\+\d{1}\s\(\d{3}\)\s\d{3}\-\d{4}$/;
        if (!regex.test(value)) {
          this.showInputError(numberInputs[0], 'Please enter a valid phone number');
          return false;
        }
      }
      if (emailInputs.length) {
        var _value = emailInputs[0].value;
        var _regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
        if (!_regex.test(_value)) {
          this.showInputError(emailInputs[0], 'Please enter a valid email');
          return false;
        }
      }
      if (zipInputs.length) {
        var _value2 = zipInputs[0].value;
        var _regex2 = /^\d{5}$/;
        if (!_regex2.test(_value2)) {
          this.showInputError(zipInputs[0], 'Please enter a valid zip code');
          return false;
        }
      }
      if (emptyInputs.length) {
        this.showInputError(emptyInputs[0], 'This field is required');
        return false;
      }
      if (fileInputs.length) {
        var _iterator3 = _createForOfIteratorHelper(fileInputs),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var input = _step3.value;
            if (!input.files[0]) {
              console.log(input.files);
              this.showInputError(null, 'Please upload a file');
              return false;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      this.clearErrors();
      return true;
    }
  }, {
    key: "adjustActiveSectionHeight",
    value: function adjustActiveSectionHeight() {
      var activeSection = this.getActiveSection;
      if (activeSection) {
        var height = activeSection.scrollHeight;
        this.content.style.height = "".concat(height, "px");
      }
    }
  }, {
    key: "toggle",
    value: function toggle() {
      var _this5 = this;
      var body = document.querySelector('body');
      var headerNav = document.querySelector('.header__sub-nav');
      var welcome = document.querySelector('.subpage__welcome');
      var footerMain = document.querySelector('.footer__wrapper > .wrapper');
      var loanWelcome = document.querySelector('.loan-welcome');
      var heading = document.querySelector('.loan-case__heading');
      var backGroup = document.querySelector('.loan-case__back-group');
      var CASE_CLASS = 'loan_case';
      var elements = [headerNav, welcome, footerMain, loanWelcome];
      var hideElement = function hideElement(el) {
        var curHeight = el.scrollHeight;
        el.style.height = "".concat(curHeight, "px");
        setTimeout(function () {
          el.style.overflow = 'hidden';
          el.style.height = '0px';
        }, 1);
      };
      var showElement = function showElement(el) {
        var curHeight = window.getComputedStyle(el).getPropertyValue('height');
        var scrollHeight = el.scrollHeight;
        el.style.height = "".concat(curHeight);
        setTimeout(function () {
          el.style.overflow = 'visible';
          el.style.height = "".concat(scrollHeight, "px");
        }, 1);
      };
      var hideLoan = function hideLoan() {
        body.classList.remove(CASE_CLASS);
        for (var _i = 0, _elements = elements; _i < _elements.length; _i++) {
          var element = _elements[_i];
          if (element) showElement(element);
        }
        _this5.scroller.style.display = 'none';
        _this5.content.style.height = "0px";
        if (backGroup) {
          backGroup.style.height = "0px";
        }
        if (heading) {
          heading.innerHTML = 'Welcome To the Icebox Max Approval Financing Form';
          heading.classList.remove('--big');
        }
        _this5.clearErrors();
        _this5.back(1);
        _this5.clearAllFields();
      };
      var showLoan = function showLoan() {
        body.classList.add('loan_case');
        for (var _i2 = 0, _elements2 = elements; _i2 < _elements2.length; _i2++) {
          var element = _elements2[_i2];
          if (element) hideElement(element);
        }
        _this5.scroller.style.display = 'flex';
        _this5.content.style.height = "".concat(_this5.sections[0].scrollHeight, "px");
        if (backGroup) {
          backGroup.style.height = "".concat(backGroup.scrollHeight, "px");
        }
        if (heading) {
          heading.innerHTML = 'Job Application';
          heading.classList.add('--big');
        }
      };
      if (body.classList.contains(CASE_CLASS)) {
        var askModal = new AskModal({
          heading: 'Are You Sure You Want To Exit Financing App?',
          subheading: 'You will lose all the progress. Keep filling out the form and get approved as soon as possible!',
          exitText: 'Exit',
          keepText: 'Keep Filling',
          exitCallback: hideLoan
        });
        askModal.show();
      } else {
        showLoan();
      }
    }
  }, {
    key: "tabPress",
    value: function tabPress() {
      if (!this.sliding) {
        var activeInput = this.getActiveInput;
        if (!activeInput) {
          var section = this.getActiveSection;
          var inputArray = _toConsumableArray(section.querySelectorAll('input:not(.--disabled), select:not(.--disabled)'));
          if (inputArray.length) {
            var inputToFocus;
            var invalidInputs = inputArray.filter(function (input) {
              return input.classList.contains('--invalid');
            });
            if (invalidInputs.length) {
              inputToFocus = invalidInputs[0];
            } else {
              var emptyInputs = inputArray.filter(function (input) {
                return !input.value && input.value !== 0;
              });
              if (emptyInputs.length) {
                inputToFocus = emptyInputs[0];
              } else {
                inputToFocus = inputArray[0];
              }
            }
            inputToFocus.focus();
          }
        } else {
          var activeInputWrap = activeInput.parentNode.closest('.loan-input-wrap');
          var nextInputWrap = activeInputWrap.nextElementSibling;
          if (nextInputWrap) {
            var nextInput = nextInputWrap.querySelector('input, select');
            if (nextInput) {
              nextInput.focus();
            }
          } else {
            var firstInputWrap = this.getActiveSection.querySelector('.loan-input-wrap');
            var firstInput = firstInputWrap.querySelector('input, select');
            if (firstInput) {
              firstInput.focus();
            }
          }
        }
      }
    }

    /**
     * Bind Events
     */
  }, {
    key: "bindStepEvt",
    value: function bindStepEvt() {
      var _this6 = this;
      this.evtGo.forEach(function (btn) {
        btn.addEventListener('click', function (e) {
          e.preventDefault();
          var section = _this6.getActiveSection;
          if (_this6.validate(section)) _this6.go();
        });
      });
      this.evtBack.forEach(function (btn) {
        btn.addEventListener('click', function () {
          _this6.back();
        });
      });
      this.evtSubmit.forEach(function (btn) {
        btn.addEventListener('click', function (e) {
          e.preventDefault();
          _this6.evtGo[0].click();
        });
      });
      this.evtToggle.forEach(function (btn) {
        btn.addEventListener('click', function (e) {
          _this6.toggle();
        });
      });
    }
  }, {
    key: "bindInputEvents",
    value: function bindInputEvents() {
      var _this7 = this;
      var inputs = _toConsumableArray(this.holder.querySelectorAll('input'));
      var selects = _toConsumableArray(this.holder.querySelectorAll('select'));
      var noWebsiteCheckbox = this.holder.querySelector('#loan_employer_website');
      var inputWebsiteEmployer = this.holder.querySelector('#loan_employer_website');
      document.addEventListener('keydown', function (e) {
        var isTab = e.key === 'Tab';
        if (isTab) {
          if (document.body.classList.contains('loan_case')) {
            e.preventDefault();
            _this7.tabPress();
          }
        }
      });
      inputs.forEach(function (input) {
        input.addEventListener('focus', function () {
          _this7.clearErrors();
          var parent = input.parentNode.closest('.loan-input-wrap');
          if (parent) {
            parent.classList.add('--focused');
          }
        });
        input.addEventListener('blur', function () {
          var parent = input.parentNode.closest('.loan-input-wrap');
          if (parent) {
            parent.classList.remove('--focused');
          }
        });
        input.addEventListener('keydown', function (e) {
          _this7.clearErrors();
          var isEnter = e.key === 'Enter';
          var isTab = e.key === 'Tab';
          if (isEnter) {
            _this7.evtGo[0].click();
          }
        });
      });
      selects.forEach(function (select) {
        select.addEventListener('change', function () {
          _this7.clearErrors();
        });
      });
    }
  }, {
    key: "bindSSNInput",
    value: function bindSSNInput() {
      var inputs = this.holder.querySelectorAll('input[data-format="ssn"]');
      var _iterator4 = _createForOfIteratorHelper(inputs),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var input = _step4.value;
          input.addEventListener('input', function (e) {
            var value = e.target.value;
            var newValue = '';
            for (var i = 0; i < value.length; i++) {
              var _char = value.charAt(i);
              if (_char.match(/^[0-9]$/) && newValue.length < 9) {
                newValue += _char;
              }
            }
            e.target.value = newValue;
          });
          input.addEventListener('blur', function (e) {
            var value = e.target.value;
            if (value) {
              var newValue = value.replace(/([^0-9])/g, '');
              newValue = newValue.slice(0, 3) + '—' + newValue.slice(3, 5) + '—' + newValue.slice(5);
              e.target.value = newValue;
            }
          });
          input.addEventListener('focus', function (e) {
            e.target.value = e.target.value.replace(/([^0-9])/g, '');
          });
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "bindNumberInput",
    value: function bindNumberInput() {
      var inputs = this.holder.querySelectorAll('input[data-validate="number"]');
      var _iterator5 = _createForOfIteratorHelper(inputs),
        _step5;
      try {
        var _loop = function _loop() {
          var input = _step5.value;
          var keyCode;
          function mask(event) {
            event.keyCode && (keyCode = event.keyCode);
            var pos = this.selectionStart;
            if (pos < 3) event.preventDefault();
            var matrix = "+1 (___) ___-____",
              i = 0,
              def = matrix.replace(/\D/g, ""),
              val = this.value.replace(/\D/g, ""),
              newValue = matrix.replace(/[_\d]/g, function (a) {
                return i < val.length ? val.charAt(i++) || def.charAt(i) : a;
              });
            i = newValue.indexOf("_");
            if (i != -1) {
              i < 5 && (i = 3);
              newValue = newValue.slice(0, i);
            }
            var reg = matrix.substr(0, this.value.length).replace(/_+/g, function (a) {
              return "\\d{1," + a.length + "}";
            }).replace(/[+()]/g, "\\$&");
            reg = new RegExp("^" + reg + "$");
            if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = newValue;
            if (event.type == "blur" && this.value.length < 5) this.value = "";
          }
          input.addEventListener("input", mask, false);
          input.addEventListener("focus", mask, false);
          input.addEventListener("blur", mask, false);
          input.addEventListener("keydown", mask, false);
          input.addEventListener('mouseup', function (event) {
            event.preventDefault();
            if (input.value.length < 4) {
              input.setSelectionRange(4, 4);
            } else {
              input.setSelectionRange(input.value.length, input.value.length);
            }
          });
        };
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "bindResumeUpload",
    value: function bindResumeUpload() {
      var _this8 = this;
      var input = document.querySelector('#job_resume');
      var box = document.querySelector('[data-loan="files_upload"]');
      var holder = this.filesHolder;
      // if (!input || !box || !holder) throw new Error('JS : Bind ID Upload : Input or Box or Holder not found')

      if (input && box && holder) {
        var processFiles = function processFiles(files) {
          var allowedExtensions = ['pdf', 'docx', 'doc'];
          var _iterator6 = _createForOfIteratorHelper(files),
            _step6;
          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var file = _step6.value;
              var name = file.name.toLowerCase();
              var extension = name.split('.').pop();
              if (allowedExtensions.includes(extension)) {
                console.log(file);
              }
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        };
        box.onclick = function () {
          _this8.clearErrors();
          input.click();
        };
        input.onchange = function (e) {
          processFiles(e.target.files);
        };
        box.ondragover = function (e) {
          _this8.clearErrors();
          e.preventDefault();
          box.classList.add(IS_ACTIVE);
        };
        box.ondragleave = function (e) {
          _this8.clearErrors();
          e.preventDefault();
          box.classList.remove(IS_ACTIVE);
        };
        box.ondrop = function (e) {
          _this8.clearErrors();
          e.preventDefault();
          box.classList.remove(IS_ACTIVE);
        };
      }
    }
  }, {
    key: "bindDualSelect",
    value: function bindDualSelect() {
      var dualArr = this.holder.querySelectorAll('[data-loan-evt="dual_select"]');
      var _iterator7 = _createForOfIteratorHelper(dualArr),
        _step7;
      try {
        var _loop2 = function _loop2() {
          var dual = _step7.value;
          var input = dual.querySelector('input:not([type="checkbox"])');
          var checkbox = dual.querySelector('input[type="checkbox"]');
          if (input && checkbox) {
            checkbox.onchange = function () {
              var isChecked = checkbox.checked;
              if (isChecked) {
                input.classList.add('--disabled');
                input.setAttribute('disabled', 'disabled');
                if (input.type !== 'range') {
                  input.value = '';
                }
              } else {
                input.removeAttribute('disabled');
                input.classList.remove('--disabled');
              }
            };
          }
        };
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      var rangeOutputArr = _toConsumableArray(this.holder.querySelectorAll('.custom-range__output'));
      var _iterator8 = _createForOfIteratorHelper(rangeOutputArr),
        _step8;
      try {
        var _loop3 = function _loop3() {
          var input = _step8.value;
          var parent = input.closest('[data-loan-evt="dual_select"]');
          if (parent) {
            var rangeInput = parent.querySelector('input[type="range"]');
            if (rangeInput) {
              var maxValue = rangeInput.max;
              var minValue = rangeInput.min;
              input.addEventListener('input', function (e) {
                e.target.value = e.target.value.replace(/[^0-9]/g, '');
              });
              input.addEventListener('blur', function (e) {
                e.target.value = Math.max(Math.min(e.target.value, maxValue), minValue);
                rangeInput.value = e.target.value;
                rangeInput.dispatchEvent(new Event('input'));
              });
            }
          }
        };
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          _loop3();
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  }, {
    key: "bindFormatting",
    value: function bindFormatting() {
      var currencyArr = document.querySelectorAll('[data-format="currency"]');
      var _iterator9 = _createForOfIteratorHelper(currencyArr),
        _step9;
      try {
        var _loop4 = function _loop4() {
          var input = _step9.value;
          input.addEventListener('blur', function () {
            var val = input.value;
            if (val.length) {
              input.value = formatAsCurrency(val);
            }
          });
        };
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          _loop4();
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }

    /**
     * Initial
     */
  }, {
    key: "setInitialVar",
    value: function setInitialVar() {
      this.steps = this.sections.length;
      if (!this.steps) throw new Error('No Loan Sections Found');
      this.currentStep = 0;
      this.stepsLeft = this.steps;
      this.endReached = false;
      this.atTheStart = true;
    }
  }, {
    key: "setInitialLayout",
    value: function setInitialLayout() {
      var firstSection = this.sections[0];
      var height = firstSection.scrollHeight;
      this.content.style.height = "".concat(height, "px");
      this.content.style.transition = "all ".concat(this.settings.scrollSpeed, "ms ").concat(this.settings.easing);
      this.scroller.style.transition = "all ".concat(this.settings.scrollSpeed, "ms ").concat(this.settings.easing);
      // this.sections.forEach(section => section.style.display = 'flex')
    }
  }, {
    key: "init",
    value: function init() {
      this.setInitialLayout();
      this.setInitialVar();
      this.bindStepEvt();
      this.bindInputEvents();
      this.bindNumberInput();
      this.bindSSNInput();
      this.bindResumeUpload();
      this.bindDualSelect();
      this.bindFormatting();
    }
  }]);
}();
module.exports = JobApp;

},{}],41:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var LoanApp = /*#__PURE__*/function () {
  function LoanApp(holder) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, LoanApp);
    this.holder = holder;
    this.filesHolder = this.holder.querySelector('#loan_files_upload');
    this.sections = _toConsumableArray(this.holder.querySelectorAll('[data-loan-section]'));
    this.content = this.holder.querySelector('.loan-case__content');
    this.scroller = this.holder.querySelector('.loan-scroller');
    this.footer = this.holder.querySelector('.loan-case__footer');
    this.btnGroup = this.holder.querySelector('.loan-case__btn-group');
    this.evtGo = _toConsumableArray(this.holder.querySelectorAll('[data-loan-evt="go"]'));
    this.evtToggle = _toConsumableArray(this.holder.querySelectorAll('[data-loan-evt="toggle"]'));
    this.evtSubmit = _toConsumableArray(this.holder.querySelectorAll('[data-loan-evt="submit"]'));
    this.evtBack = _toConsumableArray(this.holder.querySelectorAll('[data-loan-evt="back"]'));
    this.bar = this.holder.querySelector('.loan-bar');
    this.bar_progress = this.holder.querySelector('.loan-bar__progress');
    this.flow = this.holder.querySelector('.loan-flow');
    this.finish = this.holder.querySelector('.loan-finish');
    this.maxSteps = undefined;
    this.currentStep = undefined;
    this.stepsLeft = undefined;
    this.endReached = undefined;
    this.atStart = undefined;
    this.sliding = false;
    this.data = {};
    this.settings = {
      scrollSpeed: settings.scrollSpeed || 600,
      easing: settings.easing || 'cubic-bezier(.39, .575, .565, 1)'
    };
    if (this.holder) {
      this.init();
    }
  }

  /**
   * Utils
   */
  return _createClass(LoanApp, [{
    key: "getLeftSteps",
    get: function get() {
      return this.steps - this.currentStep;
    }
  }, {
    key: "getActiveSection",
    get: function get() {
      return this.sections[this.currentStep];
    }
  }, {
    key: "getActiveInput",
    get: function get() {
      var section = this.getActiveSection;
      if (section && section.contains(document.activeElement)) {
        if (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'SELECT') {
          return document.activeElement;
        }
      } else {
        return undefined;
      }
    }
  }, {
    key: "getLoaderHTML",
    get: function get() {
      return "\n                            <div>\n                                <div>\n                                    <svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"40px\" height=\"40px\" viewBox=\"0 0 40 40\" enable-background=\"new 0 0 40 40\" xml:space=\"preserve\">\n                                        <path opacity=\"0.2\" fill=\"#000\" d=\"M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946 s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634 c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z\"></path>\n                                        <path fill=\"#000\" d=\"M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0C22.32,8.481,24.301,9.057,26.013,10.047z\"></path>\n                                        <animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" from=\"0 20 20\" to=\"360 20 20\" dur=\"0.5s\" repeatCount=\"indefinite\"></animateTransform>\n                                    </svg>\n                                </div>\n                            </div>\n    ";
    }
  }, {
    key: "createElem",
    value: function createElem(tagName, options) {
      var className = options.className,
        id = options.id,
        innerHTML = options.innerHTML,
        style = options.style,
        attributes = options.attributes,
        toAppend = options.toAppend;
      var elem = document.createElement(tagName);
      if (className) elem.className = className;
      if (id) elem.id = id;
      if (innerHTML) elem.innerHTML = innerHTML;
      if (style) {
        for (var key in options.style) {
          elem.style[key] = options.style[key];
        }
      }
      if (attributes) {
        for (var _key in options.attributes) {
          elem.setAttribute(_key, options.attributes[_key]);
        }
      }
      if (toAppend) {
        var _iterator = _createForOfIteratorHelper(toArray(toAppend)),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            elem.appendChild(child);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return elem;
    }
  }, {
    key: "toArray",
    value: function toArray(target) {
      return Array.isArray(target) ? target : [target];
    }
  }, {
    key: "loadingOn",
    value: function loadingOn(timeToRemove) {
      var _this = this;
      if (this.holder.querySelector('.loan-case-loader')) return;
      var loader = createElem('div', {
        className: 'loan-case-loader',
        innerHTML: this.getLoaderHTML
      });
      this.holder.appendChild(loader);
      setTimeout(function () {
        _this.holder.classList.add(__LOCKED);
        if (timeToRemove) {
          setTimeout(function () {
            _this.holder.classList.remove(__LOCKED);
            setTimeout(function () {
              loader.remove();
            }, 350);
          }, timeToRemove);
        }
      }, 1);
    }
  }, {
    key: "loadingOff",
    value: function loadingOff() {
      this.holder.classList.remove(__LOCKED);
      var loader = this.holder.querySelector('.loan-case-loader');
      if (loader) {
        setTimeout(function () {
          loader.remove();
        }, 350);
      }
    }
  }, {
    key: "showInputError",
    value: function showInputError(input, text) {
      var err = document.querySelector('.loan-input-error') ? document.querySelector('.loan-input-error') : createElem('div', {
        className: 'loan-input-error',
        innerHTML: text
      });
      input.classList.add(__INVALID);
      this.footer.prepend(err);
    }
  }, {
    key: "clearErrors",
    value: function clearErrors() {
      var activeSection = this.getActiveSection;
      var inputs = [].concat(_toConsumableArray(activeSection.querySelectorAll('input')), _toConsumableArray(activeSection.querySelectorAll('select')));
      inputs.forEach(function (input) {
        return input.classList.remove(__INVALID);
      });
      var err = this.holder.querySelector('.loan-input-error');
      if (err) err.remove();
    }
  }, {
    key: "observeBar",
    value: function observeBar() {
      var prevSections = this.sections.slice(0, this.currentStep).length;
      var progress = (prevSections + 1) / this.steps * 100;
      this.bar_progress.style.width = "".concat(progress, "%");
    }
  }, {
    key: "clearAllFields",
    value: function clearAllFields() {
      var inputs = _toConsumableArray(this.holder.querySelectorAll('input:not([type="checkbox"])'));
      var selects = _toConsumableArray(this.holder.querySelectorAll('select'));
      var checkboxes = _toConsumableArray(this.holder.querySelectorAll('input[type="checkbox"]'));
      var fullArr = [].concat(_toConsumableArray(inputs), _toConsumableArray(selects), _toConsumableArray(checkboxes));
      inputs.forEach(function (input) {
        return input.value = '';
      });
      selects.forEach(function (select) {
        return select.selectedIndex = 0;
      });
      checkboxes.forEach(function (checkbox) {
        checkbox.checked = false;
      });
      fullArr.forEach(function (elem) {
        return elem.dispatchEvent(new Event('change'));
      });
    }

    /**
     * Main
     */
  }, {
    key: "save",
    value: function save() {
      $('#loan_form').submit();
    }
  }, {
    key: "finishMessage",
    value: function finishMessage() {
      var _this2 = this;
      this.loadingOn(1000);
      setTimeout(function () {
        _this2.flow.style.opacity = 0;
        var currentHeight = _this2.holder.offsetHeight;
        _this2.holder.style.height = "".concat(currentHeight, "px");
        setTimeout(function () {
          _this2.finish.style.display = 'block';
          var scrollH = _this2.finish.scrollHeight;
          _this2.holder.style.height = "".concat(scrollH, "px");
          setTimeout(function () {
            _this2.finish.style.opacity = 1;
            window.scrollTo(0, 0);
            var confetti = new PageConfetti();
            confetti.push(false);
          }, 10);
        }, getTransitionTime(_this2.flow) + 10);
      }, 800);
    }
  }, {
    key: "slide",
    value: function slide(section) {
      var _this3 = this;
      section.style.display = 'flex';
      var height = section.scrollHeight;
      var pxToTransform = this.sections.slice(0, this.currentStep).reduce(function (acc, el) {
        return acc + el.scrollHeight;
      }, 0);
      this.content.style.height = "".concat(height, "px");
      this.scroller.style.transform = "translateY(-".concat(pxToTransform, "px)");
      this.sections.forEach(function (e) {
        return e.classList.remove(IS_ACTIVE);
      });
      section.classList.add(IS_ACTIVE);
      setTimeout(function () {
        _this3.sliding = false;
      }, getTransitionTime(this.scroller));
    }
  }, {
    key: "go",
    value: function go(toStep) {
      var _this4 = this;
      if (this.holder.classList.contains(__LOCKED)) return;
      var inputs = [].concat(_toConsumableArray(this.holder.querySelectorAll('input')), _toConsumableArray(this.holder.querySelectorAll('select')));
      var step = toStep || this.currentStep || 0;
      var nextStep = step + 1;
      var nextSection = this.sections[nextStep];
      if (!this.sections[nextStep + 1]) {
        this.evtGo.forEach(function (btn) {
          btn.innerHTML = 'Submit';
        });
      }
      if (nextSection) {
        this.sliding = true;
        inputs.forEach(function (input) {
          return input.blur();
        });
        this.loadingOn();
        setTimeout(function () {
          _this4.currentStep = nextStep;
          _this4.slide(nextSection);
          _this4.loadingOff();
          _this4.observeBar();
        }, 600);
      } else {
        this.save();
        this.finishMessage();
      }
    }
  }, {
    key: "back",
    value: function back(toStep) {
      if (this.holder.classList.contains(__LOCKED)) return;
      this.clearErrors();
      var step = toStep || this.currentStep || 0;
      var prevStep = step - 1;
      var prevSection = this.sections[prevStep];
      if (prevSection) {
        this.evtGo.forEach(function (btn) {
          btn.innerHTML = 'Next';
        });
        this.currentStep = prevStep;
        this.slide(prevSection);
      }
    }
  }, {
    key: "validate",
    value: function validate(section) {
      var requiredTextInputs = [].concat(_toConsumableArray(section.querySelectorAll('input[type="text"][required]:not(.--disabled')), _toConsumableArray(section.querySelectorAll('input[type="email"][required]')));
      var emptyInputs = requiredTextInputs.filter(function (input) {
        return !input.value;
      });
      var numberInputs = section.querySelectorAll('input[data-validate="number"]');
      var selectInputs = section.querySelectorAll('select[required]');
      var emailInputs = section.querySelectorAll('input[data-validate="email"]');
      var zipInputs = section.querySelectorAll('input[data-validate="zip_code"]');
      var sectionID = section.dataset.loanSection;
      if (requiredTextInputs.some(function (input) {
        return input.classList.contains(__INVALID);
      })) return false;
      if (numberInputs.length) {
        var value = numberInputs[0].value;
        var regex = /^\+\d{1}\s\(\d{3}\)\s\d{3}\-\d{4}$/;
        if (!regex.test(value)) {
          this.showInputError(numberInputs[0], 'Please enter a valid phone number');
          return false;
        }
      }
      if (emailInputs.length) {
        var _value = emailInputs[0].value;
        var _regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
        if (!_regex.test(_value)) {
          this.showInputError(emailInputs[0], 'Please enter a valid email');
          return false;
        }
      }
      if (zipInputs.length) {
        var _value2 = zipInputs[0].value;
        var _regex2 = /^\d{5}$/;
        if (!_regex2.test(_value2)) {
          this.showInputError(zipInputs[0], 'Please enter a valid zip code');
          return false;
        }
      }
      if (emptyInputs.length) {
        this.showInputError(emptyInputs[0], 'This field is required');
        return false;
      }
      if (selectInputs.length) {
        var _iterator2 = _createForOfIteratorHelper(selectInputs),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var select = _step2.value;
            if (!select.value) {
              this.showInputError(select, 'Please select an option');
              return false;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      return true;
    }
  }, {
    key: "adjustActiveSectionHeight",
    value: function adjustActiveSectionHeight() {
      var activeSection = this.getActiveSection;
      if (activeSection) {
        var height = activeSection.scrollHeight;
        this.content.style.height = "".concat(height, "px");
      }
    }
  }, {
    key: "toggle",
    value: function toggle() {
      var _this5 = this;
      var body = document.querySelector('body');
      var headerNav = document.querySelector('.header__sub-nav');
      var welcome = document.querySelector('.subpage__welcome');
      var footerMain = document.querySelector('.footer__wrapper > .wrapper');
      var loanWelcome = document.querySelector('.loan-welcome');
      var heading = document.querySelector('.loan-case__heading');
      var backGroup = document.querySelector('.loan-case__back-group');
      var CASE_CLASS = 'loan_case';
      var elements = [headerNav, welcome, footerMain, loanWelcome];
      var hideElement = function hideElement(el) {
        var curHeight = el.scrollHeight;
        el.style.height = "".concat(curHeight, "px");
        setTimeout(function () {
          el.style.overflow = 'hidden';
          el.style.height = '0px';
        }, 1);
      };
      var showElement = function showElement(el) {
        var curHeight = window.getComputedStyle(el).getPropertyValue('height');
        var scrollHeight = el.scrollHeight;
        el.style.height = "".concat(curHeight);
        setTimeout(function () {
          el.style.overflow = 'visible';
          el.style.height = "".concat(scrollHeight, "px");
        }, 1);
      };
      var hideLoan = function hideLoan() {
        body.classList.remove(CASE_CLASS);
        for (var _i = 0, _elements = elements; _i < _elements.length; _i++) {
          var element = _elements[_i];
          if (element) showElement(element);
        }
        _this5.scroller.style.display = 'none';
        _this5.content.style.height = "0px";
        if (backGroup) {
          backGroup.style.height = "0px";
        }
        if (heading) {
          heading.innerHTML = 'Welcome To the Icebox Max Approval Financing Form';
          heading.classList.remove('--big');
        }
        _this5.clearErrors();
        _this5.back(1);
        _this5.clearAllFields();
      };
      var showLoan = function showLoan() {
        body.classList.add('loan_case');
        for (var _i2 = 0, _elements2 = elements; _i2 < _elements2.length; _i2++) {
          var element = _elements2[_i2];
          if (element) hideElement(element);
        }
        _this5.scroller.style.display = 'flex';
        _this5.content.style.height = "".concat(_this5.sections[0].scrollHeight, "px");
        if (backGroup) {
          backGroup.style.height = "".concat(backGroup.scrollHeight, "px");
        }
        if (heading) {
          heading.innerHTML = 'Financing Application';
          heading.classList.add('--big');
        }
      };
      if (body.classList.contains(CASE_CLASS)) {
        var askModal = new AskModal({
          heading: 'Are You Sure You Want To Exit Financing App?',
          subheading: 'You will lose all the progress. Keep filling out the form and get approved as soon as possible!',
          exitText: 'Exit',
          keepText: 'Keep Filling',
          exitCallback: hideLoan
        });
        askModal.show();
      } else {
        showLoan();
      }
    }
  }, {
    key: "tabPress",
    value: function tabPress() {
      if (!this.sliding) {
        var activeInput = this.getActiveInput;
        if (!activeInput) {
          var section = this.getActiveSection;
          var inputArray = _toConsumableArray(section.querySelectorAll('input:not(.--disabled), select:not(.--disabled)'));
          if (inputArray.length) {
            var inputToFocus;
            var invalidInputs = inputArray.filter(function (input) {
              return input.classList.contains('--invalid');
            });
            if (invalidInputs.length) {
              inputToFocus = invalidInputs[0];
            } else {
              var emptyInputs = inputArray.filter(function (input) {
                return !input.value && input.value !== 0;
              });
              if (emptyInputs.length) {
                inputToFocus = emptyInputs[0];
              } else {
                inputToFocus = inputArray[0];
              }
            }
            inputToFocus.focus();
          }
        } else {
          var activeInputWrap = activeInput.parentNode.closest('.loan-input-wrap');
          var nextInputWrap = activeInputWrap.nextElementSibling;
          if (nextInputWrap) {
            var nextInput = nextInputWrap.querySelector('input, select');
            if (nextInput) {
              nextInput.focus();
            }
          } else {
            var firstInputWrap = this.getActiveSection.querySelector('.loan-input-wrap');
            var firstInput = firstInputWrap.querySelector('input, select');
            if (firstInput) {
              firstInput.focus();
            }
          }
        }
      }
    }

    /**
     * Bind Events
     */
  }, {
    key: "bindStepEvt",
    value: function bindStepEvt() {
      var _this6 = this;
      this.evtGo.forEach(function (btn) {
        btn.addEventListener('click', function (e) {
          e.preventDefault();
          var section = _this6.getActiveSection;
          if (_this6.validate(section)) _this6.go();
        });
      });
      this.evtBack.forEach(function (btn) {
        btn.addEventListener('click', function () {
          _this6.back();
        });
      });
      this.evtSubmit.forEach(function (btn) {
        btn.addEventListener('click', function (e) {
          e.preventDefault();
          _this6.evtGo[0].click();
        });
      });
      this.evtToggle.forEach(function (btn) {
        btn.addEventListener('click', function (e) {
          _this6.toggle();
        });
      });
    }
  }, {
    key: "bindInputEvents",
    value: function bindInputEvents() {
      var _this7 = this;
      var inputs = _toConsumableArray(this.holder.querySelectorAll('input'));
      var selects = _toConsumableArray(this.holder.querySelectorAll('select'));
      var noWebsiteCheckbox = this.holder.querySelector('#loan_employer_website');
      var inputWebsiteEmployer = this.holder.querySelector('#loan_employer_website');
      document.addEventListener('keydown', function (e) {
        var isTab = e.key === 'Tab';
        if (isTab) {
          if (document.body.classList.contains('loan_case')) {
            e.preventDefault();
            _this7.tabPress();
          }
        }
      });
      inputs.forEach(function (input) {
        input.addEventListener('focus', function () {
          _this7.clearErrors();
          var parent = input.parentNode.closest('.loan-input-wrap');
          if (parent) {
            parent.classList.add('--focused');
          }
        });
        input.addEventListener('blur', function () {
          var parent = input.parentNode.closest('.loan-input-wrap');
          if (parent) {
            parent.classList.remove('--focused');
          }
        });
        input.addEventListener('keydown', function (e) {
          _this7.clearErrors();
          var isEnter = e.key === 'Enter';
          var isTab = e.key === 'Tab';
          if (isEnter) {
            _this7.evtGo[0].click();
          }
        });
      });
      selects.forEach(function (select) {
        select.addEventListener('change', function () {
          _this7.clearErrors();
        });
      });
    }
  }, {
    key: "bindSSNInput",
    value: function bindSSNInput() {
      var inputs = this.holder.querySelectorAll('input[data-format="ssn"]');
      var _iterator3 = _createForOfIteratorHelper(inputs),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var input = _step3.value;
          input.addEventListener('input', function (e) {
            var value = e.target.value;
            var newValue = '';
            for (var i = 0; i < value.length; i++) {
              var _char = value.charAt(i);
              if (_char.match(/^[0-9]$/) && newValue.length < 9) {
                newValue += _char;
              }
            }
            e.target.value = newValue;
          });
          input.addEventListener('blur', function (e) {
            var value = e.target.value;
            if (value) {
              var newValue = value.replace(/([^0-9])/g, '');
              newValue = newValue.slice(0, 3) + '—' + newValue.slice(3, 5) + '—' + newValue.slice(5);
              e.target.value = newValue;
            }
          });
          input.addEventListener('focus', function (e) {
            e.target.value = e.target.value.replace(/([^0-9])/g, '');
          });
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "bindNumberInput",
    value: function bindNumberInput() {
      var inputs = this.holder.querySelectorAll('input[data-validate="number"]');
      var _iterator4 = _createForOfIteratorHelper(inputs),
        _step4;
      try {
        var _loop = function _loop() {
          var input = _step4.value;
          var keyCode;
          function mask(event) {
            event.keyCode && (keyCode = event.keyCode);
            var pos = this.selectionStart;
            if (pos < 3) event.preventDefault();
            var matrix = "+1 (___) ___-____",
              i = 0,
              def = matrix.replace(/\D/g, ""),
              val = this.value.replace(/\D/g, ""),
              newValue = matrix.replace(/[_\d]/g, function (a) {
                return i < val.length ? val.charAt(i++) || def.charAt(i) : a;
              });
            i = newValue.indexOf("_");
            if (i != -1) {
              i < 5 && (i = 3);
              newValue = newValue.slice(0, i);
            }
            var reg = matrix.substr(0, this.value.length).replace(/_+/g, function (a) {
              return "\\d{1," + a.length + "}";
            }).replace(/[+()]/g, "\\$&");
            reg = new RegExp("^" + reg + "$");
            if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = newValue;
            if (event.type == "blur" && this.value.length < 5) this.value = "";
          }
          input.addEventListener("input", mask, false);
          input.addEventListener("focus", mask, false);
          input.addEventListener("blur", mask, false);
          input.addEventListener("keydown", mask, false);
          input.addEventListener('mouseup', function (event) {
            event.preventDefault();
            if (input.value.length < 4) {
              input.setSelectionRange(4, 4);
            } else {
              input.setSelectionRange(input.value.length, input.value.length);
            }
          });
        };
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "bindIDUpload",
    value: function bindIDUpload() {
      var _this8 = this;
      var input = document.querySelector('#loan_id');
      var box = document.querySelector('[data-loan="files_upload"]');
      var holder = this.filesHolder;
      // if (!input || !box || !holder) throw new Error('JS : Bind ID Upload : Input or Box or Holder not found')

      if (input && box && holder) {
        var processFiles = function processFiles(files) {
          if (!files) throw new Error('No files selected');
          files = _toConsumableArray(files);
          if (!files.length) return;
          var _iterator5 = _createForOfIteratorHelper(files),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var file = _step5.value;
              if (!file.type.match('image.*')) continue;
              var images = holder.querySelectorAll('img');
              var _iterator6 = _createForOfIteratorHelper(images),
                _step6;
              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var image = _step6.value;
                  image.remove();
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
              var reader = new FileReader();
              reader.onload = function (e) {
                appendImage(e.target.result);
              };
              reader.readAsDataURL(file);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        };
        var appendImage = function appendImage(imgURL) {
          var img = createElem('img', {
            style: {
              'background-image': "url(".concat(imgURL, ")")
            }
          });
          holder.append(img);
        };
        box.onclick = function () {
          input.click();
        };
        input.onchange = function (e) {
          processFiles(e.target.files);
          // input.value = ''
          setTimeout(function () {
            _this8.adjustActiveSectionHeight();
          }, 10);
        };
        box.ondragover = function (e) {
          e.preventDefault();
          box.classList.add(IS_ACTIVE);
        };
        box.ondragleave = function (e) {
          e.preventDefault();
          box.classList.remove(IS_ACTIVE);
        };
        box.ondrop = function (e) {
          e.preventDefault();
          box.classList.remove(IS_ACTIVE);
          processFiles(e.dataTransfer.files);
        };
      }
    }
  }, {
    key: "bindDualSelect",
    value: function bindDualSelect() {
      var dualArr = this.holder.querySelectorAll('[data-loan-evt="dual_select"]');
      var _iterator7 = _createForOfIteratorHelper(dualArr),
        _step7;
      try {
        var _loop2 = function _loop2() {
          var dual = _step7.value;
          var input = dual.querySelector('input:not([type="checkbox"])');
          var checkbox = dual.querySelector('input[type="checkbox"]');
          if (input && checkbox) {
            checkbox.onchange = function () {
              var isChecked = checkbox.checked;
              if (isChecked) {
                input.classList.add('--disabled');
                input.setAttribute('disabled', 'disabled');
                if (input.type !== 'range') {
                  input.value = '';
                }
              } else {
                input.removeAttribute('disabled');
                input.classList.remove('--disabled');
              }
            };
          }
        };
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      var rangeOutputArr = _toConsumableArray(this.holder.querySelectorAll('.custom-range__output'));
      var _iterator8 = _createForOfIteratorHelper(rangeOutputArr),
        _step8;
      try {
        var _loop3 = function _loop3() {
          var input = _step8.value;
          var parent = input.closest('[data-loan-evt="dual_select"]');
          if (parent) {
            var rangeInput = parent.querySelector('input[type="range"]');
            if (rangeInput) {
              var maxValue = rangeInput.max;
              var minValue = rangeInput.min;
              input.addEventListener('input', function (e) {
                e.target.value = e.target.value.replace(/[^0-9]/g, '');
              });
              input.addEventListener('blur', function (e) {
                e.target.value = Math.max(Math.min(e.target.value, maxValue), minValue);
                rangeInput.value = e.target.value;
                rangeInput.dispatchEvent(new Event('input'));
              });
            }
          }
        };
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          _loop3();
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  }, {
    key: "bindFormatting",
    value: function bindFormatting() {
      var currencyArr = document.querySelectorAll('[data-format="currency"]');
      var _iterator9 = _createForOfIteratorHelper(currencyArr),
        _step9;
      try {
        var _loop4 = function _loop4() {
          var input = _step9.value;
          input.addEventListener('blur', function () {
            var val = input.value;
            if (val.length) {
              input.value = formatAsCurrency(val);
            }
          });
        };
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          _loop4();
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }

    /**
     * Initial
     */
  }, {
    key: "setInitialVar",
    value: function setInitialVar() {
      this.steps = this.sections.length;
      if (!this.steps) throw new Error('No Loan Sections Found');
      this.currentStep = 0;
      this.stepsLeft = this.steps;
      this.endReached = false;
      this.atTheStart = true;
    }
  }, {
    key: "setInitialLayout",
    value: function setInitialLayout() {
      var firstSection = this.sections[0];
      var height = firstSection.scrollHeight;
      this.content.style.height = "".concat(height, "px");
      this.content.style.transition = "all ".concat(this.settings.scrollSpeed, "ms ").concat(this.settings.easing);
      this.scroller.style.transition = "all ".concat(this.settings.scrollSpeed, "ms ").concat(this.settings.easing);
      // this.sections.forEach(section => section.style.display = 'flex')
    }
  }, {
    key: "init",
    value: function init() {
      this.setInitialLayout();
      this.setInitialVar();
      this.bindStepEvt();
      this.bindInputEvents();
      this.bindNumberInput();
      this.bindSSNInput();
      this.bindIDUpload();
      this.bindDualSelect();
      this.bindFormatting();
    }
  }]);
}();
module.exports = LoanApp;

},{}],42:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var locationPage = new Object({
  init: function init() {
    Object.values(this.attachEvents).forEach(function (fn) {
      if (fn !== undefined && typeof fn == 'function') fn();
    });
  },
  attachEvents: {
    toggleStoresVisibility: function toggleStoresVisibility() {
      var headArr = _toConsumableArray($('.store-row__head'));
      $.each(headArr, function (i) {
        $(headArr[i]).click(function () {
          var rows = $('.store-row'),
            thisRow = $(this).closest(rows);
          if (elemDisplayed(thisRow.find('.store-row__body'))) {
            return false;
          } else {
            rows.find('.store-row__body').show();
            rows.not(thisRow).find('.store-row__body').hide();
          }
        });
      });
    }
  }
});
module.exports = locationPage;

},{}],43:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var LooseDiamonds = /*#__PURE__*/function () {
  function LooseDiamonds() {
    _classCallCheck(this, LooseDiamonds);
    this.main = document.querySelector('.loose_diamonds');
    this.resultsContainer = document.querySelector('.loose__results');
    this.viewBtnArr = _toConsumableArray(document.querySelectorAll('.loose__view-btn'));
    this.looseSelectArr = _toConsumableArray(document.querySelectorAll('.loose-select'));
    this.dmBtnArr = _toConsumableArray(document.querySelectorAll('.dm-filter-btn'));
    this.sortModalActive = false;
    if (this.main) {
      this.init();
    }
  }

  // Methods
  return _createClass(LooseDiamonds, [{
    key: "listView",
    value: function listView() {
      this.main.classList.add('--list');
    }
  }, {
    key: "gridView",
    value: function gridView() {
      this.main.classList.remove('--list');
    }
  }, {
    key: "observeFilters",
    value: function observeFilters() {
      var _iterator = _createForOfIteratorHelper(this.looseSelectArr),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var select = _step.value;
          var btnArr = _toConsumableArray(select.querySelectorAll('.loose-filter-btn'));
          var inputArr = _toConsumableArray(select.querySelectorAll('input[type="text"]'));
          var someIsChecked = btnArr.some(function (el) {
            return el.classList.contains(__ACTIVE);
          });
          var someIsValue = inputArr.some(function (el) {
            return el.value.length > 0;
          });
          if (someIsChecked || someIsValue) {
            select.classList.add(__SELECTED);
          } else {
            select.classList.remove(__SELECTED);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "resetFilters",
    value: function resetFilters() {
      var _iterator2 = _createForOfIteratorHelper(this.looseSelectArr),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var select = _step2.value;
          var btnArr = _toConsumableArray(select.querySelectorAll('.loose-filter-btn'));
          var inputArr = _toConsumableArray(select.querySelectorAll('input[type="text"]'));
          btnArr.forEach(function (el) {
            return el.classList.remove(__ACTIVE);
          });
          inputArr.forEach(function (el) {
            return el.value = '';
          });
          select.classList.remove(__SELECTED);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "openSortModal",
    value: function openSortModal() {
      var _this = this;
      var sortModal = document.querySelector('.sort-modal');
      var closeCallback = function closeCallback() {
        _this.closeSortModal(true);
      };
      if (sortModal) {
        window.looseSortBackdrop = new Backdrop({
          half: true,
          callback: closeCallback
        });
        lockScroll();
        sortModal.style.display = 'block';
        setTimeout(function () {
          sortModal.classList.add(__ACTIVE);
        }, 5);
      }
    }
  }, {
    key: "closeSortModal",
    value: function closeSortModal() {
      var cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var sortModal = document.querySelector('.sort-modal');
      if (sortModal) {
        unlockScroll();
        sortModal.classList.remove(__ACTIVE);
        setTimeout(function () {
          sortModal.style.display = 'none';
        }, getTransitionTime(sortModal));
        if (!cond) {
          var backdrop = window.looseSortBackdrop;
          if (backdrop) {
            backdrop.hide();
          }
        }
        var rowArr = _toConsumableArray(document.querySelectorAll('.sort-modal-row'));
        var _iterator3 = _createForOfIteratorHelper(rowArr),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var row = _step3.value;
            row.querySelector('.sort-modal-row__body').style.height = 0;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  }, {
    key: "applyFilters",
    value: function applyFilters() {
      this.closeSortModal();
    }
  }, {
    key: "hideAdmin",
    value: function hideAdmin(target) {
      if (target) {
        var item = target.closest('.dm-item');
        var adminBar = item.querySelector('.dm-item__admin');
        if (adminBar) {
          adminBar.style.display = 'none';
        }
      }
    }

    // Bind Events
  }, {
    key: "bindLooseSelects",
    value: function bindLooseSelects() {
      var _this2 = this;
      var _iterator4 = _createForOfIteratorHelper(this.looseSelectArr),
        _step4;
      try {
        var _loop = function _loop() {
          var select = _step4.value;
          var btn = select.querySelector('.loose-select__btn');
          var drop = select.querySelector('.loose-select__drop');
          if (btn && drop) {
            btn.addEventListener('click', function () {
              if (select.classList.contains(__ACTIVE)) {
                select.classList.remove(__ACTIVE);
              } else {
                _this2.looseSelectArr.forEach(function (el) {
                  return el.classList.remove(__ACTIVE);
                });
                select.classList.add(__ACTIVE);
              }
            });
          }
        };
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      window.addEventListener('scroll', function () {
        if (_this2.looseSelectArr.some(function (el) {
          return el.classList.contains(__ACTIVE);
        })) {
          _this2.looseSelectArr.forEach(function (el) {
            return el.classList.remove(__ACTIVE);
          });
        }
      });
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (!target.closest('.loose-select')) {
          _this2.looseSelectArr.forEach(function (el) {
            return el.classList.remove(__ACTIVE);
          });
        }
      });
    }
  }, {
    key: "bindFilterBtnGroup",
    value: function bindFilterBtnGroup() {
      var _this3 = this;
      var groupArr = _toConsumableArray(document.querySelectorAll('[data-filter-group]'));
      var _iterator5 = _createForOfIteratorHelper(groupArr),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var group = _step5.value;
          var btnArr = _toConsumableArray(group.querySelectorAll('.loose-filter-btn'));
          var _iterator7 = _createForOfIteratorHelper(btnArr),
            _step7;
          try {
            var _loop2 = function _loop2() {
              var btn = _step7.value;
              btn.addEventListener('click', function () {
                btn.classList.toggle(__ACTIVE);
                _this3.observeFilters();
              });
            };
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              _loop2();
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      var _iterator6 = _createForOfIteratorHelper(this.looseSelectArr),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var select = _step6.value;
          var inputArr = _toConsumableArray(select.querySelectorAll('input[type="text"]'));
          var _iterator8 = _createForOfIteratorHelper(inputArr),
            _step8;
          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var input = _step8.value;
              input.addEventListener('input', function () {
                _this3.observeFilters();
              });
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  }, {
    key: "bindDmSelectClick",
    value: function bindDmSelectClick() {
      var _this4 = this;
      var fade = function fade() {
        var except = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        _this4.dmBtnArr.forEach(function (el) {
          if (el !== except && !el.classList.contains(__ACTIVE)) {
            el.classList.add(__FADE);
          }
        });
      };
      var reset = function reset() {
        _this4.dmBtnArr.forEach(function (el) {
          el.classList.remove(__ACTIVE);
          el.classList.remove(__FADE);
        });
      };
      var _iterator9 = _createForOfIteratorHelper(this.dmBtnArr),
        _step9;
      try {
        var _loop3 = function _loop3() {
          var btn = _step9.value;
          btn.addEventListener('click', function () {
            var someFaded = _this4.dmBtnArr.some(function (el) {
              return el.classList.contains(__FADE);
            });
            var targetActive = btn.classList.contains(__ACTIVE);
            var targetFaded = btn.classList.contains(__FADE);
            var target = btn;
            if (targetActive) {
              target.classList.remove(__ACTIVE);
              if (_this4.dmBtnArr.some(function (el) {
                return el.classList.contains(__ACTIVE);
              })) {
                target.classList.add(__FADE);
              } else {
                reset();
              }
            } else {
              target.classList.add(__ACTIVE);
              target.classList.remove(__FADE);
              fade(target);
            }
          });
        };
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          _loop3();
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }
  }, {
    key: "bindSortModalEvents",
    value: function bindSortModalEvents() {
      var modal = document.querySelector('.sort-modal');
      if (modal) {
        var rowArr = _toConsumableArray(modal.querySelectorAll('.sort-modal-row'));
        var _iterator10 = _createForOfIteratorHelper(rowArr),
          _step10;
        try {
          var _loop4 = function _loop4() {
            var row = _step10.value;
            var head = row.querySelector('.sort-modal-row__head');
            var body = row.querySelector('.sort-modal-row__body');
            if (head && body) {
              head.addEventListener('click', function () {
                if (body.clientHeight > 0) {
                  row.classList.remove(__ACTIVE);
                  body.style.height = 0;
                } else {
                  rowArr.forEach(function (r) {
                    if (r !== row) {
                      r.classList.remove(__ACTIVE);
                      r.querySelector('.sort-modal-row__body').style.height = 0;
                    }
                  });
                  row.classList.add(__ACTIVE);
                  var content = body.querySelector('.sort-modal-row__content');
                  body.style.height = "".concat(content.scrollHeight + 1, "px");
                }
              });
            }
          };
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            _loop4();
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      }
    }
  }, {
    key: "init",
    value: function init() {
      this.bindLooseSelects();
      this.bindFilterBtnGroup();
      this.bindDmSelectClick();
      this.observeFilters();
      this.bindSortModalEvents();
    }
  }]);
}();
module.exports = LooseDiamonds;

},{}],44:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var myBag = new Object({
  init: function init() {
    Object.values(this.attachEvents).forEach(function (fn) {
      if (fn !== undefined && typeof fn == 'function') fn();
    });
  },
  attachEvents: {
    formatSummaryPrice: function formatSummaryPrice() {
      var lines = _toConsumableArray(document.querySelectorAll('.summary-price'));
      var _iterator = _createForOfIteratorHelper(lines),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var line = _step.value;
          var span = line.querySelector('span:last-child');
          if (span) {
            var text = span.innerText;
            var num = Number(text.replace(/[^0-9.-]/g, ''));
            if (num !== 0) {
              num = num.toFixed(2);
              num = num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
              span.innerText = "$ ".concat(num);
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    setSalePercentValues: function setSalePercentValues() {
      var cards = _toConsumableArray(document.querySelectorAll('.mybag-card'));
      var _iterator2 = _createForOfIteratorHelper(cards),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var card = _step2.value;
          var newPrice = card.querySelector('.card-price_new');
          var oldPrice = card.querySelector('.card-price_old');
          var saleElem = card.querySelector('.mybag-card-sale');
          if (newPrice && oldPrice && saleElem) {
            var newPriceNum = Number(newPrice.innerText.replace(/[^0-9]/g, ''));
            var oldPriceNum = Number(oldPrice.innerText.replace(/[^0-9]/g, ''));
            var sale = (oldPriceNum - newPriceNum) / oldPriceNum * 100;
            sale = Math.round(sale / 10) * 10;
            if (sale % 10 >= 5) {
              sale = Math.ceil(sale / 10) * 10;
            } else {
              sale = Math.floor(sale / 10) * 10;
            }
            saleElem.innerText = "".concat(sale, "% OFF");
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    },
    setCapitalizeCheckoutBtn: function setCapitalizeCheckoutBtn() {
      var btnArr = _toConsumableArray(document.querySelectorAll('.checkout__main-btn'));
      var _iterator3 = _createForOfIteratorHelper(btnArr),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var btn = _step3.value;
          var text = btn.innerText.split(' ').reduce(function (acc, el) {
            acc.push(el.charAt(0).toUpperCase() + el.slice(1).toLowerCase());
            return acc;
          }, []);
          btn.innerText = text.join(' ');
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }
});
module.exports = myBag;

},{}],45:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var passReset = {
  IS_EMPTY: 'is-empty',
  IS_DISABLED: 'is-disabled',
  init: function init() {
    if ($('.pass-reset-page').length) {
      this.renderDOM();
      this.bindEvents();
    }
  },
  renderDOM: function renderDOM() {
    this.form = $('#passResetForm');
    this.submitBtn = $('#passResetSubmit');
    this.inputArr = _toConsumableArray(this.form.find('input[type="password"]'));
    this.error = $('.pass-reset-error');
    this.loader = $('.pass-reset-loader');
    this.main = $('.pass-reset__main');
    this.result = $('.pass-reset__result');
  },
  bindEvents: function bindEvents() {
    // submit click
    $.each(this.submitBtn, function (i) {
      passReset.submitBtn[i].onclick = function (e) {
        e.preventDefault();
        passReset.form.submit();
      };
    });
    // input events
    $.each(this.inputArr, function (i) {
      passReset.inputArr[i].oninput = function () {
        var arr = passReset.inputArr;
        var pass1 = arr[0].value,
          pass2 = arr[1].value;
        if (pass2.length == 0) {
          passReset.hideError();
        } else {
          if (pass1.length !== pass2.length) {
            passReset.showError('Different password length');
          } else {
            passReset.hideError();
            if (pass1 === pass2) {
              passReset.successError();
            } else {
              passReset.showError("Passwords don't match");
            }
          }
        }
      };
    });
    // form submit
    this.form[0].onsubmit = function (e) {
      e.preventDefault();
      if (passReset.formValid()) {
        Object.assign(passReset.submitBtn[0].style, {
          color: 'transparent',
          height: '14px',
          'border-radius': '50px'
        });
        passReset.form.addClass(passReset.IS_DISABLED);
        passReset.hideError();
        passReset.loader[0].animate({
          width: '100%'
        }, {
          duration: 3000,
          fill: 'forwards'
        }).onfinish = function () {
          var formData = new FormData(e.target),
            obj = {};
          formData.forEach(function (value, key) {
            return obj[key] = value;
          });
          Object.assign(passReset.main[0].style, {
            opacity: 0
          });
          Object.assign(passReset.result[0].style, {
            opacity: 0
          });
          setTimeout(function () {
            passReset.main.hide();
            passReset.result.show();
            setTimeout(function () {
              Object.assign(passReset.result[0].style, {
                opacity: 1
              });
            }, 5);
          }, 401);
          // alert(JSON.stringify(obj))
        };
      }
    };
  },
  formValid: function formValid() {
    var arr = passReset.inputArr;
    arr.forEach(function (el) {
      return el.classList.remove(passReset.IS_EMPTY);
    });
    if (arr.length !== 0) {
      var emptyInput = arr.filter(function (el) {
        return el.value.length == 0;
      });
      if (emptyInput.length !== 0) {
        $.each(emptyInput, function (i) {
          emptyInput[i].classList.add(passReset.IS_EMPTY);
          setTimeout(function () {
            emptyInput[i].classList.remove(passReset.IS_EMPTY);
          }, 400);
        });
      } else {
        var pass1 = arr[0].value,
          pass2 = arr[1].value;
        if (pass1 === pass2) {
          return true;
        } else {
          return false;
        }
      }
    }
  },
  showError: function showError() {
    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Something went wrong...';
    this.error.html(text);
    Object.assign(this.error[0].style, {
      color: '#c02942',
      opacity: 1,
      transform: 'translateX(-50%) translateY(0px)'
    });
  },
  hideError: function hideError() {
    Object.assign(this.error[0].style, {
      color: '#c02942',
      opacity: 0,
      transform: 'translateX(-50%) translateY(14px)'
    });
  },
  successError: function successError() {
    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Passwords match!';
    this.error.html(text);
    Object.assign(this.error[0].style, {
      color: '#088d7b',
      opacity: 1,
      transform: 'translateX(-50%) translateY(0px)'
    });
  }
};
module.exports = passReset;

},{}],46:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ZoomGallery = require('../dynamic/zoom-gallery');
var ProductPage = /*#__PURE__*/function () {
  function ProductPage() {
    _classCallCheck(this, ProductPage);
    this.optionsArr = _toConsumableArray(document.querySelectorAll('.product__item-option:not(.--static)'));
    this.optionsRow = document.querySelector('.side-row__options');
    this.colorPickArr = _toConsumableArray(document.querySelectorAll('.color-pick'));
    this.toggleRowArr = _toConsumableArray(document.querySelectorAll('.toggle-row'));
    this.description = document.querySelector('#product_description');
    this.galleryDesktopArr = _toConsumableArray(document.querySelector('#gallery_desktop').querySelectorAll('.product__gallery'));
    this.galleryMobileArr = _toConsumableArray(document.querySelector('#gallery_mobile').querySelectorAll('.product__gallery'));
    this.optionModal = document.querySelector('.option-modal');
    this.optionModalContent = document.querySelector('.option-modal__content');
    this.optionModalNextElem = document.querySelector('[data-option-modal-next]');
    this.optionModalName = document.querySelector('[data-option-modal-name]');
    this.evtNextOption = document.querySelector('[data-evt="optionModalNext"]');
    this.evtCloseOptionModalArr = document.querySelectorAll('[data-evt="optionModalClose"]');
    this.favBtn = document.querySelector('.product__add-fav');
    this.activeOptionIndex = undefined;
    this.fixedBar = document.querySelector('.fixed-bar');
    this.fixedBarTrigger = document.querySelector('.side-row__payments');
    this.galleryZoomInstance = null;
    this.init();
  }
  return _createClass(ProductPage, [{
    key: "init",
    value: function init() {
      var _this = this;
      if (window.innerWidth > 991) {
        this.bindOptionToggleDesktop();
      } else {
        this.bindOptionToggleMobile();
        this.bindOptionModalEvents();
        this.bindPullDown();
      }
      this.setActiveOptionsText();
      this.bindOptionButtonClick();
      this.bindOptionButtonClickInputValue();
      // this.bindColorPick()
      this.bindToggleRow();
      this.bindToggleFav();
      this.setupDescription();
      this.setupSplide();
      this.setupReviewsSplide();
      this.setupGallery();
      this.observeFixedBar();
      this.positionFixedBar();
      this.setFixedBarMedia();
      this.formatPrice();
      this.bindGalleryZoom();
      setTimeout(function () {
        _this.formatPrice();
      }, 2000);
    }

    // Gallery
  }, {
    key: "setupDesktopGallery",
    value: function setupDesktopGallery() {
      var _iterator = _createForOfIteratorHelper(this.galleryDesktopArr),
        _step;
      try {
        var _loop = function _loop() {
          var gallery = _step.value;
          var thumbs = _toConsumableArray(gallery.querySelector('.product__thumb-gallery').querySelectorAll('.product-media'));
          var media = _toConsumableArray(gallery.querySelector('.product__main-gallery').querySelectorAll('.product-media'));
          if (thumbs.length && media.length) {
            thumbs.forEach(function (thumb, index) {
              thumb.addEventListener('click', function () {
                media.forEach(function (el) {
                  return el.style.display = 'none';
                });
                media[index].style.display = 'block';
              });
            });
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "setupMobileGallery",
    value: function setupMobileGallery() {
      var _iterator2 = _createForOfIteratorHelper(this.galleryMobileArr),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var gallery = _step2.value;
          var mainSplide = gallery.querySelector('.product__main-gallery.splide');
          var thumbsSplide = gallery.querySelector('.product__thumb-gallery.splide');
          if (mainSplide && thumbsSplide) {
            var main = new Splide(mainSplide, {
              type: "loop",
              perPage: 1,
              perMove: 1,
              gap: "0px",
              arrows: false,
              pagination: false,
              speed: 750,
              breakpoints: {
                991: {
                  perPage: 2
                },
                767: {
                  perPage: 1.5
                },
                479: {
                  perPage: 1
                }
              }
            });
            var thumbs = new Splide(thumbsSplide, {
              rewind: true,
              pagination: false,
              arrows: false,
              cover: true,
              isNavigation: true,
              fixedWidth: 38,
              gap: 4
            });
            main.sync(thumbs);
            main.mount();
            thumbs.mount();
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "setupGallery",
    value: function setupGallery() {
      if (window.innerWidth > 991) {
        this.setupDesktopGallery();
      } else {
        this.setupMobileGallery();
      }
    }

    // Methods
  }, {
    key: "setActiveOptionsText",
    value: function setActiveOptionsText() {
      var _iterator3 = _createForOfIteratorHelper(this.optionsArr),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var option = _step3.value;
          var holder = option.querySelector('.product-option__head-right');
          var activeBtn = option.querySelector('.option-btn.is-active') || option.querySelector('.option-btn.active');
          if (holder && activeBtn) {
            var textContent = activeBtn.textContent;
            if (textContent.length) {
              var selectedElem = createElem('div', {
                className: 'product-option-current',
                innerHTML: textContent
              });
              holder.prepend(selectedElem);
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "setActiveColor",
    value: function setActiveColor(color) {
      var currentElem = document.querySelector('[data-current-color]');
      if (currentElem) {
        currentElem.innerHTML = color;
      }
    }
  }, {
    key: "setActiveColorPickElem",
    value: function setActiveColorPickElem(elem) {
      this.colorPickArr.forEach(function (pick) {
        if (pick === elem) {
          pick.classList.add('--active');
        } else {
          pick.classList.remove('--active');
        }
      });
    }
  }, {
    key: "setupDescription",
    value: function setupDescription() {
      var _this2 = this;
      if (this.description) {
        var textContent = this.description.textContent;
        var extractLastParagraph = function extractLastParagraph() {
          var elements = _this2.description.querySelectorAll('p, div, li');
          var holder = document.querySelector('#itemDetails');
          if (holder) {
            var _iterator4 = _createForOfIteratorHelper(elements),
              _step4;
            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var element = _step4.value;
                if (element.textContent.trim().startsWith("These pieces are handcrafted and") || element.textContent.trim().startsWith("This piece is handcrafted and")) {
                  holder.appendChild(element);
                  element.classList.add('product__more-typo');
                  break;
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        };
        extractLastParagraph();
      }
    }
  }, {
    key: "setupSplide",
    value: function setupSplide() {
      var splideArr = _toConsumableArray(document.querySelectorAll('.more-row__splide'));
      var _iterator5 = _createForOfIteratorHelper(splideArr),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var el = _step5.value;
          var main = new Splide(el, {
            type: "loop",
            perPage: 4,
            perMove: 1,
            autoplay: 0,
            gap: "0px",
            arrows: 1,
            pagination: 0,
            speed: 750,
            breakpoints: {
              1980: {
                perPage: 5,
                perMove: 1
              },
              1680: {
                perPage: 4,
                perMove: 1
              },
              1120: {
                perPage: 4,
                perMove: 1
              },
              991: {
                perPage: 4,
                perMove: 1
              },
              767: {
                perPage: 3,
                perMove: 2
              },
              478: {
                perPage: 2,
                perMove: 1
              }
              // 767: {
              //   grid: {
              //     rows: 2,
              //     cols: 3,
              //     gap: { row: "10px", col: "0px" },
              //   },
              // },
              // 478: {
              //   grid: {
              //     rows: 2,
              //     cols: 2,
              //     gap: { row: "24px", col: "0px" },
              //   },
              // },
            }
          }).mount(window.splide.Extensions);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "setupReviewsSplide",
    value: function setupReviewsSplide() {
      var reviewsSplide = document.querySelector('.more-row__reviews');
      if (reviewsSplide && reviewsSplide.classList.contains('splide')) {
        var splide = new Splide(reviewsSplide, {
          perPage: 4,
          perMove: 1,
          autoplay: 1,
          gap: "8px",
          arrows: 1,
          pagination: 0,
          speed: 750,
          breakpoints: {
            2800: {
              perPage: 5
            },
            1980: {
              perPage: 4
            },
            992: {
              perPage: 3
            },
            767: {
              perPage: 2
            },
            479: {
              perPage: 1.2
            }
          }
        }).mount();
      }
    }

    // Option Modal
  }, {
    key: "revertOptions",
    value: function revertOptions() {
      var body = this.optionModal.querySelector('.product-option__body');
      var guideBtn = this.optionModal.querySelector('.option-guide-btn');
      var emptyOption = this.optionsArr.find(function (option) {
        return !option.querySelector('.product-option__body');
      });
      var input = this.optionModal.querySelector('input[type="hidden"]');
      if (body && emptyOption) {
        if (guideBtn) {
          body.append(guideBtn);
        }
        if (input) {
          emptyOption.append(input);
        }
        emptyOption.append(body);
      }
    }
  }, {
    key: "appendOption",
    value: function appendOption() {
      var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.optionsArr[0];
      this.revertOptions();
      if (option) {
        var optionName = option.querySelector('.product-option-name');
        var currentIndex = this.optionsArr.indexOf(option);
        this.activeOptionIndex = currentIndex;
        var nextOption = this.optionsArr[currentIndex + 1] || this.optionsArr[0];
        var nextOptionName = nextOption.querySelector('.product-option-name');
        var body = option.querySelector('.product-option__body');
        var input = option.querySelector('input[type="hidden"]');
        var guideBtn = option.querySelector('.option-guide-btn');
        var modalWrapper = this.optionModal.querySelector('.option-modal__wrapper');
        if (body) {
          this.optionModalName.innerHTML = optionName.textContent;
          this.optionModalNextElem.innerHTML = nextOptionName.textContent;
          this.optionModalContent.appendChild(body);
          if (input) {
            this.optionModalContent.appendChild(input);
          }
          if (guideBtn && modalWrapper) {
            modalWrapper.append(guideBtn);
          }
        }
      }
    }
  }, {
    key: "bindOptionModalEvents",
    value: function bindOptionModalEvents() {
      var _this3 = this;
      this.evtNextOption.addEventListener('click', function () {
        _this3.appendOption(_this3.optionsArr[_this3.activeOptionIndex + 1] || _this3.optionsArr[0]);
      });
      this.evtCloseOptionModalArr.forEach(function (elem) {
        elem.addEventListener('click', function () {
          _this3.closeOptionModal();
        });
      });
    }
  }, {
    key: "bindOptionToggleMobile",
    value: function bindOptionToggleMobile() {
      var _this4 = this;
      var _iterator6 = _createForOfIteratorHelper(this.optionsArr),
        _step6;
      try {
        var _loop2 = function _loop2() {
          var option = _step6.value;
          var head = option.querySelector('.product-option__head');
          var body = option.querySelector('.product-option__body');
          if (head && body) {
            head.addEventListener('click', function () {
              _this4.appendOption(option);
              _this4.showOptionModal();
            });
          }
        };
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  }, {
    key: "showOptionModal",
    value: function showOptionModal() {
      var _this5 = this;
      lockScroll();
      window.optionModalBackdrop = new Backdrop({
        half: true,
        callback: function callback() {
          _this5.closeOptionModal();
        }
      });
      this.optionModal.classList.add('--visible');
    }
  }, {
    key: "closeOptionModal",
    value: function closeOptionModal() {
      var _this6 = this;
      unlockScroll();
      this.optionModal.classList.remove('--visible');
      setTimeout(function () {
        _this6.optionModal.removeAttribute('style');
        _this6.revertOptions();
      }, getTransitionTime(this.optionModal));
      if (window.optionModalBackdrop) {
        window.optionModalBackdrop.hide(true);
      }
    }
  }, {
    key: "bindPullDown",
    value: function bindPullDown() {
      var _this7 = this;
      var startY = 0;
      var currentY = 0;
      var isDragging = false;
      var isMovingRoot = false;
      var rootEl = this.optionModal;
      var scroller = document.querySelector('.option-modal__content');
      var handler = document.querySelector('.option-modal__header');
      var transition = 'all 0.4s cubic-bezier(0.39, 0.575, 0.565, 1)';
      rootEl.addEventListener('touchstart', function (e) {
        var target = e.target;
        var isOnHandler = handler.contains(target) || target === handler;
        startY = e.touches[0].clientY;
        isDragging = true;
        isMovingRoot = false;
        _this7.isOnHandler = isOnHandler;
      }, {
        passive: false
      });
      rootEl.addEventListener('touchmove', function (e) {
        if (!isDragging) return;
        currentY = e.touches[0].clientY;
        var diffY = currentY - startY;
        rootEl.style.transition = 'none';
        if (diffY > 0) {
          if (_this7.isOnHandler) {
            if (!isMovingRoot) {
              isMovingRoot = true;
            }
            if (e.cancelable) {
              e.preventDefault();
            }
            rootEl.style.transform = "translateY(".concat(diffY, "px)");
          } else {
            if (scroller.scrollTop === 0) {
              if (!isMovingRoot) {
                isMovingRoot = true;
              }
              if (e.cancelable) {
                e.preventDefault();
              }
              rootEl.style.transform = "translateY(".concat(diffY, "px)");
            }
          }
        }
      }, {
        passive: false
      });
      rootEl.addEventListener('touchend', function () {
        if (!isDragging) return;
        isDragging = false;
        if (isMovingRoot) {
          var diffY = currentY - startY;
          var hideOffset = rootEl.offsetHeight * 0.3;
          rootEl.style.transition = transition;
          if (diffY > hideOffset) {
            _this7.closeOptionModal();
            rootEl.style.transform = "translateY(100%)";
          } else {
            rootEl.removeAttribute('style');
          }
        }
      });
    }

    // Methods - Options
  }, {
    key: "hideAllOptions",
    value: function hideAllOptions() {
      var _this8 = this;
      var exclude = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      this.optionsArr.forEach(function (option) {
        if (option !== exclude) {
          _this8.hideOption(option);
        } else {
          _this8.showOption(option);
        }
      });
      if (exclude == null) {
        this.optionsRow.classList.remove('--active');
      }
    }
  }, {
    key: "showOption",
    value: function showOption(option) {
      option.classList.add('--active');
    }
  }, {
    key: "hideOption",
    value: function hideOption(option) {
      option.classList.remove('--active');
    }

    // Price
  }, {
    key: "formatPrice",
    value: function formatPrice() {
      var priceArr = _toConsumableArray(document.querySelectorAll('.product__item-price'));
      var _iterator7 = _createForOfIteratorHelper(priceArr),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var elem = _step7.value;
          var text = elem.textContent;
          var containsDollar = text.includes('$');
          var parentBar = elem.closest('.fixed-bar');
          if (containsDollar && !parentBar) {
            var price = text.replace('$', '');
            elem.innerHTML = "<span class=\"dollar-symbol\">$</span>".concat(price.replace(/\s/g, ''));
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }

    // Bind Events
  }, {
    key: "bindOptionToggleDesktop",
    value: function bindOptionToggleDesktop() {
      var _this9 = this;
      var _iterator8 = _createForOfIteratorHelper(this.optionsArr),
        _step8;
      try {
        var _loop3 = function _loop3() {
          var option = _step8.value;
          var head = option.querySelector('.product-option__head');
          var btnArr = _toConsumableArray(option.querySelectorAll('.option-btn'));
          if (head) {
            head.addEventListener('click', function () {
              return;
              if (option.classList.contains('--active')) {
                _this9.hideOption(option);
              } else {
                _this9.hideAllOptions(option);
                _this9.showOption(option);
              }
            });
            _this9.showOption(option);
          }
          // this.showOption(option)
        };
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          _loop3();
        }

        // document.addEventListener('click', (e) => {
        //   const target = e.target
        //   if (!target.closest('.product__item-option')) {
        //     this.hideAllOptions()
        //   }
        // })
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  }, {
    key: "bindOptionButtonClick",
    value: function bindOptionButtonClick() {
      var _iterator9 = _createForOfIteratorHelper(this.optionsArr),
        _step9;
      try {
        var _loop4 = function _loop4() {
          var option = _step9.value;
          var btnArr = _toConsumableArray(option.querySelectorAll('.option-btn'));
          var selectedElem = option.querySelector('.product-option-current');
          if (btnArr.length) {
            var _iterator10 = _createForOfIteratorHelper(btnArr),
              _step10;
            try {
              var _loop5 = function _loop5() {
                var btn = _step10.value;
                btn.addEventListener('click', function () {
                  if (!btn.classList.contains('disabled')) {
                    var textContent = btn.textContent.trim();
                    if (textContent.length) {
                      if (selectedElem) {
                        selectedElem.innerHTML = textContent;
                      }
                    }
                    btnArr.forEach(function (el) {
                      return el.classList.remove(IS_ACTIVE);
                    });
                    btn.classList.add(IS_ACTIVE);
                  }
                });
              };
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                _loop5();
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }
          }
        };
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          _loop4();
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }
  }, {
    key: "bindOptionButtonClickInputValue",
    value: function bindOptionButtonClickInputValue() {
      var _this10 = this;
      var btnArr = _toConsumableArray(document.querySelectorAll('.option-btn'));
      var _iterator11 = _createForOfIteratorHelper(btnArr),
        _step11;
      try {
        var _loop6 = function _loop6() {
          var btn = _step11.value;
          btn.addEventListener('click', function () {
            var value = btn.dataset.value;
            if (!value) throw new Error('data-value attribute is required');
            var parent = btn.closest('.product__item-option') || btn.closest('.option-modal__content');
            if (!parent) throw new Error('parent element is required');
            var input = parent.querySelector('.custom-fields-fetch');
            if (!input) throw new Error('custom-fields-fetch element is required');
            input.value = value;
            var event = new Event('change', {
              bubbles: true
            });
            input.dispatchEvent(event);
            _this10.closeOptionModal();
          });
        };
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          _loop6();
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
    }
  }, {
    key: "bindColorPick",
    value: function bindColorPick() {
      var _this11 = this;
      this.colorPickArr.forEach(function (btn) {
        btn.addEventListener('click', function () {
          var attr = btn.dataset.color;
          if (attr) {
            _this11.setActiveColor(attr);
            _this11.setActiveColorPickElem(btn);
            if (_this11.fixedBar) {
              _this11.fixedBar.classList.remove('--filled');
            }
          }
        });
      });
    }
  }, {
    key: "bindToggleRow",
    value: function bindToggleRow() {
      this.toggleRowArr.forEach(function (row) {
        var head = row.querySelector('.toggle-row__head');
        var body = row.querySelector('.toggle-row__body');
        var wrapper = row.querySelector('.toggle-row__wrapper');
        if (head && body && wrapper) {
          var timeoutTimer = null;
          head.addEventListener('click', function (e) {
            if (timeoutTimer) {
              clearTimeout(timeoutTimer);
            }
            var target = e.target;
            if (target.classList.contains('editable') || target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
              return;
            }
            var scrollHeight = wrapper.scrollHeight;
            var isActive = body.offsetHeight > 0 && row.classList.contains('--active');
            if (isActive) {
              var currentHeight = body.offsetHeight;
              body.style.height = "".concat(currentHeight, "px");
              setTimeout(function () {
                body.style.height = "0px";
                row.classList.remove('--active');
              }, 3);
            } else {
              body.style.height = "".concat(scrollHeight, "px");
              row.classList.add('--active');
              timeoutTimer = window.setTimeout(function () {
                body.style.height = 'auto';
              }, getTransitionTime(body));
            }
          });
        }
      });
    }
  }, {
    key: "bindToggleFav",
    value: function bindToggleFav() {
      var _this12 = this;
      if (this.favBtn) {
        this.favBtn.addEventListener('click', function () {
          _this12.favBtn.classList.toggle('is-active');
        });
      }
    }
  }, {
    key: "bindGalleryZoom",
    value: function bindGalleryZoom() {
      var _this13 = this;
      var galleryContainer = document.querySelector('.product__view');
      if (!galleryContainer) return;
      galleryContainer.addEventListener('click', function (event) {
        var target = event.target;
        var mediaClicked = target.closest('.product-media');
        var gallery = target.closest('.product__main-gallery') || target.closest('.splide__list');
        var isThumbClicked = target.closest('.product__thumb-gallery');
        if (mediaClicked && gallery && !isThumbClicked) {
          if (_this13.galleryZoomInstance) {
            _this13.galleryZoomInstance.destroy();
            _this13.galleryZoomInstance = null;
          }
          var mediaArr = _toConsumableArray(gallery.querySelectorAll('.product-media:not(.splide__slide--clone)'));
          var index = mediaArr.indexOf(mediaClicked);
          _this13.galleryZoomInstance = new ZoomGallery(mediaArr, index);
        }
      });
      return;
      var galleryArr = _toConsumableArray(document.querySelectorAll('#gallery_mobile .product__main-gallery'));
      var _iterator12 = _createForOfIteratorHelper(galleryArr),
        _step12;
      try {
        var _loop7 = function _loop7() {
          var gallery = _step12.value;
          gallery.addEventListener('click', function (event) {
            var mediaClicked = event.target.closest('.product-media');
            if (window.innerWidth < 480 && mediaClicked) {
              if (_this13.galleryZoomInstance) {
                _this13.galleryZoomInstance.destroy();
                _this13.galleryZoomInstance = null;
              }
              var list = gallery.querySelector('.splide__list');
              if (list) {
                var mediaArr = _toConsumableArray(list.querySelectorAll('.product-media:not(.splide__slide--clone)'));
                var index = mediaArr.indexOf(mediaClicked);
                console.log(mediaArr);
                _this13.galleryZoomInstance = new ZoomGallery(mediaArr, index);
              }
            }
          });
        };
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          _loop7();
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
    }

    // Fixed Bar
  }, {
    key: "positionFixedBar",
    value: function positionFixedBar() {
      var _this14 = this;
      var header = document.querySelector('header');
      if (header && this.fixedBar && this.fixedBarTrigger) {
        this.fixedBar.style.display = 'block';
        var update = function update() {
          if (window.innerWidth > 991) {
            _this14.fixedBar.style.zIndex = -1;
            _this14.fixedBar.style.position = 'absolute';
            _this14.fixedBar.style.top = '100%';
            if (!header.contains(_this14.fixedBar)) {
              header.appendChild(_this14.fixedBar);
            }
          } else {
            var headerZIndex = window.getComputedStyle(header).getPropertyValue('z-index');
            _this14.fixedBar.style.zIndex = parseInt(headerZIndex, 10) - 1;
            _this14.fixedBar.style.top = 'auto';
            _this14.fixedBar.style.position = 'fixed';
            if (!document.body.contains(_this14.fixedBar)) {
              document.body.appendChild(_this14.fixedBar);
            }
          }
        };
        window.addEventListener('resize', update);
        update();
      }
    }
  }, {
    key: "observeFixedBar",
    value: function observeFixedBar() {
      var _this15 = this;
      var triggerElem = this.fixedBarTrigger;
      var bar = this.fixedBar;
      var header = document.querySelector('header');
      if (triggerElem && bar) {
        var headerOffset = header ? header.offsetHeight : 0;
        var observer = null;
        var updateObserver = function updateObserver() {
          headerOffset = header ? header.offsetHeight : 0;
          if (observer) {
            observer.disconnect();
          }
          var observerCallback = function observerCallback(entries) {
            entries.forEach(function (entry) {
              if (!entry.isIntersecting && entry.boundingClientRect.top < 0) {
                bar.classList.add(__VISIBLE);
                _this15.setFixedBarMedia();
              } else {
                bar.classList.remove(__VISIBLE);
              }
            });
          };
          observer = new IntersectionObserver(observerCallback, {
            root: null,
            rootMargin: "-".concat(headerOffset, "px 0px 0px 0px"),
            threshold: 0
          });
          observer.observe(triggerElem);
        };
        updateObserver();
        window.addEventListener('resize', updateObserver);
      }
    }
  }, {
    key: "setFixedBarMedia",
    value: function setFixedBarMedia() {
      if (this.fixedBar) {
        if (!this.fixedBar.querySelector('img')) {
          this.fixedBar.classList.remove('--filled');
        }
        var visibleGallery = _toConsumableArray(document.querySelectorAll('.product__gallery')).find(function (el) {
          return window.getComputedStyle(el).getPropertyValue('display') !== 'none';
        });
        if (visibleGallery) {
          var mainGallery = visibleGallery.querySelector('.product__main-gallery');
          var fixedBarMedia = document.querySelector('.fixed-bar__media');
          if (mainGallery && fixedBarMedia) {
            var image = mainGallery.querySelector('img');
            var fixedBarImage = fixedBarMedia.querySelector('img');
            if (image) {
              if (!fixedBarImage) {
                var newImg = document.createElement('img');
                newImg.src = image.src;
                fixedBarMedia.appendChild(newImg);
              } else {
                fixedBarImage.src = image.src;
              }
              this.fixedBar.classList.add('--filled');
            }
          }
        }
      }
    }
  }]);
}();
module.exports = ProductPage;

},{"../dynamic/zoom-gallery":17}],47:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var CareModal = require('../modals/care-modal');
var ResultsPage = /*#__PURE__*/function () {
  function ResultsPage() {
    _classCallCheck(this, ResultsPage);
    this.rootEl = document.querySelector('.main_results');
    this.filterBoxArr = _toConsumableArray(document.querySelectorAll('.page-filter-box'));
    this.filterModal = document.querySelector('.filter-modal');
    this.cardsGrid = document.querySelector('.cards-grid');
    this.stickySearch = document.querySelector('.results__sticky-search');
    this.filterModalActive = false;
    this.filters = {};
    this.careModalInstance = null;
    this.init();
  }
  return _createClass(ResultsPage, [{
    key: "init",
    value: function init() {
      this.setupDesktopFilters();
      this.bindTouchEvents();
      this.bindClickEvents();
      this.setupMobileFilters();

      // if (window.innerWidth > 991) {
      // } else {
      //   this.setupMobileFilters();
      //   this.unwrapFilters();
      // }

      this.observeFilters();
      this.formatGoldChainsSubheading();
      this.setStickyBar();
      this.bindStickySearch();
      this.adjustStickyBarOnResize();
      this.formatFilterTitles();
      this.bindViewSwitch();
      this.bindCareModal();
    }

    // Methods
  }, {
    key: "showFilterModal",
    value: function showFilterModal() {
      var _this = this;
      lockScroll();
      window.filterModalBackdrop = new Backdrop({
        half: true,
        callback: function callback() {
          _this.hideFilterModal();
        }
      });
      this.filterModal.style.display = "flex";
      setTimeout(function () {
        _this.filterModal.style.transform = "translateY(0)";
      }, 3);
    }
  }, {
    key: "hideFilterModal",
    value: function hideFilterModal() {
      var _this2 = this;
      unlockScroll();
      if (window.filterModalBackdrop) {
        window.filterModalBackdrop.hide(true);
      }
      this.filterModal.style.transform = "translateY(100%)";
      setTimeout(function () {
        _this2.filterModal.style.display = "none";
      }, getTransitionTime(this.filterModal));
    }
  }, {
    key: "debounce",
    value: function debounce(func, wait) {
      var timeout;
      return function executedFunction() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var later = function later() {
          clearTimeout(timeout);
          func.apply(void 0, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
  }, {
    key: "observeFilters",
    value: function observeFilters() {
      var _this3 = this;
      var _loop = function _loop() {
        if (_this3.filters.hasOwnProperty(filter)) {
          var _this3$filters$filter = _this3.filters[filter],
            btnArr = _this3$filters$filter.btnArr,
            list = _this3$filters$filter.list;
          var radios = _toConsumableArray(list.querySelectorAll('input[type="radio"]'));
          var checkboxes = _toConsumableArray(list.querySelectorAll('input[type="checkbox"]'));
          var links = _toConsumableArray(list.querySelectorAll('a'));
          var isFilled = radios.some(function (radio) {
            return radio.checked;
          }) || checkboxes.some(function (checkbox) {
            return checkbox.checked;
          }) || links.some(function (link) {
            return link.classList.contains('is-active');
          });
          btnArr.forEach(function (btn) {
            return btn.classList.toggle('--filled', isFilled);
          });
        }
      };
      for (var filter in this.filters) {
        _loop();
      }
    }

    // Desktop
  }, {
    key: "setupDesktopFilters",
    value: function setupDesktopFilters() {
      var _this4 = this;
      this.filterBoxArr.forEach(function (box, index) {
        var btn = box.querySelector('.page-filter-btn');
        var drop = box.querySelector('.page-filter-drop');
        if (!btn || !drop) {
          return false;
        }
        var optionsArr = drop.querySelector('a') ? _toConsumableArray(drop.querySelectorAll('a')) : _toConsumableArray(drop.querySelectorAll('label'));
        if (optionsArr.length) {
          _this4.filters[index] = {
            btnArr: [btn],
            list: drop
          };
          optionsArr.forEach(function (option) {
            option.addEventListener('change', function () {
              _this4.observeFilters();
              var input = option.querySelector('input');
              if (input) {
                if (input.type === 'radio') {
                  box.classList.remove('--focused');
                }
              }
            });
          });
        }
        btn.addEventListener('click', function () {
          var isFocused = box.classList.contains('--focused');
          _this4.filterBoxArr.forEach(function (el) {
            return el.classList.remove('--focused');
          });
          if (!isFocused) box.classList.add('--focused');
        });
      });
      document.addEventListener('click', function (e) {
        if (!e.target.closest('.page-filter-box')) {
          _this4.filterBoxArr.forEach(function (box) {
            return box.classList.remove('--focused');
          });
        }
      });
    }

    // Mobile
  }, {
    key: "setupMobileFilters",
    value: function setupMobileFilters() {
      var filterButtonArr = _toConsumableArray(this.filterModal.querySelectorAll('.filter-modal__filter-btn'));
      var filterListArr = _toConsumableArray(this.filterModal.querySelectorAll('.filter-modal__options-list'));
      filterButtonArr.forEach(function (btn, index) {
        btn.addEventListener('click', function () {
          filterButtonArr.forEach(function (el) {
            return el.classList.toggle('--active', el === btn);
          });
          filterListArr.forEach(function (l) {
            return l.style.display = l === filterListArr[index] ? 'block' : 'none';
          });
        });
      });
      filterButtonArr[0].dispatchEvent(new Event('click'));
    }
  }, {
    key: "getFilterDisplayName",
    value: function getFilterDisplayName(btn, filter) {
      var filterId = filter.id ? filter.id : null;
      var btnSpan = btn.querySelector('span');
      var rawName = filterId && btnSpan ? btnSpan.innerText.toLowerCase() : 'Sort By';
      return rawName.includes('subcategories') || rawName.includes('subcategory') ? 'Subcategories' : rawName.includes('price') || rawName.includes('price range') ? 'Price' : rawName;
    }
  }, {
    key: "createFilterButton",
    value: function createFilterButton(displayName) {
      return createElem('button', {
        className: 'filter-modal__filter-btn',
        innerHTML: "<span>".concat(displayName, "</span>")
      });
    }
  }, {
    key: "createFilterList",
    value: function createFilterList(optionsArr) {
      var list = createElem('div', {
        className: 'filter-modal__options-list',
        style: {
          display: 'none'
        }
      });
      optionsArr.forEach(function (el) {
        return list.appendChild(el);
      });
      return list;
    }
  }, {
    key: "setupFilterModalButtonBehavior",
    value: function setupFilterModalButtonBehavior(filterModalButton, list, filterBtnArr, listsArr) {
      filterModalButton.addEventListener('click', function () {
        filterBtnArr.forEach(function (btn) {
          return btn.classList.toggle('--active', btn === filterModalButton);
        });
        listsArr.forEach(function (l) {
          return l.style.display = l === list ? 'block' : 'none';
        });
      });
    }
  }, {
    key: "setupFilterObject",
    value: function setupFilterObject(index, btn, filterModalButton, list) {
      this.filters[index] = {
        btnArr: [btn, filterModalButton],
        list: list
      };
    }
  }, {
    key: "bindFilterButtonClick",
    value: function bindFilterButtonClick(btn, filterModalButton, list, filterBtnArr, listsArr) {
      var _this5 = this;
      btn.addEventListener('click', function () {
        _this5.showFilterModal();
        filterBtnArr.forEach(function (btn) {
          return btn.classList.remove('--active');
        });
        listsArr.forEach(function (l) {
          return l.style.display = 'none';
        });
        filterModalButton.classList.add('--active');
        list.style.display = 'block';
      });
    }
  }, {
    key: "unwrapFilters",
    value: function unwrapFilters() {
      var groups = _toConsumableArray(document.querySelectorAll('.page-filters__group'));
      groups.forEach(function (group) {
        while (group.firstChild) {
          group.parentNode.insertBefore(group.firstChild, group);
        }
        group.remove();
      });
    }
  }, {
    key: "bindTouchEvents",
    value: function bindTouchEvents() {
      var _this6 = this;
      var startY = 0;
      var currentY = 0;
      var isDragging = false;
      var container = this.filterModal;
      var handler = this.filterModal.querySelector('.filter-modal__header');
      handler.addEventListener('touchstart', function (e) {
        startY = e.touches[0].clientY;
        isDragging = true;
        container.style.transition = 'none';
      });
      handler.addEventListener('touchmove', function (e) {
        if (!isDragging) return;
        currentY = e.touches[0].clientY;
        var diffY = currentY - startY;
        if (diffY > 0) {
          container.style.transform = "translateY(".concat(diffY, "px)");
        }
      });
      handler.addEventListener('touchend', function () {
        if (!isDragging) return;
        isDragging = false;
        var diffY = currentY - startY;
        var hideOffset = container.offsetHeight * 0.5;
        container.style.transition = 'all .35s ease';
        if (diffY > hideOffset) {
          _this6.hideFilterModal();
        } else {
          container.style.transform = "translateY(0%)";
        }
      });
    }
  }, {
    key: "bindClickEvents",
    value: function bindClickEvents() {
      var _this7 = this;
      var closeArr = _toConsumableArray(document.querySelectorAll('[data-evt="closeFilterModal"]'));
      closeArr.forEach(function (close) {
        close.addEventListener('click', function () {
          return _this7.hideFilterModal();
        });
      });
      var openArr = _toConsumableArray(document.querySelectorAll('[data-evt="openFilterModal"]'));
      openArr.forEach(function (open) {
        open.addEventListener('click', function () {
          _this7.showFilterModal();
          var buttons = _this7.filterModal.querySelectorAll('.filter-modal__filter-btn');
          buttons[0].click();
          if (open.innerHTML.toLowerCase().includes('sort')) {
            buttons.forEach(function (btn) {
              if (btn.innerHTML.toLowerCase().includes('sort')) {
                btn.click();
              }
            });
          }
        });
      });
    }
  }, {
    key: "formatGoldChainsSubheading",
    value: function formatGoldChainsSubheading() {
      var subheading = document.querySelector('.results__subheading');
      if (subheading) {
        var text = 'Welcome to our collection of fine 14k solid gold chains, where luxury meets affordability';
        if (subheading.innerHTML.includes(text)) {
          var sentences = subheading.innerHTML.split('.').filter(function (sentence) {
            return sentence.trim() !== '';
          });
          if (sentences[0] === text) {
            subheading.innerHTML = "\n          <strong>".concat(text, ".</strong>\n          ").concat(sentences.slice(1).join('. '), "\n          ");
          }
        }
      }
    }
  }, {
    key: "setStickyBar",
    value: function setStickyBar() {
      var bar = document.querySelector('.page-filters');
      var stickySearch = document.querySelector('.results__sticky-search');
      var topBanner = document.querySelector('.top-banner');
      var header = document.querySelector('.header');
      var searchOffset = 0;
      var barOffset = 0;
      if (topBanner) {
        if (window.getComputedStyle(topBanner).position === 'sticky') {
          var bannerHeight = topBanner.offsetHeight;
          searchOffset += bannerHeight;
          barOffset += bannerHeight;
        }
      }
      if (header) {
        var headerHeight = header.offsetHeight;
        searchOffset += headerHeight;
        barOffset += headerHeight;
      }
      if (stickySearch && window.innerWidth < 991) {
        var stickySearchHeight = stickySearch.offsetHeight;
        barOffset += stickySearchHeight - 1;
      }
      var adjustStickySearch = function adjustStickySearch() {
        if (!stickySearch) return;
        stickySearch.style.top = "".concat(searchOffset, "px");
        stickySearch.style.position = 'sticky';
      };
      var adjustBar = function adjustBar() {
        if (!bar) return;
        bar.style.top = "".concat(barOffset, "px");
        bar.style.position = 'sticky';
      };
      adjustStickySearch();
      adjustBar();
    }
  }, {
    key: "bindStickySearch",
    value: function bindStickySearch() {
      if (this.stickySearch) {
        var input = this.stickySearch.querySelector('input');
        if (input) {
          input.addEventListener('focus', function () {
            lockScroll();
            window.stickySearchBackdrop = new Backdrop({
              half: true,
              zIndex: 9,
              callback: function callback() {
                input.blur();
              }
            });
          });
          input.addEventListener('blur', function () {
            unlockScroll();
            if (window.stickySearchBackdrop) {
              window.stickySearchBackdrop.hide(true);
            }
          });
        }
      }
    }
  }, {
    key: "adjustStickyBarOnResize",
    value: function adjustStickyBarOnResize() {
      var _this8 = this;
      window.addEventListener('resize', this.debounce(function () {
        _this8.setStickyBar();
      }, 100));
    }
  }, {
    key: "formatFilterTitles",
    value: function formatFilterTitles() {
      var arr = [].concat(_toConsumableArray(document.querySelectorAll('.page-filter-btn')), _toConsumableArray(document.querySelectorAll('.filter-modal__filter-btn')));
      var _iterator = _createForOfIteratorHelper(arr),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var btn = _step.value;
          var span = btn.querySelector('span:first-child');
          if (span) {
            var rawName = span.innerText.toLowerCase();
            var name = rawName.includes('subcategories') || rawName.includes('subcategory') ? 'Subcategories' : rawName.includes('price') || rawName.includes('price range') ? 'Price' : rawName;
            if (name.toLowerCase() !== rawName.toLowerCase()) {
              span.innerText = name;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    // View
  }, {
    key: "switchView",
    value: function switchView(mode) {
      var _this9 = this;
      if (!this.cardsGrid) return;
      var isLess = mode === 'less';
      this.cardsGrid.classList.add('--hidden');
      setTimeout(function () {
        _this9.cardsGrid.classList.toggle('--less', isLess);
        setTimeout(function () {
          _this9.cardsGrid.classList.remove('--hidden');
        }, 100);
      }, getTransitionTime(this.cardsGrid));
    }
  }, {
    key: "bindViewSwitch",
    value: function bindViewSwitch() {
      var _this10 = this;
      var buttons = {
        more: document.querySelector('[data-results-evt="viewMore"]'),
        less: document.querySelector('[data-results-evt="viewLess"]')
      };
      var toggleView = function toggleView(activeBtn, inactiveBtn, mode) {
        if (!activeBtn.classList.contains('is-active')) {
          activeBtn.classList.add('is-active');
          inactiveBtn.classList.remove('is-active');
          _this10.switchView(mode);
        }
      };
      if (buttons.more && buttons.less) {
        buttons.more.addEventListener('click', function () {
          return toggleView(buttons.more, buttons.less, 'more');
        });
        buttons.less.addEventListener('click', function () {
          return toggleView(buttons.less, buttons.more, 'less');
        });
      }
    }

    // Other
  }, {
    key: "bindCareModal",
    value: function bindCareModal() {
      if (document.querySelector('.care-modal')) {
        this.careModalInstance = new CareModal();
      }
    }
  }]);
}();
module.exports = ResultsPage;

},{"../modals/care-modal":28}],48:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var sellPage = {
  faqItems: _toConsumableArray(document.querySelectorAll('.sell-faq-item')),
  init: function init() {
    if (this.faqItems.length) {
      this.attachFaq();
      $('.sell-faq-item__main').eq(0).trigger('click');
    }
  },
  attachFaq: function attachFaq() {
    this.faqItems.forEach(function (el, index) {
      $(el).click(function () {
        var main = $(this).find('.sell-faq-item__main'),
          p = $(this).find('p'),
          svg = $(this).find('svg');
        if (main.height() == 0) {
          $(this).addClass(IS_ACTIVE);
          main.css({
            height: "".concat(p[0].scrollHeight, "px")
          });
          svg.css({
            transform: 'rotate(180deg)'
          });
        } else {
          $(this).removeClass(IS_ACTIVE);
          main.css({
            height: "0px"
          });
          svg.css({
            transform: 'rotate(0deg)'
          });
        }
      });
    });
  }
};
module.exports = sellPage;

},{}],49:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SellWatch = /*#__PURE__*/function () {
  function SellWatch() {
    _classCallCheck(this, SellWatch);
    this.form = document.querySelector('form#sell_my_watch');
    if (!this.form) {
      return;
    }
    this.sectionsArr = _toConsumableArray(document.querySelectorAll('[data-ask-section]'));
    this.progressBar = document.querySelector('.ask-page__progress-bar');
    this.currentStepElem = document.querySelector('[data-step-current]');
    this.countStepElem = document.querySelector('[data-step-count]');
    this.contentContainer = document.querySelector('.ask-page__quiz-content');
    this.adjustContainer = document.querySelector('.ask-page__quiz-adjust');
    this.focusedEl = undefined;
    this.watchBrand = {
      name: undefined
    };
    this.uploadInput = this.form.querySelector('input[type="file"]');
    this.regExp = {
      rolex: /\brolex\b/i,
      audemars: /\baudemars\b/i,
      richard: /\brichard\b/i,
      patek: /\bpatek\b/i,
      cartier: /\bcartier\b/i,
      breitling: /\bbreitling\b/i
    };
    this.locked = false;
    this.steps = this.sectionsArr.length;
    this.currentStep = 1;
    this.activeSection = this.sectionsArr[0];
    this.endReached = false;
    this.atTheStart = true;
    this.init();
  }

  /**
   * Getters
   */
  return _createClass(SellWatch, [{
    key: "getActiveSection",
    get: function get() {
      return this.activeSection;
    }
  }, {
    key: "getCurrentStep",
    get: function get() {
      return this.currentStep;
    }
  }, {
    key: "getFocusedEl",
    get: function get() {
      return this.focusedEl;
    }

    /**
     * Methods
     */
  }, {
    key: "toggleSectionStatus",
    value: function toggleSectionStatus(section, condition) {
      if (condition === false) {
        section.classList.remove(__VALID);
      } else {
        section.classList.add(__VALID);
      }
      var btn = _toConsumableArray(section.querySelectorAll('[data-sell-evt="next"]'));
      btn.forEach(function (btn) {
        return btn.disabled = !condition;
      });
    }
  }, {
    key: "validateSection",
    value: function validateSection(section) {
      section = this.getActiveSection;
      var requiredArr = _toConsumableArray(section.querySelectorAll('[required]:not([disabled])')),
        radioArr = _toConsumableArray(section.querySelectorAll('input[type="radio"]:not([disabled])')),
        checkboxArr = _toConsumableArray(section.querySelectorAll('input[type="checkbox"]:not([disabled])')),
        inputArr = _toConsumableArray(section.querySelectorAll('input:not([type="checkbox"]):not([type="radio"])')),
        selectArr = _toConsumableArray(section.querySelectorAll('select[required]')),
        phoneArr = _toConsumableArray(section.querySelectorAll('[data-validate="phone"]')),
        fileArr = _toConsumableArray(section.querySelectorAll('input[type="file"]'));
      var radioArrByName = Array.from(new Set(radioArr.map(function (radio) {
        return radio.name;
      })), function (name) {
        return radioArr.filter(function (radio) {
          return radio.name === name;
        });
      });
      if (requiredArr.some(function (input) {
        return !input.value;
      })) {
        this.toggleSectionStatus(section, false);
        return false;
      }
      for (var _i = 0, _radioArrByName = radioArrByName; _i < _radioArrByName.length; _i++) {
        var radioGroup = _radioArrByName[_i];
        if (radioGroup.every(function (radio) {
          return !radio.checked;
        })) {
          this.toggleSectionStatus(section, false);
          return false;
        }
      }
      if (checkboxArr.length && checkboxArr.every(function (checkbox) {
        return !checkbox.checked;
      })) {
        this.toggleSectionStatus(section, false);
        return false;
      }
      if (phoneArr.length) {
        var _iterator = _createForOfIteratorHelper(phoneArr),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var input = _step.value;
            var value = input.value;
            var valueDigits = value.replace(/\D/g, '').length;
            var regex = /^\+\d{1}\s\(\d{3}\)\s\d{3}\-\d{4}$/;
            if (!regex.test(value) && valueDigits < 11) {
              this.toggleSectionStatus(section, false);
              return false;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      var _iterator2 = _createForOfIteratorHelper(fileArr),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var fileInput = _step2.value;
          var files = fileInput.files;
          if (!files.length) {
            this.toggleSectionStatus(section, false);
            return false;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      this.toggleSectionStatus(section, true);
      return true;
    }
  }, {
    key: "arrangeModels",
    value: function arrangeModels(string) {
      var inputArr = _toConsumableArray(this.form.querySelectorAll('input[type="radio"][name="model"]')),
        groupInputArr = inputArr.filter(function (input) {
          return input.dataset.group;
        }),
        filteredArr = groupInputArr.filter(function (input) {
          return string.toLowerCase().includes(input.dataset.group);
        }),
        modelGrid = this.form.querySelector('[data-sell-grid="model"]'),
        modelInput = this.form.querySelector('input#watch_model'),
        modelInputParent = modelInput.closest('.survey-box__named-grid');
      inputArr.forEach(function (input) {
        return input.checked = false;
      });
      // inputArr.forEach(input => input.dispatchEvent(new Event('change')))
      modelInput.value = '';
      modelInput.dispatchEvent(new Event('input'));
      if (!filteredArr.length) {
        modelGrid.style.display = 'none';
        modelInputParent.style.display = 'flex';
        modelInput.disabled = false;
        inputArr.forEach(function (input) {
          input.disabled = true;
          input.checked = false;
          // input.dispatchEvent(new Event('change'))
        });
      } else {
        modelGrid.style.display = 'flex';
        modelInputParent.style.display = 'none';
        modelInput.disabled = true;
        inputArr.forEach(function (input) {
          var label = input.closest('label');
          input.disabled = false;
          input.checked = false;
          if (!filteredArr.includes(input) && input.value !== 'Other') {
            if (input.value) {
              label.style.display = 'none';
            }
          } else {
            label.style.display = 'block';
          }
          // input.dispatchEvent(new Event('change'))
        });
      }
    }

    /**
     * Utils
     */
  }, {
    key: "observeStepsElements",
    value: function observeStepsElements() {
      this.currentStepElem.innerHTML = this.currentStep;
    }
  }, {
    key: "observeBarElements",
    value: function observeBarElements() {
      var _this = this;
      var elements = this.progressBar.querySelectorAll('span');
      elements.forEach(function (element, index) {
        if (index < _this.currentStep) {
          element.classList.add(__ACTIVE);
        } else {
          element.classList.remove(__ACTIVE);
        }
      });
    }
  }, {
    key: "scrollToForm",
    value: function scrollToForm() {
      if (this.form) {
        var headerHeight = parseInt(window.getComputedStyle(document.querySelector('header')).getPropertyValue('height'));
        var boundTop = this.form.getBoundingClientRect().top;
        if (boundTop - headerHeight < -30) {
          var distance = window.scrollY + this.form.getBoundingClientRect().top - (headerHeight + 70);
          zenscroll.toY(distance);
        }
      }
    }
  }, {
    key: "dispatchFocusEvent",
    value: function dispatchFocusEvent(elem) {
      if (elem) {
        var tag = elem.tagName;
        switch (tag) {
          case 'INPUT' || 'TEXTAREA':
            var type = elem.type;
            if (type === 'radio' || type === 'checkbox') {
              elem.click();
            } else {
              if (type === 'file') {
                elem.click();
              } else {
                elem.focus();
              }
            }
            break;
          case 'SELECT':
            elem.focus();
            break;
          default:
            elem.dispatchEvent(new Event('focus'));
            break;
        }
      }
    }

    /**
     * Events
     */
  }, {
    key: "slide",
    value: function slide(section, activeSection, number) {
      var _this2 = this;
      var sectionIndex = this.sectionsArr.indexOf(section);
      var activeSectionIndex = this.sectionsArr.indexOf(activeSection);
      var fromTranslate = 'translateY(24px)';
      var toTranslate = 'translateY(-24px)';
      if (activeSectionIndex > sectionIndex) {
        fromTranslate = 'translateY(-24px)';
        toTranslate = 'translateY(24px)';
        var inputs = _toConsumableArray(activeSection.querySelectorAll('input'));
      }
      this.locked = true;
      activeSection.style.opacity = 0;
      activeSection.style.pointerEvents = 'none';
      activeSection.style.transform = toTranslate;
      section.style.opacity = 0;
      section.style.pointerEvents = 'none';
      section.style.transform = fromTranslate;
      setTimeout(function () {
        activeSection.style.display = 'none';
        activeSection.classList.remove(__ACTIVE);
        section.style.display = 'flex';
        section.classList.add(__ACTIVE);
        setTimeout(function () {
          section.style.opacity = 1;
          section.style.transform = 'translateY(0px)';
          section.style.pointerEvents = 'auto';
          _this2.locked = false;
          _this2.activeSection = section;
          _this2.currentStep = number;
          _this2.observeStepsElements();
          _this2.observeBarElements();
          if (section === _this2.sectionsArr[_this2.sectionsArr.length - 1]) {
            _this2.form.submit();
          }
        }, 30);
      }, getTransitionTime(activeSection));
    }
  }, {
    key: "finish",
    value: function finish() {
      var confetti = new PageConfetti();
      confetti.push();
    }
  }, {
    key: "go",
    value: function go(number) {
      if (!this.locked) {
        var section = this.sectionsArr[number - 1];
        var activeSection = this.getActiveSection;
        if (!section) {
          var error = number < 1 ? 'Section number cannot be less than 1' : 'Section number cannot be greater than ' + this.sectionsArr.length;
          throw new Error(error);
        }
        if (!activeSection) {
          throw new Error('No active section');
        }
        if (section !== activeSection) {
          this.slide(section, activeSection, number);
          this.scrollToForm();
          this.focusedEl = undefined;
        }
      }
    }

    /**
     * Bind Events
     */
  }, {
    key: "bindToggleStepsControls",
    value: function bindToggleStepsControls() {
      var _this3 = this;
      var _iterator3 = _createForOfIteratorHelper(this.sectionsArr),
        _step3;
      try {
        var _loop = function _loop() {
          var section = _step3.value;
          var inputs = _toConsumableArray(section.querySelectorAll('input, select'));
          inputs.forEach(function (input) {
            var isCheckboxOrRadio = input.type === 'checkbox' || input.type === 'radio' || input.type === 'file';
            if (isCheckboxOrRadio) {
              input.addEventListener('change', function (e) {
                _this3.validateSection(section);
              });
            } else {
              input.addEventListener('input', function (e) {
                _this3.validateSection(section);
              });
            }
          });
        };
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "bindDualSelect",
    value: function bindDualSelect() {
      var _this4 = this;
      var dualArr = _toConsumableArray(this.form.querySelectorAll('input[data-dual]'));
      var _iterator4 = _createForOfIteratorHelper(dualArr),
        _step4;
      try {
        var _loop2 = function _loop2() {
          var input = _step4.value;
          var name = input.name,
            dualName = input.dataset.dual,
            nameInputArr = _toConsumableArray(_this4.form.querySelectorAll("input[name=\"".concat(name, "\"]"))),
            holder = _this4.form.querySelector("div[data-dual=\"".concat(dualName, "\"]"));
          if (holder) {
            var select = holder.querySelector('select, input');
            if (select) {
              nameInputArr.forEach(function (nameInput) {
                nameInput.addEventListener('change', function () {
                  if (input.checked) {
                    select.disabled = false;
                    holder.style.display = 'flex';
                  } else {
                    select.disabled = true;
                    holder.style.display = 'none';
                  }
                });
              });
            }
          }
        };
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "bindBrandSelect",
    value: function bindBrandSelect() {
      var _this5 = this;
      var brandSelectArr = _toConsumableArray(this.form.querySelectorAll('*[name="brand"]'));
      var elsToName = _toConsumableArray(this.form.querySelectorAll('[data-sell-brand]'));
      var _iterator5 = _createForOfIteratorHelper(brandSelectArr),
        _step5;
      try {
        var _loop3 = function _loop3() {
          var input = _step5.value;
          input.addEventListener('change', function (e) {
            if (input.disabled) return;
            var value = input.value;
            if (value && value.toLowerCase() !== 'other') {
              _this5.watchBrand.name = value;
              elsToName.forEach(function (el) {
                return el.innerHTML = _this5.watchBrand.name;
              });
            } else {
              _this5.watchBrand.name = undefined;
              elsToName.forEach(function (el) {
                return el.innerHTML = 'your brand';
              });
            }

            // Setup models
            _this5.arrangeModels(value);
          });
        };
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          _loop3();
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "bindPhoneInput",
    value: function bindPhoneInput() {
      var inputs = _toConsumableArray(this.form.querySelectorAll('input[data-validate="phone"]'));
      var _iterator6 = _createForOfIteratorHelper(inputs),
        _step6;
      try {
        var _loop4 = function _loop4() {
          var input = _step6.value;
          var keyCode;
          function mask(event) {
            event.keyCode && (keyCode = event.keyCode);
            var pos = this.selectionStart;
            if (pos < 3) event.preventDefault();
            var matrix = "+1 (___) ___-____",
              i = 0,
              def = matrix.replace(/\D/g, ""),
              val = this.value.replace(/\D/g, ""),
              newValue = matrix.replace(/[_\d]/g, function (a) {
                return i < val.length ? val.charAt(i++) || def.charAt(i) : a;
              });
            i = newValue.indexOf("_");
            if (i != -1) {
              i < 5 && (i = 3);
              newValue = newValue.slice(0, i);
            }
            var reg = matrix.substr(0, this.value.length).replace(/_+/g, function (a) {
              return "\\d{1," + a.length + "}";
            }).replace(/[+()]/g, "\\$&");
            reg = new RegExp("^" + reg + "$");
            if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = newValue;
            if (event.type == "blur" && this.value.length < 5) this.value = "";
          }
          input.addEventListener("input", mask, false);
          input.addEventListener("focus", mask, false);
          input.addEventListener("blur", mask, false);
          input.addEventListener("keydown", mask, false);
          input.addEventListener('mouseup', function (event) {
            event.preventDefault();
            if (input.value.length < 4) {
              input.setSelectionRange(4, 4);
            } else {
              input.setSelectionRange(input.value.length, input.value.length);
            }
          });
        };
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop4();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  }, {
    key: "bindCurrencyInput",
    value: function bindCurrencyInput() {
      var inputArr = _toConsumableArray(this.form.querySelectorAll('input[data-format="currency"]'));
      var _iterator7 = _createForOfIteratorHelper(inputArr),
        _step7;
      try {
        var _loop5 = function _loop5() {
          var input = _step7.value;
          input.addEventListener('blur', function () {
            if (input.value) {
              input.value = formatAsCurrency(input.value);
            }
          });
        };
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          _loop5();
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "bindHandlers",
    value: function bindHandlers() {
      var _this6 = this;
      var nextArr = _toConsumableArray(this.form.querySelectorAll('[data-sell-evt="next"]'));
      var backArr = _toConsumableArray(this.form.querySelectorAll('[data-sell-evt="back"]'));
      var _iterator8 = _createForOfIteratorHelper(nextArr),
        _step8;
      try {
        var _loop6 = function _loop6() {
          var btn = _step8.value;
          btn.addEventListener('click', function (e) {
            e.preventDefault();
            if (!btn.disabled) {
              _this6.go(_this6.getCurrentStep + 1);
            }
          });
        };
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          _loop6();
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      var _iterator9 = _createForOfIteratorHelper(backArr),
        _step9;
      try {
        var _loop7 = function _loop7() {
          var btn = _step9.value;
          btn.addEventListener('click', function (e) {
            e.preventDefault();
            if (!btn.disabled) {
              _this6.go(_this6.getCurrentStep - 1);
            }
          });
        };
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          _loop7();
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }
  }, {
    key: "bindSetFocusedElement",
    value: function bindSetFocusedElement() {
      var _this7 = this;
      var inputs = _toConsumableArray(this.form.querySelectorAll('input, select, textarea'));
      var _iterator10 = _createForOfIteratorHelper(inputs),
        _step10;
      try {
        var _loop8 = function _loop8() {
          var input = _step10.value;
          input.addEventListener('change', function () {
            _this7.focusedEl = input;
          });
          input.addEventListener('focus', function () {
            _this7.focusedEl = input;
          });
        };
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          _loop8();
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
    }
  }, {
    key: "bindKeyEvents",
    value: function bindKeyEvents() {
      var _this8 = this;
      document.addEventListener('keydown', function (e) {
        if (_this8.locked) return;
        if (!_this8.getActiveSection) return;
        var section = _this8.getActiveSection;
        var key = e.key;
        var keyIsTab = key === 'Tab';
        var keyIsEnter = key === 'Enter';
        var isBackspace = key === 'Backspace';
        if (isBackspace) {
          if (!document.activeElement || !document.activeElement.contains(section)) return;
          var btn = section.querySelector('[data-sell-evt="back"]');
          if (btn && !btn.disabled) {
            e.preventDefault();
            btn.click();
          }
        }
        if (keyIsEnter) {
          var _btn = section.querySelector('[data-sell-evt="next"]');
          if (_btn) {
            e.preventDefault();
            if (!_btn.disabled) {
              _btn.click();
            }
          }
        }
        if (keyIsTab) {
          e.preventDefault();
          var focusedEl = _this8.getFocusedEl;
          var inputs = _toConsumableArray(section.querySelectorAll('input, select, textarea')).filter(function (input) {
            if (!input.disabled) {
              var selectBox = input.parentNode.closest('.survey-select');
              if (selectBox) {
                if (selectBox.style.display !== 'none') {
                  return input;
                }
              } else {
                return input;
              }
            }
          }).sort(function (a, b) {
            return a.compareDocumentPosition(b) - 2;
          });
          var elem;
          if (!focusedEl) {
            elem = inputs[0];
          } else {
            var elemWithinSection = inputs.includes(focusedEl);
            if (elemWithinSection) {
              var nextElem = inputs[inputs.indexOf(focusedEl) + 1];
              if (nextElem) {
                elem = nextElem;
              } else {
                elem = inputs[0];
              }
            } else {
              elem = inputs[0];
            }
          }
          _this8.dispatchFocusEvent(elem);
        }
      });
    }
  }, {
    key: "bindSubmit",
    value: function bindSubmit() {
      $(this.form).on('submit', function (e) {
        e.preventDefault();
        var form = $(this);
        var formData = new FormData(this);
        var actionUrl = form.attr('action');
        $.ajax({
          url: actionUrl,
          type: 'POST',
          data: formData,
          cache: false,
          contentType: false,
          processData: false,
          success: function success(data) {
            var r = $.parseJSON(data);
            if (!r.error) {
              this.finish();
            } else {
              //show error message 
              alert(r.msg);
            }
          }
        });
      });
    }

    /**
     * Setup
     */
  }, {
    key: "setupBar",
    value: function setupBar() {
      if (this.progressBar) {
        var html = '';
        this.sectionsArr.forEach(function (section, index) {
          html += "<span data-bar-id=\"".concat(index, "\"></span>");
        });
        this.progressBar.innerHTML = html;
      }
      if (this.currentStepElem && this.countStepElem) {
        this.currentStepElem.innerHTML = 1;
        this.countStepElem.innerHTML = this.sectionsArr.length;
      }
    }
  }, {
    key: "setup",
    value: function setup() {
      this.setupBar();
      this.go(1);
      this.observeStepsElements();
      this.observeBarElements();
      this.bindHandlers();
    }

    /**
     * Initialize
     */
  }, {
    key: "init",
    value: function init() {
      if (this.form) {
        this.bindDualSelect();
        this.bindToggleStepsControls();
        this.bindBrandSelect();
        this.bindPhoneInput();
        this.bindCurrencyInput();
        this.bindSetFocusedElement();
        this.bindKeyEvents();
        this.bindSubmit();
        this.setup();
      }
    }
  }]);
}();
module.exports = SellWatch;

},{}],50:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var tagPreview = {
  init: function init() {
    try {
      if (document.querySelector('.main_print-tag') !== null) {
        this.resetOutput();
        this.attachInput();
        this.attachImageUploader();
        this.attachPreviewControls();
      }
    } catch (_unused) {
      console.log('TAG PREVIEW ERR');
    }
  },
  resetOutput: function resetOutput() {
    var outputHolder = document.querySelector('.tag-preview__output'),
      outputImage = document.querySelector('.tag-preview__pic');
    outputHolder.innerHTML = '';
    outputHolder.classList.add(IS_EMPTY);
    outputImage.classList.add(IS_EMPTY);
  },
  attachInput: function attachInput() {
    var outputObj = new Object(),
      inputs = _toConsumableArray(document.querySelectorAll('input[type="text"].formpage__input')),
      outputHolder = document.querySelector('.tag-preview__output'),
      updateOutput = function updateOutput() {
        var filled = 0,
          html = "";
        for (var key in outputObj) {
          if (outputObj.hasOwnProperty(key)) {
            var obj = outputObj[key];
            if (obj.value.length !== 0) {
              ++filled;
              html += "\n                <div id=\"".concat(obj.id, "\" class=\"tag-output-row\">\n                  <span>").concat(obj.title, "</span>\n                  <span>").concat(obj.value, "</span>\n                </div>\n                ");
            }
          }
        }
        if (filled !== 0) {
          outputHolder.innerHTML = html;
          outputHolder.classList.remove(IS_EMPTY);
        } else {
          outputHolder.innerHTML = '';
          outputHolder.classList.add(IS_EMPTY);
        }
      };
    inputs.forEach(function (input, index) {
      outputObj[index] = {
        id: input.id,
        value: '',
        title: input.closest('.formpage__input-box').querySelector('label').innerHTML
      };
      input.oninput = function () {
        outputObj[index].value = input.value || '';
        updateOutput();
      };
      input.onkeydown = function (e) {
        var isEnter = e.key === 'Enter' || e.keyCode === 13,
          isBackscape = e.key === 'Backspace' || e.key === 'Delete',
          isEsc = e.key === 'Escape' || e.key === 'Esc',
          isUp = e.key === 'ArrowUp',
          isDown = e.key === 'ArrowDown',
          next = inputs[index + 1],
          prev = inputs[index - 1];
        if (isEnter || isDown) {
          if (next !== undefined) {
            next.focus();
          }
        }
        if (isBackscape) {
          if (input.value.length == 0 && prev !== undefined) {
            prev.focus();
          }
        }
        if (isEsc) {
          e.preventDefault();
          input.blur();
        }
        if (isUp) {
          if (prev !== undefined) {
            prev.focus();
          }
        }
      };
      ['focus', 'blur'].forEach(function (ev) {
        if (window.innerWidth <= 479) {
          var label = input.closest('.formpage__input-box').querySelector('label');
          input.addEventListener(ev, function () {
            switch (ev) {
              case 'focus':
                label.style.opacity = 0;
                break;
              case 'blur':
                if (input.value.length !== 0) {
                  label.style.opacity = 0;
                } else {
                  label.style.opacity = 0.5;
                }
                break;
            }
          });
        }
      });
    });
  },
  attachImageUploader: function attachImageUploader() {
    var uploadLabel = document.querySelector('#printTag_uploader'),
      uploadInput = document.querySelector('#image_upload_tag'),
      imgPreview = document.querySelector('.tag-preview__pic');

    // DRAG & DROP
    if (uploadLabel !== null) {
      // PROCESS IMAGE
      var processImage = function processImage(file) {
        if (file) {
          var reader = new FileReader();
          reader.onload = function (e) {
            imgPreview.classList.remove(IS_EMPTY);
            imgPreview.style.backgroundImage = "url(".concat(e.target.result, ")");
          };
          reader.readAsDataURL(file);
        }
      };
      uploadLabel.ondragover = function (evt) {
        evt.preventDefault();
        uploadLabel.classList.add(IS_ACTIVE);
      };
      uploadLabel.ondragleave = function (evt) {
        evt.preventDefault();
        uploadLabel.classList.remove(IS_ACTIVE);
      };
      uploadLabel.ondrop = function (evt) {
        evt.preventDefault();
        uploadLabel.classList.remove(IS_ACTIVE);
        $('#image_upload_tag').prop('files', evt.dataTransfer.files);
        var files = _toConsumableArray(evt.dataTransfer.items),
          file = files.find(function (item) {
            if (item.kind === 'file') {
              return item;
            }
          });
        processImage(file.getAsFile());
      };

      // MANUAL
      if (uploadInput !== null) {
        uploadInput.onchange = function (evt) {
          var file = _toConsumableArray(evt.target.files)[0];
          processImage(file);
          uploadInput.value = '';
        };
      }
    }
  },
  attachPreviewControls: function attachPreviewControls() {
    var modal = document.querySelector('.tag-preview-modal');
    if (modal !== null) {
      var holder = document.querySelector('.tag-preview-modal__wrapper');
      var toggle = function toggle() {
        var displayed = window.getComputedStyle(modal).getPropertyValue('display') !== 'none';
        if (displayed) {
          unlockScroll();
          var preview = holder.querySelector('.formpage__tag-preview');
          if (preview !== null) {
            preview.remove();
          }
          modal.style.display = 'none';
        } else {
          lockScroll();
          var _preview = document.querySelector('.formpage__tag-preview');
          holder.appendChild(_preview.cloneNode(true));
          modal.style.display = 'block';
        }
      };
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (target.getAttribute('data-evt') == 'togglePrintTagPreview') {
          toggle();
        }
      });
    }
  }
};
module.exports = tagPreview;

},{}],51:[function(require,module,exports){
"use strict";

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var PriceModal = require("./dynamic/price-modal");
function toArray(value) {
  return Array.isArray(value) ? value : [value];
}
function lockScroll() {
  setTimeout(function () {
    if (!document.body.hasAttribute("ib-scroll-lock")) {
      var o = window.pageYOffset || document.documentElement.scrollTop;
      document.body.setAttribute("ib-scroll-lock", o), document.body.style.overflow = "hidden", document.body.style.position = "fixed", document.body.style.top = "-" + o + "px", document.body.style.left = "0", document.body.style.width = "100%";
    }
  }, 1);
}
function unlockScroll() {
  if (document.body.hasAttribute("ib-scroll-lock")) {
    var o = document.body.getAttribute("ib-scroll-lock");
    document.body.removeAttribute("ib-scroll-lock"), document.body.style.overflow = "", document.body.style.position = "", document.body.style.top = "", document.body.style.left = "", document.body.style.width = "", window.scroll(0, o);
  }
}
function elemDisplayed(elem) {
  if (!elem) return false;
  var target = elem instanceof jQuery ? elem.get(0) : elem;
  return window.getComputedStyle(target).getPropertyValue('display') !== 'none';
}
function createElem(tagName, options) {
  var className = options.className,
    id = options.id,
    innerHTML = options.innerHTML,
    style = options.style,
    attributes = options.attributes,
    toAppend = options.toAppend;
  var elem = document.createElement(tagName);
  if (className) elem.className = className;
  if (id) elem.id = id;
  if (innerHTML) elem.innerHTML = innerHTML;
  if (style) {
    for (var key in options.style) {
      elem.style[key] = options.style[key];
    }
  }
  if (attributes) {
    for (var _key in options.attributes) {
      elem.setAttribute(_key, options.attributes[_key]);
    }
  }
  if (toAppend) {
    var _iterator = _createForOfIteratorHelper(toArray(toAppend)),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var child = _step.value;
        elem.appendChild(child);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return elem;
}
function removeClasses(elem) {
  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {
    classes[_key2 - 1] = arguments[_key2];
  }
  for (var _i = 0, _classes = classes; _i < _classes.length; _i++) {
    var cls = _classes[_i];
    elem.classList.remove(cls);
  }
}
function addClasses(elem) {
  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
    classes[_key3 - 1] = arguments[_key3];
  }
  for (var _i2 = 0, _classes2 = classes; _i2 < _classes2.length; _i2++) {
    var cls = _classes2[_i2];
    elem.classList.add(cls);
  }
}
function formatAsCurrency(string) {
  string = typeof string === 'string' ? string : string.toString();
  var number = parseFloat(string.replace(/,/g, ''));
  var parts = number.toFixed(2).split('.');
  var digits = parts[0];
  var decimal = parts[1];
  var integer = digits.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  return "".concat(integer, ".").concat(decimal);
}
function getEvtDOM(attr) {
  return $("[data-evt=\"".concat(attr, "\"]"));
}
function getTransitionTime(elem) {
  var el = elem instanceof jQuery ? elem[0] : elem;
  return parseFloat(window.getComputedStyle(el).transitionDuration) * 1000;
}
function getOrdinalTxt(n) {
  return n % 10 == 1 && n % 100 != 11 ? 'st' : n % 10 == 2 && n % 100 != 12 ? 'nd' : n % 10 == 3 && n % 100 != 13 ? 'rd' : 'th';
}
function getZIndex(elem) {
  return parseInt(window.getComputedStyle(elem).getPropertyValue('z-index'));
}
function toggleAdminBar() {
  var bar = document.querySelector('.iba-toolbar');
  if (bar && bar !== null) {
    if (bar.classList.contains(IS_MINIMIZED)) {
      bar.classList.remove(IS_MINIMIZED);
    } else {
      bar.classList.add(IS_MINIMIZED);
    }
  }
}
function isEmail(email) {
  var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
  return regex.test(email);
}
function saveCartEmail() {
  var email = $('#cart_email').val();
  if (email != '' && isEmail(email)) {
    $.ajax({
      type: "POST",
      url: '/json/cart-email',
      data: {
        email_address: email
      },
      success: function success(data) {
        klaviyo.identify({
          '$email': email
        });
        mailModal.close();
        showMessage('success', 'Thank you', 'Item was added to your cart.');
        //$('.cart_trigger').click();
      }
    });
  } else {
    showMessage('error', 'Error', 'Please enter a valid email address !');
  }
}
function showMessage(type, title, msg) {
  var alert_type = type === 'success' ? pageAlerts.classes.info : pageAlerts.classes.error;
  pageAlerts.showAlert(alert_type, title, msg);
}
function debounce(func, wait) {
  var timeout;
  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
      args[_key4] = arguments[_key4];
    }
    var later = function later() {
      clearTimeout(timeout);
      func.apply(void 0, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}
function showSkeleton() {
  document.body.classList.add('--skeleton');
}
function hideSkeleton() {
  document.body.classList.remove('--skeleton');
}
function openPriceModal(target, id) {
  var card = target.closest('.product-card');
  if (!card) return;
  window.signPriceModal = new window.priceModal(card, id);
}

// function openPriceModal(e) {

//   const card = e.target.closest('.product-card')
//   const id = card.dataset.id

//   if (card && id) {
//     window.priceModal = new PriceModal(card, id)
//   }
// }

/**
 * Countdown timer
 * Example of usage : 
 *    createTimer({
      daySelector: '#sale_timer_days',
      hourSelector: '#sale_timer_hours',
      minuteSelector: '#sale_timer_minutes',
      secondSelector: '#sale_timer_seconds',
      date: '2024-11-30 10:00:00'
    })
 */

function createTimer() {
  var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var daySelector = settings.daySelector,
    hourSelector = settings.hourSelector,
    minuteSelector = settings.minuteSelector,
    secondSelector = settings.secondSelector,
    date = settings.date;
  var dayElem = daySelector ? _toConsumableArray(document.querySelectorAll(daySelector)) : [];
  var hourElem = hourSelector ? _toConsumableArray(document.querySelectorAll(hourSelector)) : [];
  var minuteElem = minuteSelector ? _toConsumableArray(document.querySelectorAll(minuteSelector)) : [];
  var secondElem = secondSelector ? _toConsumableArray(document.querySelectorAll(secondSelector)) : [];

  // Предположим, что date = '2025-01-12 16:00:00' (без смещения)
  // или вообще любой формат, который корректно парсится new Date(...)
  var endDate = new Date(date);
  var timer;
  if (!dayElem.length && !hourElem.length && !minuteElem.length && !secondElem.length) {
    return;
  }
  if (isNaN(endDate)) {
    console.error('Incorrect date format passed to createTimer.');
    return;
  }

  // Функция, которая возвращает "сейчас в Атланте" как объект Date
  function getAtlantaTime() {
    // Получаем строку локального времени в формате "MM/DD/YYYY, HH:MM:SS" (или близком), но для таймзоны America/New_York
    var atlantaTimeString = new Date().toLocaleString('en-US', {
      timeZone: 'America/New_York'
    });
    // Превращаем строку обратно в Date
    return new Date(atlantaTimeString);
  }

  // Для красивого отображения (добавляем ведущий 0)
  var pad = function pad(num) {
    return num.toString().padStart(2, '0');
  };
  timer = setInterval(updateTimer, 1000);
  function updateTimer() {
    var nowAtlanta = getAtlantaTime().getTime(); // Текущее время в мс (Атланта)
    var diff = endDate - nowAtlanta;
    if (diff <= 0) {
      diff = 0;
      clearInterval(timer);
    }
    var days = Math.floor(diff / (1000 * 60 * 60 * 24));
    var hours = Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
    var minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));
    var seconds = Math.floor(diff % (1000 * 60) / 1000);
    var _iterator2 = _createForOfIteratorHelper(dayElem),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var elem = _step2.value;
        elem.textContent = pad(days);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    var _iterator3 = _createForOfIteratorHelper(hourElem),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _elem = _step3.value;
        _elem.textContent = pad(hours);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    var _iterator4 = _createForOfIteratorHelper(minuteElem),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _elem2 = _step4.value;
        _elem2.textContent = pad(minutes);
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    var _iterator5 = _createForOfIteratorHelper(secondElem),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var _elem3 = _step5.value;
        _elem3.textContent = pad(seconds);
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }
}
function getFakeProduct() {
  return {
    title: "Crosses Lightning Bolt Diamond Pendant 14k Solid Gold .15ctw",
    image: "https://cdn.prod.website-files.com/6631ecc8ac2b58c38761ff4a/67148792fc8b5f4949e7a59e_ap5.webp",
    price: "$3,990",
    show_discount: true,
    original_price: "$4,990",
    category: "Crosses"
  };
}
function initLazyLoadForProductCards() {
  var MAX_RETRIES = 2;
  var RETRY_DELAY = 500;
  var observer = new IntersectionObserver(function (entries, observerInstance) {
    entries.forEach(function (entry) {
      if (entry.isIntersecting) {
        var img = entry.target;
        checkAndLoadImage(img, observerInstance, 1);
      }
    });
  }, {
    rootMargin: '100px 0px',
    threshold: 0
  });
  var images = document.querySelectorAll('.product-card__img[data-src]');
  images.forEach(function (img) {
    return observer.observe(img);
  });
  function checkAndLoadImage(img, observerInstance, attempt) {
    var dataSrc = img.dataset.src;
    if (isValidSrc(dataSrc)) {
      loadImage(img, observerInstance);
      return;
    }
    if (attempt >= MAX_RETRIES) {
      handleBrokenImage(img);
      observerInstance.unobserve(img);
      return;
    }
    setTimeout(function () {
      checkAndLoadImage(img, observerInstance, attempt + 1);
    }, RETRY_DELAY * attempt);
  }
  function isValidSrc(src) {
    return src && src !== 'undefined' && src.trim() !== '';
  }
  function loadImage(img, observerInstance) {
    img.src = img.dataset.src;
    img.removeAttribute('data-src');
    img.addEventListener('load', function () {
      var parent = img.closest('.product-card__media');
      parent === null || parent === void 0 || parent.classList.add('--loaded');
      observerInstance.unobserve(img);
    }, {
      once: true
    });
    img.addEventListener('error', function () {
      handleBrokenImage(img);
      observerInstance.unobserve(img);
    }, {
      once: true
    });
  }
  function handleBrokenImage(img) {
    var parent = img.closest('.product-card__media');
    parent === null || parent === void 0 || parent.classList.add('--empty');
    console.warn('Image failed to load:', img);
  }
}
module.exports = {
  toArray: toArray,
  lockScroll: lockScroll,
  unlockScroll: unlockScroll,
  elemDisplayed: elemDisplayed,
  createElem: createElem,
  removeClasses: removeClasses,
  addClasses: addClasses,
  formatAsCurrency: formatAsCurrency,
  getEvtDOM: getEvtDOM,
  getTransitionTime: getTransitionTime,
  getOrdinalTxt: getOrdinalTxt,
  getZIndex: getZIndex,
  toggleAdminBar: toggleAdminBar,
  isEmail: isEmail,
  saveCartEmail: saveCartEmail,
  showMessage: showMessage,
  debounce: debounce,
  showSkeleton: showSkeleton,
  hideSkeleton: hideSkeleton,
  openPriceModal: openPriceModal,
  createTimer: createTimer,
  getFakeProduct: getFakeProduct,
  initLazyLoadForProductCards: initLazyLoadForProductCards
};

},{"./dynamic/price-modal":15}],52:[function(require,module,exports){
"use strict";

var variables = {
  UPLOADED_BLOG_IMG: null,
  alertTimer: null,
  sirvTimer: null
};
module.exports = variables;

},{}],53:[function(require,module,exports){
(function (global){(function (){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
!function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = e(require("jquery")) : "function" == typeof define && define.amd ? define(["jquery"], e) : (t = t || self).parsley = e(t.jQuery);
}(void 0, function (h) {
  "use strict";

  function n(t) {
    return (n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : _typeof(t);
    })(t);
  }
  function l() {
    return (l = Object.assign || function (t) {
      for (var e = 1; e < arguments.length; e++) {
        var i = arguments[e];
        for (var r in i) Object.prototype.hasOwnProperty.call(i, r) && (t[r] = i[r]);
      }
      return t;
    }).apply(this, arguments);
  }
  function o(t, e) {
    return function (t) {
      if (Array.isArray(t)) return t;
    }(t) || function (t, e) {
      if (!(Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t))) return;
      var i = [],
        r = !0,
        n = !1,
        s = void 0;
      try {
        for (var a, o = t[Symbol.iterator](); !(r = (a = o.next()).done) && (i.push(a.value), !e || i.length !== e); r = !0);
      } catch (t) {
        n = !0, s = t;
      } finally {
        try {
          r || null == o["return"] || o["return"]();
        } finally {
          if (n) throw s;
        }
      }
      return i;
    }(t, e) || function () {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }();
  }
  function u(t) {
    return function (t) {
      if (Array.isArray(t)) {
        for (var e = 0, i = new Array(t.length); e < t.length; e++) i[e] = t[e];
        return i;
      }
    }(t) || function (t) {
      if (Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t)) return Array.from(t);
    }(t) || function () {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }();
  }
  var t = 1,
    e = {},
    d = {
      attr: function attr(t, e, i) {
        var r,
          n,
          s,
          a = new RegExp("^" + e, "i");
        if (void 0 === i) i = {};else for (r in i) i.hasOwnProperty(r) && delete i[r];
        if (!t) return i;
        for (r = (s = t.attributes).length; r--;) (n = s[r]) && n.specified && a.test(n.name) && (i[this.camelize(n.name.slice(e.length))] = this.deserializeValue(n.value));
        return i;
      },
      checkAttr: function checkAttr(t, e, i) {
        return t.hasAttribute(e + i);
      },
      setAttr: function setAttr(t, e, i, r) {
        t.setAttribute(this.dasherize(e + i), String(r));
      },
      getType: function getType(t) {
        return t.getAttribute("type") || "text";
      },
      generateID: function generateID() {
        return "" + t++;
      },
      deserializeValue: function deserializeValue(e) {
        var t;
        try {
          return e ? "true" == e || "false" != e && ("null" == e ? null : isNaN(t = Number(e)) ? /^[\[\{]/.test(e) ? JSON.parse(e) : e : t) : e;
        } catch (t) {
          return e;
        }
      },
      camelize: function camelize(t) {
        return t.replace(/-+(.)?/g, function (t, e) {
          return e ? e.toUpperCase() : "";
        });
      },
      dasherize: function dasherize(t) {
        return t.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/_/g, "-").toLowerCase();
      },
      warn: function warn() {
        var t;
        window.console && "function" == typeof window.console.warn && (t = window.console).warn.apply(t, arguments);
      },
      warnOnce: function warnOnce(t) {
        e[t] || (e[t] = !0, this.warn.apply(this, arguments));
      },
      _resetWarnings: function _resetWarnings() {
        e = {};
      },
      trimString: function trimString(t) {
        return t.replace(/^\s+|\s+$/g, "");
      },
      parse: {
        date: function date(t) {
          var e = t.match(/^(\d{4,})-(\d\d)-(\d\d)$/);
          if (!e) return null;
          var i = o(e.map(function (t) {
              return parseInt(t, 10);
            }), 4),
            r = (i[0], i[1]),
            n = i[2],
            s = i[3],
            a = new Date(r, n - 1, s);
          return a.getFullYear() !== r || a.getMonth() + 1 !== n || a.getDate() !== s ? null : a;
        },
        string: function string(t) {
          return t;
        },
        integer: function integer(t) {
          return isNaN(t) ? null : parseInt(t, 10);
        },
        number: function number(t) {
          if (isNaN(t)) throw null;
          return parseFloat(t);
        },
        "boolean": function boolean(t) {
          return !/^\s*false\s*$/i.test(t);
        },
        object: function object(t) {
          return d.deserializeValue(t);
        },
        regexp: function regexp(t) {
          var e = "";
          return t = /^\/.*\/(?:[gimy]*)$/.test(t) ? (e = t.replace(/.*\/([gimy]*)$/, "$1"), t.replace(new RegExp("^/(.*?)/" + e + "$"), "$1")) : "^" + t + "$", new RegExp(t, e);
        }
      },
      parseRequirement: function parseRequirement(t, e) {
        var i = this.parse[t || "string"];
        if (!i) throw 'Unknown requirement specification: "' + t + '"';
        var r = i(e);
        if (null === r) throw "Requirement is not a ".concat(t, ': "').concat(e, '"');
        return r;
      },
      namespaceEvents: function namespaceEvents(t, e) {
        return (t = this.trimString(t || "").split(/\s+/))[0] ? h.map(t, function (t) {
          return "".concat(t, ".").concat(e);
        }).join(" ") : "";
      },
      difference: function difference(t, i) {
        var r = [];
        return h.each(t, function (t, e) {
          -1 == i.indexOf(e) && r.push(e);
        }), r;
      },
      all: function all(t) {
        return h.when.apply(h, u(t).concat([42, 42]));
      },
      objectCreate: Object.create || function (t) {
        if (1 < arguments.length) throw Error("Second argument not supported");
        if ("object" != n(t)) throw TypeError("Argument must be an object");
        i.prototype = t;
        var e = new i();
        return i.prototype = null, e;
      },
      _SubmitSelector: 'input[type="submit"], button:submit'
    };
  function i() {}
  function r() {
    this.__id__ = d.generateID();
  }
  var s = {
    namespace: "data-parsley-",
    inputs: "input, textarea, select",
    excluded: "input[type=button], input[type=submit], input[type=reset], input[type=hidden]",
    priorityEnabled: !0,
    multiple: null,
    group: null,
    uiEnabled: !0,
    validationThreshold: 3,
    focus: "first",
    trigger: !1,
    triggerAfterFailure: "input",
    errorClass: "parsley-error",
    successClass: "parsley-success",
    classHandler: function classHandler() {},
    errorsContainer: function errorsContainer() {},
    errorsWrapper: '<ul class="parsley-errors-list"></ul>',
    errorTemplate: "<li></li>"
  };
  r.prototype = {
    asyncSupport: !0,
    _pipeAccordingToValidationResult: function _pipeAccordingToValidationResult() {
      function t() {
        var t = h.Deferred();
        return !0 !== e.validationResult && t.reject(), t.resolve().promise();
      }
      var e = this;
      return [t, t];
    },
    actualizeOptions: function actualizeOptions() {
      return d.attr(this.element, this.options.namespace, this.domOptions), this.parent && this.parent.actualizeOptions && this.parent.actualizeOptions(), this;
    },
    _resetOptions: function _resetOptions(t) {
      for (var e in this.domOptions = d.objectCreate(this.parent.options), this.options = d.objectCreate(this.domOptions), t) t.hasOwnProperty(e) && (this.options[e] = t[e]);
      this.actualizeOptions();
    },
    _listeners: null,
    on: function on(t, e) {
      return this._listeners = this._listeners || {}, (this._listeners[t] = this._listeners[t] || []).push(e), this;
    },
    subscribe: function subscribe(t, e) {
      h.listenTo(this, t.toLowerCase(), e);
    },
    off: function off(t, e) {
      var i = this._listeners && this._listeners[t];
      if (i) if (e) for (var r = i.length; r--;) i[r] === e && i.splice(r, 1);else delete this._listeners[t];
      return this;
    },
    unsubscribe: function unsubscribe(t) {
      h.unsubscribeTo(this, t.toLowerCase());
    },
    trigger: function trigger(t, e, i) {
      e = e || this;
      var r,
        n = this._listeners && this._listeners[t];
      if (n) for (var s = n.length; s--;) if (!1 === (r = n[s].call(e, e, i))) return r;
      return !this.parent || this.parent.trigger(t, e, i);
    },
    asyncIsValid: function asyncIsValid(t, e) {
      return d.warnOnce("asyncIsValid is deprecated; please use whenValid instead"), this.whenValid({
        group: t,
        force: e
      });
    },
    _findRelated: function _findRelated() {
      return this.options.multiple ? h(this.parent.element.querySelectorAll("[".concat(this.options.namespace, 'multiple="').concat(this.options.multiple, '"]'))) : this.$element;
    }
  };
  function c(t) {
    h.extend(!0, this, t);
  }
  c.prototype = {
    validate: function validate(t, e) {
      if (this.fn) return 3 < arguments.length && (e = [].slice.call(arguments, 1, -1)), this.fn(t, e);
      if (Array.isArray(t)) {
        if (!this.validateMultiple) throw "Validator `" + this.name + "` does not handle multiple values";
        return this.validateMultiple.apply(this, arguments);
      }
      var i = arguments[arguments.length - 1];
      if (this.validateDate && i._isDateInput()) return arguments[0] = d.parse.date(arguments[0]), null !== arguments[0] && this.validateDate.apply(this, arguments);
      if (this.validateNumber) return !t || !isNaN(t) && (arguments[0] = parseFloat(arguments[0]), this.validateNumber.apply(this, arguments));
      if (this.validateString) return this.validateString.apply(this, arguments);
      throw "Validator `" + this.name + "` only handles multiple values";
    },
    parseRequirements: function parseRequirements(t, e) {
      if ("string" != typeof t) return Array.isArray(t) ? t : [t];
      var i = this.requirementType;
      if (Array.isArray(i)) {
        for (var r = function (t, e) {
            var i = t.match(/^\s*\[(.*)\]\s*$/);
            if (!i) throw 'Requirement is not an array: "' + t + '"';
            var r = i[1].split(",").map(d.trimString);
            if (r.length !== e) throw "Requirement has " + r.length + " values when " + e + " are needed";
            return r;
          }(t, i.length), n = 0; n < r.length; n++) r[n] = d.parseRequirement(i[n], r[n]);
        return r;
      }
      return h.isPlainObject(i) ? function (t, e, i) {
        var r = null,
          n = {};
        for (var s in t) if (s) {
          var a = i(s);
          "string" == typeof a && (a = d.parseRequirement(t[s], a)), n[s] = a;
        } else r = d.parseRequirement(t[s], e);
        return [r, n];
      }(i, t, e) : [d.parseRequirement(i, t)];
    },
    requirementType: "string",
    priority: 2
  };
  function a(t, e) {
    this.__class__ = "ValidatorRegistry", this.locale = "en", this.init(t || {}, e || {});
  }
  var p = {
    email: /^((([a-zA-Z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-zA-Z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))$/,
    number: /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,
    integer: /^-?\d+$/,
    digits: /^\d+$/,
    alphanum: /^\w+$/i,
    date: {
      test: function test(t) {
        return null !== d.parse.date(t);
      }
    },
    url: new RegExp("^(?:(?:https?|ftp)://)?(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:/\\S*)?$")
  };
  p.range = p.number;
  function f(t) {
    var e = ("" + t).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    return e ? Math.max(0, (e[1] ? e[1].length : 0) - (e[2] ? +e[2] : 0)) : 0;
  }
  function m(s, a) {
    return function (t) {
      for (var e = arguments.length, i = new Array(1 < e ? e - 1 : 0), r = 1; r < e; r++) i[r - 1] = arguments[r];
      return i.pop(), a.apply(void 0, [t].concat(u((n = s, i.map(d.parse[n])))));
      var n;
    };
  }
  function g(t) {
    return {
      validateDate: m("date", t),
      validateNumber: m("number", t),
      requirementType: t.length <= 2 ? "string" : ["string", "string"],
      priority: 30
    };
  }
  a.prototype = {
    init: function init(t, e) {
      for (var i in this.catalog = e, this.validators = l({}, this.validators), t) this.addValidator(i, t[i].fn, t[i].priority);
      window.Parsley.trigger("parsley:validator:init");
    },
    setLocale: function setLocale(t) {
      if (void 0 === this.catalog[t]) throw new Error(t + " is not available in the catalog");
      return this.locale = t, this;
    },
    addCatalog: function addCatalog(t, e, i) {
      return "object" === n(e) && (this.catalog[t] = e), !0 === i ? this.setLocale(t) : this;
    },
    addMessage: function addMessage(t, e, i) {
      return void 0 === this.catalog[t] && (this.catalog[t] = {}), this.catalog[t][e] = i, this;
    },
    addMessages: function addMessages(t, e) {
      for (var i in e) this.addMessage(t, i, e[i]);
      return this;
    },
    addValidator: function addValidator(t, e, i) {
      if (this.validators[t]) d.warn('Validator "' + t + '" is already defined.');else if (s.hasOwnProperty(t)) return void d.warn('"' + t + '" is a restricted keyword and is not a valid validator name.');
      return this._setValidator.apply(this, arguments);
    },
    hasValidator: function hasValidator(t) {
      return !!this.validators[t];
    },
    updateValidator: function updateValidator(t, e, i) {
      return this.validators[t] ? this._setValidator.apply(this, arguments) : (d.warn('Validator "' + t + '" is not already defined.'), this.addValidator.apply(this, arguments));
    },
    removeValidator: function removeValidator(t) {
      return this.validators[t] || d.warn('Validator "' + t + '" is not defined.'), delete this.validators[t], this;
    },
    _setValidator: function _setValidator(t, e, i) {
      for (var r in "object" !== n(e) && (e = {
        fn: e,
        priority: i
      }), e.validate || (e = new c(e)), (this.validators[t] = e).messages || {}) this.addMessage(r, t, e.messages[r]);
      return this;
    },
    getErrorMessage: function getErrorMessage(t) {
      var e;
      "type" === t.name ? e = (this.catalog[this.locale][t.name] || {})[t.requirements] : e = this.formatMessage(this.catalog[this.locale][t.name], t.requirements);
      return e || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;
    },
    formatMessage: function formatMessage(t, e) {
      if ("object" !== n(e)) return "string" == typeof t ? t.replace(/%s/i, e) : "";
      for (var i in e) t = this.formatMessage(t, e[i]);
      return t;
    },
    validators: {
      notblank: {
        validateString: function validateString(t) {
          return /\S/.test(t);
        },
        priority: 2
      },
      required: {
        validateMultiple: function validateMultiple(t) {
          return 0 < t.length;
        },
        validateString: function validateString(t) {
          return /\S/.test(t);
        },
        priority: 512
      },
      type: {
        validateString: function validateString(t, e, i) {
          var r = 2 < arguments.length && void 0 !== i ? i : {},
            n = r.step,
            s = void 0 === n ? "any" : n,
            a = r.base,
            o = void 0 === a ? 0 : a,
            l = p[e];
          if (!l) throw new Error("validator type `" + e + "` is not supported");
          if (!t) return !0;
          if (!l.test(t)) return !1;
          if ("number" === e && !/^any$/i.test(s || "")) {
            var u = Number(t),
              d = Math.max(f(s), f(o));
            if (f(u) > d) return !1;
            var h = function h(t) {
              return Math.round(t * Math.pow(10, d));
            };
            if ((h(u) - h(o)) % h(s) != 0) return !1;
          }
          return !0;
        },
        requirementType: {
          "": "string",
          step: "string",
          base: "number"
        },
        priority: 256
      },
      pattern: {
        validateString: function validateString(t, e) {
          return !t || e.test(t);
        },
        requirementType: "regexp",
        priority: 64
      },
      minlength: {
        validateString: function validateString(t, e) {
          return !t || t.length >= e;
        },
        requirementType: "integer",
        priority: 30
      },
      maxlength: {
        validateString: function validateString(t, e) {
          return t.length <= e;
        },
        requirementType: "integer",
        priority: 30
      },
      length: {
        validateString: function validateString(t, e, i) {
          return !t || t.length >= e && t.length <= i;
        },
        requirementType: ["integer", "integer"],
        priority: 30
      },
      mincheck: {
        validateMultiple: function validateMultiple(t, e) {
          return t.length >= e;
        },
        requirementType: "integer",
        priority: 30
      },
      maxcheck: {
        validateMultiple: function validateMultiple(t, e) {
          return t.length <= e;
        },
        requirementType: "integer",
        priority: 30
      },
      check: {
        validateMultiple: function validateMultiple(t, e, i) {
          return t.length >= e && t.length <= i;
        },
        requirementType: ["integer", "integer"],
        priority: 30
      },
      min: g(function (t, e) {
        return e <= t;
      }),
      max: g(function (t, e) {
        return t <= e;
      }),
      range: g(function (t, e, i) {
        return e <= t && t <= i;
      }),
      equalto: {
        validateString: function validateString(t, e) {
          if (!t) return !0;
          var i = h(e);
          return i.length ? t === i.val() : t === e;
        },
        priority: 256
      },
      euvatin: {
        validateString: function validateString(t) {
          if (!t) return !0;
          return /^[A-Z][A-Z][A-Za-z0-9 -]{2,}$/.test(t);
        },
        priority: 30
      }
    }
  };
  var v = {};
  v.Form = {
    _actualizeTriggers: function _actualizeTriggers() {
      var e = this;
      this.$element.on("submit.Parsley", function (t) {
        e.onSubmitValidate(t);
      }), this.$element.on("click.Parsley", d._SubmitSelector, function (t) {
        e.onSubmitButton(t);
      }), !1 !== this.options.uiEnabled && this.element.setAttribute("novalidate", "");
    },
    focus: function focus() {
      if (!(this._focusedField = null) === this.validationResult || "none" === this.options.focus) return null;
      for (var t = 0; t < this.fields.length; t++) {
        var e = this.fields[t];
        if (!0 !== e.validationResult && 0 < e.validationResult.length && void 0 === e.options.noFocus && (this._focusedField = e.$element, "first" === this.options.focus)) break;
      }
      return null === this._focusedField ? null : this._focusedField.focus();
    },
    _destroyUI: function _destroyUI() {
      this.$element.off(".Parsley");
    }
  }, v.Field = {
    _reflowUI: function _reflowUI() {
      if (this._buildUI(), this._ui) {
        var t = function t(e, i, r) {
          for (var n = [], s = [], a = 0; a < e.length; a++) {
            for (var o = !1, l = 0; l < i.length; l++) if (e[a].assert.name === i[l].assert.name) {
              o = !0;
              break;
            }
            o ? s.push(e[a]) : n.push(e[a]);
          }
          return {
            kept: s,
            added: n,
            removed: r ? [] : t(i, e, !0).added
          };
        }(this.validationResult, this._ui.lastValidationResult);
        this._ui.lastValidationResult = this.validationResult, this._manageStatusClass(), this._manageErrorsMessages(t), this._actualizeTriggers(), !t.kept.length && !t.added.length || this._failedOnce || (this._failedOnce = !0, this._actualizeTriggers());
      }
    },
    getErrorsMessages: function getErrorsMessages() {
      if (!0 === this.validationResult) return [];
      for (var t = [], e = 0; e < this.validationResult.length; e++) t.push(this.validationResult[e].errorMessage || this._getErrorMessage(this.validationResult[e].assert));
      return t;
    },
    addError: function addError(t, e) {
      var i = 1 < arguments.length && void 0 !== e ? e : {},
        r = i.message,
        n = i.assert,
        s = i.updateClass,
        a = void 0 === s || s;
      this._buildUI(), this._addError(t, {
        message: r,
        assert: n
      }), a && this._errorClass();
    },
    updateError: function updateError(t, e) {
      var i = 1 < arguments.length && void 0 !== e ? e : {},
        r = i.message,
        n = i.assert,
        s = i.updateClass,
        a = void 0 === s || s;
      this._buildUI(), this._updateError(t, {
        message: r,
        assert: n
      }), a && this._errorClass();
    },
    removeError: function removeError(t, e) {
      var i = (1 < arguments.length && void 0 !== e ? e : {}).updateClass,
        r = void 0 === i || i;
      this._buildUI(), this._removeError(t), r && this._manageStatusClass();
    },
    _manageStatusClass: function _manageStatusClass() {
      this.hasConstraints() && this.needsValidation() && !0 === this.validationResult ? this._successClass() : 0 < this.validationResult.length ? this._errorClass() : this._resetClass();
    },
    _manageErrorsMessages: function _manageErrorsMessages(t) {
      if (void 0 === this.options.errorsMessagesDisabled) {
        if (void 0 !== this.options.errorMessage) return t.added.length || t.kept.length ? (this._insertErrorWrapper(), 0 === this._ui.$errorsWrapper.find(".parsley-custom-error-message").length && this._ui.$errorsWrapper.append(h(this.options.errorTemplate).addClass("parsley-custom-error-message")), this._ui.$errorClassHandler.attr("aria-describedby", this._ui.errorsWrapperId), this._ui.$errorsWrapper.addClass("filled").attr("aria-hidden", "false").find(".parsley-custom-error-message").html(this.options.errorMessage)) : (this._ui.$errorClassHandler.removeAttr("aria-describedby"), this._ui.$errorsWrapper.removeClass("filled").attr("aria-hidden", "true").find(".parsley-custom-error-message").remove());
        for (var e = 0; e < t.removed.length; e++) this._removeError(t.removed[e].assert.name);
        for (e = 0; e < t.added.length; e++) this._addError(t.added[e].assert.name, {
          message: t.added[e].errorMessage,
          assert: t.added[e].assert
        });
        for (e = 0; e < t.kept.length; e++) this._updateError(t.kept[e].assert.name, {
          message: t.kept[e].errorMessage,
          assert: t.kept[e].assert
        });
      }
    },
    _addError: function _addError(t, e) {
      var i = e.message,
        r = e.assert;
      this._insertErrorWrapper(), this._ui.$errorClassHandler.attr("aria-describedby", this._ui.errorsWrapperId), this._ui.$errorsWrapper.addClass("filled").attr("aria-hidden", "false").append(h(this.options.errorTemplate).addClass("parsley-" + t).html(i || this._getErrorMessage(r)));
    },
    _updateError: function _updateError(t, e) {
      var i = e.message,
        r = e.assert;
      this._ui.$errorsWrapper.addClass("filled").find(".parsley-" + t).html(i || this._getErrorMessage(r));
    },
    _removeError: function _removeError(t) {
      this._ui.$errorClassHandler.removeAttr("aria-describedby"), this._ui.$errorsWrapper.removeClass("filled").attr("aria-hidden", "true").find(".parsley-" + t).remove();
    },
    _getErrorMessage: function _getErrorMessage(t) {
      var e = t.name + "Message";
      return void 0 !== this.options[e] ? window.Parsley.formatMessage(this.options[e], t.requirements) : window.Parsley.getErrorMessage(t);
    },
    _buildUI: function _buildUI() {
      if (!this._ui && !1 !== this.options.uiEnabled) {
        var t = {};
        this.element.setAttribute(this.options.namespace + "id", this.__id__), t.$errorClassHandler = this._manageClassHandler(), t.errorsWrapperId = "parsley-id-" + (this.options.multiple ? "multiple-" + this.options.multiple : this.__id__), t.$errorsWrapper = h(this.options.errorsWrapper).attr("id", t.errorsWrapperId), t.lastValidationResult = [], t.validationInformationVisible = !1, this._ui = t;
      }
    },
    _manageClassHandler: function _manageClassHandler() {
      if ("string" == typeof this.options.classHandler && h(this.options.classHandler).length) return h(this.options.classHandler);
      var t = this.options.classHandler;
      if ("string" == typeof this.options.classHandler && "function" == typeof window[this.options.classHandler] && (t = window[this.options.classHandler]), "function" == typeof t) {
        var e = t.call(this, this);
        if (void 0 !== e && e.length) return e;
      } else {
        if ("object" === n(t) && t instanceof jQuery && t.length) return t;
        t && d.warn("The class handler `" + t + "` does not exist in DOM nor as a global JS function");
      }
      return this._inputHolder();
    },
    _inputHolder: function _inputHolder() {
      return this.options.multiple && "SELECT" !== this.element.nodeName ? this.$element.parent() : this.$element;
    },
    _insertErrorWrapper: function _insertErrorWrapper() {
      var t = this.options.errorsContainer;
      if (0 !== this._ui.$errorsWrapper.parent().length) return this._ui.$errorsWrapper.parent();
      if ("string" == typeof t) {
        if (h(t).length) return h(t).append(this._ui.$errorsWrapper);
        "function" == typeof window[t] ? t = window[t] : d.warn("The errors container `" + t + "` does not exist in DOM nor as a global JS function");
      }
      return "function" == typeof t && (t = t.call(this, this)), "object" === n(t) && t.length ? t.append(this._ui.$errorsWrapper) : this._inputHolder().after(this._ui.$errorsWrapper);
    },
    _actualizeTriggers: function _actualizeTriggers() {
      var t,
        e = this,
        i = this._findRelated();
      i.off(".Parsley"), this._failedOnce ? i.on(d.namespaceEvents(this.options.triggerAfterFailure, "Parsley"), function () {
        e._validateIfNeeded();
      }) : (t = d.namespaceEvents(this.options.trigger, "Parsley")) && i.on(t, function (t) {
        e._validateIfNeeded(t);
      });
    },
    _validateIfNeeded: function _validateIfNeeded(t) {
      var e = this;
      t && /key|input/.test(t.type) && (!this._ui || !this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold || (this.options.debounce ? (window.clearTimeout(this._debounced), this._debounced = window.setTimeout(function () {
        return e.validate();
      }, this.options.debounce)) : this.validate());
    },
    _resetUI: function _resetUI() {
      this._failedOnce = !1, this._actualizeTriggers(), void 0 !== this._ui && (this._ui.$errorsWrapper.removeClass("filled").children().remove(), this._resetClass(), this._ui.lastValidationResult = [], this._ui.validationInformationVisible = !1);
    },
    _destroyUI: function _destroyUI() {
      this._resetUI(), void 0 !== this._ui && this._ui.$errorsWrapper.remove(), delete this._ui;
    },
    _successClass: function _successClass() {
      this._ui.validationInformationVisible = !0, this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);
    },
    _errorClass: function _errorClass() {
      this._ui.validationInformationVisible = !0, this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);
    },
    _resetClass: function _resetClass() {
      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);
    }
  };
  function y(t, e, i) {
    this.__class__ = "Form", this.element = t, this.$element = h(t), this.domOptions = e, this.options = i, this.parent = window.Parsley, this.fields = [], this.validationResult = null;
  }
  var _ = {
    pending: null,
    resolved: !0,
    rejected: !1
  };
  y.prototype = {
    onSubmitValidate: function onSubmitValidate(t) {
      var e = this;
      if (!0 !== t.parsley) {
        var i = this._submitSource || this.$element.find(d._SubmitSelector)[0];
        if (this._submitSource = null, this.$element.find(".parsley-synthetic-submit-button").prop("disabled", !0), !i || null === i.getAttribute("formnovalidate")) {
          window.Parsley._remoteCache = {};
          var r = this.whenValidate({
            event: t
          });
          "resolved" === r.state() && !1 !== this._trigger("submit") || (t.stopImmediatePropagation(), t.preventDefault(), "pending" === r.state() && r.done(function () {
            e._submit(i);
          }));
        }
      }
    },
    onSubmitButton: function onSubmitButton(t) {
      this._submitSource = t.currentTarget;
    },
    _submit: function _submit(t) {
      if (!1 !== this._trigger("submit")) {
        if (t) {
          var e = this.$element.find(".parsley-synthetic-submit-button").prop("disabled", !1);
          0 === e.length && (e = h('<input class="parsley-synthetic-submit-button" type="hidden">').appendTo(this.$element)), e.attr({
            name: t.getAttribute("name"),
            value: t.getAttribute("value")
          });
        }
        this.$element.trigger(l(h.Event("submit"), {
          parsley: !0
        }));
      }
    },
    validate: function validate(t) {
      if (1 <= arguments.length && !h.isPlainObject(t)) {
        d.warnOnce("Calling validate on a parsley form without passing arguments as an object is deprecated.");
        var e = Array.prototype.slice.call(arguments);
        t = {
          group: e[0],
          force: e[1],
          event: e[2]
        };
      }
      return _[this.whenValidate(t).state()];
    },
    whenValidate: function whenValidate(t) {
      var e,
        i = this,
        r = 0 < arguments.length && void 0 !== t ? t : {},
        n = r.group,
        s = r.force,
        a = r.event;
      (this.submitEvent = a) && (this.submitEvent = l({}, a, {
        preventDefault: function preventDefault() {
          d.warnOnce("Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`"), i.validationResult = !1;
        }
      })), this.validationResult = !0, this._trigger("validate"), this._refreshFields();
      var o = this._withoutReactualizingFormOptions(function () {
        return h.map(i.fields, function (t) {
          return t.whenValidate({
            force: s,
            group: n
          });
        });
      });
      return (e = d.all(o).done(function () {
        i._trigger("success");
      }).fail(function () {
        i.validationResult = !1, i.focus(), i._trigger("error");
      }).always(function () {
        i._trigger("validated");
      })).pipe.apply(e, u(this._pipeAccordingToValidationResult()));
    },
    isValid: function isValid(t) {
      if (1 <= arguments.length && !h.isPlainObject(t)) {
        d.warnOnce("Calling isValid on a parsley form without passing arguments as an object is deprecated.");
        var e = Array.prototype.slice.call(arguments);
        t = {
          group: e[0],
          force: e[1]
        };
      }
      return _[this.whenValid(t).state()];
    },
    whenValid: function whenValid(t) {
      var e = this,
        i = 0 < arguments.length && void 0 !== t ? t : {},
        r = i.group,
        n = i.force;
      this._refreshFields();
      var s = this._withoutReactualizingFormOptions(function () {
        return h.map(e.fields, function (t) {
          return t.whenValid({
            group: r,
            force: n
          });
        });
      });
      return d.all(s);
    },
    refresh: function refresh() {
      return this._refreshFields(), this;
    },
    reset: function reset() {
      for (var t = 0; t < this.fields.length; t++) this.fields[t].reset();
      this._trigger("reset");
    },
    destroy: function destroy() {
      this._destroyUI();
      for (var t = 0; t < this.fields.length; t++) this.fields[t].destroy();
      this.$element.removeData("Parsley"), this._trigger("destroy");
    },
    _refreshFields: function _refreshFields() {
      return this.actualizeOptions()._bindFields();
    },
    _bindFields: function _bindFields() {
      var n = this,
        t = this.fields;
      return this.fields = [], this.fieldsMappedById = {}, this._withoutReactualizingFormOptions(function () {
        n.$element.find(n.options.inputs).not(n.options.excluded).not("[".concat(n.options.namespace, "excluded=true]")).each(function (t, e) {
          var i = new window.Parsley.Factory(e, {}, n);
          if ("Field" === i.__class__ || "FieldMultiple" === i.__class__) {
            var r = i.__class__ + "-" + i.__id__;
            void 0 === n.fieldsMappedById[r] && (n.fieldsMappedById[r] = i, n.fields.push(i));
          }
        }), h.each(d.difference(t, n.fields), function (t, e) {
          e.reset();
        });
      }), this;
    },
    _withoutReactualizingFormOptions: function _withoutReactualizingFormOptions(t) {
      var e = this.actualizeOptions;
      this.actualizeOptions = function () {
        return this;
      };
      var i = t();
      return this.actualizeOptions = e, i;
    },
    _trigger: function _trigger(t) {
      return this.trigger("form:" + t);
    }
  };
  function b(t, e, i, r, n) {
    var s = window.Parsley._validatorRegistry.validators[e],
      a = new c(s);
    l(this, {
      validator: a,
      name: e,
      requirements: i,
      priority: r = r || t.options[e + "Priority"] || a.priority,
      isDomConstraint: n = !0 === n
    }), this._parseRequirements(t.options);
  }
  function w(t, e, i, r) {
    this.__class__ = "Field", this.element = t, this.$element = h(t), void 0 !== r && (this.parent = r), this.options = i, this.domOptions = e, this.constraints = [], this.constraintsByName = {}, this.validationResult = !0, this._bindConstraints();
  }
  var F = {
    pending: null,
    resolved: !0,
    rejected: !(b.prototype = {
      validate: function validate(t, e) {
        var i;
        return (i = this.validator).validate.apply(i, [t].concat(u(this.requirementList), [e]));
      },
      _parseRequirements: function _parseRequirements(i) {
        var r = this;
        this.requirementList = this.validator.parseRequirements(this.requirements, function (t) {
          return i[r.name + ((e = t)[0].toUpperCase() + e.slice(1))];
          var e;
        });
      }
    })
  };
  w.prototype = {
    validate: function validate(t) {
      1 <= arguments.length && !h.isPlainObject(t) && (d.warnOnce("Calling validate on a parsley field without passing arguments as an object is deprecated."), t = {
        options: t
      });
      var e = this.whenValidate(t);
      if (!e) return !0;
      switch (e.state()) {
        case "pending":
          return null;
        case "resolved":
          return !0;
        case "rejected":
          return this.validationResult;
      }
    },
    whenValidate: function whenValidate(t) {
      var e,
        i = this,
        r = 0 < arguments.length && void 0 !== t ? t : {},
        n = r.force,
        s = r.group;
      if (this.refresh(), !s || this._isInGroup(s)) return this.value = this.getValue(), this._trigger("validate"), (e = this.whenValid({
        force: n,
        value: this.value,
        _refreshed: !0
      }).always(function () {
        i._reflowUI();
      }).done(function () {
        i._trigger("success");
      }).fail(function () {
        i._trigger("error");
      }).always(function () {
        i._trigger("validated");
      })).pipe.apply(e, u(this._pipeAccordingToValidationResult()));
    },
    hasConstraints: function hasConstraints() {
      return 0 !== this.constraints.length;
    },
    needsValidation: function needsValidation(t) {
      return void 0 === t && (t = this.getValue()), !(!t.length && !this._isRequired() && void 0 === this.options.validateIfEmpty);
    },
    _isInGroup: function _isInGroup(t) {
      return Array.isArray(this.options.group) ? -1 !== h.inArray(t, this.options.group) : this.options.group === t;
    },
    isValid: function isValid(t) {
      if (1 <= arguments.length && !h.isPlainObject(t)) {
        d.warnOnce("Calling isValid on a parsley field without passing arguments as an object is deprecated.");
        var e = Array.prototype.slice.call(arguments);
        t = {
          force: e[0],
          value: e[1]
        };
      }
      var i = this.whenValid(t);
      return !i || F[i.state()];
    },
    whenValid: function whenValid(t) {
      var r = this,
        e = 0 < arguments.length && void 0 !== t ? t : {},
        i = e.force,
        n = void 0 !== i && i,
        s = e.value,
        a = e.group;
      if (e._refreshed || this.refresh(), !a || this._isInGroup(a)) {
        if (this.validationResult = !0, !this.hasConstraints()) return h.when();
        if (null == s && (s = this.getValue()), !this.needsValidation(s) && !0 !== n) return h.when();
        var o = this._getGroupedConstraints(),
          l = [];
        return h.each(o, function (t, e) {
          var i = d.all(h.map(e, function (t) {
            return r._validateConstraint(s, t);
          }));
          if (l.push(i), "rejected" === i.state()) return !1;
        }), d.all(l);
      }
    },
    _validateConstraint: function _validateConstraint(t, e) {
      var i = this,
        r = e.validate(t, this);
      return !1 === r && (r = h.Deferred().reject()), d.all([r]).fail(function (t) {
        i.validationResult instanceof Array || (i.validationResult = []), i.validationResult.push({
          assert: e,
          errorMessage: "string" == typeof t && t
        });
      });
    },
    getValue: function getValue() {
      var t;
      return null == (t = "function" == typeof this.options.value ? this.options.value(this) : void 0 !== this.options.value ? this.options.value : this.$element.val()) ? "" : this._handleWhitespace(t);
    },
    reset: function reset() {
      return this._resetUI(), this._trigger("reset");
    },
    destroy: function destroy() {
      this._destroyUI(), this.$element.removeData("Parsley"), this.$element.removeData("FieldMultiple"), this._trigger("destroy");
    },
    refresh: function refresh() {
      return this._refreshConstraints(), this;
    },
    _refreshConstraints: function _refreshConstraints() {
      return this.actualizeOptions()._bindConstraints();
    },
    refreshConstraints: function refreshConstraints() {
      return d.warnOnce("Parsley's refreshConstraints is deprecated. Please use refresh"), this.refresh();
    },
    addConstraint: function addConstraint(t, e, i, r) {
      if (window.Parsley._validatorRegistry.validators[t]) {
        var n = new b(this, t, e, i, r);
        "undefined" !== this.constraintsByName[n.name] && this.removeConstraint(n.name), this.constraints.push(n), this.constraintsByName[n.name] = n;
      }
      return this;
    },
    removeConstraint: function removeConstraint(t) {
      for (var e = 0; e < this.constraints.length; e++) if (t === this.constraints[e].name) {
        this.constraints.splice(e, 1);
        break;
      }
      return delete this.constraintsByName[t], this;
    },
    updateConstraint: function updateConstraint(t, e, i) {
      return this.removeConstraint(t).addConstraint(t, e, i);
    },
    _bindConstraints: function _bindConstraints() {
      for (var t = [], e = {}, i = 0; i < this.constraints.length; i++) !1 === this.constraints[i].isDomConstraint && (t.push(this.constraints[i]), e[this.constraints[i].name] = this.constraints[i]);
      for (var r in this.constraints = t, this.constraintsByName = e, this.options) this.addConstraint(r, this.options[r], void 0, !0);
      return this._bindHtml5Constraints();
    },
    _bindHtml5Constraints: function _bindHtml5Constraints() {
      null !== this.element.getAttribute("required") && this.addConstraint("required", !0, void 0, !0), null !== this.element.getAttribute("pattern") && this.addConstraint("pattern", this.element.getAttribute("pattern"), void 0, !0);
      var t = this.element.getAttribute("min"),
        e = this.element.getAttribute("max");
      null !== t && null !== e ? this.addConstraint("range", [t, e], void 0, !0) : null !== t ? this.addConstraint("min", t, void 0, !0) : null !== e && this.addConstraint("max", e, void 0, !0), null !== this.element.getAttribute("minlength") && null !== this.element.getAttribute("maxlength") ? this.addConstraint("length", [this.element.getAttribute("minlength"), this.element.getAttribute("maxlength")], void 0, !0) : null !== this.element.getAttribute("minlength") ? this.addConstraint("minlength", this.element.getAttribute("minlength"), void 0, !0) : null !== this.element.getAttribute("maxlength") && this.addConstraint("maxlength", this.element.getAttribute("maxlength"), void 0, !0);
      var i = d.getType(this.element);
      return "number" === i ? this.addConstraint("type", ["number", {
        step: this.element.getAttribute("step") || "1",
        base: t || this.element.getAttribute("value")
      }], void 0, !0) : /^(email|url|range|date)$/i.test(i) ? this.addConstraint("type", i, void 0, !0) : this;
    },
    _isRequired: function _isRequired() {
      return void 0 !== this.constraintsByName.required && !1 !== this.constraintsByName.required.requirements;
    },
    _trigger: function _trigger(t) {
      return this.trigger("field:" + t);
    },
    _handleWhitespace: function _handleWhitespace(t) {
      return !0 === this.options.trimValue && d.warnOnce('data-parsley-trim-value="true" is deprecated, please use data-parsley-whitespace="trim"'), "squish" === this.options.whitespace && (t = t.replace(/\s{2,}/g, " ")), "trim" !== this.options.whitespace && "squish" !== this.options.whitespace && !0 !== this.options.trimValue || (t = d.trimString(t)), t;
    },
    _isDateInput: function _isDateInput() {
      var t = this.constraintsByName.type;
      return t && "date" === t.requirements;
    },
    _getGroupedConstraints: function _getGroupedConstraints() {
      if (!1 === this.options.priorityEnabled) return [this.constraints];
      for (var t = [], e = {}, i = 0; i < this.constraints.length; i++) {
        var r = this.constraints[i].priority;
        e[r] || t.push(e[r] = []), e[r].push(this.constraints[i]);
      }
      return t.sort(function (t, e) {
        return e[0].priority - t[0].priority;
      }), t;
    }
  };
  function C() {
    this.__class__ = "FieldMultiple";
  }
  C.prototype = {
    addElement: function addElement(t) {
      return this.$elements.push(t), this;
    },
    _refreshConstraints: function _refreshConstraints() {
      var t;
      if (this.constraints = [], "SELECT" === this.element.nodeName) return this.actualizeOptions()._bindConstraints(), this;
      for (var e = 0; e < this.$elements.length; e++) if (h("html").has(this.$elements[e]).length) {
        t = this.$elements[e].data("FieldMultiple")._refreshConstraints().constraints;
        for (var i = 0; i < t.length; i++) this.addConstraint(t[i].name, t[i].requirements, t[i].priority, t[i].isDomConstraint);
      } else this.$elements.splice(e, 1);
      return this;
    },
    getValue: function getValue() {
      if ("function" == typeof this.options.value) return this.options.value(this);
      if (void 0 !== this.options.value) return this.options.value;
      if ("INPUT" === this.element.nodeName) {
        var t = d.getType(this.element);
        if ("radio" === t) return this._findRelated().filter(":checked").val() || "";
        if ("checkbox" === t) {
          var e = [];
          return this._findRelated().filter(":checked").each(function () {
            e.push(h(this).val());
          }), e;
        }
      }
      return "SELECT" === this.element.nodeName && null === this.$element.val() ? [] : this.$element.val();
    },
    _init: function _init() {
      return this.$elements = [this.$element], this;
    }
  };
  function A(t, e, i) {
    this.element = t, this.$element = h(t);
    var r = this.$element.data("Parsley");
    if (r) return void 0 !== i && r.parent === window.Parsley && (r.parent = i, r._resetOptions(r.options)), "object" === n(e) && l(r.options, e), r;
    if (!this.$element.length) throw new Error("You must bind Parsley on an existing element.");
    if (void 0 !== i && "Form" !== i.__class__) throw new Error("Parent instance must be a Form instance");
    return this.parent = i || window.Parsley, this.init(e);
  }
  A.prototype = {
    init: function init(t) {
      return this.__class__ = "Parsley", this.__version__ = "2.9.2", this.__id__ = d.generateID(), this._resetOptions(t), "FORM" === this.element.nodeName || d.checkAttr(this.element, this.options.namespace, "validate") && !this.$element.is(this.options.inputs) ? this.bind("parsleyForm") : this.isMultiple() ? this.handleMultiple() : this.bind("parsleyField");
    },
    isMultiple: function isMultiple() {
      var t = d.getType(this.element);
      return "radio" === t || "checkbox" === t || "SELECT" === this.element.nodeName && null !== this.element.getAttribute("multiple");
    },
    handleMultiple: function handleMultiple() {
      var t,
        e,
        r = this;
      if (this.options.multiple = this.options.multiple || (t = this.element.getAttribute("name")) || this.element.getAttribute("id"), "SELECT" === this.element.nodeName && null !== this.element.getAttribute("multiple")) return this.options.multiple = this.options.multiple || this.__id__, this.bind("parsleyFieldMultiple");
      if (!this.options.multiple) return d.warn("To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.", this.$element), this;
      this.options.multiple = this.options.multiple.replace(/(:|\.|\[|\]|\{|\}|\$)/g, ""), t && h('input[name="' + t + '"]').each(function (t, e) {
        var i = d.getType(e);
        "radio" !== i && "checkbox" !== i || e.setAttribute(r.options.namespace + "multiple", r.options.multiple);
      });
      for (var i = this._findRelated(), n = 0; n < i.length; n++) if (void 0 !== (e = h(i.get(n)).data("Parsley"))) {
        this.$element.data("FieldMultiple") || e.addElement(this.$element);
        break;
      }
      return this.bind("parsleyField", !0), e || this.bind("parsleyFieldMultiple");
    },
    bind: function bind(t, e) {
      var i;
      switch (t) {
        case "parsleyForm":
          i = h.extend(new y(this.element, this.domOptions, this.options), new r(), window.ParsleyExtend)._bindFields();
          break;
        case "parsleyField":
          i = h.extend(new w(this.element, this.domOptions, this.options, this.parent), new r(), window.ParsleyExtend);
          break;
        case "parsleyFieldMultiple":
          i = h.extend(new w(this.element, this.domOptions, this.options, this.parent), new C(), new r(), window.ParsleyExtend)._init();
          break;
        default:
          throw new Error(t + "is not a supported Parsley type");
      }
      return this.options.multiple && d.setAttr(this.element, this.options.namespace, "multiple", this.options.multiple), void 0 !== e ? this.$element.data("FieldMultiple", i) : (this.$element.data("Parsley", i), i._actualizeTriggers(), i._trigger("init")), i;
    }
  };
  var E = h.fn.jquery.split(".");
  if (parseInt(E[0]) <= 1 && parseInt(E[1]) < 8) throw "The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.";
  E.forEach || d.warn("Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim");
  var x = l(new r(), {
    element: document,
    $element: h(document),
    actualizeOptions: null,
    _resetOptions: null,
    Factory: A,
    version: "2.9.2"
  });
  l(w.prototype, v.Field, r.prototype), l(y.prototype, v.Form, r.prototype), l(A.prototype, r.prototype), h.fn.parsley = h.fn.psly = function (t) {
    if (1 < this.length) {
      var e = [];
      return this.each(function () {
        e.push(h(this).parsley(t));
      }), e;
    }
    if (0 != this.length) return new A(this[0], t);
  }, void 0 === window.ParsleyExtend && (window.ParsleyExtend = {}), x.options = l(d.objectCreate(s), window.ParsleyConfig), window.ParsleyConfig = x.options, window.Parsley = window.psly = x, x.Utils = d, window.ParsleyUtils = {}, h.each(d, function (t, e) {
    "function" == typeof e && (window.ParsleyUtils[t] = function () {
      return d.warnOnce("Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead."), d[t].apply(d, arguments);
    });
  });
  var $ = window.Parsley._validatorRegistry = new a(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);
  window.ParsleyValidator = {}, h.each("setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator hasValidator".split(" "), function (t, e) {
    window.Parsley[e] = function () {
      return $[e].apply($, arguments);
    }, window.ParsleyValidator[e] = function () {
      var t;
      return d.warnOnce("Accessing the method '".concat(e, "' through Validator is deprecated. Simply call 'window.Parsley.").concat(e, "(...)'")), (t = window.Parsley)[e].apply(t, arguments);
    };
  }), window.Parsley.UI = v, window.ParsleyUI = {
    removeError: function removeError(t, e, i) {
      var r = !0 !== i;
      return d.warnOnce("Accessing UI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method."), t.removeError(e, {
        updateClass: r
      });
    },
    getErrorsMessages: function getErrorsMessages(t) {
      return d.warnOnce("Accessing UI is deprecated. Call 'getErrorsMessages' on the instance directly."), t.getErrorsMessages();
    }
  }, h.each("addError updateError".split(" "), function (t, a) {
    window.ParsleyUI[a] = function (t, e, i, r, n) {
      var s = !0 !== n;
      return d.warnOnce("Accessing UI is deprecated. Call '".concat(a, "' on the instance directly. Please comment in issue 1073 as to your need to call this method.")), t[a](e, {
        message: i,
        assert: r,
        updateClass: s
      });
    };
  }), !1 !== window.ParsleyConfig.autoBind && h(function () {
    h("[data-parsley-validate]").length && h("[data-parsley-validate]").parsley();
  });
  function V() {
    d.warnOnce("Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley");
  }
  var P = h({});
  function O(e, i) {
    return e.parsleyAdaptedCallback || (e.parsleyAdaptedCallback = function () {
      var t = Array.prototype.slice.call(arguments, 0);
      t.unshift(this), e.apply(i || P, t);
    }), e.parsleyAdaptedCallback;
  }
  var T = "parsley:";
  function M(t) {
    return 0 === t.lastIndexOf(T, 0) ? t.substr(T.length) : t;
  }
  return h.listen = function (t, e) {
    var i;
    if (V(), "object" === n(arguments[1]) && "function" == typeof arguments[2] && (i = arguments[1], e = arguments[2]), "function" != typeof e) throw new Error("Wrong parameters");
    window.Parsley.on(M(t), O(e, i));
  }, h.listenTo = function (t, e, i) {
    if (V(), !(t instanceof w || t instanceof y)) throw new Error("Must give Parsley instance");
    if ("string" != typeof e || "function" != typeof i) throw new Error("Wrong parameters");
    t.on(M(e), O(i));
  }, h.unsubscribe = function (t, e) {
    if (V(), "string" != typeof t || "function" != typeof e) throw new Error("Wrong arguments");
    window.Parsley.off(M(t), e.parsleyAdaptedCallback);
  }, h.unsubscribeTo = function (t, e) {
    if (V(), !(t instanceof w || t instanceof y)) throw new Error("Must give Parsley instance");
    t.off(M(e));
  }, h.unsubscribeAll = function (e) {
    V(), window.Parsley.off(M(e)), h("form,input,textarea,select").each(function () {
      var t = h(this).data("Parsley");
      t && t.off(M(e));
    });
  }, h.emit = function (t, e) {
    V();
    var i = e instanceof w || e instanceof y,
      r = Array.prototype.slice.call(arguments, i ? 2 : 1);
    r.unshift(M(t)), i || (e = window.Parsley), e.trigger.apply(e, u(r));
  }, h.extend(!0, x, {
    asyncValidators: {
      "default": {
        fn: function fn(t) {
          return 200 <= t.status && t.status < 300;
        },
        url: !1
      },
      reverse: {
        fn: function fn(t) {
          return t.status < 200 || 300 <= t.status;
        },
        url: !1
      }
    },
    addAsyncValidator: function addAsyncValidator(t, e, i, r) {
      return x.asyncValidators[t] = {
        fn: e,
        url: i || !1,
        options: r || {}
      }, this;
    }
  }), x.addValidator("remote", {
    requirementType: {
      "": "string",
      validator: "string",
      reverse: "boolean",
      options: "object"
    },
    validateString: function validateString(t, e, i, r) {
      var n,
        s,
        a = {},
        o = i.validator || (!0 === i.reverse ? "reverse" : "default");
      if (void 0 === x.asyncValidators[o]) throw new Error("Calling an undefined async validator: `" + o + "`");
      -1 < (e = x.asyncValidators[o].url || e).indexOf("{value}") ? e = e.replace("{value}", encodeURIComponent(t)) : a[r.element.getAttribute("name") || r.element.getAttribute("id")] = t;
      var l = h.extend(!0, i.options || {}, x.asyncValidators[o].options);
      n = h.extend(!0, {}, {
        url: e,
        data: a,
        type: "GET"
      }, l), r.trigger("field:ajaxoptions", r, n), s = h.param(n), void 0 === x._remoteCache && (x._remoteCache = {});
      function u() {
        var t = x.asyncValidators[o].fn.call(r, d, e, i);
        return t = t || h.Deferred().reject(), h.when(t);
      }
      var d = x._remoteCache[s] = x._remoteCache[s] || h.ajax(n);
      return d.then(u, u);
    },
    priority: -1
  }), x.on("form:submit", function () {
    x._remoteCache = {};
  }), r.prototype.addAsyncValidator = function () {
    return d.warnOnce("Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`"), x.addAsyncValidator.apply(x, arguments);
  }, x.addMessages("en", {
    defaultMessage: "This value seems to be invalid.",
    type: {
      email: "This value should be a valid email.",
      url: "This value should be a valid url.",
      number: "This value should be a valid number.",
      integer: "This value should be a valid integer.",
      digits: "This value should be digits.",
      alphanum: "This value should be alphanumeric."
    },
    notblank: "This value should not be blank.",
    required: "This value is required.",
    pattern: "This value seems to be invalid.",
    min: "This value should be greater than or equal to %s.",
    max: "This value should be lower than or equal to %s.",
    range: "This value should be between %s and %s.",
    minlength: "This value is too short. It should have %s characters or more.",
    maxlength: "This value is too long. It should have %s characters or fewer.",
    length: "This value length is invalid. It should be between %s and %s characters long.",
    mincheck: "You must select at least %s choices.",
    maxcheck: "You must select %s choices or fewer.",
    check: "You must select between %s and %s choices.",
    equalto: "This value should be the same.",
    euvatin: "It's not a valid VAT Identification Number."
  }), x.setLocale("en"), new function () {
    var r = this,
      n = window || global;
    l(this, {
      isNativeEvent: function isNativeEvent(t) {
        return t.originalEvent && !1 !== t.originalEvent.isTrusted;
      },
      fakeInputEvent: function fakeInputEvent(t) {
        r.isNativeEvent(t) && h(t.target).trigger("input");
      },
      misbehaves: function misbehaves(t) {
        r.isNativeEvent(t) && (r.behavesOk(t), h(document).on("change.inputevent", t.data.selector, r.fakeInputEvent), r.fakeInputEvent(t));
      },
      behavesOk: function behavesOk(t) {
        r.isNativeEvent(t) && h(document).off("input.inputevent", t.data.selector, r.behavesOk).off("change.inputevent", t.data.selector, r.misbehaves);
      },
      install: function install() {
        if (!n.inputEventPatched) {
          n.inputEventPatched = "0.0.3";
          for (var t = 0, e = ["select", 'input[type="checkbox"]', 'input[type="radio"]', 'input[type="file"]']; t < e.length; t++) {
            var i = e[t];
            h(document).on("input.inputevent", i, {
              selector: i
            }, r.behavesOk).on("change.inputevent", i, {
              selector: i
            }, r.misbehaves);
          }
        }
      },
      uninstall: function uninstall() {
        delete n.inputEventPatched, h(document).off(".inputevent");
      }
    });
  }().install(), x;
});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"jquery":2}],54:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * @popperjs/core v2.11.8 - MIT License
 */

!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).Popper = {});
}(void 0, function (e) {
  "use strict";

  function t(e) {
    if (null == e) return window;
    if ("[object Window]" !== e.toString()) {
      var t = e.ownerDocument;
      return t && t.defaultView || window;
    }
    return e;
  }
  function n(e) {
    return e instanceof t(e).Element || e instanceof Element;
  }
  function r(e) {
    return e instanceof t(e).HTMLElement || e instanceof HTMLElement;
  }
  function o(e) {
    return "undefined" != typeof ShadowRoot && (e instanceof t(e).ShadowRoot || e instanceof ShadowRoot);
  }
  var i = Math.max,
    a = Math.min,
    s = Math.round;
  function f() {
    var e = navigator.userAgentData;
    return null != e && e.brands && Array.isArray(e.brands) ? e.brands.map(function (e) {
      return e.brand + "/" + e.version;
    }).join(" ") : navigator.userAgent;
  }
  function c() {
    return !/^((?!chrome|android).)*safari/i.test(f());
  }
  function p(e, o, i) {
    void 0 === o && (o = !1), void 0 === i && (i = !1);
    var a = e.getBoundingClientRect(),
      f = 1,
      p = 1;
    o && r(e) && (f = e.offsetWidth > 0 && s(a.width) / e.offsetWidth || 1, p = e.offsetHeight > 0 && s(a.height) / e.offsetHeight || 1);
    var u = (n(e) ? t(e) : window).visualViewport,
      l = !c() && i,
      d = (a.left + (l && u ? u.offsetLeft : 0)) / f,
      h = (a.top + (l && u ? u.offsetTop : 0)) / p,
      m = a.width / f,
      v = a.height / p;
    return {
      width: m,
      height: v,
      top: h,
      right: d + m,
      bottom: h + v,
      left: d,
      x: d,
      y: h
    };
  }
  function u(e) {
    var n = t(e);
    return {
      scrollLeft: n.pageXOffset,
      scrollTop: n.pageYOffset
    };
  }
  function l(e) {
    return e ? (e.nodeName || "").toLowerCase() : null;
  }
  function d(e) {
    return ((n(e) ? e.ownerDocument : e.document) || window.document).documentElement;
  }
  function h(e) {
    return p(d(e)).left + u(e).scrollLeft;
  }
  function m(e) {
    return t(e).getComputedStyle(e);
  }
  function v(e) {
    var t = m(e),
      n = t.overflow,
      r = t.overflowX,
      o = t.overflowY;
    return /auto|scroll|overlay|hidden/.test(n + o + r);
  }
  function y(e, n, o) {
    void 0 === o && (o = !1);
    var i,
      a,
      f = r(n),
      c = r(n) && function (e) {
        var t = e.getBoundingClientRect(),
          n = s(t.width) / e.offsetWidth || 1,
          r = s(t.height) / e.offsetHeight || 1;
        return 1 !== n || 1 !== r;
      }(n),
      m = d(n),
      y = p(e, c, o),
      g = {
        scrollLeft: 0,
        scrollTop: 0
      },
      b = {
        x: 0,
        y: 0
      };
    return (f || !f && !o) && (("body" !== l(n) || v(m)) && (g = (i = n) !== t(i) && r(i) ? {
      scrollLeft: (a = i).scrollLeft,
      scrollTop: a.scrollTop
    } : u(i)), r(n) ? ((b = p(n, !0)).x += n.clientLeft, b.y += n.clientTop) : m && (b.x = h(m))), {
      x: y.left + g.scrollLeft - b.x,
      y: y.top + g.scrollTop - b.y,
      width: y.width,
      height: y.height
    };
  }
  function g(e) {
    var t = p(e),
      n = e.offsetWidth,
      r = e.offsetHeight;
    return Math.abs(t.width - n) <= 1 && (n = t.width), Math.abs(t.height - r) <= 1 && (r = t.height), {
      x: e.offsetLeft,
      y: e.offsetTop,
      width: n,
      height: r
    };
  }
  function b(e) {
    return "html" === l(e) ? e : e.assignedSlot || e.parentNode || (o(e) ? e.host : null) || d(e);
  }
  function x(e) {
    return ["html", "body", "#document"].indexOf(l(e)) >= 0 ? e.ownerDocument.body : r(e) && v(e) ? e : x(b(e));
  }
  function w(e, n) {
    var r;
    void 0 === n && (n = []);
    var o = x(e),
      i = o === (null == (r = e.ownerDocument) ? void 0 : r.body),
      a = t(o),
      s = i ? [a].concat(a.visualViewport || [], v(o) ? o : []) : o,
      f = n.concat(s);
    return i ? f : f.concat(w(b(s)));
  }
  function O(e) {
    return ["table", "td", "th"].indexOf(l(e)) >= 0;
  }
  function j(e) {
    return r(e) && "fixed" !== m(e).position ? e.offsetParent : null;
  }
  function E(e) {
    for (var n = t(e), i = j(e); i && O(i) && "static" === m(i).position;) i = j(i);
    return i && ("html" === l(i) || "body" === l(i) && "static" === m(i).position) ? n : i || function (e) {
      var t = /firefox/i.test(f());
      if (/Trident/i.test(f()) && r(e) && "fixed" === m(e).position) return null;
      var n = b(e);
      for (o(n) && (n = n.host); r(n) && ["html", "body"].indexOf(l(n)) < 0;) {
        var i = m(n);
        if ("none" !== i.transform || "none" !== i.perspective || "paint" === i.contain || -1 !== ["transform", "perspective"].indexOf(i.willChange) || t && "filter" === i.willChange || t && i.filter && "none" !== i.filter) return n;
        n = n.parentNode;
      }
      return null;
    }(e) || n;
  }
  var D = "top",
    A = "bottom",
    L = "right",
    P = "left",
    M = "auto",
    k = [D, A, L, P],
    W = "start",
    B = "end",
    H = "viewport",
    T = "popper",
    R = k.reduce(function (e, t) {
      return e.concat([t + "-" + W, t + "-" + B]);
    }, []),
    S = [].concat(k, [M]).reduce(function (e, t) {
      return e.concat([t, t + "-" + W, t + "-" + B]);
    }, []),
    V = ["beforeRead", "read", "afterRead", "beforeMain", "main", "afterMain", "beforeWrite", "write", "afterWrite"];
  function q(e) {
    var t = new Map(),
      n = new Set(),
      r = [];
    function o(e) {
      n.add(e.name), [].concat(e.requires || [], e.requiresIfExists || []).forEach(function (e) {
        if (!n.has(e)) {
          var r = t.get(e);
          r && o(r);
        }
      }), r.push(e);
    }
    return e.forEach(function (e) {
      t.set(e.name, e);
    }), e.forEach(function (e) {
      n.has(e.name) || o(e);
    }), r;
  }
  function C(e, t) {
    var n = t.getRootNode && t.getRootNode();
    if (e.contains(t)) return !0;
    if (n && o(n)) {
      var r = t;
      do {
        if (r && e.isSameNode(r)) return !0;
        r = r.parentNode || r.host;
      } while (r);
    }
    return !1;
  }
  function N(e) {
    return Object.assign({}, e, {
      left: e.x,
      top: e.y,
      right: e.x + e.width,
      bottom: e.y + e.height
    });
  }
  function I(e, r, o) {
    return r === H ? N(function (e, n) {
      var r = t(e),
        o = d(e),
        i = r.visualViewport,
        a = o.clientWidth,
        s = o.clientHeight,
        f = 0,
        p = 0;
      if (i) {
        a = i.width, s = i.height;
        var u = c();
        (u || !u && "fixed" === n) && (f = i.offsetLeft, p = i.offsetTop);
      }
      return {
        width: a,
        height: s,
        x: f + h(e),
        y: p
      };
    }(e, o)) : n(r) ? function (e, t) {
      var n = p(e, !1, "fixed" === t);
      return n.top = n.top + e.clientTop, n.left = n.left + e.clientLeft, n.bottom = n.top + e.clientHeight, n.right = n.left + e.clientWidth, n.width = e.clientWidth, n.height = e.clientHeight, n.x = n.left, n.y = n.top, n;
    }(r, o) : N(function (e) {
      var t,
        n = d(e),
        r = u(e),
        o = null == (t = e.ownerDocument) ? void 0 : t.body,
        a = i(n.scrollWidth, n.clientWidth, o ? o.scrollWidth : 0, o ? o.clientWidth : 0),
        s = i(n.scrollHeight, n.clientHeight, o ? o.scrollHeight : 0, o ? o.clientHeight : 0),
        f = -r.scrollLeft + h(e),
        c = -r.scrollTop;
      return "rtl" === m(o || n).direction && (f += i(n.clientWidth, o ? o.clientWidth : 0) - a), {
        width: a,
        height: s,
        x: f,
        y: c
      };
    }(d(e)));
  }
  function _(e, t, o, s) {
    var f = "clippingParents" === t ? function (e) {
        var t = w(b(e)),
          o = ["absolute", "fixed"].indexOf(m(e).position) >= 0 && r(e) ? E(e) : e;
        return n(o) ? t.filter(function (e) {
          return n(e) && C(e, o) && "body" !== l(e);
        }) : [];
      }(e) : [].concat(t),
      c = [].concat(f, [o]),
      p = c[0],
      u = c.reduce(function (t, n) {
        var r = I(e, n, s);
        return t.top = i(r.top, t.top), t.right = a(r.right, t.right), t.bottom = a(r.bottom, t.bottom), t.left = i(r.left, t.left), t;
      }, I(e, p, s));
    return u.width = u.right - u.left, u.height = u.bottom - u.top, u.x = u.left, u.y = u.top, u;
  }
  function F(e) {
    return e.split("-")[0];
  }
  function U(e) {
    return e.split("-")[1];
  }
  function z(e) {
    return ["top", "bottom"].indexOf(e) >= 0 ? "x" : "y";
  }
  function X(e) {
    var t,
      n = e.reference,
      r = e.element,
      o = e.placement,
      i = o ? F(o) : null,
      a = o ? U(o) : null,
      s = n.x + n.width / 2 - r.width / 2,
      f = n.y + n.height / 2 - r.height / 2;
    switch (i) {
      case D:
        t = {
          x: s,
          y: n.y - r.height
        };
        break;
      case A:
        t = {
          x: s,
          y: n.y + n.height
        };
        break;
      case L:
        t = {
          x: n.x + n.width,
          y: f
        };
        break;
      case P:
        t = {
          x: n.x - r.width,
          y: f
        };
        break;
      default:
        t = {
          x: n.x,
          y: n.y
        };
    }
    var c = i ? z(i) : null;
    if (null != c) {
      var p = "y" === c ? "height" : "width";
      switch (a) {
        case W:
          t[c] = t[c] - (n[p] / 2 - r[p] / 2);
          break;
        case B:
          t[c] = t[c] + (n[p] / 2 - r[p] / 2);
      }
    }
    return t;
  }
  function Y(e) {
    return Object.assign({}, {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, e);
  }
  function G(e, t) {
    return t.reduce(function (t, n) {
      return t[n] = e, t;
    }, {});
  }
  function J(e, t) {
    void 0 === t && (t = {});
    var r = t,
      o = r.placement,
      i = void 0 === o ? e.placement : o,
      a = r.strategy,
      s = void 0 === a ? e.strategy : a,
      f = r.boundary,
      c = void 0 === f ? "clippingParents" : f,
      u = r.rootBoundary,
      l = void 0 === u ? H : u,
      h = r.elementContext,
      m = void 0 === h ? T : h,
      v = r.altBoundary,
      y = void 0 !== v && v,
      g = r.padding,
      b = void 0 === g ? 0 : g,
      x = Y("number" != typeof b ? b : G(b, k)),
      w = m === T ? "reference" : T,
      O = e.rects.popper,
      j = e.elements[y ? w : m],
      E = _(n(j) ? j : j.contextElement || d(e.elements.popper), c, l, s),
      P = p(e.elements.reference),
      M = X({
        reference: P,
        element: O,
        strategy: "absolute",
        placement: i
      }),
      W = N(Object.assign({}, O, M)),
      B = m === T ? W : P,
      R = {
        top: E.top - B.top + x.top,
        bottom: B.bottom - E.bottom + x.bottom,
        left: E.left - B.left + x.left,
        right: B.right - E.right + x.right
      },
      S = e.modifiersData.offset;
    if (m === T && S) {
      var V = S[i];
      Object.keys(R).forEach(function (e) {
        var t = [L, A].indexOf(e) >= 0 ? 1 : -1,
          n = [D, A].indexOf(e) >= 0 ? "y" : "x";
        R[e] += V[n] * t;
      });
    }
    return R;
  }
  var K = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function Q() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
    return !t.some(function (e) {
      return !(e && "function" == typeof e.getBoundingClientRect);
    });
  }
  function Z(e) {
    void 0 === e && (e = {});
    var t = e,
      r = t.defaultModifiers,
      o = void 0 === r ? [] : r,
      i = t.defaultOptions,
      a = void 0 === i ? K : i;
    return function (e, t, r) {
      void 0 === r && (r = a);
      var i,
        s,
        f = {
          placement: "bottom",
          orderedModifiers: [],
          options: Object.assign({}, K, a),
          modifiersData: {},
          elements: {
            reference: e,
            popper: t
          },
          attributes: {},
          styles: {}
        },
        c = [],
        p = !1,
        u = {
          state: f,
          setOptions: function setOptions(r) {
            var i = "function" == typeof r ? r(f.options) : r;
            l(), f.options = Object.assign({}, a, f.options, i), f.scrollParents = {
              reference: n(e) ? w(e) : e.contextElement ? w(e.contextElement) : [],
              popper: w(t)
            };
            var s,
              p,
              d = function (e) {
                var t = q(e);
                return V.reduce(function (e, n) {
                  return e.concat(t.filter(function (e) {
                    return e.phase === n;
                  }));
                }, []);
              }((s = [].concat(o, f.options.modifiers), p = s.reduce(function (e, t) {
                var n = e[t.name];
                return e[t.name] = n ? Object.assign({}, n, t, {
                  options: Object.assign({}, n.options, t.options),
                  data: Object.assign({}, n.data, t.data)
                }) : t, e;
              }, {}), Object.keys(p).map(function (e) {
                return p[e];
              })));
            return f.orderedModifiers = d.filter(function (e) {
              return e.enabled;
            }), f.orderedModifiers.forEach(function (e) {
              var t = e.name,
                n = e.options,
                r = void 0 === n ? {} : n,
                o = e.effect;
              if ("function" == typeof o) {
                var i = o({
                    state: f,
                    name: t,
                    instance: u,
                    options: r
                  }),
                  a = function a() {};
                c.push(i || a);
              }
            }), u.update();
          },
          forceUpdate: function forceUpdate() {
            if (!p) {
              var e = f.elements,
                t = e.reference,
                n = e.popper;
              if (Q(t, n)) {
                f.rects = {
                  reference: y(t, E(n), "fixed" === f.options.strategy),
                  popper: g(n)
                }, f.reset = !1, f.placement = f.options.placement, f.orderedModifiers.forEach(function (e) {
                  return f.modifiersData[e.name] = Object.assign({}, e.data);
                });
                for (var r = 0; r < f.orderedModifiers.length; r++) if (!0 !== f.reset) {
                  var o = f.orderedModifiers[r],
                    i = o.fn,
                    a = o.options,
                    s = void 0 === a ? {} : a,
                    c = o.name;
                  "function" == typeof i && (f = i({
                    state: f,
                    options: s,
                    name: c,
                    instance: u
                  }) || f);
                } else f.reset = !1, r = -1;
              }
            }
          },
          update: (i = function i() {
            return new Promise(function (e) {
              u.forceUpdate(), e(f);
            });
          }, function () {
            return s || (s = new Promise(function (e) {
              Promise.resolve().then(function () {
                s = void 0, e(i());
              });
            })), s;
          }),
          destroy: function destroy() {
            l(), p = !0;
          }
        };
      if (!Q(e, t)) return u;
      function l() {
        c.forEach(function (e) {
          return e();
        }), c = [];
      }
      return u.setOptions(r).then(function (e) {
        !p && r.onFirstUpdate && r.onFirstUpdate(e);
      }), u;
    };
  }
  var $ = {
    passive: !0
  };
  var ee = {
    name: "eventListeners",
    enabled: !0,
    phase: "write",
    fn: function fn() {},
    effect: function effect(e) {
      var n = e.state,
        r = e.instance,
        o = e.options,
        i = o.scroll,
        a = void 0 === i || i,
        s = o.resize,
        f = void 0 === s || s,
        c = t(n.elements.popper),
        p = [].concat(n.scrollParents.reference, n.scrollParents.popper);
      return a && p.forEach(function (e) {
        e.addEventListener("scroll", r.update, $);
      }), f && c.addEventListener("resize", r.update, $), function () {
        a && p.forEach(function (e) {
          e.removeEventListener("scroll", r.update, $);
        }), f && c.removeEventListener("resize", r.update, $);
      };
    },
    data: {}
  };
  var te = {
      name: "popperOffsets",
      enabled: !0,
      phase: "read",
      fn: function fn(e) {
        var t = e.state,
          n = e.name;
        t.modifiersData[n] = X({
          reference: t.rects.reference,
          element: t.rects.popper,
          strategy: "absolute",
          placement: t.placement
        });
      },
      data: {}
    },
    ne = {
      top: "auto",
      right: "auto",
      bottom: "auto",
      left: "auto"
    };
  function re(e) {
    var n,
      r = e.popper,
      o = e.popperRect,
      i = e.placement,
      a = e.variation,
      f = e.offsets,
      c = e.position,
      p = e.gpuAcceleration,
      u = e.adaptive,
      l = e.roundOffsets,
      h = e.isFixed,
      v = f.x,
      y = void 0 === v ? 0 : v,
      g = f.y,
      b = void 0 === g ? 0 : g,
      x = "function" == typeof l ? l({
        x: y,
        y: b
      }) : {
        x: y,
        y: b
      };
    y = x.x, b = x.y;
    var w = f.hasOwnProperty("x"),
      O = f.hasOwnProperty("y"),
      j = P,
      M = D,
      k = window;
    if (u) {
      var W = E(r),
        H = "clientHeight",
        T = "clientWidth";
      if (W === t(r) && "static" !== m(W = d(r)).position && "absolute" === c && (H = "scrollHeight", T = "scrollWidth"), W = W, i === D || (i === P || i === L) && a === B) M = A, b -= (h && W === k && k.visualViewport ? k.visualViewport.height : W[H]) - o.height, b *= p ? 1 : -1;
      if (i === P || (i === D || i === A) && a === B) j = L, y -= (h && W === k && k.visualViewport ? k.visualViewport.width : W[T]) - o.width, y *= p ? 1 : -1;
    }
    var R,
      S = Object.assign({
        position: c
      }, u && ne),
      V = !0 === l ? function (e, t) {
        var n = e.x,
          r = e.y,
          o = t.devicePixelRatio || 1;
        return {
          x: s(n * o) / o || 0,
          y: s(r * o) / o || 0
        };
      }({
        x: y,
        y: b
      }, t(r)) : {
        x: y,
        y: b
      };
    return y = V.x, b = V.y, p ? Object.assign({}, S, ((R = {})[M] = O ? "0" : "", R[j] = w ? "0" : "", R.transform = (k.devicePixelRatio || 1) <= 1 ? "translate(" + y + "px, " + b + "px)" : "translate3d(" + y + "px, " + b + "px, 0)", R)) : Object.assign({}, S, ((n = {})[M] = O ? b + "px" : "", n[j] = w ? y + "px" : "", n.transform = "", n));
  }
  var oe = {
    name: "computeStyles",
    enabled: !0,
    phase: "beforeWrite",
    fn: function fn(e) {
      var t = e.state,
        n = e.options,
        r = n.gpuAcceleration,
        o = void 0 === r || r,
        i = n.adaptive,
        a = void 0 === i || i,
        s = n.roundOffsets,
        f = void 0 === s || s,
        c = {
          placement: F(t.placement),
          variation: U(t.placement),
          popper: t.elements.popper,
          popperRect: t.rects.popper,
          gpuAcceleration: o,
          isFixed: "fixed" === t.options.strategy
        };
      null != t.modifiersData.popperOffsets && (t.styles.popper = Object.assign({}, t.styles.popper, re(Object.assign({}, c, {
        offsets: t.modifiersData.popperOffsets,
        position: t.options.strategy,
        adaptive: a,
        roundOffsets: f
      })))), null != t.modifiersData.arrow && (t.styles.arrow = Object.assign({}, t.styles.arrow, re(Object.assign({}, c, {
        offsets: t.modifiersData.arrow,
        position: "absolute",
        adaptive: !1,
        roundOffsets: f
      })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {
        "data-popper-placement": t.placement
      });
    },
    data: {}
  };
  var ie = {
    name: "applyStyles",
    enabled: !0,
    phase: "write",
    fn: function fn(e) {
      var t = e.state;
      Object.keys(t.elements).forEach(function (e) {
        var n = t.styles[e] || {},
          o = t.attributes[e] || {},
          i = t.elements[e];
        r(i) && l(i) && (Object.assign(i.style, n), Object.keys(o).forEach(function (e) {
          var t = o[e];
          !1 === t ? i.removeAttribute(e) : i.setAttribute(e, !0 === t ? "" : t);
        }));
      });
    },
    effect: function effect(e) {
      var t = e.state,
        n = {
          popper: {
            position: t.options.strategy,
            left: "0",
            top: "0",
            margin: "0"
          },
          arrow: {
            position: "absolute"
          },
          reference: {}
        };
      return Object.assign(t.elements.popper.style, n.popper), t.styles = n, t.elements.arrow && Object.assign(t.elements.arrow.style, n.arrow), function () {
        Object.keys(t.elements).forEach(function (e) {
          var o = t.elements[e],
            i = t.attributes[e] || {},
            a = Object.keys(t.styles.hasOwnProperty(e) ? t.styles[e] : n[e]).reduce(function (e, t) {
              return e[t] = "", e;
            }, {});
          r(o) && l(o) && (Object.assign(o.style, a), Object.keys(i).forEach(function (e) {
            o.removeAttribute(e);
          }));
        });
      };
    },
    requires: ["computeStyles"]
  };
  var ae = {
      name: "offset",
      enabled: !0,
      phase: "main",
      requires: ["popperOffsets"],
      fn: function fn(e) {
        var t = e.state,
          n = e.options,
          r = e.name,
          o = n.offset,
          i = void 0 === o ? [0, 0] : o,
          a = S.reduce(function (e, n) {
            return e[n] = function (e, t, n) {
              var r = F(e),
                o = [P, D].indexOf(r) >= 0 ? -1 : 1,
                i = "function" == typeof n ? n(Object.assign({}, t, {
                  placement: e
                })) : n,
                a = i[0],
                s = i[1];
              return a = a || 0, s = (s || 0) * o, [P, L].indexOf(r) >= 0 ? {
                x: s,
                y: a
              } : {
                x: a,
                y: s
              };
            }(n, t.rects, i), e;
          }, {}),
          s = a[t.placement],
          f = s.x,
          c = s.y;
        null != t.modifiersData.popperOffsets && (t.modifiersData.popperOffsets.x += f, t.modifiersData.popperOffsets.y += c), t.modifiersData[r] = a;
      }
    },
    se = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
  function fe(e) {
    return e.replace(/left|right|bottom|top/g, function (e) {
      return se[e];
    });
  }
  var ce = {
    start: "end",
    end: "start"
  };
  function pe(e) {
    return e.replace(/start|end/g, function (e) {
      return ce[e];
    });
  }
  function ue(e, t) {
    void 0 === t && (t = {});
    var n = t,
      r = n.placement,
      o = n.boundary,
      i = n.rootBoundary,
      a = n.padding,
      s = n.flipVariations,
      f = n.allowedAutoPlacements,
      c = void 0 === f ? S : f,
      p = U(r),
      u = p ? s ? R : R.filter(function (e) {
        return U(e) === p;
      }) : k,
      l = u.filter(function (e) {
        return c.indexOf(e) >= 0;
      });
    0 === l.length && (l = u);
    var d = l.reduce(function (t, n) {
      return t[n] = J(e, {
        placement: n,
        boundary: o,
        rootBoundary: i,
        padding: a
      })[F(n)], t;
    }, {});
    return Object.keys(d).sort(function (e, t) {
      return d[e] - d[t];
    });
  }
  var le = {
    name: "flip",
    enabled: !0,
    phase: "main",
    fn: function fn(e) {
      var t = e.state,
        n = e.options,
        r = e.name;
      if (!t.modifiersData[r]._skip) {
        for (var o = n.mainAxis, i = void 0 === o || o, a = n.altAxis, s = void 0 === a || a, f = n.fallbackPlacements, c = n.padding, p = n.boundary, u = n.rootBoundary, l = n.altBoundary, d = n.flipVariations, h = void 0 === d || d, m = n.allowedAutoPlacements, v = t.options.placement, y = F(v), g = f || (y === v || !h ? [fe(v)] : function (e) {
            if (F(e) === M) return [];
            var t = fe(e);
            return [pe(e), t, pe(t)];
          }(v)), b = [v].concat(g).reduce(function (e, n) {
            return e.concat(F(n) === M ? ue(t, {
              placement: n,
              boundary: p,
              rootBoundary: u,
              padding: c,
              flipVariations: h,
              allowedAutoPlacements: m
            }) : n);
          }, []), x = t.rects.reference, w = t.rects.popper, O = new Map(), j = !0, E = b[0], k = 0; k < b.length; k++) {
          var B = b[k],
            H = F(B),
            T = U(B) === W,
            R = [D, A].indexOf(H) >= 0,
            S = R ? "width" : "height",
            V = J(t, {
              placement: B,
              boundary: p,
              rootBoundary: u,
              altBoundary: l,
              padding: c
            }),
            q = R ? T ? L : P : T ? A : D;
          x[S] > w[S] && (q = fe(q));
          var C = fe(q),
            N = [];
          if (i && N.push(V[H] <= 0), s && N.push(V[q] <= 0, V[C] <= 0), N.every(function (e) {
            return e;
          })) {
            E = B, j = !1;
            break;
          }
          O.set(B, N);
        }
        if (j) for (var I = function I(e) {
            var t = b.find(function (t) {
              var n = O.get(t);
              if (n) return n.slice(0, e).every(function (e) {
                return e;
              });
            });
            if (t) return E = t, "break";
          }, _ = h ? 3 : 1; _ > 0; _--) {
          if ("break" === I(_)) break;
        }
        t.placement !== E && (t.modifiersData[r]._skip = !0, t.placement = E, t.reset = !0);
      }
    },
    requiresIfExists: ["offset"],
    data: {
      _skip: !1
    }
  };
  function de(e, t, n) {
    return i(e, a(t, n));
  }
  var he = {
    name: "preventOverflow",
    enabled: !0,
    phase: "main",
    fn: function fn(e) {
      var t = e.state,
        n = e.options,
        r = e.name,
        o = n.mainAxis,
        s = void 0 === o || o,
        f = n.altAxis,
        c = void 0 !== f && f,
        p = n.boundary,
        u = n.rootBoundary,
        l = n.altBoundary,
        d = n.padding,
        h = n.tether,
        m = void 0 === h || h,
        v = n.tetherOffset,
        y = void 0 === v ? 0 : v,
        b = J(t, {
          boundary: p,
          rootBoundary: u,
          padding: d,
          altBoundary: l
        }),
        x = F(t.placement),
        w = U(t.placement),
        O = !w,
        j = z(x),
        M = "x" === j ? "y" : "x",
        k = t.modifiersData.popperOffsets,
        B = t.rects.reference,
        H = t.rects.popper,
        T = "function" == typeof y ? y(Object.assign({}, t.rects, {
          placement: t.placement
        })) : y,
        R = "number" == typeof T ? {
          mainAxis: T,
          altAxis: T
        } : Object.assign({
          mainAxis: 0,
          altAxis: 0
        }, T),
        S = t.modifiersData.offset ? t.modifiersData.offset[t.placement] : null,
        V = {
          x: 0,
          y: 0
        };
      if (k) {
        if (s) {
          var q,
            C = "y" === j ? D : P,
            N = "y" === j ? A : L,
            I = "y" === j ? "height" : "width",
            _ = k[j],
            X = _ + b[C],
            Y = _ - b[N],
            G = m ? -H[I] / 2 : 0,
            K = w === W ? B[I] : H[I],
            Q = w === W ? -H[I] : -B[I],
            Z = t.elements.arrow,
            $ = m && Z ? g(Z) : {
              width: 0,
              height: 0
            },
            ee = t.modifiersData["arrow#persistent"] ? t.modifiersData["arrow#persistent"].padding : {
              top: 0,
              right: 0,
              bottom: 0,
              left: 0
            },
            te = ee[C],
            ne = ee[N],
            re = de(0, B[I], $[I]),
            oe = O ? B[I] / 2 - G - re - te - R.mainAxis : K - re - te - R.mainAxis,
            ie = O ? -B[I] / 2 + G + re + ne + R.mainAxis : Q + re + ne + R.mainAxis,
            ae = t.elements.arrow && E(t.elements.arrow),
            se = ae ? "y" === j ? ae.clientTop || 0 : ae.clientLeft || 0 : 0,
            fe = null != (q = null == S ? void 0 : S[j]) ? q : 0,
            ce = _ + ie - fe,
            pe = de(m ? a(X, _ + oe - fe - se) : X, _, m ? i(Y, ce) : Y);
          k[j] = pe, V[j] = pe - _;
        }
        if (c) {
          var ue,
            le = "x" === j ? D : P,
            he = "x" === j ? A : L,
            me = k[M],
            ve = "y" === M ? "height" : "width",
            ye = me + b[le],
            ge = me - b[he],
            be = -1 !== [D, P].indexOf(x),
            xe = null != (ue = null == S ? void 0 : S[M]) ? ue : 0,
            we = be ? ye : me - B[ve] - H[ve] - xe + R.altAxis,
            Oe = be ? me + B[ve] + H[ve] - xe - R.altAxis : ge,
            je = m && be ? function (e, t, n) {
              var r = de(e, t, n);
              return r > n ? n : r;
            }(we, me, Oe) : de(m ? we : ye, me, m ? Oe : ge);
          k[M] = je, V[M] = je - me;
        }
        t.modifiersData[r] = V;
      }
    },
    requiresIfExists: ["offset"]
  };
  var me = {
    name: "arrow",
    enabled: !0,
    phase: "main",
    fn: function fn(e) {
      var t,
        n = e.state,
        r = e.name,
        o = e.options,
        i = n.elements.arrow,
        a = n.modifiersData.popperOffsets,
        s = F(n.placement),
        f = z(s),
        c = [P, L].indexOf(s) >= 0 ? "height" : "width";
      if (i && a) {
        var p = function (e, t) {
            return Y("number" != typeof (e = "function" == typeof e ? e(Object.assign({}, t.rects, {
              placement: t.placement
            })) : e) ? e : G(e, k));
          }(o.padding, n),
          u = g(i),
          l = "y" === f ? D : P,
          d = "y" === f ? A : L,
          h = n.rects.reference[c] + n.rects.reference[f] - a[f] - n.rects.popper[c],
          m = a[f] - n.rects.reference[f],
          v = E(i),
          y = v ? "y" === f ? v.clientHeight || 0 : v.clientWidth || 0 : 0,
          b = h / 2 - m / 2,
          x = p[l],
          w = y - u[c] - p[d],
          O = y / 2 - u[c] / 2 + b,
          j = de(x, O, w),
          M = f;
        n.modifiersData[r] = ((t = {})[M] = j, t.centerOffset = j - O, t);
      }
    },
    effect: function effect(e) {
      var t = e.state,
        n = e.options.element,
        r = void 0 === n ? "[data-popper-arrow]" : n;
      null != r && ("string" != typeof r || (r = t.elements.popper.querySelector(r))) && C(t.elements.popper, r) && (t.elements.arrow = r);
    },
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };
  function ve(e, t, n) {
    return void 0 === n && (n = {
      x: 0,
      y: 0
    }), {
      top: e.top - t.height - n.y,
      right: e.right - t.width + n.x,
      bottom: e.bottom - t.height + n.y,
      left: e.left - t.width - n.x
    };
  }
  function ye(e) {
    return [D, L, A, P].some(function (t) {
      return e[t] >= 0;
    });
  }
  var ge = {
      name: "hide",
      enabled: !0,
      phase: "main",
      requiresIfExists: ["preventOverflow"],
      fn: function fn(e) {
        var t = e.state,
          n = e.name,
          r = t.rects.reference,
          o = t.rects.popper,
          i = t.modifiersData.preventOverflow,
          a = J(t, {
            elementContext: "reference"
          }),
          s = J(t, {
            altBoundary: !0
          }),
          f = ve(a, r),
          c = ve(s, o, i),
          p = ye(f),
          u = ye(c);
        t.modifiersData[n] = {
          referenceClippingOffsets: f,
          popperEscapeOffsets: c,
          isReferenceHidden: p,
          hasPopperEscaped: u
        }, t.attributes.popper = Object.assign({}, t.attributes.popper, {
          "data-popper-reference-hidden": p,
          "data-popper-escaped": u
        });
      }
    },
    be = Z({
      defaultModifiers: [ee, te, oe, ie]
    }),
    xe = [ee, te, oe, ie, ae, le, he, me, ge],
    we = Z({
      defaultModifiers: xe
    });
  e.applyStyles = ie, e.arrow = me, e.computeStyles = oe, e.createPopper = we, e.createPopperLite = be, e.defaultModifiers = xe, e.detectOverflow = J, e.eventListeners = ee, e.flip = le, e.hide = ge, e.offset = ae, e.popperGenerator = Z, e.popperOffsets = te, e.preventOverflow = he, Object.defineProperty(e, "__esModule", {
    value: !0
  });
});

},{}],55:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
 * @splidejs/splide-extension-grid
 * Version  : 0.4.1
 * License  : MIT
 * Copyright: 2022 Naotoshi Fujita
*/
(function (O) {
  typeof define == "function" && define.amd ? define(O) : O();
})(function () {
  "use strict";

  function O(n) {
    n.length = 0;
  }
  function S(n, t, i) {
    return Array.prototype.slice.call(n, t, i);
  }
  function T(n) {
    return n.bind.apply(n, [null].concat(S(arguments, 1)));
  }
  function V(n, t) {
    return _typeof(t) === n;
  }
  var Q = Array.isArray;
  T(V, "function"), T(V, "string"), T(V, "undefined");
  function X(n) {
    return Q(n) ? n : [n];
  }
  function Z(n, t) {
    X(n).forEach(t);
  }
  var hn = Object.keys;
  function En(n, t, i) {
    if (n) {
      var r = hn(n);
      r = i ? r.reverse() : r;
      for (var f = 0; f < r.length; f++) {
        var a = r[f];
        if (a !== "__proto__" && t(n[a], a) === !1) break;
      }
    }
    return n;
  }
  function gn(n) {
    return S(arguments, 1).forEach(function (t) {
      En(t, function (i, r) {
        n[r] = t[r];
      });
    }), n;
  }
  var j = "splide";
  function mn() {
    var n = [];
    function t(u, c, l, v) {
      f(u, c, function (d, g, m) {
        var _ = "addEventListener" in d,
          C = _ ? d.removeEventListener.bind(d, g, l, v) : d.removeListener.bind(d, l);
        _ ? d.addEventListener(g, l, v) : d.addListener(l), n.push([d, g, m, l, C]);
      });
    }
    function i(u, c, l) {
      f(u, c, function (v, d, g) {
        n = n.filter(function (m) {
          return m[0] === v && m[1] === d && m[2] === g && (!l || m[3] === l) ? (m[4](), !1) : !0;
        });
      });
    }
    function r(u, c, l) {
      var v,
        d = !0;
      return typeof CustomEvent == "function" ? v = new CustomEvent(c, {
        bubbles: d,
        detail: l
      }) : (v = document.createEvent("CustomEvent"), v.initCustomEvent(c, d, !1, l)), u.dispatchEvent(v), v;
    }
    function f(u, c, l) {
      Z(u, function (v) {
        v && Z(c, function (d) {
          d.split(" ").forEach(function (g) {
            var m = g.split(".");
            l(v, m[0], m[1]);
          });
        });
      });
    }
    function a() {
      n.forEach(function (u) {
        u[4]();
      }), O(n);
    }
    return {
      bind: t,
      unbind: i,
      dispatch: r,
      destroy: a
    };
  }
  var pn = "visible",
    yn = "hidden",
    H = "refresh",
    wn = "updated",
    _n = "destroy";
  function k(n) {
    var t = n ? n.event.bus : document.createDocumentFragment(),
      i = mn();
    function r(a, u) {
      i.bind(t, X(a).join(" "), function (c) {
        u.apply(u, Q(c.detail) ? c.detail : []);
      });
    }
    function f(a) {
      i.dispatch(t, a, S(arguments, 1));
    }
    return n && n.event.on(_n, i.destroy), gn(i, {
      bus: t,
      on: r,
      off: T(i.unbind, t),
      emit: f
    });
  }
  var Cn = j,
    $ = j + "__slide",
    An = $ + "__container";
  function nn(n) {
    n.length = 0;
  }
  function I(n, t, i) {
    return Array.prototype.slice.call(n, t, i);
  }
  function B(n) {
    return n.bind.apply(n, [null].concat(I(arguments, 1)));
  }
  function N(n, t) {
    return _typeof(t) === n;
  }
  function bn(n) {
    return !P(n) && N("object", n);
  }
  var F = Array.isArray;
  B(N, "function");
  var G = B(N, "string"),
    Ln = B(N, "undefined");
  function P(n) {
    return n === null;
  }
  function Dn(n) {
    return n instanceof HTMLElement;
  }
  function U(n) {
    return F(n) ? n : [n];
  }
  function A(n, t) {
    U(n).forEach(t);
  }
  function tn(n, t) {
    return n.push.apply(n, U(t)), n;
  }
  function rn(n, t, i) {
    n && A(t, function (r) {
      r && n.classList[i ? "add" : "remove"](r);
    });
  }
  function q(n, t) {
    rn(n, G(t) ? t.split(" ") : t, !0);
  }
  function R(n, t) {
    A(t, n.appendChild.bind(n));
  }
  function On(n, t) {
    return Dn(n) && (n.msMatchesSelector || n.matches).call(n, t);
  }
  function Tn(n, t) {
    var i = n ? I(n.children) : [];
    return t ? i.filter(function (r) {
      return On(r, t);
    }) : i;
  }
  function on(n, t) {
    return t ? Tn(n, t)[0] : n.firstElementChild;
  }
  var en = Object.keys;
  function un(n, t, i) {
    if (n) {
      var r = en(n);
      r = i ? r.reverse() : r;
      for (var f = 0; f < r.length; f++) {
        var a = r[f];
        if (a !== "__proto__" && t(n[a], a) === !1) break;
      }
    }
    return n;
  }
  function $n(n) {
    return I(arguments, 1).forEach(function (t) {
      un(t, function (i, r) {
        n[r] = t[r];
      });
    }), n;
  }
  function In(n, t) {
    U(t || en(n)).forEach(function (i) {
      delete n[i];
    });
  }
  function J(n, t) {
    A(n, function (i) {
      A(t, function (r) {
        i && i.removeAttribute(r);
      });
    });
  }
  function K(n, t, i) {
    bn(t) ? un(t, function (r, f) {
      K(n, f, r);
    }) : A(n, function (r) {
      P(i) || i === "" ? J(r, t) : r.setAttribute(t, String(i));
    });
  }
  function fn(n, t, i) {
    var r = document.createElement(n);
    return t && (G(t) ? q(r, t) : K(r, t)), i && R(i, r), r;
  }
  function p(n, t, i) {
    if (Ln(i)) return getComputedStyle(n)[t];
    P(i) || (n.style[t] = "" + i);
  }
  function Nn(n, t) {
    return n && n.classList.contains(t);
  }
  function Rn(n) {
    A(n, function (t) {
      t && t.parentNode && t.parentNode.removeChild(t);
    });
  }
  function an(n, t) {
    return t ? I(n.querySelectorAll(t)) : [];
  }
  function cn(n, t) {
    rn(n, t, !1);
  }
  function x(n) {
    return G(n) ? n : n ? n + "px" : "";
  }
  var xn = "splide";
  function Mn(n, t) {
    if (!n) throw new Error("[" + xn + "] " + (t || ""));
  }
  var Sn = Math.min,
    Un = Math.max,
    qn = Math.floor,
    Jn = Math.ceil,
    Kn = Math.abs;
  function Vn(n) {
    return n < 10 ? "0" + n : "" + n;
  }
  var sn = $ + "__row",
    z = $ + "--col",
    Hn = {
      rows: 1,
      cols: 1,
      dimensions: [],
      gap: {}
    };
  function Bn(n) {
    function t() {
      var f = n.rows,
        a = n.cols,
        u = n.dimensions;
      return F(u) && u.length ? u : [[f, a]];
    }
    function i(f) {
      var a = t();
      return a[Sn(f, a.length - 1)];
    }
    function r(f) {
      for (var a = t(), u, c, l = 0, v = 0; v < a.length; v++) {
        var d = a[v];
        if (u = d[0] || 1, c = d[1] || 1, l += u * c, f < l) break;
      }
      return Mn(u && c, "Invalid dimension"), [u, c];
    }
    return {
      get: i,
      getAt: r
    };
  }
  function Fn(n, t, i) {
    var r = k(n),
      f = r.on,
      a = r.destroy,
      u = n.Components,
      c = n.options,
      l = u.Direction.resolve,
      v = u.Slides.forEach;
    function d() {
      m(), c.slideFocus && (f(pn, W), f(yn, Y));
    }
    function g() {
      v(function (e) {
        var s = e.slide;
        D(s, !1), M(s).forEach(function (o) {
          J(o, "style");
        }), b(s).forEach(function (o) {
          L(o, !0), J(o, "style");
        });
      }), a();
    }
    function m() {
      v(function (e) {
        var s = e.slide,
          o = i.get(e.isClone ? e.slideIndex : e.index),
          h = o[0],
          E = o[1];
        _(h, s), C(E, s), b(e.slide).forEach(function (y, w) {
          y.id = e.slide.id + "-col" + Vn(w + 1), n.options.cover && L(y);
        });
      });
    }
    function _(e, s) {
      var o = t.gap.row,
        h = "calc(" + 100 / e + "%" + (o ? " - " + x(o) + " * " + (e - 1) / e : "") + ")";
      M(s).forEach(function (E, y, w) {
        p(E, "height", h), p(E, "display", "flex"), p(E, "margin", "0 0 " + x(o) + " 0"), p(E, "padding", 0), y === w.length - 1 && p(E, "marginBottom", 0);
      });
    }
    function C(e, s) {
      var o = t.gap.col,
        h = "calc(" + 100 / e + "%" + (o ? " - " + x(o) + " * " + (e - 1) / e : "") + ")";
      b(s).forEach(function (E, y, w) {
        p(E, "width", h), y !== w.length - 1 && p(E, l("marginRight"), x(o));
      });
    }
    function L(e, s) {
      var o = on(e, "." + An),
        h = on(o || e, "img");
      h && h.src && (p(o || e, "background", s ? "" : 'center/cover no-repeat url("' + h.src + '")'), p(h, "display", s ? "" : "none"));
    }
    function M(e) {
      return an(e, "." + sn);
    }
    function b(e) {
      return an(e, "." + z);
    }
    function D(e, s) {
      b(e).forEach(function (o) {
        K(o, "tabindex", s ? 0 : null);
      });
    }
    function W(e) {
      D(e.slide, !0);
    }
    function Y(e) {
      D(e.slide, !1);
    }
    return {
      mount: d,
      destroy: g
    };
  }
  function Gn(n, t, i) {
    var r = k(n),
      f = r.on,
      a = r.off,
      u = t.Elements,
      c = {},
      l = Bn(c),
      v = Fn(n, c, l),
      d = Cn + "--grid",
      g = [];
    function m() {
      _(), f(wn, _);
    }
    function _() {
      In(c), $n(c, Hn, i.grid || {}), Y() ? (C(), tn(g, u.slides), q(n.root, d), R(u.list, b()), a(H), f(H, M), L()) : e() && (C(), L());
    }
    function C() {
      if (e()) {
        var s = u.slides;
        v.destroy(), g.forEach(function (o) {
          cn(o, z), R(u.list, o);
        }), Rn(s), cn(n.root, d), nn(s), tn(s, g), nn(g), a(H);
      }
    }
    function L() {
      n.refresh();
    }
    function M() {
      e() && v.mount();
    }
    function b() {
      var s = [],
        o = 0,
        h = 0,
        E,
        y;
      return g.forEach(function (w, Pn) {
        var dn = l.getAt(Pn),
          vn = dn[0],
          ln = dn[1];
        h || (o || (E = fn(w.tagName, $), s.push(E)), y = D(vn, w, E)), W(ln, w, y), ++h >= ln && (h = 0, o = ++o >= vn ? 0 : o);
      }), s;
    }
    function D(s, o, h) {
      var E = o.tagName.toLowerCase() === "li" ? "ul" : "div";
      return fn(E, sn, h);
    }
    function W(s, o, h) {
      return q(o, z), R(h, o), o;
    }
    function Y() {
      if (i.grid) {
        var s = c.rows,
          o = c.cols,
          h = c.dimensions;
        return s > 1 || o > 1 || F(h) && h.length > 0;
      }
      return !1;
    }
    function e() {
      return Nn(n.root, d);
    }
    return {
      mount: m,
      destroy: C
    };
  }
  (typeof window === "undefined" ? "undefined" : _typeof(window)) < "u" && (window.splide = window.splide || {}, window.splide.Extensions = window.splide.Extensions || {}, window.splide.Extensions.Grid = Gn);
});

},{}],56:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function r(n, t) {
  for (var i = 0; i < t.length; i++) {
    var r = t[i];
    r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(n, r.key, r);
  }
}
function Jt(n, t, i) {
  t && r(n.prototype, t), i && r(n, i), Object.defineProperty(n, "prototype", {
    writable: !1
  });
}
/*!
 * Splide.js
 * Version  : 4.1.4
 * License  : MIT
 * Copyright: 2022 Naotoshi Fujita
 */
var n, t;
n = void 0, t = function t() {
  "use strict";

  var v = "(prefers-reduced-motion: reduce)",
    G = 4,
    rn = 5,
    r = {
      CREATED: 1,
      MOUNTED: 2,
      IDLE: 3,
      MOVING: G,
      SCROLLING: rn,
      DRAGGING: 6,
      DESTROYED: 7
    };
  function D(n) {
    n.length = 0;
  }
  function o(n, t, i) {
    return Array.prototype.slice.call(n, t, i);
  }
  function R(n) {
    return n.bind.apply(n, [null].concat(o(arguments, 1)));
  }
  function on() {}
  var p = setTimeout;
  function h(n) {
    return requestAnimationFrame(n);
  }
  function u(n, t) {
    return _typeof(t) === n;
  }
  function un(n) {
    return !c(n) && u("object", n);
  }
  var e = Array.isArray,
    x = R(u, "function"),
    C = R(u, "string"),
    en = R(u, "undefined");
  function c(n) {
    return null === n;
  }
  function m(n) {
    try {
      return n instanceof (n.ownerDocument.defaultView || window).HTMLElement;
    } catch (n) {
      return !1;
    }
  }
  function y(n) {
    return e(n) ? n : [n];
  }
  function g(n, t) {
    y(n).forEach(t);
  }
  function b(n, t) {
    return -1 < n.indexOf(t);
  }
  function k(n, t) {
    return n.push.apply(n, y(t)), n;
  }
  function A(t, n, i) {
    t && g(n, function (n) {
      n && t.classList[i ? "add" : "remove"](n);
    });
  }
  function M(n, t) {
    A(n, C(t) ? t.split(" ") : t, !0);
  }
  function L(n, t) {
    g(t, n.appendChild.bind(n));
  }
  function O(n, i) {
    g(n, function (n) {
      var t = (i || n).parentNode;
      t && t.insertBefore(n, i);
    });
  }
  function cn(n, t) {
    return m(n) && (n.msMatchesSelector || n.matches).call(n, t);
  }
  function S(n, t) {
    n = n ? o(n.children) : [];
    return t ? n.filter(function (n) {
      return cn(n, t);
    }) : n;
  }
  function fn(n, t) {
    return t ? S(n, t)[0] : n.firstElementChild;
  }
  var E = Object.keys;
  function w(t, i, n) {
    t && (n ? E(t).reverse() : E(t)).forEach(function (n) {
      "__proto__" !== n && i(t[n], n);
    });
  }
  function an(r) {
    return o(arguments, 1).forEach(function (i) {
      w(i, function (n, t) {
        r[t] = i[t];
      });
    }), r;
  }
  function d(i) {
    return o(arguments, 1).forEach(function (n) {
      w(n, function (n, t) {
        e(n) ? i[t] = n.slice() : un(n) ? i[t] = d({}, un(i[t]) ? i[t] : {}, n) : i[t] = n;
      });
    }), i;
  }
  function sn(t, n) {
    g(n || E(t), function (n) {
      delete t[n];
    });
  }
  function P(n, i) {
    g(n, function (t) {
      g(i, function (n) {
        t && t.removeAttribute(n);
      });
    });
  }
  function I(i, t, r) {
    un(t) ? w(t, function (n, t) {
      I(i, t, n);
    }) : g(i, function (n) {
      c(r) || "" === r ? P(n, t) : n.setAttribute(t, String(r));
    });
  }
  function j(n, t, i) {
    n = document.createElement(n);
    return t && (C(t) ? M : I)(n, t), i && L(i, n), n;
  }
  function _(n, t, i) {
    if (en(i)) return getComputedStyle(n)[t];
    c(i) || (n.style[t] = "" + i);
  }
  function ln(n, t) {
    _(n, "display", t);
  }
  function dn(n) {
    n.setActive && n.setActive() || n.focus({
      preventScroll: !0
    });
  }
  function z(n, t) {
    return n.getAttribute(t);
  }
  function vn(n, t) {
    return n && n.classList.contains(t);
  }
  function N(n) {
    return n.getBoundingClientRect();
  }
  function T(n) {
    g(n, function (n) {
      n && n.parentNode && n.parentNode.removeChild(n);
    });
  }
  function hn(n) {
    return fn(new DOMParser().parseFromString(n, "text/html").body);
  }
  function F(n, t) {
    n.preventDefault(), t && (n.stopPropagation(), n.stopImmediatePropagation());
  }
  function pn(n, t) {
    return n && n.querySelector(t);
  }
  function gn(n, t) {
    return t ? o(n.querySelectorAll(t)) : [];
  }
  function X(n, t) {
    A(n, t, !1);
  }
  function mn(n) {
    return n.timeStamp;
  }
  function W(n) {
    return C(n) ? n : n ? n + "px" : "";
  }
  var yn = "splide",
    f = "data-" + yn;
  function bn(n, t) {
    if (!n) throw new Error("[" + yn + "] " + (t || ""));
  }
  var Y = Math.min,
    wn = Math.max,
    xn = Math.floor,
    kn = Math.ceil,
    U = Math.abs;
  function Sn(n, t, i) {
    return U(n - t) < i;
  }
  function En(n, t, i, r) {
    var o = Y(t, i),
      t = wn(t, i);
    return r ? o < n && n < t : o <= n && n <= t;
  }
  function q(n, t, i) {
    var r = Y(t, i),
      t = wn(t, i);
    return Y(wn(r, n), t);
  }
  function Ln(n) {
    return (0 < n) - (n < 0);
  }
  function On(t, n) {
    return g(n, function (n) {
      t = t.replace("%s", "" + n);
    }), t;
  }
  function An(n) {
    return n < 10 ? "0" + n : "" + n;
  }
  var _n = {};
  function zn() {
    var c = [];
    function i(n, i, r) {
      g(n, function (t) {
        t && g(i, function (n) {
          n.split(" ").forEach(function (n) {
            n = n.split(".");
            r(t, n[0], n[1]);
          });
        });
      });
    }
    return {
      bind: function bind(n, t, u, e) {
        i(n, t, function (n, t, i) {
          var r = "addEventListener" in n,
            o = r ? n.removeEventListener.bind(n, t, u, e) : n.removeListener.bind(n, u);
          r ? n.addEventListener(t, u, e) : n.addListener(u), c.push([n, t, i, u, o]);
        });
      },
      unbind: function unbind(n, t, o) {
        i(n, t, function (t, i, r) {
          c = c.filter(function (n) {
            return !!(n[0] !== t || n[1] !== i || n[2] !== r || o && n[3] !== o) || (n[4](), !1);
          });
        });
      },
      dispatch: function dispatch(n, t, i) {
        var r;
        return "function" == typeof CustomEvent ? r = new CustomEvent(t, {
          bubbles: !0,
          detail: i
        }) : (r = document.createEvent("CustomEvent")).initCustomEvent(t, !0, !1, i), n.dispatchEvent(r), r;
      },
      destroy: function destroy() {
        c.forEach(function (n) {
          n[4]();
        }), D(c);
      }
    };
  }
  var B = "mounted",
    H = "move",
    Dn = "moved",
    Mn = "click",
    Pn = "active",
    In = "inactive",
    Rn = "visible",
    Cn = "hidden",
    J = "refresh",
    K = "updated",
    jn = "resize",
    Nn = "resized",
    Tn = "scroll",
    V = "scrolled",
    a = "destroy",
    Gn = "navigation:mounted",
    Fn = "autoplay:play",
    Xn = "autoplay:pause",
    Wn = "lazyload:loaded",
    Yn = "sk",
    Un = "sh";
  function Q(n) {
    var i = n ? n.event.bus : document.createDocumentFragment(),
      r = zn();
    return n && n.event.on(a, r.destroy), an(r, {
      bus: i,
      on: function on(n, t) {
        r.bind(i, y(n).join(" "), function (n) {
          t.apply(t, e(n.detail) ? n.detail : []);
        });
      },
      off: R(r.unbind, i),
      emit: function emit(n) {
        r.dispatch(i, n, o(arguments, 1));
      }
    });
  }
  function qn(t, n, i, r) {
    var o,
      u,
      e = Date.now,
      c = 0,
      f = !0,
      a = 0;
    function s() {
      if (!f) {
        if (c = t ? Y((e() - o) / t, 1) : 1, i && i(c), 1 <= c && (n(), o = e(), r && ++a >= r)) return l();
        u = h(s);
      }
    }
    function l() {
      f = !0;
    }
    function d() {
      u && cancelAnimationFrame(u), f = !(u = c = 0);
    }
    return {
      start: function start(n) {
        n || d(), o = e() - (n ? c * t : 0), f = !1, u = h(s);
      },
      rewind: function rewind() {
        o = e(), c = 0, i && i(c);
      },
      pause: l,
      cancel: d,
      set: function set(n) {
        t = n;
      },
      isPaused: function isPaused() {
        return f;
      }
    };
  }
  function s(n) {
    var t = n;
    return {
      set: function set(n) {
        t = n;
      },
      is: function is(n) {
        return b(y(n), t);
      }
    };
  }
  var n = "Arrow",
    Bn = n + "Left",
    Hn = n + "Right",
    t = n + "Up",
    n = n + "Down",
    Jn = "ttb",
    l = {
      width: ["height"],
      left: ["top", "right"],
      right: ["bottom", "left"],
      x: ["y"],
      X: ["Y"],
      Y: ["X"],
      ArrowLeft: [t, Hn],
      ArrowRight: [n, Bn]
    };
  var Z = "role",
    $ = "tabindex",
    i = "aria-",
    Kn = i + "controls",
    Vn = i + "current",
    Qn = i + "selected",
    nn = i + "label",
    Zn = i + "labelledby",
    $n = i + "hidden",
    nt = i + "orientation",
    tt = i + "roledescription",
    it = i + "live",
    rt = i + "busy",
    ot = i + "atomic",
    ut = [Z, $, "disabled", Kn, Vn, nn, Zn, $n, nt, tt],
    i = yn + "__",
    et = yn,
    ct = i + "track",
    ft = i + "list",
    at = i + "slide",
    st = at + "--clone",
    lt = at + "__container",
    dt = i + "arrows",
    vt = i + "arrow",
    ht = vt + "--prev",
    pt = vt + "--next",
    gt = i + "pagination",
    mt = gt + "__page",
    yt = i + "progress" + "__bar",
    bt = i + "toggle",
    wt = i + "sr",
    tn = "is-active",
    xt = "is-prev",
    kt = "is-next",
    St = "is-visible",
    Et = "is-loading",
    Lt = "is-focus-in",
    Ot = "is-overflow",
    At = [tn, St, xt, kt, Et, Lt, Ot];
  var _t = "touchstart mousedown",
    zt = "touchmove mousemove",
    Dt = "touchend touchcancel mouseup click";
  var Mt = "slide",
    Pt = "loop",
    It = "fade";
  function Rt(o, r, t, u) {
    var e,
      n = Q(o),
      i = n.on,
      c = n.emit,
      f = n.bind,
      a = o.Components,
      s = o.root,
      l = o.options,
      d = l.isNavigation,
      v = l.updateOnMove,
      h = l.i18n,
      p = l.pagination,
      g = l.slideFocus,
      m = a.Direction.resolve,
      y = z(u, "style"),
      b = z(u, nn),
      w = -1 < t,
      x = fn(u, "." + lt);
    function k() {
      var n = o.splides.map(function (n) {
        n = n.splide.Components.Slides.getAt(r);
        return n ? n.slide.id : "";
      }).join(" ");
      I(u, nn, On(h.slideX, (w ? t : r) + 1)), I(u, Kn, n), I(u, Z, g ? "button" : ""), g && P(u, tt);
    }
    function S() {
      e || E();
    }
    function E() {
      var n, t, i;
      e || (n = o.index, (i = L()) !== vn(u, tn) && (A(u, tn, i), I(u, Vn, d && i || ""), c(i ? Pn : In, O)), i = function () {
        if (o.is(It)) return L();
        var n = N(a.Elements.track),
          t = N(u),
          i = m("left", !0),
          r = m("right", !0);
        return xn(n[i]) <= kn(t[i]) && xn(t[r]) <= kn(n[r]);
      }(), t = !i && (!L() || w), o.state.is([G, rn]) || I(u, $n, t || ""), I(gn(u, l.focusableNodes || ""), $, t ? -1 : ""), g && I(u, $, t ? -1 : 0), i !== vn(u, St) && (A(u, St, i), c(i ? Rn : Cn, O)), i || document.activeElement !== u || (t = a.Slides.getAt(o.index)) && dn(t.slide), A(u, xt, r === n - 1), A(u, kt, r === n + 1));
    }
    function L() {
      var n = o.index;
      return n === r || l.cloneStatus && n === t;
    }
    var O = {
      index: r,
      slideIndex: t,
      slide: u,
      container: x,
      isClone: w,
      mount: function mount() {
        w || (u.id = s.id + "-slide" + An(r + 1), I(u, Z, p ? "tabpanel" : "group"), I(u, tt, h.slide), I(u, nn, b || On(h.slideLabel, [r + 1, o.length]))), f(u, "click", R(c, Mn, O)), f(u, "keydown", R(c, Yn, O)), i([Dn, Un, V], E), i(Gn, k), v && i(H, S);
      },
      destroy: function destroy() {
        e = !0, n.destroy(), X(u, At), P(u, ut), I(u, "style", y), I(u, nn, b || "");
      },
      update: E,
      style: function style(n, t, i) {
        _(i && x || u, n, t);
      },
      isWithin: function isWithin(n, t) {
        return n = U(n - r), (n = w || !l.rewind && !o.is(Pt) ? n : Y(n, o.length - n)) <= t;
      }
    };
    return O;
  }
  var Ct = f + "-interval";
  var jt = {
    passive: !1,
    capture: !0
  };
  var Nt = {
    Spacebar: " ",
    Right: Hn,
    Left: Bn,
    Up: t,
    Down: n
  };
  function Tt(n) {
    return n = C(n) ? n : n.key, Nt[n] || n;
  }
  var Gt = "keydown";
  var Ft = f + "-lazy",
    Xt = Ft + "-srcset",
    Wt = "[" + Ft + "], [" + Xt + "]";
  var Yt = [" ", "Enter"];
  var Ut = Object.freeze({
      __proto__: null,
      Media: function Media(r, n, o) {
        var u = r.state,
          t = o.breakpoints || {},
          e = o.reducedMotion || {},
          i = zn(),
          c = [];
        function f(n) {
          n && i.destroy();
        }
        function a(n, t) {
          t = matchMedia(t);
          i.bind(t, "change", s), c.push([n, t]);
        }
        function s() {
          var n = u.is(7),
            t = o.direction,
            i = c.reduce(function (n, t) {
              return d(n, t[1].matches ? t[0] : {});
            }, {});
          sn(o), l(i), o.destroy ? r.destroy("completely" === o.destroy) : n ? (f(!0), r.mount()) : t !== o.direction && r.refresh();
        }
        function l(n, t, i) {
          d(o, n), t && d(Object.getPrototypeOf(o), n), !i && u.is(1) || r.emit(K, o);
        }
        return {
          setup: function setup() {
            var i = "min" === o.mediaQuery;
            E(t).sort(function (n, t) {
              return i ? +n - +t : +t - +n;
            }).forEach(function (n) {
              a(t[n], "(" + (i ? "min" : "max") + "-width:" + n + "px)");
            }), a(e, v), s();
          },
          destroy: f,
          reduce: function reduce(n) {
            matchMedia(v).matches && (n ? d(o, e) : sn(o, E(e)));
          },
          set: l
        };
      },
      Direction: function Direction(n, t, o) {
        return {
          resolve: function resolve(n, t, i) {
            var r = "rtl" !== (i = i || o.direction) || t ? i === Jn ? 0 : -1 : 1;
            return l[n] && l[n][r] || n.replace(/width|left|right/i, function (n, t) {
              n = l[n.toLowerCase()][r] || n;
              return 0 < t ? n.charAt(0).toUpperCase() + n.slice(1) : n;
            });
          },
          orient: function orient(n) {
            return n * ("rtl" === o.direction ? 1 : -1);
          }
        };
      },
      Elements: function Elements(n, t, i) {
        var r,
          o,
          u,
          e = Q(n),
          c = e.on,
          f = e.bind,
          a = n.root,
          s = i.i18n,
          l = {},
          d = [],
          v = [],
          h = [];
        function p() {
          r = y("." + ct), o = fn(r, "." + ft), bn(r && o, "A track/list element is missing."), k(d, S(o, "." + at + ":not(." + st + ")")), w({
            arrows: dt,
            pagination: gt,
            prev: ht,
            next: pt,
            bar: yt,
            toggle: bt
          }, function (n, t) {
            l[t] = y("." + n);
          }), an(l, {
            root: a,
            track: r,
            list: o,
            slides: d
          });
          var n = a.id || function (n) {
              return "" + n + An(_n[n] = (_n[n] || 0) + 1);
            }(yn),
            t = i.role;
          a.id = n, r.id = r.id || n + "-track", o.id = o.id || n + "-list", !z(a, Z) && "SECTION" !== a.tagName && t && I(a, Z, t), I(a, tt, s.carousel), I(o, Z, "presentation"), m();
        }
        function g(n) {
          var t = ut.concat("style");
          D(d), X(a, v), X(r, h), P([r, o], t), P(a, n ? t : ["style", tt]);
        }
        function m() {
          X(a, v), X(r, h), v = b(et), h = b(ct), M(a, v), M(r, h), I(a, nn, i.label), I(a, Zn, i.labelledby);
        }
        function y(n) {
          n = pn(a, n);
          return n && function (n, t) {
            if (x(n.closest)) return n.closest(t);
            for (var i = n; i && 1 === i.nodeType && !cn(i, t);) i = i.parentElement;
            return i;
          }(n, "." + et) === a ? n : void 0;
        }
        function b(n) {
          return [n + "--" + i.type, n + "--" + i.direction, i.drag && n + "--draggable", i.isNavigation && n + "--nav", n === et && tn];
        }
        return an(l, {
          setup: p,
          mount: function mount() {
            c(J, g), c(J, p), c(K, m), f(document, _t + " keydown", function (n) {
              u = "keydown" === n.type;
            }, {
              capture: !0
            }), f(a, "focusin", function () {
              A(a, Lt, !!u);
            });
          },
          destroy: g
        });
      },
      Slides: function Slides(r, o, u) {
        var n = Q(r),
          t = n.on,
          e = n.emit,
          c = n.bind,
          f = (n = o.Elements).slides,
          a = n.list,
          s = [];
        function i() {
          f.forEach(function (n, t) {
            d(n, t, -1);
          });
        }
        function l() {
          h(function (n) {
            n.destroy();
          }), D(s);
        }
        function d(n, t, i) {
          t = Rt(r, t, i, n);
          t.mount(), s.push(t), s.sort(function (n, t) {
            return n.index - t.index;
          });
        }
        function v(n) {
          return n ? p(function (n) {
            return !n.isClone;
          }) : s;
        }
        function h(n, t) {
          v(t).forEach(n);
        }
        function p(t) {
          return s.filter(x(t) ? t : function (n) {
            return C(t) ? cn(n.slide, t) : b(y(t), n.index);
          });
        }
        return {
          mount: function mount() {
            i(), t(J, l), t(J, i);
          },
          destroy: l,
          update: function update() {
            h(function (n) {
              n.update();
            });
          },
          register: d,
          get: v,
          getIn: function getIn(n) {
            var t = o.Controller,
              i = t.toIndex(n),
              r = t.hasFocus() ? 1 : u.perPage;
            return p(function (n) {
              return En(n.index, i, i + r - 1);
            });
          },
          getAt: function getAt(n) {
            return p(n)[0];
          },
          add: function add(n, o) {
            g(n, function (n) {
              var t, i, r;
              m(n = C(n) ? hn(n) : n) && ((t = f[o]) ? O(n, t) : L(a, n), M(n, u.classes.slide), t = n, i = R(e, jn), t = gn(t, "img"), (r = t.length) ? t.forEach(function (n) {
                c(n, "load error", function () {
                  --r || i();
                });
              }) : i());
            }), e(J);
          },
          remove: function remove(n) {
            T(p(n).map(function (n) {
              return n.slide;
            })), e(J);
          },
          forEach: h,
          filter: p,
          style: function style(t, i, r) {
            h(function (n) {
              n.style(t, i, r);
            });
          },
          getLength: function getLength(n) {
            return (n ? f : s).length;
          },
          isEnough: function isEnough() {
            return s.length > u.perPage;
          }
        };
      },
      Layout: function Layout(t, n, i) {
        var r,
          o,
          u,
          e = (a = Q(t)).on,
          c = a.bind,
          f = a.emit,
          a = n.Slides,
          s = n.Direction.resolve,
          l = (n = n.Elements).root,
          d = n.track,
          v = n.list,
          h = a.getAt,
          p = a.style;
        function g() {
          r = i.direction === Jn, _(l, "maxWidth", W(i.width)), _(d, s("paddingLeft"), y(!1)), _(d, s("paddingRight"), y(!0)), m(!0);
        }
        function m(n) {
          var t = N(l);
          !n && o.width === t.width && o.height === t.height || (_(d, "height", function () {
            var n = "";
            r && (bn(n = b(), "height or heightRatio is missing."), n = "calc(" + n + " - " + y(!1) + " - " + y(!0) + ")");
            return n;
          }()), p(s("marginRight"), W(i.gap)), p("width", i.autoWidth ? null : W(i.fixedWidth) || (r ? "" : w())), p("height", W(i.fixedHeight) || (r ? i.autoHeight ? null : w() : b()), !0), o = t, f(Nn), u !== (u = O()) && (A(l, Ot, u), f("overflow", u)));
        }
        function y(n) {
          var t = i.padding,
            n = s(n ? "right" : "left");
          return t && W(t[n] || (un(t) ? 0 : t)) || "0px";
        }
        function b() {
          return W(i.height || N(v).width * i.heightRatio);
        }
        function w() {
          var n = W(i.gap);
          return "calc((100%" + (n && " + " + n) + ")/" + (i.perPage || 1) + (n && " - " + n) + ")";
        }
        function x() {
          return N(v)[s("width")];
        }
        function k(n, t) {
          n = h(n || 0);
          return n ? N(n.slide)[s("width")] + (t ? 0 : L()) : 0;
        }
        function S(n, t) {
          var i,
            n = h(n);
          return n ? (n = N(n.slide)[s("right")], i = N(v)[s("left")], U(n - i) + (t ? 0 : L())) : 0;
        }
        function E(n) {
          return S(t.length - 1) - S(0) + k(0, n);
        }
        function L() {
          var n = h(0);
          return n && parseFloat(_(n.slide, s("marginRight"))) || 0;
        }
        function O() {
          return t.is(It) || E(!0) > x();
        }
        return {
          mount: function mount() {
            var n, t, i;
            g(), c(window, "resize load", (n = R(f, jn), i = qn(t || 0, n, null, 1), function () {
              i.isPaused() && i.start();
            })), e([K, J], g), e(jn, m);
          },
          resize: m,
          listSize: x,
          slideSize: k,
          sliderSize: E,
          totalSize: S,
          getPadding: function getPadding(n) {
            return parseFloat(_(d, s("padding" + (n ? "Right" : "Left")))) || 0;
          },
          isOverflow: O
        };
      },
      Clones: function Clones(c, i, f) {
        var t,
          r = Q(c),
          n = r.on,
          a = i.Elements,
          s = i.Slides,
          o = i.Direction.resolve,
          l = [];
        function u() {
          if (n(J, d), n([K, jn], v), t = h()) {
            var o = t,
              u = s.get().slice(),
              e = u.length;
            if (e) {
              for (; u.length < o;) k(u, u);
              k(u.slice(-o), u.slice(0, o)).forEach(function (n, t) {
                var i = t < o,
                  r = function (n, t) {
                    n = n.cloneNode(!0);
                    return M(n, f.classes.clone), n.id = c.root.id + "-clone" + An(t + 1), n;
                  }(n.slide, t);
                i ? O(r, u[0].slide) : L(a.list, r), k(l, r), s.register(r, t - o + (i ? 0 : e), n.index);
              });
            }
            i.Layout.resize(!0);
          }
        }
        function d() {
          e(), u();
        }
        function e() {
          T(l), D(l), r.destroy();
        }
        function v() {
          var n = h();
          t !== n && (t < n || !n) && r.emit(J);
        }
        function h() {
          var n,
            t = f.clones;
          return c.is(Pt) ? en(t) && (t = (n = f[o("fixedWidth")] && i.Layout.slideSize(0)) && kn(N(a.track)[o("width")] / n) || f[o("autoWidth")] && c.length || 2 * f.perPage) : t = 0, t;
        }
        return {
          mount: u,
          destroy: e
        };
      },
      Move: function Move(r, c, o) {
        var e,
          n = Q(r),
          t = n.on,
          f = n.emit,
          a = r.state.set,
          u = (n = c.Layout).slideSize,
          i = n.getPadding,
          s = n.totalSize,
          l = n.listSize,
          d = n.sliderSize,
          v = (n = c.Direction).resolve,
          h = n.orient,
          p = (n = c.Elements).list,
          g = n.track;
        function m() {
          c.Controller.isBusy() || (c.Scroll.cancel(), y(r.index), c.Slides.update());
        }
        function y(n) {
          b(S(n, !0));
        }
        function b(n, t) {
          r.is(It) || (t = t ? n : function (n) {
            {
              var t, i;
              r.is(Pt) && (t = k(n), i = t > c.Controller.getEnd(), (t < 0 || i) && (n = w(n, i)));
            }
            return n;
          }(n), _(p, "transform", "translate" + v("X") + "(" + t + "px)"), n !== t && f(Un));
        }
        function w(n, t) {
          var i = n - L(t),
            r = d();
          return n -= h(r * (kn(U(i) / r) || 1)) * (t ? 1 : -1);
        }
        function x() {
          b(E(), !0), e.cancel();
        }
        function k(n) {
          for (var t = c.Slides.get(), i = 0, r = 1 / 0, o = 0; o < t.length; o++) {
            var u = t[o].index,
              e = U(S(u, !0) - n);
            if (!(e <= r)) break;
            r = e, i = u;
          }
          return i;
        }
        function S(n, t) {
          var i = h(s(n - 1) - (n = n, "center" === (i = o.focus) ? (l() - u(n, !0)) / 2 : +i * u(n) || 0));
          return t ? (n = i, n = o.trimSpace && r.is(Mt) ? q(n, 0, h(d(!0) - l())) : n) : i;
        }
        function E() {
          var n = v("left");
          return N(p)[n] - N(g)[n] + h(i(!1));
        }
        function L(n) {
          return S(n ? c.Controller.getEnd() : 0, !!o.trimSpace);
        }
        return {
          mount: function mount() {
            e = c.Transition, t([B, Nn, K, J], m);
          },
          move: function move(n, t, i, r) {
            var o, u;
            n !== t && (o = i < n, u = h(w(E(), o)), o ? 0 <= u : u <= p[v("scrollWidth")] - N(g)[v("width")]) && (x(), b(w(E(), i < n), !0)), a(G), f(H, t, i, n), e.start(t, function () {
              a(3), f(Dn, t, i, n), r && r();
            });
          },
          jump: y,
          translate: b,
          shift: w,
          cancel: x,
          toIndex: k,
          toPosition: S,
          getPosition: E,
          getLimit: L,
          exceededLimit: function exceededLimit(n, t) {
            t = en(t) ? E() : t;
            var i = !0 !== n && h(t) < h(L(!1)),
              n = !1 !== n && h(t) > h(L(!0));
            return i || n;
          },
          reposition: m
        };
      },
      Controller: function Controller(o, u, e) {
        var c,
          f,
          a,
          s,
          n = Q(o),
          t = n.on,
          i = n.emit,
          l = u.Move,
          d = l.getPosition,
          r = l.getLimit,
          v = l.toPosition,
          h = (n = u.Slides).isEnough,
          p = n.getLength,
          g = e.omitEnd,
          m = o.is(Pt),
          y = o.is(Mt),
          b = R(L, !1),
          w = R(L, !0),
          x = e.start || 0,
          k = x;
        function S() {
          f = p(!0), a = e.perMove, s = e.perPage, c = _();
          var n = q(x, 0, g ? c : f - 1);
          n !== x && (x = n, l.reposition());
        }
        function E() {
          c !== _() && i("ei");
        }
        function L(n, t) {
          var i = a || (P() ? 1 : s),
            i = O(x + i * (n ? -1 : 1), x, !(a || P()));
          return -1 === i && y && !Sn(d(), r(!n), 1) ? n ? 0 : c : t ? i : A(i);
        }
        function O(n, t, i) {
          var r;
          return h() || P() ? ((r = function (n) {
            if (y && "move" === e.trimSpace && n !== x) for (var t = d(); t === v(n, !0) && En(n, 0, o.length - 1, !e.rewind);) n < x ? --n : ++n;
            return n;
          }(n)) !== n && (t = n, n = r, i = !1), n < 0 || c < n ? n = a || !En(0, n, t, !0) && !En(c, t, n, !0) ? m ? i ? n < 0 ? -(f % s || s) : f : n : e.rewind ? n < 0 ? c : 0 : -1 : z(D(n)) : i && n !== t && (n = z(D(t) + (n < t ? -1 : 1)))) : n = -1, n;
        }
        function A(n) {
          return m ? (n + f) % f || 0 : n;
        }
        function _() {
          for (var n = f - (P() || m && a ? 1 : s); g && 0 < n--;) if (v(f - 1, !0) !== v(n, !0)) {
            n++;
            break;
          }
          return q(n, 0, f - 1);
        }
        function z(n) {
          return q(P() ? n : s * n, 0, c);
        }
        function D(n) {
          return P() ? Y(n, c) : xn((c <= n ? f - 1 : n) / s);
        }
        function M(n) {
          n !== x && (k = x, x = n);
        }
        function P() {
          return !en(e.focus) || e.isNavigation;
        }
        function I() {
          return o.state.is([G, rn]) && !!e.waitForTransition;
        }
        return {
          mount: function mount() {
            S(), t([K, J, "ei"], S), t(Nn, E);
          },
          go: function go(n, t, i) {
            var r;
            I() || -1 < (r = A(n = function (n) {
              var t = x;
              {
                var i, r;
                C(n) ? (r = n.match(/([+\-<>])(\d+)?/) || [], i = r[1], r = r[2], "+" === i || "-" === i ? t = O(x + +("" + i + (+r || 1)), x) : ">" === i ? t = r ? z(+r) : b(!0) : "<" === i && (t = w(!0))) : t = m ? n : q(n, 0, c);
              }
              return t;
            }(n))) && (t || r !== x) && (M(r), l.move(n, r, k, i));
          },
          scroll: function scroll(n, t, i, r) {
            u.Scroll.scroll(n, t, i, function () {
              var n = A(l.toIndex(d()));
              M(g ? Y(n, c) : n), r && r();
            });
          },
          getNext: b,
          getPrev: w,
          getAdjacent: L,
          getEnd: _,
          setIndex: M,
          getIndex: function getIndex(n) {
            return n ? k : x;
          },
          toIndex: z,
          toPage: D,
          toDest: function toDest(n) {
            return n = l.toIndex(n), y ? q(n, 0, c) : n;
          },
          hasFocus: P,
          isBusy: I
        };
      },
      Arrows: function Arrows(o, n, t) {
        var i,
          r,
          u = Q(o),
          e = u.on,
          c = u.bind,
          f = u.emit,
          a = t.classes,
          s = t.i18n,
          l = n.Elements,
          d = n.Controller,
          v = l.arrows,
          h = l.track,
          p = v,
          g = l.prev,
          m = l.next,
          y = {};
        function b() {
          var n = t.arrows;
          !n || g && m || (p = v || j("div", a.arrows), g = S(!0), m = S(!1), i = !0, L(p, [g, m]), v || O(p, h)), g && m && (an(y, {
            prev: g,
            next: m
          }), ln(p, n ? "" : "none"), M(p, r = dt + "--" + t.direction), n && (e([B, Dn, J, V, "ei"], E), c(m, "click", R(k, ">")), c(g, "click", R(k, "<")), E(), I([g, m], Kn, h.id), f("arrows:mounted", g, m))), e(K, w);
        }
        function w() {
          x(), b();
        }
        function x() {
          u.destroy(), X(p, r), i ? (T(v ? [g, m] : p), g = m = null) : P([g, m], ut);
        }
        function k(n) {
          d.go(n, !0);
        }
        function S(n) {
          return hn('<button class="' + a.arrow + " " + (n ? a.prev : a.next) + '" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="' + (t.arrowPath || "m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z") + '" />');
        }
        function E() {
          var n, t, i, r;
          g && m && (r = o.index, n = d.getPrev(), t = d.getNext(), i = -1 < n && r < n ? s.last : s.prev, r = -1 < t && t < r ? s.first : s.next, g.disabled = n < 0, m.disabled = t < 0, I(g, nn, i), I(m, nn, r), f("arrows:updated", g, m, n, t));
        }
        return {
          arrows: y,
          mount: b,
          destroy: x,
          update: E
        };
      },
      Autoplay: function Autoplay(n, t, i) {
        var r,
          o,
          u = Q(n),
          e = u.on,
          c = u.bind,
          f = u.emit,
          a = qn(i.interval, n.go.bind(n, ">"), function (n) {
            var t = l.bar;
            t && _(t, "width", 100 * n + "%"), f("autoplay:playing", n);
          }),
          s = a.isPaused,
          l = t.Elements,
          d = (u = t.Elements).root,
          v = u.toggle,
          h = i.autoplay,
          p = "pause" === h;
        function g() {
          s() && t.Slides.isEnough() && (a.start(!i.resetProgress), o = r = p = !1, b(), f(Fn));
        }
        function m(n) {
          p = !!(n = void 0 === n ? !0 : n), b(), s() || (a.pause(), f(Xn));
        }
        function y() {
          p || (r || o ? m(!1) : g());
        }
        function b() {
          v && (A(v, tn, !p), I(v, nn, i.i18n[p ? "play" : "pause"]));
        }
        function w(n) {
          n = t.Slides.getAt(n);
          a.set(n && +z(n.slide, Ct) || i.interval);
        }
        return {
          mount: function mount() {
            h && (i.pauseOnHover && c(d, "mouseenter mouseleave", function (n) {
              r = "mouseenter" === n.type, y();
            }), i.pauseOnFocus && c(d, "focusin focusout", function (n) {
              o = "focusin" === n.type, y();
            }), v && c(v, "click", function () {
              p ? g() : m(!0);
            }), e([H, Tn, J], a.rewind), e(H, w), v && I(v, Kn, l.track.id), p || g(), b());
          },
          destroy: a.cancel,
          play: g,
          pause: m,
          isPaused: s
        };
      },
      Cover: function Cover(n, t, i) {
        var r = Q(n).on;
        function o(i) {
          t.Slides.forEach(function (n) {
            var t = fn(n.container || n.slide, "img");
            t && t.src && u(i, t, n);
          });
        }
        function u(n, t, i) {
          i.style("background", n ? 'center/cover no-repeat url("' + t.src + '")' : "", !0), ln(t, n ? "none" : "");
        }
        return {
          mount: function mount() {
            i.cover && (r(Wn, R(u, !0)), r([B, K, J], R(o, !0)));
          },
          destroy: R(o, !1)
        };
      },
      Scroll: function Scroll(n, c, u) {
        var f,
          a,
          t = Q(n),
          i = t.on,
          s = t.emit,
          l = n.state.set,
          d = c.Move,
          v = d.getPosition,
          e = d.getLimit,
          h = d.exceededLimit,
          p = d.translate,
          g = n.is(Mt),
          m = 1;
        function y(n, t, i, r, o) {
          var u,
            e = v(),
            i = (x(), !i || g && h() || (i = c.Layout.sliderSize(), u = Ln(n) * i * xn(U(n) / i) || 0, n = d.toPosition(c.Controller.toDest(n % i)) + u), Sn(e, n, 1));
          m = 1, t = i ? 0 : t || wn(U(n - e) / 1.5, 800), a = r, f = qn(t, b, R(w, e, n, o), 1), l(rn), s(Tn), f.start();
        }
        function b() {
          l(3), a && a(), s(V);
        }
        function w(n, t, i, r) {
          var o = v(),
            r = (n + (t - n) * (t = r, (n = u.easingFunc) ? n(t) : 1 - Math.pow(1 - t, 4)) - o) * m;
          p(o + r), g && !i && h() && (m *= .6, U(r) < 10 && y(e(h(!0)), 600, !1, a, !0));
        }
        function x() {
          f && f.cancel();
        }
        function r() {
          f && !f.isPaused() && (x(), b());
        }
        return {
          mount: function mount() {
            i(H, x), i([K, J], r);
          },
          destroy: x,
          scroll: y,
          cancel: r
        };
      },
      Drag: function Drag(e, o, c) {
        var f,
          t,
          u,
          a,
          s,
          l,
          d,
          v,
          n = Q(e),
          i = n.on,
          h = n.emit,
          p = n.bind,
          g = n.unbind,
          m = e.state,
          y = o.Move,
          b = o.Scroll,
          w = o.Controller,
          x = o.Elements.track,
          k = o.Media.reduce,
          r = (n = o.Direction).resolve,
          S = n.orient,
          E = y.getPosition,
          L = y.exceededLimit,
          O = !1;
        function j() {
          var n = c.drag;
          C(!n), a = "free" === n;
        }
        function N(n) {
          var t, i, r;
          l = !1, d || (t = R(n), i = n.target, r = c.noDrag, cn(i, "." + mt + ", ." + vt) || r && cn(i, r) || !t && n.button || (w.isBusy() ? F(n, !0) : (v = t ? x : window, s = m.is([G, rn]), u = null, p(v, zt, A, jt), p(v, Dt, _, jt), y.cancel(), b.cancel(), z(n))));
        }
        function A(n) {
          var t, i, r, o, u;
          m.is(6) || (m.set(6), h("drag")), n.cancelable && (s ? (y.translate(f + D(n) / (O && e.is(Mt) ? 5 : 1)), u = 200 < M(n), t = O !== (O = L()), (u || t) && z(n), l = !0, h("dragging"), F(n)) : U(D(u = n)) > U(D(u, !0)) && (t = n, i = c.dragMinThreshold, r = un(i), o = r && i.mouse || 0, r = (r ? i.touch : +i) || 10, s = U(D(t)) > (R(t) ? r : o), F(n)));
        }
        function _(n) {
          var t, i, r;
          m.is(6) && (m.set(3), h("dragged")), s && (i = function (n) {
            return E() + Ln(n) * Y(U(n) * (c.flickPower || 600), a ? 1 / 0 : o.Layout.listSize() * (c.flickMaxPages || 1));
          }(t = function (n) {
            if (e.is(Pt) || !O) {
              var t = M(n);
              if (t && t < 200) return D(n) / t;
            }
            return 0;
          }(t = n)), r = c.rewind && c.rewindByDrag, k(!1), a ? w.scroll(i, 0, c.snap) : e.is(It) ? w.go(S(Ln(t)) < 0 ? r ? "<" : "-" : r ? ">" : "+") : e.is(Mt) && O && r ? w.go(L(!0) ? ">" : "<") : w.go(w.toDest(i), !0), k(!0), F(n)), g(v, zt, A), g(v, Dt, _), s = !1;
        }
        function T(n) {
          !d && l && F(n, !0);
        }
        function z(n) {
          u = t, t = n, f = E();
        }
        function D(n, t) {
          return I(n, t) - I(P(n), t);
        }
        function M(n) {
          return mn(n) - mn(P(n));
        }
        function P(n) {
          return t === n && u || t;
        }
        function I(n, t) {
          return (R(n) ? n.changedTouches[0] : n)["page" + r(t ? "Y" : "X")];
        }
        function R(n) {
          return "undefined" != typeof TouchEvent && n instanceof TouchEvent;
        }
        function C(n) {
          d = n;
        }
        return {
          mount: function mount() {
            p(x, zt, on, jt), p(x, Dt, on, jt), p(x, _t, N, jt), p(x, "click", T, {
              capture: !0
            }), p(x, "dragstart", F), i([B, K], j);
          },
          disable: C,
          isDragging: function isDragging() {
            return s;
          }
        };
      },
      Keyboard: function Keyboard(t, n, i) {
        var r,
          o,
          u = Q(t),
          e = u.on,
          c = u.bind,
          f = u.unbind,
          a = t.root,
          s = n.Direction.resolve;
        function l() {
          var n = i.keyboard;
          n && (r = "global" === n ? window : a, c(r, Gt, h));
        }
        function d() {
          f(r, Gt);
        }
        function v() {
          var n = o;
          o = !0, p(function () {
            o = n;
          });
        }
        function h(n) {
          o || ((n = Tt(n)) === s(Bn) ? t.go("<") : n === s(Hn) && t.go(">"));
        }
        return {
          mount: function mount() {
            l(), e(K, d), e(K, l), e(H, v);
          },
          destroy: d,
          disable: function disable(n) {
            o = n;
          }
        };
      },
      LazyLoad: function LazyLoad(i, n, o) {
        var t = Q(i),
          r = t.on,
          u = t.off,
          e = t.bind,
          c = t.emit,
          f = "sequential" === o.lazyLoad,
          a = [Dn, V],
          s = [];
        function l() {
          D(s), n.Slides.forEach(function (r) {
            gn(r.slide, Wt).forEach(function (n) {
              var t = z(n, Ft),
                i = z(n, Xt);
              t === n.src && i === n.srcset || (t = o.classes.spinner, t = fn(i = n.parentElement, "." + t) || j("span", t, i), s.push([n, r, t]), n.src || ln(n, "none"));
            });
          }), (f ? p : (u(a), r(a, d), d))();
        }
        function d() {
          (s = s.filter(function (n) {
            var t = o.perPage * ((o.preloadPages || 1) + 1) - 1;
            return !n[1].isWithin(i.index, t) || v(n);
          })).length || u(a);
        }
        function v(n) {
          var t = n[0];
          M(n[1].slide, Et), e(t, "load error", R(h, n)), I(t, "src", z(t, Ft)), I(t, "srcset", z(t, Xt)), P(t, Ft), P(t, Xt);
        }
        function h(n, t) {
          var i = n[0],
            r = n[1];
          X(r.slide, Et), "error" !== t.type && (T(n[2]), ln(i, ""), c(Wn, i, r), c(jn)), f && p();
        }
        function p() {
          s.length && v(s.shift());
        }
        return {
          mount: function mount() {
            o.lazyLoad && (l(), r(J, l));
          },
          destroy: R(D, s),
          check: d
        };
      },
      Pagination: function Pagination(l, n, d) {
        var v,
          h,
          t = Q(l),
          p = t.on,
          g = t.emit,
          m = t.bind,
          y = n.Slides,
          b = n.Elements,
          w = n.Controller,
          x = w.hasFocus,
          r = w.getIndex,
          e = w.go,
          c = n.Direction.resolve,
          k = b.pagination,
          S = [];
        function E() {
          v && (T(k ? o(v.children) : v), X(v, h), D(S), v = null), t.destroy();
        }
        function L(n) {
          e(">" + n, !0);
        }
        function O(n, t) {
          var i = S.length,
            r = Tt(t),
            o = A(),
            u = -1,
            o = (r === c(Hn, !1, o) ? u = ++n % i : r === c(Bn, !1, o) ? u = (--n + i) % i : "Home" === r ? u = 0 : "End" === r && (u = i - 1), S[u]);
          o && (dn(o.button), e(">" + u), F(t, !0));
        }
        function A() {
          return d.paginationDirection || d.direction;
        }
        function _(n) {
          return S[w.toPage(n)];
        }
        function z() {
          var n,
            t = _(r(!0)),
            i = _(r());
          t && (X(n = t.button, tn), P(n, Qn), I(n, $, -1)), i && (M(n = i.button, tn), I(n, Qn, !0), I(n, $, "")), g("pagination:updated", {
            list: v,
            items: S
          }, t, i);
        }
        return {
          items: S,
          mount: function n() {
            E(), p([K, J, "ei"], n);
            var t = d.pagination;
            if (k && ln(k, t ? "" : "none"), t) {
              p([H, Tn, V], z);
              var t = l.length,
                i = d.classes,
                r = d.i18n,
                o = d.perPage,
                u = x() ? w.getEnd() + 1 : kn(t / o);
              M(v = k || j("ul", i.pagination, b.track.parentElement), h = gt + "--" + A()), I(v, Z, "tablist"), I(v, nn, r.select), I(v, nt, A() === Jn ? "vertical" : "");
              for (var e = 0; e < u; e++) {
                var c = j("li", null, v),
                  f = j("button", {
                    "class": i.page,
                    type: "button"
                  }, c),
                  a = y.getIn(e).map(function (n) {
                    return n.slide.id;
                  }),
                  s = !x() && 1 < o ? r.pageX : r.slideX;
                m(f, "click", R(L, e)), d.paginationKeyboard && m(f, "keydown", R(O, e)), I(c, Z, "presentation"), I(f, Z, "tab"), I(f, Kn, a.join(" ")), I(f, nn, On(s, e + 1)), I(f, $, -1), S.push({
                  li: c,
                  button: f,
                  page: e
                });
              }
              z(), g("pagination:mounted", {
                list: v,
                items: S
              }, _(l.index));
            }
          },
          destroy: E,
          getAt: _,
          update: z
        };
      },
      Sync: function Sync(i, n, t) {
        var r = t.isNavigation,
          o = t.slideFocus,
          u = [];
        function e() {
          var n, t;
          i.splides.forEach(function (n) {
            n.isParent || (f(i, n.splide), f(n.splide, i));
          }), r && (n = Q(i), (t = n.on)(Mn, s), t(Yn, l), t([B, K], a), u.push(n), n.emit(Gn, i.splides));
        }
        function c() {
          u.forEach(function (n) {
            n.destroy();
          }), D(u);
        }
        function f(n, r) {
          n = Q(n);
          n.on(H, function (n, t, i) {
            r.go(r.is(Pt) ? i : n);
          }), u.push(n);
        }
        function a() {
          I(n.Elements.list, nt, t.direction === Jn ? "vertical" : "");
        }
        function s(n) {
          i.go(n.index);
        }
        function l(n, t) {
          b(Yt, Tt(t)) && (s(n), F(t));
        }
        return {
          setup: R(n.Media.set, {
            slideFocus: en(o) ? r : o
          }, !0),
          mount: e,
          destroy: c,
          remount: function remount() {
            c(), e();
          }
        };
      },
      Wheel: function Wheel(e, c, f) {
        var n = Q(e).bind,
          a = 0;
        function t(n) {
          var t, i, r, o, u;
          n.cancelable && (t = (u = n.deltaY) < 0, i = mn(n), r = f.wheelMinThreshold || 0, o = f.wheelSleep || 0, U(u) > r && o < i - a && (e.go(t ? "<" : ">"), a = i), u = t, f.releaseWheel && !e.state.is(G) && -1 === c.Controller.getAdjacent(u) || F(n));
        }
        return {
          mount: function mount() {
            f.wheel && n(c.Elements.track, "wheel", t, jt);
          }
        };
      },
      Live: function Live(n, t, i) {
        var r = Q(n).on,
          o = t.Elements.track,
          u = i.live && !i.isNavigation,
          e = j("span", wt),
          c = qn(90, R(f, !1));
        function f(n) {
          I(o, rt, n), n ? (L(o, e), c.start()) : (T(e), c.cancel());
        }
        function a(n) {
          u && I(o, it, n ? "off" : "polite");
        }
        return {
          mount: function mount() {
            u && (a(!t.Autoplay.isPaused()), I(o, ot, !0), e.textContent = "…", r(Fn, R(a, !0)), r(Xn, R(a, !1)), r([Dn, V], R(f, !0)));
          },
          disable: a,
          destroy: function destroy() {
            P(o, [it, ot, rt]), T(e);
          }
        };
      }
    }),
    qt = {
      type: "slide",
      role: "region",
      speed: 400,
      perPage: 1,
      cloneStatus: !0,
      arrows: !0,
      pagination: !0,
      paginationKeyboard: !0,
      interval: 5e3,
      pauseOnHover: !0,
      pauseOnFocus: !0,
      resetProgress: !0,
      easing: "cubic-bezier(0.25, 1, 0.5, 1)",
      drag: !0,
      direction: "ltr",
      trimSpace: !0,
      focusableNodes: "a, button, textarea, input, select, iframe",
      live: !0,
      classes: {
        slide: at,
        clone: st,
        arrows: dt,
        arrow: vt,
        prev: ht,
        next: pt,
        pagination: gt,
        page: mt,
        spinner: i + "spinner"
      },
      i18n: {
        prev: "Previous slide",
        next: "Next slide",
        first: "Go to first slide",
        last: "Go to last slide",
        slideX: "Go to slide %s",
        pageX: "Go to page %s",
        play: "Start autoplay",
        pause: "Pause autoplay",
        carousel: "carousel",
        slide: "slide",
        select: "Select a slide to show",
        slideLabel: "%s of %s"
      },
      reducedMotion: {
        speed: 0,
        rewindSpeed: 0,
        autoplay: "pause"
      }
    };
  function Bt(n, t, i) {
    var r = t.Slides;
    function o() {
      r.forEach(function (n) {
        n.style("transform", "translateX(-" + 100 * n.index + "%)");
      });
    }
    return {
      mount: function mount() {
        Q(n).on([B, J], o);
      },
      start: function start(n, t) {
        r.style("transition", "opacity " + i.speed + "ms " + i.easing), p(t);
      },
      cancel: on
    };
  }
  function Ht(u, n, e) {
    var c,
      f = n.Move,
      a = n.Controller,
      s = n.Scroll,
      t = n.Elements.list,
      l = R(_, t, "transition");
    function i() {
      l(""), s.cancel();
    }
    return {
      mount: function mount() {
        Q(u).bind(t, "transitionend", function (n) {
          n.target === t && c && (i(), c());
        });
      },
      start: function start(n, t) {
        var i = f.toPosition(n, !0),
          r = f.getPosition(),
          o = function (n) {
            var t = e.rewindSpeed;
            if (u.is(Mt) && t) {
              var i = a.getIndex(!0),
                r = a.getEnd();
              if (0 === i && r <= n || r <= i && 0 === n) return t;
            }
            return e.speed;
          }(n);
        1 <= U(i - r) && 1 <= o ? e.useScroll ? s.scroll(i, o, !1, t) : (l("transform " + o + "ms " + e.easing), f.translate(i, !0), c = t) : (f.jump(n), t());
      },
      cancel: i
    };
  }
  t = function () {
    function i(n, t) {
      this.event = Q(), this.Components = {}, this.state = s(1), this.splides = [], this.n = {}, this.t = {};
      n = C(n) ? pn(document, n) : n;
      bn(n, n + " is invalid."), t = d({
        label: z(this.root = n, nn) || "",
        labelledby: z(n, Zn) || ""
      }, qt, i.defaults, t || {});
      try {
        d(t, JSON.parse(z(n, f)));
      } catch (n) {
        bn(!1, "Invalid JSON");
      }
      this.n = Object.create(d({}, t));
    }
    var n = i.prototype;
    return n.mount = function (n, t) {
      var i = this,
        r = this.state,
        o = this.Components;
      return bn(r.is([1, 7]), "Already mounted!"), r.set(1), this.i = o, this.r = t || this.r || (this.is(It) ? Bt : Ht), this.t = n || this.t, w(an({}, Ut, this.t, {
        Transition: this.r
      }), function (n, t) {
        n = n(i, o, i.n);
        (o[t] = n).setup && n.setup();
      }), w(o, function (n) {
        n.mount && n.mount();
      }), this.emit(B), M(this.root, "is-initialized"), r.set(3), this.emit("ready"), this;
    }, n.sync = function (n) {
      return this.splides.push({
        splide: n
      }), n.splides.push({
        splide: this,
        isParent: !0
      }), this.state.is(3) && (this.i.Sync.remount(), n.Components.Sync.remount()), this;
    }, n.go = function (n) {
      return this.i.Controller.go(n), this;
    }, n.on = function (n, t) {
      return this.event.on(n, t), this;
    }, n.off = function (n) {
      return this.event.off(n), this;
    }, n.emit = function (n) {
      var t;
      return (t = this.event).emit.apply(t, [n].concat(o(arguments, 1))), this;
    }, n.add = function (n, t) {
      return this.i.Slides.add(n, t), this;
    }, n.remove = function (n) {
      return this.i.Slides.remove(n), this;
    }, n.is = function (n) {
      return this.n.type === n;
    }, n.refresh = function () {
      return this.emit(J), this;
    }, n.destroy = function (t) {
      void 0 === t && (t = !0);
      var n = this.event,
        i = this.state;
      return i.is(1) ? Q(this).on("ready", this.destroy.bind(this, t)) : (w(this.i, function (n) {
        n.destroy && n.destroy(t);
      }, !0), n.emit(a), n.destroy(), t && D(this.splides), i.set(7)), this;
    }, Jt(i, [{
      key: "options",
      get: function get() {
        return this.n;
      },
      set: function set(n) {
        this.i.Media.set(n, !0, !0);
      }
    }, {
      key: "length",
      get: function get() {
        return this.i.Slides.getLength(!0);
      }
    }, {
      key: "index",
      get: function get() {
        return this.i.Controller.getIndex();
      }
    }]), i;
  }();
  return t.defaults = {}, t.STATES = r, t;
}, "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (n = "undefined" != typeof globalThis ? globalThis : n || self).Splide = t();

},{}],57:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
!function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = e(require("@popperjs/core")) : "function" == typeof define && define.amd ? define(["@popperjs/core"], e) : (t = t || self).tippy = e(t.Popper);
}(void 0, function (t) {
  "use strict";

  var e = "undefined" != typeof window && "undefined" != typeof document,
    n = !!e && !!window.msCrypto,
    r = {
      passive: !0,
      capture: !0
    },
    o = function o() {
      return document.body;
    };
  function i(t, e, n) {
    if (Array.isArray(t)) {
      var r = t[e];
      return null == r ? Array.isArray(n) ? n[e] : n : r;
    }
    return t;
  }
  function a(t, e) {
    var n = {}.toString.call(t);
    return 0 === n.indexOf("[object") && n.indexOf(e + "]") > -1;
  }
  function s(t, e) {
    return "function" == typeof t ? t.apply(void 0, e) : t;
  }
  function u(t, e) {
    return 0 === e ? t : function (r) {
      clearTimeout(n), n = setTimeout(function () {
        t(r);
      }, e);
    };
    var n;
  }
  function p(t, e) {
    var n = Object.assign({}, t);
    return e.forEach(function (t) {
      delete n[t];
    }), n;
  }
  function c(t) {
    return [].concat(t);
  }
  function f(t, e) {
    -1 === t.indexOf(e) && t.push(e);
  }
  function l(t) {
    return t.split("-")[0];
  }
  function d(t) {
    return [].slice.call(t);
  }
  function v(t) {
    return Object.keys(t).reduce(function (e, n) {
      return void 0 !== t[n] && (e[n] = t[n]), e;
    }, {});
  }
  function m() {
    return document.createElement("div");
  }
  function g(t) {
    return ["Element", "Fragment"].some(function (e) {
      return a(t, e);
    });
  }
  function h(t) {
    return a(t, "MouseEvent");
  }
  function b(t) {
    return !(!t || !t._tippy || t._tippy.reference !== t);
  }
  function y(t) {
    return g(t) ? [t] : function (t) {
      return a(t, "NodeList");
    }(t) ? d(t) : Array.isArray(t) ? t : d(document.querySelectorAll(t));
  }
  function w(t, e) {
    t.forEach(function (t) {
      t && (t.style.transitionDuration = e + "ms");
    });
  }
  function x(t, e) {
    t.forEach(function (t) {
      t && t.setAttribute("data-state", e);
    });
  }
  function E(t) {
    var e,
      n = c(t)[0];
    return null != n && null != (e = n.ownerDocument) && e.body ? n.ownerDocument : document;
  }
  function O(t, e, n) {
    var r = e + "EventListener";
    ["transitionend", "webkitTransitionEnd"].forEach(function (e) {
      t[r](e, n);
    });
  }
  function C(t, e) {
    for (var n = e; n;) {
      var r;
      if (t.contains(n)) return !0;
      n = null == n.getRootNode || null == (r = n.getRootNode()) ? void 0 : r.host;
    }
    return !1;
  }
  var T = {
      isTouch: !1
    },
    A = 0;
  function L() {
    T.isTouch || (T.isTouch = !0, window.performance && document.addEventListener("mousemove", D));
  }
  function D() {
    var t = performance.now();
    t - A < 20 && (T.isTouch = !1, document.removeEventListener("mousemove", D)), A = t;
  }
  function k() {
    var t = document.activeElement;
    if (b(t)) {
      var e = t._tippy;
      t.blur && !e.state.isVisible && t.blur();
    }
  }
  var R = Object.assign({
      appendTo: o,
      aria: {
        content: "auto",
        expanded: "auto"
      },
      delay: 0,
      duration: [300, 250],
      getReferenceClientRect: null,
      hideOnClick: !0,
      ignoreAttributes: !1,
      interactive: !1,
      interactiveBorder: 2,
      interactiveDebounce: 0,
      moveTransition: "",
      offset: [0, 10],
      onAfterUpdate: function onAfterUpdate() {},
      onBeforeUpdate: function onBeforeUpdate() {},
      onCreate: function onCreate() {},
      onDestroy: function onDestroy() {},
      onHidden: function onHidden() {},
      onHide: function onHide() {},
      onMount: function onMount() {},
      onShow: function onShow() {},
      onShown: function onShown() {},
      onTrigger: function onTrigger() {},
      onUntrigger: function onUntrigger() {},
      onClickOutside: function onClickOutside() {},
      placement: "top",
      plugins: [],
      popperOptions: {},
      render: null,
      showOnCreate: !1,
      touch: !0,
      trigger: "mouseenter focus",
      triggerTarget: null
    }, {
      animateFill: !1,
      followCursor: !1,
      inlinePositioning: !1,
      sticky: !1
    }, {
      allowHTML: !1,
      animation: "fade",
      arrow: !0,
      content: "",
      inertia: !1,
      maxWidth: 350,
      role: "tooltip",
      theme: "",
      zIndex: 9999
    }),
    P = Object.keys(R);
  function j(t) {
    var e = (t.plugins || []).reduce(function (e, n) {
      var r,
        o = n.name,
        i = n.defaultValue;
      o && (e[o] = void 0 !== t[o] ? t[o] : null != (r = R[o]) ? r : i);
      return e;
    }, {});
    return Object.assign({}, t, e);
  }
  function M(t, e) {
    var n = Object.assign({}, e, {
      content: s(e.content, [t])
    }, e.ignoreAttributes ? {} : function (t, e) {
      return (e ? Object.keys(j(Object.assign({}, R, {
        plugins: e
      }))) : P).reduce(function (e, n) {
        var r = (t.getAttribute("data-tippy-" + n) || "").trim();
        if (!r) return e;
        if ("content" === n) e[n] = r;else try {
          e[n] = JSON.parse(r);
        } catch (t) {
          e[n] = r;
        }
        return e;
      }, {});
    }(t, e.plugins));
    return n.aria = Object.assign({}, R.aria, n.aria), n.aria = {
      expanded: "auto" === n.aria.expanded ? e.interactive : n.aria.expanded,
      content: "auto" === n.aria.content ? e.interactive ? null : "describedby" : n.aria.content
    }, n;
  }
  function V(t, e) {
    t.innerHTML = e;
  }
  function I(t) {
    var e = m();
    return !0 === t ? e.className = "tippy-arrow" : (e.className = "tippy-svg-arrow", g(t) ? e.appendChild(t) : V(e, t)), e;
  }
  function S(t, e) {
    g(e.content) ? (V(t, ""), t.appendChild(e.content)) : "function" != typeof e.content && (e.allowHTML ? V(t, e.content) : t.textContent = e.content);
  }
  function B(t) {
    var e = t.firstElementChild,
      n = d(e.children);
    return {
      box: e,
      content: n.find(function (t) {
        return t.classList.contains("tippy-content");
      }),
      arrow: n.find(function (t) {
        return t.classList.contains("tippy-arrow") || t.classList.contains("tippy-svg-arrow");
      }),
      backdrop: n.find(function (t) {
        return t.classList.contains("tippy-backdrop");
      })
    };
  }
  function N(t) {
    var e = m(),
      n = m();
    n.className = "tippy-box", n.setAttribute("data-state", "hidden"), n.setAttribute("tabindex", "-1");
    var r = m();
    function o(n, r) {
      var o = B(e),
        i = o.box,
        a = o.content,
        s = o.arrow;
      r.theme ? i.setAttribute("data-theme", r.theme) : i.removeAttribute("data-theme"), "string" == typeof r.animation ? i.setAttribute("data-animation", r.animation) : i.removeAttribute("data-animation"), r.inertia ? i.setAttribute("data-inertia", "") : i.removeAttribute("data-inertia"), i.style.maxWidth = "number" == typeof r.maxWidth ? r.maxWidth + "px" : r.maxWidth, r.role ? i.setAttribute("role", r.role) : i.removeAttribute("role"), n.content === r.content && n.allowHTML === r.allowHTML || S(a, t.props), r.arrow ? s ? n.arrow !== r.arrow && (i.removeChild(s), i.appendChild(I(r.arrow))) : i.appendChild(I(r.arrow)) : s && i.removeChild(s);
    }
    return r.className = "tippy-content", r.setAttribute("data-state", "hidden"), S(r, t.props), e.appendChild(n), n.appendChild(r), o(t.props, t.props), {
      popper: e,
      onUpdate: o
    };
  }
  N.$$tippy = !0;
  var H = 1,
    U = [],
    _ = [];
  function z(e, a) {
    var p,
      g,
      b,
      y,
      A,
      L,
      D,
      k,
      P = M(e, Object.assign({}, R, j(v(a)))),
      V = !1,
      I = !1,
      S = !1,
      N = !1,
      z = [],
      F = u(wt, P.interactiveDebounce),
      W = H++,
      X = (k = P.plugins).filter(function (t, e) {
        return k.indexOf(t) === e;
      }),
      Y = {
        id: W,
        reference: e,
        popper: m(),
        popperInstance: null,
        props: P,
        state: {
          isEnabled: !0,
          isVisible: !1,
          isDestroyed: !1,
          isMounted: !1,
          isShown: !1
        },
        plugins: X,
        clearDelayTimeouts: function clearDelayTimeouts() {
          clearTimeout(p), clearTimeout(g), cancelAnimationFrame(b);
        },
        setProps: function setProps(t) {
          if (Y.state.isDestroyed) return;
          at("onBeforeUpdate", [Y, t]), bt();
          var n = Y.props,
            r = M(e, Object.assign({}, n, v(t), {
              ignoreAttributes: !0
            }));
          Y.props = r, ht(), n.interactiveDebounce !== r.interactiveDebounce && (pt(), F = u(wt, r.interactiveDebounce));
          n.triggerTarget && !r.triggerTarget ? c(n.triggerTarget).forEach(function (t) {
            t.removeAttribute("aria-expanded");
          }) : r.triggerTarget && e.removeAttribute("aria-expanded");
          ut(), it(), J && J(n, r);
          Y.popperInstance && (Ct(), At().forEach(function (t) {
            requestAnimationFrame(t._tippy.popperInstance.forceUpdate);
          }));
          at("onAfterUpdate", [Y, t]);
        },
        setContent: function setContent(t) {
          Y.setProps({
            content: t
          });
        },
        show: function show() {
          var t = Y.state.isVisible,
            e = Y.state.isDestroyed,
            n = !Y.state.isEnabled,
            r = T.isTouch && !Y.props.touch,
            a = i(Y.props.duration, 0, R.duration);
          if (t || e || n || r) return;
          if (et().hasAttribute("disabled")) return;
          if (at("onShow", [Y], !1), !1 === Y.props.onShow(Y)) return;
          Y.state.isVisible = !0, tt() && ($.style.visibility = "visible");
          it(), dt(), Y.state.isMounted || ($.style.transition = "none");
          if (tt()) {
            var u = rt(),
              p = u.box,
              c = u.content;
            w([p, c], 0);
          }
          L = function L() {
            var t;
            if (Y.state.isVisible && !N) {
              if (N = !0, $.offsetHeight, $.style.transition = Y.props.moveTransition, tt() && Y.props.animation) {
                var e = rt(),
                  n = e.box,
                  r = e.content;
                w([n, r], a), x([n, r], "visible");
              }
              st(), ut(), f(_, Y), null == (t = Y.popperInstance) || t.forceUpdate(), at("onMount", [Y]), Y.props.animation && tt() && function (t, e) {
                mt(t, e);
              }(a, function () {
                Y.state.isShown = !0, at("onShown", [Y]);
              });
            }
          }, function () {
            var t,
              e = Y.props.appendTo,
              n = et();
            t = Y.props.interactive && e === o || "parent" === e ? n.parentNode : s(e, [n]);
            t.contains($) || t.appendChild($);
            Y.state.isMounted = !0, Ct();
          }();
        },
        hide: function hide() {
          var t = !Y.state.isVisible,
            e = Y.state.isDestroyed,
            n = !Y.state.isEnabled,
            r = i(Y.props.duration, 1, R.duration);
          if (t || e || n) return;
          if (at("onHide", [Y], !1), !1 === Y.props.onHide(Y)) return;
          Y.state.isVisible = !1, Y.state.isShown = !1, N = !1, V = !1, tt() && ($.style.visibility = "hidden");
          if (pt(), vt(), it(!0), tt()) {
            var o = rt(),
              a = o.box,
              s = o.content;
            Y.props.animation && (w([a, s], r), x([a, s], "hidden"));
          }
          st(), ut(), Y.props.animation ? tt() && function (t, e) {
            mt(t, function () {
              !Y.state.isVisible && $.parentNode && $.parentNode.contains($) && e();
            });
          }(r, Y.unmount) : Y.unmount();
        },
        hideWithInteractivity: function hideWithInteractivity(t) {
          nt().addEventListener("mousemove", F), f(U, F), F(t);
        },
        enable: function enable() {
          Y.state.isEnabled = !0;
        },
        disable: function disable() {
          Y.hide(), Y.state.isEnabled = !1;
        },
        unmount: function unmount() {
          Y.state.isVisible && Y.hide();
          if (!Y.state.isMounted) return;
          Tt(), At().forEach(function (t) {
            t._tippy.unmount();
          }), $.parentNode && $.parentNode.removeChild($);
          _ = _.filter(function (t) {
            return t !== Y;
          }), Y.state.isMounted = !1, at("onHidden", [Y]);
        },
        destroy: function destroy() {
          if (Y.state.isDestroyed) return;
          Y.clearDelayTimeouts(), Y.unmount(), bt(), delete e._tippy, Y.state.isDestroyed = !0, at("onDestroy", [Y]);
        }
      };
    if (!P.render) return Y;
    var q = P.render(Y),
      $ = q.popper,
      J = q.onUpdate;
    $.setAttribute("data-tippy-root", ""), $.id = "tippy-" + Y.id, Y.popper = $, e._tippy = Y, $._tippy = Y;
    var G = X.map(function (t) {
        return t.fn(Y);
      }),
      K = e.hasAttribute("aria-expanded");
    return ht(), ut(), it(), at("onCreate", [Y]), P.showOnCreate && Lt(), $.addEventListener("mouseenter", function () {
      Y.props.interactive && Y.state.isVisible && Y.clearDelayTimeouts();
    }), $.addEventListener("mouseleave", function () {
      Y.props.interactive && Y.props.trigger.indexOf("mouseenter") >= 0 && nt().addEventListener("mousemove", F);
    }), Y;
    function Q() {
      var t = Y.props.touch;
      return Array.isArray(t) ? t : [t, 0];
    }
    function Z() {
      return "hold" === Q()[0];
    }
    function tt() {
      var t;
      return !(null == (t = Y.props.render) || !t.$$tippy);
    }
    function et() {
      return D || e;
    }
    function nt() {
      var t = et().parentNode;
      return t ? E(t) : document;
    }
    function rt() {
      return B($);
    }
    function ot(t) {
      return Y.state.isMounted && !Y.state.isVisible || T.isTouch || y && "focus" === y.type ? 0 : i(Y.props.delay, t ? 0 : 1, R.delay);
    }
    function it(t) {
      void 0 === t && (t = !1), $.style.pointerEvents = Y.props.interactive && !t ? "" : "none", $.style.zIndex = "" + Y.props.zIndex;
    }
    function at(t, e, n) {
      var r;
      (void 0 === n && (n = !0), G.forEach(function (n) {
        n[t] && n[t].apply(n, e);
      }), n) && (r = Y.props)[t].apply(r, e);
    }
    function st() {
      var t = Y.props.aria;
      if (t.content) {
        var n = "aria-" + t.content,
          r = $.id;
        c(Y.props.triggerTarget || e).forEach(function (t) {
          var e = t.getAttribute(n);
          if (Y.state.isVisible) t.setAttribute(n, e ? e + " " + r : r);else {
            var o = e && e.replace(r, "").trim();
            o ? t.setAttribute(n, o) : t.removeAttribute(n);
          }
        });
      }
    }
    function ut() {
      !K && Y.props.aria.expanded && c(Y.props.triggerTarget || e).forEach(function (t) {
        Y.props.interactive ? t.setAttribute("aria-expanded", Y.state.isVisible && t === et() ? "true" : "false") : t.removeAttribute("aria-expanded");
      });
    }
    function pt() {
      nt().removeEventListener("mousemove", F), U = U.filter(function (t) {
        return t !== F;
      });
    }
    function ct(t) {
      if (!T.isTouch || !S && "mousedown" !== t.type) {
        var n = t.composedPath && t.composedPath()[0] || t.target;
        if (!Y.props.interactive || !C($, n)) {
          if (c(Y.props.triggerTarget || e).some(function (t) {
            return C(t, n);
          })) {
            if (T.isTouch) return;
            if (Y.state.isVisible && Y.props.trigger.indexOf("click") >= 0) return;
          } else at("onClickOutside", [Y, t]);
          !0 === Y.props.hideOnClick && (Y.clearDelayTimeouts(), Y.hide(), I = !0, setTimeout(function () {
            I = !1;
          }), Y.state.isMounted || vt());
        }
      }
    }
    function ft() {
      S = !0;
    }
    function lt() {
      S = !1;
    }
    function dt() {
      var t = nt();
      t.addEventListener("mousedown", ct, !0), t.addEventListener("touchend", ct, r), t.addEventListener("touchstart", lt, r), t.addEventListener("touchmove", ft, r);
    }
    function vt() {
      var t = nt();
      t.removeEventListener("mousedown", ct, !0), t.removeEventListener("touchend", ct, r), t.removeEventListener("touchstart", lt, r), t.removeEventListener("touchmove", ft, r);
    }
    function mt(t, e) {
      var n = rt().box;
      function r(t) {
        t.target === n && (O(n, "remove", r), e());
      }
      if (0 === t) return e();
      O(n, "remove", A), O(n, "add", r), A = r;
    }
    function gt(t, n, r) {
      void 0 === r && (r = !1), c(Y.props.triggerTarget || e).forEach(function (e) {
        e.addEventListener(t, n, r), z.push({
          node: e,
          eventType: t,
          handler: n,
          options: r
        });
      });
    }
    function ht() {
      var t;
      Z() && (gt("touchstart", yt, {
        passive: !0
      }), gt("touchend", xt, {
        passive: !0
      })), (t = Y.props.trigger, t.split(/\s+/).filter(Boolean)).forEach(function (t) {
        if ("manual" !== t) switch (gt(t, yt), t) {
          case "mouseenter":
            gt("mouseleave", xt);
            break;
          case "focus":
            gt(n ? "focusout" : "blur", Et);
            break;
          case "focusin":
            gt("focusout", Et);
        }
      });
    }
    function bt() {
      z.forEach(function (t) {
        var e = t.node,
          n = t.eventType,
          r = t.handler,
          o = t.options;
        e.removeEventListener(n, r, o);
      }), z = [];
    }
    function yt(t) {
      var e,
        n = !1;
      if (Y.state.isEnabled && !Ot(t) && !I) {
        var r = "focus" === (null == (e = y) ? void 0 : e.type);
        y = t, D = t.currentTarget, ut(), !Y.state.isVisible && h(t) && U.forEach(function (e) {
          return e(t);
        }), "click" === t.type && (Y.props.trigger.indexOf("mouseenter") < 0 || V) && !1 !== Y.props.hideOnClick && Y.state.isVisible ? n = !0 : Lt(t), "click" === t.type && (V = !n), n && !r && Dt(t);
      }
    }
    function wt(t) {
      var e = t.target,
        n = et().contains(e) || $.contains(e);
      "mousemove" === t.type && n || function (t, e) {
        var n = e.clientX,
          r = e.clientY;
        return t.every(function (t) {
          var e = t.popperRect,
            o = t.popperState,
            i = t.props.interactiveBorder,
            a = l(o.placement),
            s = o.modifiersData.offset;
          if (!s) return !0;
          var u = "bottom" === a ? s.top.y : 0,
            p = "top" === a ? s.bottom.y : 0,
            c = "right" === a ? s.left.x : 0,
            f = "left" === a ? s.right.x : 0,
            d = e.top - r + u > i,
            v = r - e.bottom - p > i,
            m = e.left - n + c > i,
            g = n - e.right - f > i;
          return d || v || m || g;
        });
      }(At().concat($).map(function (t) {
        var e,
          n = null == (e = t._tippy.popperInstance) ? void 0 : e.state;
        return n ? {
          popperRect: t.getBoundingClientRect(),
          popperState: n,
          props: P
        } : null;
      }).filter(Boolean), t) && (pt(), Dt(t));
    }
    function xt(t) {
      Ot(t) || Y.props.trigger.indexOf("click") >= 0 && V || (Y.props.interactive ? Y.hideWithInteractivity(t) : Dt(t));
    }
    function Et(t) {
      Y.props.trigger.indexOf("focusin") < 0 && t.target !== et() || Y.props.interactive && t.relatedTarget && $.contains(t.relatedTarget) || Dt(t);
    }
    function Ot(t) {
      return !!T.isTouch && Z() !== t.type.indexOf("touch") >= 0;
    }
    function Ct() {
      Tt();
      var n = Y.props,
        r = n.popperOptions,
        o = n.placement,
        i = n.offset,
        a = n.getReferenceClientRect,
        s = n.moveTransition,
        u = tt() ? B($).arrow : null,
        p = a ? {
          getBoundingClientRect: a,
          contextElement: a.contextElement || et()
        } : e,
        c = [{
          name: "offset",
          options: {
            offset: i
          }
        }, {
          name: "preventOverflow",
          options: {
            padding: {
              top: 2,
              bottom: 2,
              left: 5,
              right: 5
            }
          }
        }, {
          name: "flip",
          options: {
            padding: 5
          }
        }, {
          name: "computeStyles",
          options: {
            adaptive: !s
          }
        }, {
          name: "$$tippy",
          enabled: !0,
          phase: "beforeWrite",
          requires: ["computeStyles"],
          fn: function fn(t) {
            var e = t.state;
            if (tt()) {
              var n = rt().box;
              ["placement", "reference-hidden", "escaped"].forEach(function (t) {
                "placement" === t ? n.setAttribute("data-placement", e.placement) : e.attributes.popper["data-popper-" + t] ? n.setAttribute("data-" + t, "") : n.removeAttribute("data-" + t);
              }), e.attributes.popper = {};
            }
          }
        }];
      tt() && u && c.push({
        name: "arrow",
        options: {
          element: u,
          padding: 3
        }
      }), c.push.apply(c, (null == r ? void 0 : r.modifiers) || []), Y.popperInstance = t.createPopper(p, $, Object.assign({}, r, {
        placement: o,
        onFirstUpdate: L,
        modifiers: c
      }));
    }
    function Tt() {
      Y.popperInstance && (Y.popperInstance.destroy(), Y.popperInstance = null);
    }
    function At() {
      return d($.querySelectorAll("[data-tippy-root]"));
    }
    function Lt(t) {
      Y.clearDelayTimeouts(), t && at("onTrigger", [Y, t]), dt();
      var e = ot(!0),
        n = Q(),
        r = n[0],
        o = n[1];
      T.isTouch && "hold" === r && o && (e = o), e ? p = setTimeout(function () {
        Y.show();
      }, e) : Y.show();
    }
    function Dt(t) {
      if (Y.clearDelayTimeouts(), at("onUntrigger", [Y, t]), Y.state.isVisible) {
        if (!(Y.props.trigger.indexOf("mouseenter") >= 0 && Y.props.trigger.indexOf("click") >= 0 && ["mouseleave", "mousemove"].indexOf(t.type) >= 0 && V)) {
          var e = ot(!1);
          e ? g = setTimeout(function () {
            Y.state.isVisible && Y.hide();
          }, e) : b = requestAnimationFrame(function () {
            Y.hide();
          });
        }
      } else vt();
    }
  }
  function F(t, e) {
    void 0 === e && (e = {});
    var n = R.plugins.concat(e.plugins || []);
    document.addEventListener("touchstart", L, r), window.addEventListener("blur", k);
    var o = Object.assign({}, e, {
        plugins: n
      }),
      i = y(t).reduce(function (t, e) {
        var n = e && z(e, o);
        return n && t.push(n), t;
      }, []);
    return g(t) ? i[0] : i;
  }
  F.defaultProps = R, F.setDefaultProps = function (t) {
    Object.keys(t).forEach(function (e) {
      R[e] = t[e];
    });
  }, F.currentInput = T;
  var W = Object.assign({}, t.applyStyles, {
      effect: function effect(t) {
        var e = t.state,
          n = {
            popper: {
              position: e.options.strategy,
              left: "0",
              top: "0",
              margin: "0"
            },
            arrow: {
              position: "absolute"
            },
            reference: {}
          };
        Object.assign(e.elements.popper.style, n.popper), e.styles = n, e.elements.arrow && Object.assign(e.elements.arrow.style, n.arrow);
      }
    }),
    X = {
      mouseover: "mouseenter",
      focusin: "focus",
      click: "click"
    };
  var Y = {
    name: "animateFill",
    defaultValue: !1,
    fn: function fn(t) {
      var e;
      if (null == (e = t.props.render) || !e.$$tippy) return {};
      var n = B(t.popper),
        r = n.box,
        o = n.content,
        i = t.props.animateFill ? function () {
          var t = m();
          return t.className = "tippy-backdrop", x([t], "hidden"), t;
        }() : null;
      return {
        onCreate: function onCreate() {
          i && (r.insertBefore(i, r.firstElementChild), r.setAttribute("data-animatefill", ""), r.style.overflow = "hidden", t.setProps({
            arrow: !1,
            animation: "shift-away"
          }));
        },
        onMount: function onMount() {
          if (i) {
            var t = r.style.transitionDuration,
              e = Number(t.replace("ms", ""));
            o.style.transitionDelay = Math.round(e / 10) + "ms", i.style.transitionDuration = t, x([i], "visible");
          }
        },
        onShow: function onShow() {
          i && (i.style.transitionDuration = "0ms");
        },
        onHide: function onHide() {
          i && x([i], "hidden");
        }
      };
    }
  };
  var q = {
      clientX: 0,
      clientY: 0
    },
    $ = [];
  function J(t) {
    var e = t.clientX,
      n = t.clientY;
    q = {
      clientX: e,
      clientY: n
    };
  }
  var G = {
    name: "followCursor",
    defaultValue: !1,
    fn: function fn(t) {
      var e = t.reference,
        n = E(t.props.triggerTarget || e),
        r = !1,
        o = !1,
        i = !0,
        a = t.props;
      function s() {
        return "initial" === t.props.followCursor && t.state.isVisible;
      }
      function u() {
        n.addEventListener("mousemove", f);
      }
      function p() {
        n.removeEventListener("mousemove", f);
      }
      function c() {
        r = !0, t.setProps({
          getReferenceClientRect: null
        }), r = !1;
      }
      function f(n) {
        var r = !n.target || e.contains(n.target),
          o = t.props.followCursor,
          i = n.clientX,
          a = n.clientY,
          s = e.getBoundingClientRect(),
          u = i - s.left,
          p = a - s.top;
        !r && t.props.interactive || t.setProps({
          getReferenceClientRect: function getReferenceClientRect() {
            var t = e.getBoundingClientRect(),
              n = i,
              r = a;
            "initial" === o && (n = t.left + u, r = t.top + p);
            var s = "horizontal" === o ? t.top : r,
              c = "vertical" === o ? t.right : n,
              f = "horizontal" === o ? t.bottom : r,
              l = "vertical" === o ? t.left : n;
            return {
              width: c - l,
              height: f - s,
              top: s,
              right: c,
              bottom: f,
              left: l
            };
          }
        });
      }
      function l() {
        t.props.followCursor && ($.push({
          instance: t,
          doc: n
        }), function (t) {
          t.addEventListener("mousemove", J);
        }(n));
      }
      function d() {
        0 === ($ = $.filter(function (e) {
          return e.instance !== t;
        })).filter(function (t) {
          return t.doc === n;
        }).length && function (t) {
          t.removeEventListener("mousemove", J);
        }(n);
      }
      return {
        onCreate: l,
        onDestroy: d,
        onBeforeUpdate: function onBeforeUpdate() {
          a = t.props;
        },
        onAfterUpdate: function onAfterUpdate(e, n) {
          var i = n.followCursor;
          r || void 0 !== i && a.followCursor !== i && (d(), i ? (l(), !t.state.isMounted || o || s() || u()) : (p(), c()));
        },
        onMount: function onMount() {
          t.props.followCursor && !o && (i && (f(q), i = !1), s() || u());
        },
        onTrigger: function onTrigger(t, e) {
          h(e) && (q = {
            clientX: e.clientX,
            clientY: e.clientY
          }), o = "focus" === e.type;
        },
        onHidden: function onHidden() {
          t.props.followCursor && (c(), p(), i = !0);
        }
      };
    }
  };
  var K = {
    name: "inlinePositioning",
    defaultValue: !1,
    fn: function fn(t) {
      var e,
        n = t.reference;
      var r = -1,
        o = !1,
        i = [],
        a = {
          name: "tippyInlinePositioning",
          enabled: !0,
          phase: "afterWrite",
          fn: function fn(o) {
            var a = o.state;
            t.props.inlinePositioning && (-1 !== i.indexOf(a.placement) && (i = []), e !== a.placement && -1 === i.indexOf(a.placement) && (i.push(a.placement), t.setProps({
              getReferenceClientRect: function getReferenceClientRect() {
                return function (t) {
                  return function (t, e, n, r) {
                    if (n.length < 2 || null === t) return e;
                    if (2 === n.length && r >= 0 && n[0].left > n[1].right) return n[r] || e;
                    switch (t) {
                      case "top":
                      case "bottom":
                        var o = n[0],
                          i = n[n.length - 1],
                          a = "top" === t,
                          s = o.top,
                          u = i.bottom,
                          p = a ? o.left : i.left,
                          c = a ? o.right : i.right;
                        return {
                          top: s,
                          bottom: u,
                          left: p,
                          right: c,
                          width: c - p,
                          height: u - s
                        };
                      case "left":
                      case "right":
                        var f = Math.min.apply(Math, n.map(function (t) {
                            return t.left;
                          })),
                          l = Math.max.apply(Math, n.map(function (t) {
                            return t.right;
                          })),
                          d = n.filter(function (e) {
                            return "left" === t ? e.left === f : e.right === l;
                          }),
                          v = d[0].top,
                          m = d[d.length - 1].bottom;
                        return {
                          top: v,
                          bottom: m,
                          left: f,
                          right: l,
                          width: l - f,
                          height: m - v
                        };
                      default:
                        return e;
                    }
                  }(l(t), n.getBoundingClientRect(), d(n.getClientRects()), r);
                }(a.placement);
              }
            })), e = a.placement);
          }
        };
      function s() {
        var e;
        o || (e = function (t, e) {
          var n;
          return {
            popperOptions: Object.assign({}, t.popperOptions, {
              modifiers: [].concat(((null == (n = t.popperOptions) ? void 0 : n.modifiers) || []).filter(function (t) {
                return t.name !== e.name;
              }), [e])
            })
          };
        }(t.props, a), o = !0, t.setProps(e), o = !1);
      }
      return {
        onCreate: s,
        onAfterUpdate: s,
        onTrigger: function onTrigger(e, n) {
          if (h(n)) {
            var o = d(t.reference.getClientRects()),
              i = o.find(function (t) {
                return t.left - 2 <= n.clientX && t.right + 2 >= n.clientX && t.top - 2 <= n.clientY && t.bottom + 2 >= n.clientY;
              }),
              a = o.indexOf(i);
            r = a > -1 ? a : r;
          }
        },
        onHidden: function onHidden() {
          r = -1;
        }
      };
    }
  };
  var Q = {
    name: "sticky",
    defaultValue: !1,
    fn: function fn(t) {
      var e = t.reference,
        n = t.popper;
      function r(e) {
        return !0 === t.props.sticky || t.props.sticky === e;
      }
      var o = null,
        i = null;
      function a() {
        var s = r("reference") ? (t.popperInstance ? t.popperInstance.state.elements.reference : e).getBoundingClientRect() : null,
          u = r("popper") ? n.getBoundingClientRect() : null;
        (s && Z(o, s) || u && Z(i, u)) && t.popperInstance && t.popperInstance.update(), o = s, i = u, t.state.isMounted && requestAnimationFrame(a);
      }
      return {
        onMount: function onMount() {
          t.props.sticky && a();
        }
      };
    }
  };
  function Z(t, e) {
    return !t || !e || t.top !== e.top || t.right !== e.right || t.bottom !== e.bottom || t.left !== e.left;
  }
  return e && function (t) {
    var e = document.createElement("style");
    e.textContent = t, e.setAttribute("data-tippy-stylesheet", "");
    var n = document.head,
      r = document.querySelector("head>style,head>link");
    r ? n.insertBefore(e, r) : n.appendChild(e);
  }('.tippy-box[data-animation=fade][data-state=hidden]{opacity:0}[data-tippy-root]{max-width:calc(100vw - 10px)}.tippy-box{position:relative;background-color:#333;color:#fff;border-radius:4px;font-size:14px;line-height:1.4;white-space:normal;outline:0;transition-property:transform,visibility,opacity}.tippy-box[data-placement^=top]>.tippy-arrow{bottom:0}.tippy-box[data-placement^=top]>.tippy-arrow:before{bottom:-7px;left:0;border-width:8px 8px 0;border-top-color:initial;transform-origin:center top}.tippy-box[data-placement^=bottom]>.tippy-arrow{top:0}.tippy-box[data-placement^=bottom]>.tippy-arrow:before{top:-7px;left:0;border-width:0 8px 8px;border-bottom-color:initial;transform-origin:center bottom}.tippy-box[data-placement^=left]>.tippy-arrow{right:0}.tippy-box[data-placement^=left]>.tippy-arrow:before{border-width:8px 0 8px 8px;border-left-color:initial;right:-7px;transform-origin:center left}.tippy-box[data-placement^=right]>.tippy-arrow{left:0}.tippy-box[data-placement^=right]>.tippy-arrow:before{left:-7px;border-width:8px 8px 8px 0;border-right-color:initial;transform-origin:center right}.tippy-box[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-arrow{width:16px;height:16px;color:#333}.tippy-arrow:before{content:"";position:absolute;border-color:transparent;border-style:solid}.tippy-content{position:relative;padding:5px 9px;z-index:1}'), F.setDefaultProps({
    plugins: [Y, G, K, Q],
    render: N
  }), F.createSingleton = function (t, e) {
    var n;
    void 0 === e && (e = {});
    var r,
      o = t,
      i = [],
      a = [],
      s = e.overrides,
      u = [],
      f = !1;
    function l() {
      a = o.map(function (t) {
        return c(t.props.triggerTarget || t.reference);
      }).reduce(function (t, e) {
        return t.concat(e);
      }, []);
    }
    function d() {
      i = o.map(function (t) {
        return t.reference;
      });
    }
    function v(t) {
      o.forEach(function (e) {
        t ? e.enable() : e.disable();
      });
    }
    function g(t) {
      return o.map(function (e) {
        var n = e.setProps;
        return e.setProps = function (o) {
          n(o), e.reference === r && t.setProps(o);
        }, function () {
          e.setProps = n;
        };
      });
    }
    function h(t, e) {
      var n = a.indexOf(e);
      if (e !== r) {
        r = e;
        var u = (s || []).concat("content").reduce(function (t, e) {
          return t[e] = o[n].props[e], t;
        }, {});
        t.setProps(Object.assign({}, u, {
          getReferenceClientRect: "function" == typeof u.getReferenceClientRect ? u.getReferenceClientRect : function () {
            var t;
            return null == (t = i[n]) ? void 0 : t.getBoundingClientRect();
          }
        }));
      }
    }
    v(!1), d(), l();
    var b = {
        fn: function fn() {
          return {
            onDestroy: function onDestroy() {
              v(!0);
            },
            onHidden: function onHidden() {
              r = null;
            },
            onClickOutside: function onClickOutside(t) {
              t.props.showOnCreate && !f && (f = !0, r = null);
            },
            onShow: function onShow(t) {
              t.props.showOnCreate && !f && (f = !0, h(t, i[0]));
            },
            onTrigger: function onTrigger(t, e) {
              h(t, e.currentTarget);
            }
          };
        }
      },
      y = F(m(), Object.assign({}, p(e, ["overrides"]), {
        plugins: [b].concat(e.plugins || []),
        triggerTarget: a,
        popperOptions: Object.assign({}, e.popperOptions, {
          modifiers: [].concat((null == (n = e.popperOptions) ? void 0 : n.modifiers) || [], [W])
        })
      })),
      w = y.show;
    y.show = function (t) {
      if (w(), !r && null == t) return h(y, i[0]);
      if (!r || null != t) {
        if ("number" == typeof t) return i[t] && h(y, i[t]);
        if (o.indexOf(t) >= 0) {
          var e = t.reference;
          return h(y, e);
        }
        return i.indexOf(t) >= 0 ? h(y, t) : void 0;
      }
    }, y.showNext = function () {
      var t = i[0];
      if (!r) return y.show(0);
      var e = i.indexOf(r);
      y.show(i[e + 1] || t);
    }, y.showPrevious = function () {
      var t = i[i.length - 1];
      if (!r) return y.show(t);
      var e = i.indexOf(r),
        n = i[e - 1] || t;
      y.show(n);
    };
    var x = y.setProps;
    return y.setProps = function (t) {
      s = t.overrides || s, x(t);
    }, y.setInstances = function (t) {
      v(!0), u.forEach(function (t) {
        return t();
      }), o = t, v(!1), d(), l(), u = g(y), y.setProps({
        triggerTarget: a
      });
    }, u = g(y), y;
  }, F.delegate = function (t, e) {
    var n = [],
      o = [],
      i = !1,
      a = e.target,
      s = p(e, ["target"]),
      u = Object.assign({}, s, {
        trigger: "manual",
        touch: !1
      }),
      f = Object.assign({
        touch: R.touch
      }, s, {
        showOnCreate: !0
      }),
      l = F(t, u);
    function d(t) {
      if (t.target && !i) {
        var n = t.target.closest(a);
        if (n) {
          var r = n.getAttribute("data-tippy-trigger") || e.trigger || R.trigger;
          if (!n._tippy && !("touchstart" === t.type && "boolean" == typeof f.touch || "touchstart" !== t.type && r.indexOf(X[t.type]) < 0)) {
            var s = F(n, f);
            s && (o = o.concat(s));
          }
        }
      }
    }
    function v(t, e, r, o) {
      void 0 === o && (o = !1), t.addEventListener(e, r, o), n.push({
        node: t,
        eventType: e,
        handler: r,
        options: o
      });
    }
    return c(l).forEach(function (t) {
      var e = t.destroy,
        a = t.enable,
        s = t.disable;
      t.destroy = function (t) {
        void 0 === t && (t = !0), t && o.forEach(function (t) {
          t.destroy();
        }), o = [], n.forEach(function (t) {
          var e = t.node,
            n = t.eventType,
            r = t.handler,
            o = t.options;
          e.removeEventListener(n, r, o);
        }), n = [], e();
      }, t.enable = function () {
        a(), o.forEach(function (t) {
          return t.enable();
        }), i = !1;
      }, t.disable = function () {
        s(), o.forEach(function (t) {
          return t.disable();
        }), i = !0;
      }, function (t) {
        var e = t.reference;
        v(e, "touchstart", d, r), v(e, "mouseover", d), v(e, "focusin", d), v(e, "click", d);
      }(t);
    }), l;
  }, F.hideAll = function (t) {
    var e = void 0 === t ? {} : t,
      n = e.exclude,
      r = e.duration;
    _.forEach(function (t) {
      var e = !1;
      if (n && (e = b(n) ? t.reference === n : t.popper === n.popper), !e) {
        var o = t.props.duration;
        t.setProps({
          duration: r
        }), t.hide(), t.state.isDestroyed || t.setProps({
          duration: o
        });
      }
    });
  }, F.roundArrow = '<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>', F;
});

},{"@popperjs/core":1}],58:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory());
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {
    module.exports = factory();
  } else {
    (function install() {
      // To make sure Zenscroll can be referenced from the header, before `body` is available
      if (document && document.body) {
        root.zenscroll = factory();
      } else {
        // retry 9ms later
        setTimeout(install, 9);
      }
    })();
  }
})(void 0, function () {
  "use strict";

  // Detect if the browser already supports native smooth scrolling (e.g., Firefox 36+ and Chrome 49+) and it is enabled:
  var isNativeSmoothScrollEnabledOn = function isNativeSmoothScrollEnabledOn(elem) {
    return elem && "getComputedStyle" in window && window.getComputedStyle(elem)["scroll-behavior"] === "smooth";
  };

  // Exit if it’s not a browser environment:
  if (typeof window === "undefined" || !("document" in window)) {
    return {};
  }
  var makeScroller = function makeScroller(container, defaultDuration, edgeOffset) {
    // Use defaults if not provided
    defaultDuration = defaultDuration || 999; //ms
    if (!edgeOffset && edgeOffset !== 0) {
      // When scrolling, this amount of distance is kept from the edges of the container:
      edgeOffset = 9; //px
    }

    // Handling the life-cycle of the scroller
    var scrollTimeoutId;
    var setScrollTimeoutId = function setScrollTimeoutId(newValue) {
      scrollTimeoutId = newValue;
    };

    /**
     * Stop the current smooth scroll operation immediately
     */
    var stopScroll = function stopScroll() {
      clearTimeout(scrollTimeoutId);
      setScrollTimeoutId(0);
    };
    var getTopWithEdgeOffset = function getTopWithEdgeOffset(elem) {
      return Math.max(0, container.getTopOf(elem) - edgeOffset);
    };

    /**
     * Scrolls to a specific vertical position in the document.
     *
     * @param {targetY} The vertical position within the document.
     * @param {duration} Optionally the duration of the scroll operation.
     *        If not provided the default duration is used.
     * @param {onDone} An optional callback function to be invoked once the scroll finished.
     */
    var scrollToY = function scrollToY(targetY, duration, onDone) {
      stopScroll();
      if (duration === 0 || duration && duration < 0 || isNativeSmoothScrollEnabledOn(container.body)) {
        container.toY(targetY);
        if (onDone) {
          onDone();
        }
      } else {
        var startY = container.getY();
        var distance = Math.max(0, targetY) - startY;
        var startTime = new Date().getTime();
        duration = duration || Math.min(Math.abs(distance), defaultDuration);
        (function loopScroll() {
          setScrollTimeoutId(setTimeout(function () {
            // Calculate percentage:
            var p = Math.min(1, (new Date().getTime() - startTime) / duration);
            // Calculate the absolute vertical position:
            var y = Math.max(0, Math.floor(startY + distance * (p < 0.5 ? 2 * p * p : p * (4 - p * 2) - 1)));
            container.toY(y);
            if (p < 1 && container.getHeight() + y < container.body.scrollHeight) {
              loopScroll();
            } else {
              setTimeout(stopScroll, 99); // with cooldown time
              if (onDone) {
                onDone();
              }
            }
          }, 9));
        })();
      }
    };

    /**
     * Scrolls to the top of a specific element.
     *
     * @param {elem} The element to scroll to.
     * @param {duration} Optionally the duration of the scroll operation.
     * @param {onDone} An optional callback function to be invoked once the scroll finished.
     */
    var scrollToElem = function scrollToElem(elem, duration, onDone) {
      scrollToY(getTopWithEdgeOffset(elem), duration, onDone);
    };

    /**
     * Scrolls an element into view if necessary.
     *
     * @param {elem} The element.
     * @param {duration} Optionally the duration of the scroll operation.
     * @param {onDone} An optional callback function to be invoked once the scroll finished.
     */
    var scrollIntoView = function scrollIntoView(elem, duration, onDone) {
      var elemHeight = elem.getBoundingClientRect().height;
      var elemBottom = container.getTopOf(elem) + elemHeight;
      var containerHeight = container.getHeight();
      var y = container.getY();
      var containerBottom = y + containerHeight;
      if (getTopWithEdgeOffset(elem) < y || elemHeight + edgeOffset > containerHeight) {
        // Element is clipped at top or is higher than screen.
        scrollToElem(elem, duration, onDone);
      } else if (elemBottom + edgeOffset > containerBottom) {
        // Element is clipped at the bottom.
        scrollToY(elemBottom - containerHeight + edgeOffset, duration, onDone);
      } else if (onDone) {
        onDone();
      }
    };

    /**
     * Scrolls to the center of an element.
     *
     * @param {elem} The element.
     * @param {duration} Optionally the duration of the scroll operation.
     * @param {offset} Optionally the offset of the top of the element from the center of the screen.
     *        A value of 0 is ignored.
     * @param {onDone} An optional callback function to be invoked once the scroll finished.
     */
    var scrollToCenterOf = function scrollToCenterOf(elem, duration, offset, onDone) {
      scrollToY(Math.max(0, container.getTopOf(elem) - container.getHeight() / 2 + (offset || elem.getBoundingClientRect().height / 2)), duration, onDone);
    };

    /**
     * Changes default settings for this scroller.
     *
     * @param {newDefaultDuration} Optionally a new value for default duration, used for each scroll method by default.
     *        Ignored if null or undefined.
     * @param {newEdgeOffset} Optionally a new value for the edge offset, used by each scroll method by default. Ignored if null or undefined.
     * @returns An object with the current values.
     */
    var setup = function setup(newDefaultDuration, newEdgeOffset) {
      if (newDefaultDuration === 0 || newDefaultDuration) {
        defaultDuration = newDefaultDuration;
      }
      if (newEdgeOffset === 0 || newEdgeOffset) {
        edgeOffset = newEdgeOffset;
      }
      return {
        defaultDuration: defaultDuration,
        edgeOffset: edgeOffset
      };
    };
    return {
      setup: setup,
      to: scrollToElem,
      toY: scrollToY,
      intoView: scrollIntoView,
      center: scrollToCenterOf,
      stop: stopScroll,
      moving: function moving() {
        return !!scrollTimeoutId;
      },
      getY: container.getY,
      getTopOf: container.getTopOf
    };
  };
  var docElem = document.documentElement;
  var getDocY = function getDocY() {
    return window.scrollY || docElem.scrollTop;
  };

  // Create a scroller for the document:
  var zenscroll = makeScroller({
    body: document.scrollingElement || document.body,
    toY: function toY(y) {
      window.scrollTo(0, y);
    },
    getY: getDocY,
    getHeight: function getHeight() {
      return window.innerHeight || docElem.clientHeight;
    },
    getTopOf: function getTopOf(elem) {
      return elem.getBoundingClientRect().top + getDocY() - docElem.offsetTop;
    }
  });

  /**
   * Creates a scroller from the provided container element (e.g., a DIV)
   *
   * @param {scrollContainer} The vertical position within the document.
   * @param {defaultDuration} Optionally a value for default duration, used for each scroll method by default.
   *        Ignored if 0 or null or undefined.
   * @param {edgeOffset} Optionally a value for the edge offset, used by each scroll method by default. 
   *        Ignored if null or undefined.
   * @returns A scroller object, similar to `zenscroll` but controlling the provided element.
   */
  zenscroll.createScroller = function (scrollContainer, defaultDuration, edgeOffset) {
    return makeScroller({
      body: scrollContainer,
      toY: function toY(y) {
        scrollContainer.scrollTop = y;
      },
      getY: function getY() {
        return scrollContainer.scrollTop;
      },
      getHeight: function getHeight() {
        return Math.min(scrollContainer.clientHeight, window.innerHeight || docElem.clientHeight);
      },
      getTopOf: function getTopOf(elem) {
        return elem.offsetTop;
      }
    }, defaultDuration, edgeOffset);
  };

  // Automatic link-smoothing on achors
  // Exclude IE8- or when native is enabled or Zenscroll auto- is disabled
  if ("addEventListener" in window && !window.noZensmooth && !isNativeSmoothScrollEnabledOn(document.body)) {
    var isHistorySupported = "history" in window && "pushState" in history;
    var isScrollRestorationSupported = isHistorySupported && "scrollRestoration" in history;

    // On first load & refresh make sure the browser restores the position first
    if (isScrollRestorationSupported) {
      history.scrollRestoration = "auto";
    }
    window.addEventListener("load", function () {
      if (isScrollRestorationSupported) {
        // Set it to manual
        setTimeout(function () {
          history.scrollRestoration = "manual";
        }, 9);
        window.addEventListener("popstate", function (event) {
          if (event.state && "zenscrollY" in event.state) {
            zenscroll.toY(event.state.zenscrollY);
          }
        }, false);
      }

      // Add edge offset on first load if necessary
      // This may not work on IE (or older computer?) as it requires more timeout, around 100 ms
      if (window.location.hash) {
        setTimeout(function () {
          // Adjustment is only needed if there is an edge offset:
          var edgeOffset = zenscroll.setup().edgeOffset;
          if (edgeOffset) {
            var targetElem = document.getElementById(window.location.href.split("#")[1]);
            if (targetElem) {
              var targetY = Math.max(0, zenscroll.getTopOf(targetElem) - edgeOffset);
              var diff = zenscroll.getY() - targetY;
              // Only do the adjustment if the browser is very close to the element:
              if (0 <= diff && diff < 9) {
                window.scrollTo(0, targetY);
              }
            }
          }
        }, 9);
      }
    }, false);

    // Handling clicks on anchors
    var RE_noZensmooth = new RegExp("(^|\\s)noZensmooth(\\s|$)");
    window.addEventListener("click", function (event) {
      var anchor = event.target;
      while (anchor && anchor.tagName !== "A") {
        anchor = anchor.parentNode;
      }
      // Let the browser handle the click if it wasn't with the primary button, or with some modifier keys:
      if (!anchor || event.which !== 1 || event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {
        return;
      }
      // Save the current scrolling position so it can be used for scroll restoration:
      if (isScrollRestorationSupported) {
        var historyState = history.state && _typeof(history.state) === "object" ? history.state : {};
        historyState.zenscrollY = zenscroll.getY();
        try {
          history.replaceState(historyState, "");
        } catch (e) {
          // Avoid the Chrome Security exception on file protocol, e.g., file://index.html
        }
      }
      // Find the referenced ID:
      var href = anchor.getAttribute("href") || "";
      if (href.indexOf("#") === 0 && !RE_noZensmooth.test(anchor.className)) {
        var targetY = 0;
        var targetElem = document.getElementById(href.substring(1));
        if (href !== "#") {
          if (!targetElem) {
            // Let the browser handle the click if the target ID is not found.
            return;
          }
          targetY = zenscroll.getTopOf(targetElem);
        }
        event.preventDefault();
        // By default trigger the browser's `hashchange` event...
        var onDone = function onDone() {
          window.location = href;
        };
        // ...unless there is an edge offset specified
        var edgeOffset = zenscroll.setup().edgeOffset;
        if (edgeOffset) {
          targetY = Math.max(0, targetY - edgeOffset);
          if (isHistorySupported) {
            onDone = function onDone() {
              history.pushState({}, "", href);
            };
          }
        }
        zenscroll.toY(targetY, null, onDone);
      }
    }, false);
  }
  return zenscroll;
});

},{}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
