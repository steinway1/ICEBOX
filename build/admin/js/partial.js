(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*!
 * jQuery JavaScript Library v3.7.1
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-08-28T13:37Z
 */
(function (global, factory) {
  "use strict";

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket trac-14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }
      return factory(w);
    };
  } else {
    factory(global);
  }

  // Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : void 0, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];
  var getProto = Object.getPrototypeOf;
  var _slice = arr.slice;
  var flat = arr.flat ? function (array) {
    return arr.flat.call(array);
  } : function (array) {
    return arr.concat.apply([], array);
  };
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};
  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    // Plus for old WebKit, typeof returns "function" for HTML collections
    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
  };
  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };
  var document = window.document;
  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };
  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i,
      val,
      script = doc.createElement("script");
    script.text = code;
    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || node.getAttribute && node.getAttribute(i);
        if (val) {
          script.setAttribute(i, val);
        }
      }
    }
    doc.head.appendChild(script).parentNode.removeChild(script);
  }
  function toType(obj) {
    if (obj == null) {
      return obj + "";
    }

    // Support: Android <=2.3 only (functionish RegExp)
    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module

  var version = "3.7.1",
    rhtmlSuffix = /HTML$/i,
    // Define a local copy of jQuery
    _jQuery2 = function jQuery(selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new _jQuery2.fn.init(selector, context);
    };
  _jQuery2.fn = _jQuery2.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: _jQuery2,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      }

      // Return just the one element from the set
      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = _jQuery2.merge(this.constructor(), elems);

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;

      // Return the newly-formed element set
      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return _jQuery2.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(_jQuery2.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    even: function even() {
      return this.pushStack(_jQuery2.grep(this, function (_elem, i) {
        return (i + 1) % 2;
      }));
    },
    odd: function odd() {
      return this.pushStack(_jQuery2.grep(this, function (_elem, i) {
        return i % 2;
      }));
    },
    eq: function eq(i) {
      var len = this.length,
        j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };
  _jQuery2.extend = _jQuery2.fn.extend = function () {
    var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if (typeof target === "boolean") {
      deep = target;

      // Skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name];

          // Prevent Object.prototype pollution
          // Prevent never-ending loop
          if (name === "__proto__" || target === copy) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (_jQuery2.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name];

            // Ensure proper type for the source value
            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !_jQuery2.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }
            copyIsArray = false;

            // Never move original objects, clone them
            target[name] = _jQuery2.extend(deep, clone, copy);

            // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };
  _jQuery2.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor;

      // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects
      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }
      proto = getProto(obj);

      // Objects with no prototype (e.g., `Object.create( null )`) are plain
      if (!proto) {
        return true;
      }

      // Objects with prototype are plain iff they were constructed by a global Object function
      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      var name;
      for (name in obj) {
        return false;
      }
      return true;
    },
    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function globalEval(code, options, doc) {
      DOMEval(code, {
        nonce: options && options.nonce
      }, doc);
    },
    each: function each(obj, callback) {
      var length,
        i = 0;
      if (isArrayLike(obj)) {
        length = obj.length;
        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }
      return obj;
    },
    // Retrieve the text value of an array of DOM nodes
    text: function text(elem) {
      var node,
        ret = "",
        i = 0,
        nodeType = elem.nodeType;
      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += _jQuery2.text(node);
        }
      }
      if (nodeType === 1 || nodeType === 11) {
        return elem.textContent;
      }
      if (nodeType === 9) {
        return elem.documentElement.textContent;
      }
      if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      }

      // Do not include comment or processing instruction nodes

      return ret;
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];
      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          _jQuery2.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }
      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    isXMLDoc: function isXMLDoc(elem) {
      var namespace = elem && elem.namespaceURI,
        docElem = elem && (elem.ownerDocument || elem).documentElement;

      // Assume HTML when documentElement doesn't yet exist, such as inside
      // document fragments.
      return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
        j = 0,
        i = first.length;
      for (; j < len; j++) {
        first[i++] = second[j];
      }
      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;

      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }
      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
        value,
        i = 0,
        ret = [];

      // Go through the array, translating each of the items to their new values
      if (isArrayLike(elems)) {
        length = elems.length;
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }

        // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      }

      // Flatten any nested arrays
      return flat(ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });
  if (typeof Symbol === "function") {
    _jQuery2.fn[Symbol.iterator] = arr[Symbol.iterator];
  }

  // Populate the class2type map
  _jQuery2.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });
  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
      type = toType(obj);
    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }
    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }
  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }
  var pop = arr.pop;
  var sort = arr.sort;
  var splice = arr.splice;
  var whitespace = "[\\x20\\t\\r\\n\\f]";
  var rtrimCSS = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");

  // Note: an element does not contain itself
  _jQuery2.contains = function (a, b) {
    var bup = b && b.parentNode;
    return a === bup || !!(bup && bup.nodeType === 1 && (
    // Support: IE 9 - 11+
    // IE doesn't have `contains` on SVG.
    a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
  };

  // CSS string/identifier serialization
  // https://drafts.csswg.org/cssom/#common-serializing-idioms
  var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
  function fcssescape(ch, asCodePoint) {
    if (asCodePoint) {
      // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
      if (ch === "\0") {
        return "\uFFFD";
      }

      // Control characters and (dependent upon position) numbers get escaped as code points
      return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
    }

    // Other potentially-special ASCII characters get backslash-escaped
    return "\\" + ch;
  }
  _jQuery2.escapeSelector = function (sel) {
    return (sel + "").replace(rcssescape, fcssescape);
  };
  var preferredDoc = document,
    pushNative = push;
  (function () {
    var i,
      Expr,
      outermostContext,
      sortInput,
      hasDuplicate,
      push = pushNative,
      // Local document vars
      document,
      documentElement,
      documentIsHTML,
      rbuggyQSA,
      matches,
      // Instance-specific data
      expando = _jQuery2.expando,
      dirruns = 0,
      done = 0,
      classCache = createCache(),
      tokenCache = createCache(),
      compilerCache = createCache(),
      nonnativeSelectorCache = createCache(),
      sortOrder = function sortOrder(a, b) {
        if (a === b) {
          hasDuplicate = true;
        }
        return 0;
      },
      booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" + "loop|multiple|open|readonly|required|scoped",
      // Regular expressions

      // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
      identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
      // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
      attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
      // Operator (capture 2)
      "*([*^$|!~]?=)" + whitespace +
      // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
      "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
      pseudos = ":(" + identifier + ")(?:\\((" +
      // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
      // 1. quoted (capture 3; capture 4 or capture 5)
      "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
      // 2. simple (capture 6)
      "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
      // 3. anything else (capture 2)
      ".*" + ")\\)|)",
      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
      rwhitespace = new RegExp(whitespace + "+", "g"),
      rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
      rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
      rdescend = new RegExp(whitespace + "|>"),
      rpseudo = new RegExp(pseudos),
      ridentifier = new RegExp("^" + identifier + "$"),
      matchExpr = {
        ID: new RegExp("^#(" + identifier + ")"),
        CLASS: new RegExp("^\\.(" + identifier + ")"),
        TAG: new RegExp("^(" + identifier + "|[*])"),
        ATTR: new RegExp("^" + attributes),
        PSEUDO: new RegExp("^" + pseudos),
        CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
        bool: new RegExp("^(?:" + booleans + ")$", "i"),
        // For use in libraries implementing .is()
        // We use this for POS matching in `select`
        needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
      },
      rinputs = /^(?:input|select|textarea|button)$/i,
      rheader = /^h\d$/i,
      // Easily-parseable/retrievable ID or TAG or CLASS selectors
      rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
      rsibling = /[+~]/,
      // CSS escapes
      // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
      runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
      funescape = function funescape(escape, nonHex) {
        var high = "0x" + escape.slice(1) - 0x10000;
        if (nonHex) {
          // Strip the backslash prefix from a non-hex escape sequence
          return nonHex;
        }

        // Replace a hexadecimal escape sequence with the encoded Unicode code point
        // Support: IE <=11+
        // For values outside the Basic Multilingual Plane (BMP), manually construct a
        // surrogate pair
        return high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
      },
      // Used for iframes; see `setDocument`.
      // Support: IE 9 - 11+, Edge 12 - 18+
      // Removing the function wrapper causes a "Permission Denied"
      // error in IE/Edge.
      unloadHandler = function unloadHandler() {
        setDocument();
      },
      inDisabledFieldset = addCombinator(function (elem) {
        return elem.disabled === true && nodeName(elem, "fieldset");
      }, {
        dir: "parentNode",
        next: "legend"
      });

    // Support: IE <=9 only
    // Accessing document.activeElement can throw unexpectedly
    // https://bugs.jquery.com/ticket/13393
    function safeActiveElement() {
      try {
        return document.activeElement;
      } catch (err) {}
    }

    // Optimize for push.apply( _, NodeList )
    try {
      push.apply(arr = _slice.call(preferredDoc.childNodes), preferredDoc.childNodes);

      // Support: Android <=4.0
      // Detect silently failing push.apply
      // eslint-disable-next-line no-unused-expressions
      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: function apply(target, els) {
          pushNative.apply(target, _slice.call(els));
        },
        call: function call(target) {
          pushNative.apply(target, _slice.call(arguments, 1));
        }
      };
    }
    function find(selector, context, results, seed) {
      var m,
        i,
        elem,
        nid,
        match,
        groups,
        newSelector,
        newContext = context && context.ownerDocument,
        // nodeType defaults to 9, since context defaults to document
        nodeType = context ? context.nodeType : 9;
      results = results || [];

      // Return early from calls with invalid selector or context
      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      }

      // Try to shortcut find operations (as opposed to filters) in HTML documents
      if (!seed) {
        setDocument(context);
        context = context || document;
        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE 9 only
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    push.call(results, elem);
                    return results;
                  }
                } else {
                  return results;
                }

                // Element context
              } else {
                // Support: IE 9 only
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && find.contains(context, elem) && elem.id === m) {
                  push.call(results, elem);
                  return results;
                }
              }

              // Type selector
            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results;

              // Class selector
            } else if ((m = match[3]) && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          }

          // Take advantage of querySelectorAll
          if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
            newSelector = selector;
            newContext = context;

            // qSA considers elements outside a scoping root when evaluating child or
            // descendant combinators, which is not what we want.
            // In such cases, we work around the behavior by prefixing every selector in the
            // list with an ID selector referencing the scope context.
            // The technique has to be used as well when a leading combinator is used
            // as such selectors are not recognized by querySelectorAll.
            // Thanks to Andrew Dupont for this technique.
            if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
              // Expand context for sibling selectors
              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;

              // We can use :scope instead of the ID hack if the browser
              // supports it & if we're not changing the context.
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when
              // strict-comparing two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              if (newContext != context || !support.scope) {
                // Capture the context ID, setting it first if necessary
                if (nid = context.getAttribute("id")) {
                  nid = _jQuery2.escapeSelector(nid);
                } else {
                  context.setAttribute("id", nid = expando);
                }
              }

              // Prefix every selector in the list
              groups = tokenize(selector);
              i = groups.length;
              while (i--) {
                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
              }
              newSelector = groups.join(",");
            }
            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
              nonnativeSelectorCache(selector, true);
            } finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      }

      // All others
      return select(selector.replace(rtrimCSS, "$1"), context, results, seed);
    }

    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */
    function createCache() {
      var keys = [];
      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties
        // (see https://github.com/jquery/sizzle/issues/157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }
        return cache[key + " "] = value;
      }
      return cache;
    }

    /**
     * Mark a function for special use by jQuery selector module
     * @param {Function} fn The function to mark
     */
    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }

    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */
    function assert(fn) {
      var el = document.createElement("fieldset");
      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        }

        // release memory in IE
        el = null;
      }
    }

    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */
    function createInputPseudo(type) {
      return function (elem) {
        return nodeName(elem, "input") && elem.type === type;
      };
    }

    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */
    function createButtonPseudo(type) {
      return function (elem) {
        return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
      };
    }

    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */
    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            }

            // Support: IE 6 - 11+
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors
            return elem.isDisabled === disabled ||
            // Where there is no isDisabled, check manually
            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
          }
          return elem.disabled === disabled;

          // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        }

        // Remaining elements are neither :enabled nor :disabled
        return false;
      };
    }

    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */
    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
            matchIndexes = fn([], seed.length, argument),
            i = matchIndexes.length;

          // Match elements found at the specified indexes
          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }

    /**
     * Checks a node for validity as a jQuery selector context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */
    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    }

    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [node] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */
    function setDocument(node) {
      var subWindow,
        doc = node ? node.ownerDocument || node : preferredDoc;

      // Return early if doc is invalid or already selected
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      }

      // Update global variables
      document = doc;
      documentElement = document.documentElement;
      documentIsHTML = !_jQuery2.isXMLDoc(document);

      // Support: iOS 7 only, IE 9 - 11+
      // Older browsers didn't support unprefixed `matches`.
      matches = documentElement.matches || documentElement.webkitMatchesSelector || documentElement.msMatchesSelector;

      // Support: IE 9 - 11+, Edge 12 - 18+
      // Accessing iframe documents after unload throws "permission denied" errors
      // (see trac-13936).
      // Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
      // all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
      if (documentElement.msMatchesSelector &&
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 9 - 11+, Edge 12 - 18+
        subWindow.addEventListener("unload", unloadHandler);
      }

      // Support: IE <10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test
      support.getById = assert(function (el) {
        documentElement.appendChild(el).id = _jQuery2.expando;
        return !document.getElementsByName || !document.getElementsByName(_jQuery2.expando).length;
      });

      // Support: IE 9 only
      // Check to see if it's possible to do matchesSelector
      // on a disconnected node.
      support.disconnectedMatch = assert(function (el) {
        return matches.call(el, "*");
      });

      // Support: IE 9 - 11+, Edge 12 - 18+
      // IE/Edge don't support the :scope pseudo-class.
      support.scope = assert(function () {
        return document.querySelectorAll(":scope");
      });

      // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
      // Make sure the `:has()` argument is parsed unforgivingly.
      // We include `*` in the test to detect buggy implementations that are
      // _selectively_ forgiving (specifically when the list includes at least
      // one valid selector).
      // Note that we treat complete lack of support for `:has()` as if it were
      // spec-compliant support, which is fine because use of `:has()` in such
      // environments will fail in the qSA path and fall back to jQuery traversal
      // anyway.
      support.cssHas = assert(function () {
        try {
          document.querySelector(":has(*,:jqfake)");
          return false;
        } catch (e) {
          return true;
        }
      });

      // ID filter and find
      if (support.getById) {
        Expr.filter.ID = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };
        Expr.find.ID = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter.ID = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        };

        // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut
        Expr.find.ID = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
              i,
              elems,
              elem = context.getElementById(id);
            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");
              if (node && node.value === id) {
                return [elem];
              }

              // Fall back on getElementsByName
              elems = context.getElementsByName(id);
              i = 0;
              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");
                if (node && node.value === id) {
                  return [elem];
                }
              }
            }
            return [];
          }
        };
      }

      // Tag
      Expr.find.TAG = function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag);

          // DocumentFragment nodes don't have gEBTN
        } else {
          return context.querySelectorAll(tag);
        }
      };

      // Class
      Expr.find.CLASS = function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };

      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */

      // QSA and matchesSelector support

      rbuggyQSA = [];

      // Build QSA regex
      // Regex strategy adopted from Diego Perini
      assert(function (el) {
        var input;
        documentElement.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a>" + "<select id='" + expando + "-\r\\' disabled='disabled'>" + "<option selected=''></option></select>";

        // Support: iOS <=7 - 8 only
        // Boolean attributes and "value" are not treated correctly in some XML documents
        if (!el.querySelectorAll("[selected]").length) {
          rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
        }

        // Support: iOS <=7 - 8 only
        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
          rbuggyQSA.push("~=");
        }

        // Support: iOS 8 only
        // https://bugs.webkit.org/show_bug.cgi?id=136851
        // In-page `selector#id sibling-combinator selector` fails
        if (!el.querySelectorAll("a#" + expando + "+*").length) {
          rbuggyQSA.push(".#.+[+~]");
        }

        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
        // In some of the document kinds, these selectors wouldn't work natively.
        // This is probably OK but for backwards compatibility we want to maintain
        // handling them through jQuery traversal in jQuery 3.x.
        if (!el.querySelectorAll(":checked").length) {
          rbuggyQSA.push(":checked");
        }

        // Support: Windows 8 Native Apps
        // The type and name attributes are restricted during .innerHTML assignment
        input = document.createElement("input");
        input.setAttribute("type", "hidden");
        el.appendChild(input).setAttribute("name", "D");

        // Support: IE 9 - 11+
        // IE's :disabled selector does not pick up the children of disabled fieldsets
        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
        // In some of the document kinds, these selectors wouldn't work natively.
        // This is probably OK but for backwards compatibility we want to maintain
        // handling them through jQuery traversal in jQuery 3.x.
        documentElement.appendChild(el).disabled = true;
        if (el.querySelectorAll(":disabled").length !== 2) {
          rbuggyQSA.push(":enabled", ":disabled");
        }

        // Support: IE 11+, Edge 15 - 18+
        // IE 11/Edge don't find elements on a `[name='']` query in some cases.
        // Adding a temporary attribute to the document before the selection works
        // around the issue.
        // Interestingly, IE 10 & older don't seem to have the issue.
        input = document.createElement("input");
        input.setAttribute("name", "");
        el.appendChild(input);
        if (!el.querySelectorAll("[name='']").length) {
          rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
        }
      });
      if (!support.cssHas) {
        // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
        // Our regular `try-catch` mechanism fails to detect natively-unsupported
        // pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
        // in browsers that parse the `:has()` argument as a forgiving selector list.
        // https://drafts.csswg.org/selectors/#relational now requires the argument
        // to be parsed unforgivingly, but browsers have not yet fully adjusted.
        rbuggyQSA.push(":has");
      }
      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));

      /* Sorting
      ---------------------------------------------------------------------- */

      // Document order sorting
      sortOrder = function sortOrder(a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        // Sort on method existence if only one input has compareDocumentPosition
        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
        if (compare) {
          return compare;
        }

        // Calculate position if both inputs belong to the same document
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) :
        // Otherwise we know they are disconnected
        1;

        // Disconnected nodes
        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if (a === document || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {
            return -1;
          }

          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if (b === document || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {
            return 1;
          }

          // Maintain original order
          return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
        }
        return compare & 4 ? -1 : 1;
      };
      return document;
    }
    find.matches = function (expr, elements) {
      return find(expr, null, null, elements);
    };
    find.matchesSelector = function (elem, expr) {
      setDocument(elem);
      if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr);

          // IE 9's matchesSelector returns false on disconnected nodes
          if (ret || support.disconnectedMatch ||
          // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
          nonnativeSelectorCache(expr, true);
        }
      }
      return find(expr, document, null, [elem]).length > 0;
    };
    find.contains = function (context, elem) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((context.ownerDocument || context) != document) {
        setDocument(context);
      }
      return _jQuery2.contains(context, elem);
    };
    find.attr = function (elem, name) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((elem.ownerDocument || elem) != document) {
        setDocument(elem);
      }
      var fn = Expr.attrHandle[name.toLowerCase()],
        // Don't get fooled by Object.prototype properties (see trac-13807)
        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      if (val !== undefined) {
        return val;
      }
      return elem.getAttribute(name);
    };
    find.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };

    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */
    _jQuery2.uniqueSort = function (results) {
      var elem,
        duplicates = [],
        j = 0,
        i = 0;

      // Unless we *know* we can detect duplicates, assume their presence
      //
      // Support: Android <=4.0+
      // Testing for detecting duplicates is unpredictable so instead assume we can't
      // depend on duplicate detection in all browsers without a stable sort.
      hasDuplicate = !support.sortStable;
      sortInput = !support.sortStable && _slice.call(results, 0);
      sort.call(results, sortOrder);
      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }
        while (j--) {
          splice.call(results, duplicates[j], 1);
        }
      }

      // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225
      sortInput = null;
      return results;
    };
    _jQuery2.fn.uniqueSort = function () {
      return this.pushStack(_jQuery2.uniqueSort(_slice.apply(this)));
    };
    Expr = _jQuery2.expr = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        ATTR: function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape);

          // Move the given value to match[3] whether quoted or unquoted
          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }
          return match.slice(0, 4);
        },
        CHILD: function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();
          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              find.error(match[0]);
            }

            // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1
            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd");

            // other types prohibit arguments
          } else if (match[3]) {
            find.error(match[0]);
          }
          return match;
        },
        PSEUDO: function PSEUDO(match) {
          var excess,
            unquoted = !match[6] && match[2];
          if (matchExpr.CHILD.test(match[0])) {
            return null;
          }

          // Accept quoted arguments as-is
          if (match[3]) {
            match[2] = match[4] || match[5] || "";

            // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && (
          // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && (
          // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          }

          // Return only captures needed by the pseudo filter method (type and argument)
          return match.slice(0, 3);
        }
      },
      filter: {
        TAG: function TAG(nodeNameSelector) {
          var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return nodeName(elem, expectedNodeName);
          };
        },
        CLASS: function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        ATTR: function ATTR(name, operator, check) {
          return function (elem) {
            var result = find.attr(elem, name);
            if (result == null) {
              return operator === "!=";
            }
            if (!operator) {
              return true;
            }
            result += "";
            if (operator === "=") {
              return result === check;
            }
            if (operator === "!=") {
              return result !== check;
            }
            if (operator === "^=") {
              return check && result.indexOf(check) === 0;
            }
            if (operator === "*=") {
              return check && result.indexOf(check) > -1;
            }
            if (operator === "$=") {
              return check && result.slice(-check.length) === check;
            }
            if (operator === "~=") {
              return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
            }
            if (operator === "|=") {
              return result === check || result.slice(0, check.length + 1) === check + "-";
            }
            return false;
          };
        },
        CHILD: function CHILD(type, what, _argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
            forward = type.slice(-4) !== "last",
            ofType = what === "of-type";
          return first === 1 && last === 0 ?
          // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, _context, xml) {
            var cache,
              outerCache,
              node,
              nodeIndex,
              start,
              dir = simple !== forward ? "nextSibling" : "previousSibling",
              parent = elem.parentNode,
              name = ofType && elem.nodeName.toLowerCase(),
              useCache = !xml && !ofType,
              diff = false;
            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;
                  while (node = node[dir]) {
                    if (ofType ? nodeName(node, name) : node.nodeType === 1) {
                      return false;
                    }
                  }

                  // Reverse direction for :only-* (if we haven't yet done so)
                  start = dir = type === "only" && !start && "nextSibling";
                }
                return true;
              }
              start = [forward ? parent.firstChild : parent.lastChild];

              // non-xml :nth-child(...) stores cache data on `parent`
              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                outerCache = parent[expando] || (parent[expando] = {});
                cache = outerCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];
                while (node = ++nodeIndex && node && node[dir] || (
                // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    outerCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  cache = outerCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                }

                // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {});
                        outerCache[type] = [dirruns, diff];
                      }
                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              }

              // Incorporate the offset, then check against cycle size
              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        PSEUDO: function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // https://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);

          // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as jQuery does
          if (fn[expando]) {
            return fn(argument);
          }

          // But maintain support for old signatures
          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                matched = fn(seed, argument),
                i = matched.length;
              while (i--) {
                idx = indexOf.call(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }
          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        not: markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
            results = [],
            matcher = compile(selector.replace(rtrimCSS, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
            var elem,
              unmatched = matcher(seed, null, xml, []),
              i = seed.length;

            // Match elements unmatched by `matcher`
            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, _context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results);

            // Don't keep the element
            // (see https://github.com/jquery/sizzle/issues/299)
            input[0] = null;
            return !results.pop();
          };
        }),
        has: markFunction(function (selector) {
          return function (elem) {
            return find(selector, elem).length > 0;
          };
        }),
        contains: markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || _jQuery2.text(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // https://www.w3.org/TR/selectors/#lang-pseudo
        lang: markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            find.error("unsupported lang: " + lang);
          }
          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;
            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);
            return false;
          };
        }),
        // Miscellaneous
        target: function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        root: function root(elem) {
          return elem === documentElement;
        },
        focus: function focus(elem) {
          return elem === safeActiveElement() && document.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        enabled: createDisabledPseudo(false),
        disabled: createDisabledPseudo(true),
        checked: function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
        },
        selected: function selected(elem) {
          // Support: IE <=11+
          // Accessing the selectedIndex property
          // forces the browser to treat the default option as
          // selected when in an optgroup.
          if (elem.parentNode) {
            // eslint-disable-next-line no-unused-expressions
            elem.parentNode.selectedIndex;
          }
          return elem.selected === true;
        },
        // Contents
        empty: function empty(elem) {
          // https://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }
          return true;
        },
        parent: function parent(elem) {
          return !Expr.pseudos.empty(elem);
        },
        // Element/input types
        header: function header(elem) {
          return rheader.test(elem.nodeName);
        },
        input: function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        button: function button(elem) {
          return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
        },
        text: function text(elem) {
          var attr;
          return nodeName(elem, "input") && elem.type === "text" && (
          // Support: IE <10 only
          // New HTML5 attribute values (e.g., "search") appear
          // with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        first: createPositionalPseudo(function () {
          return [0];
        }),
        last: createPositionalPseudo(function (_matchIndexes, length) {
          return [length - 1];
        }),
        eq: createPositionalPseudo(function (_matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        even: createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        odd: createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        lt: createPositionalPseudo(function (matchIndexes, length, argument) {
          var i;
          if (argument < 0) {
            i = argument + length;
          } else if (argument > length) {
            i = length;
          } else {
            i = argument;
          }
          for (; --i >= 0;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        gt: createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;
          for (; ++i < length;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        })
      }
    };
    Expr.pseudos.nth = Expr.pseudos.eq;

    // Add button/input type pseudos
    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }
    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    }

    // Easy API for creating new setFilters
    function setFilters() {}
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();
    function tokenize(selector, parseOnly) {
      var matched,
        match,
        tokens,
        type,
        soFar,
        groups,
        preFilters,
        cached = tokenCache[selector + " "];
      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }
      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;
      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }
          groups.push(tokens = []);
        }
        matched = false;

        // Combinators
        if (match = rleadingCombinator.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrimCSS, " ")
          });
          soFar = soFar.slice(matched.length);
        }

        // Filters
        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }
        if (!matched) {
          break;
        }
      }

      // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens
      if (parseOnly) {
        return soFar.length;
      }
      return soFar ? find.error(selector) :
      // Cache the tokens
      tokenCache(selector, groups).slice(0);
    }
    function toSelector(tokens) {
      var i = 0,
        len = tokens.length,
        selector = "";
      for (; i < len; i++) {
        selector += tokens[i].value;
      }
      return selector;
    }
    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
        skip = combinator.next,
        key = skip || dir,
        checkNonElements = base && key === "parentNode",
        doneName = done++;
      return combinator.first ?
      // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }
        return false;
      } :
      // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
          outerCache,
          newCache = [dirruns, doneName];

        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {});
              if (skip && nodeName(elem, skip)) {
                elem = elem[dir] || elem;
              } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                outerCache[key] = newCache;

                // A match means we're done; a fail means we have to keep checking
                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }
        return false;
      };
    }
    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;
        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }
        return true;
      } : matchers[0];
    }
    function multipleContexts(selector, contexts, results) {
      var i = 0,
        len = contexts.length;
      for (; i < len; i++) {
        find(selector, contexts[i], results);
      }
      return results;
    }
    function condense(unmatched, map, filter, context, xml) {
      var elem,
        newUnmatched = [],
        i = 0,
        len = unmatched.length,
        mapped = map != null;
      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);
            if (mapped) {
              map.push(i);
            }
          }
        }
      }
      return newUnmatched;
    }
    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }
      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }
      return markFunction(function (seed, results, context, xml) {
        var temp,
          i,
          elem,
          matcherOut,
          preMap = [],
          postMap = [],
          preexisting = results.length,
          // Get initial elements from seed or context
          elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
          // Prefilter to get matcher input, preserving a map for seed-results synchronization
          matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;
        if (matcher) {
          // If we have a postFinder, or filtered seed, or non-seed postFilter
          // or preexisting results,
          matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ?
          // ...intermediate processing is necessary
          [] :
          // ...otherwise use results directly
          results;

          // Find primary matches
          matcher(matcherIn, matcherOut, context, xml);
        } else {
          matcherOut = matcherIn;
        }

        // Apply postFilter
        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml);

          // Un-match failing elements by moving them back to matcherIn
          i = temp.length;
          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }
        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;
              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }
              postFinder(null, matcherOut = [], temp, xml);
            }

            // Move matched elements from seed to results to keep them synchronized
            i = matcherOut.length;
            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          }

          // Add elements to results, through postFinder if defined
        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }
    function matcherFromTokens(tokens) {
      var checkContext,
        matcher,
        j,
        len = tokens.length,
        leadingRelative = Expr.relative[tokens[0].type],
        implicitRelative = leadingRelative || Expr.relative[" "],
        i = leadingRelative ? 1 : 0,
        // The foundational matcher ensures that elements are reachable from top-level context(s)
        matchContext = addCombinator(function (elem) {
          return elem === checkContext;
        }, implicitRelative, true),
        matchAnyContext = addCombinator(function (elem) {
          return indexOf.call(checkContext, elem) > -1;
        }, implicitRelative, true),
        matchers = [function (elem, context, xml) {
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));

          // Avoid hanging onto element
          // (see https://github.com/jquery/sizzle/issues/299)
          checkContext = null;
          return ret;
        }];
      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

          // Return special upon seeing a positional matcher
          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;
            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }
            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrimCSS, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }
          matchers.push(matcher);
        }
      }
      return elementMatcher(matchers);
    }
    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
        byElement = elementMatchers.length > 0,
        superMatcher = function superMatcher(seed, context, xml, results, outermost) {
          var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
            elems = seed || byElement && Expr.find.TAG("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;
          if (outermost) {
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            outermostContext = context == document || context || outermost;
          }

          // Add elements passing elementMatchers directly to results
          // Support: iOS <=7 - 9 only
          // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
          // elements by id. (see trac-14142)
          for (; i !== len && (elem = elems[i]) != null; i++) {
            if (byElement && elem) {
              j = 0;

              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              if (!context && elem.ownerDocument != document) {
                setDocument(elem);
                xml = !documentIsHTML;
              }
              while (matcher = elementMatchers[j++]) {
                if (matcher(elem, context || document, xml)) {
                  push.call(results, elem);
                  break;
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
              }
            }

            // Track unmatched elements for set filters
            if (bySet) {
              // They will have gone through all possible matchers
              if (elem = !matcher && elem) {
                matchedCount--;
              }

              // Lengthen the array for every element, matched or not
              if (seed) {
                unmatched.push(elem);
              }
            }
          }

          // `i` is now the count of elements visited above, and adding it to `matchedCount`
          // makes the latter nonnegative.
          matchedCount += i;

          // Apply set filters to unmatched elements
          // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
          // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
          // no element matchers and no seed.
          // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
          // case, which will result in a "00" `matchedCount` that differs from `i` but is also
          // numerically zero.
          if (bySet && i !== matchedCount) {
            j = 0;
            while (matcher = setMatchers[j++]) {
              matcher(unmatched, setMatched, context, xml);
            }
            if (seed) {
              // Reintegrate element matches to eliminate the need for sorting
              if (matchedCount > 0) {
                while (i--) {
                  if (!(unmatched[i] || setMatched[i])) {
                    setMatched[i] = pop.call(results);
                  }
                }
              }

              // Discard index placeholder values to get only actual matches
              setMatched = condense(setMatched);
            }

            // Add matches to results
            push.apply(results, setMatched);

            // Seedless set matches succeeding multiple successful matchers stipulate sorting
            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
              _jQuery2.uniqueSort(results);
            }
          }

          // Override manipulation of globals by nested matchers
          if (outermost) {
            dirruns = dirrunsUnique;
            outermostContext = contextBackup;
          }
          return unmatched;
        };
      return bySet ? markFunction(superMatcher) : superMatcher;
    }
    function compile(selector, match /* Internal Use Only */) {
      var i,
        setMatchers = [],
        elementMatchers = [],
        cached = compilerCache[selector + " "];
      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }
        i = match.length;
        while (i--) {
          cached = matcherFromTokens(match[i]);
          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        }

        // Cache the compiled function
        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

        // Save selector and tokenization
        cached.selector = selector;
      }
      return cached;
    }

    /**
     * A low-level selection function that works with jQuery's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with jQuery selector compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */
    function select(selector, context, results, seed) {
      var i,
        tokens,
        token,
        type,
        find,
        compiled = typeof selector === "function" && selector,
        match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || [];

      // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)
      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);
        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];
          if (!context) {
            return results;

            // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }
          selector = selector.slice(tokens.shift().value.length);
        }

        // Fetch a seed set for right-to-left matching
        i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
        while (i--) {
          token = tokens[i];

          // Abort if we hit a combinator
          if (Expr.relative[type = token.type]) {
            break;
          }
          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);
              if (!selector) {
                push.apply(results, seed);
                return results;
              }
              break;
            }
          }
        }
      }

      // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above
      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }

    // One-time assignments

    // Support: Android <=4.0 - 4.1+
    // Sort stability
    support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

    // Initialize against the default document
    setDocument();

    // Support: Android <=4.0 - 4.1+
    // Detached nodes confoundingly follow *each other*
    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    });
    _jQuery2.find = find;

    // Deprecated
    _jQuery2.expr[":"] = _jQuery2.expr.pseudos;
    _jQuery2.unique = _jQuery2.uniqueSort;

    // These have always been private, but they used to be documented as part of
    // Sizzle so let's maintain them for now for backwards compatibility purposes.
    find.compile = compile;
    find.select = select;
    find.setDocument = setDocument;
    find.tokenize = tokenize;
    find.escape = _jQuery2.escapeSelector;
    find.getText = _jQuery2.text;
    find.isXML = _jQuery2.isXMLDoc;
    find.selectors = _jQuery2.expr;
    find.support = _jQuery2.support;
    find.uniqueSort = _jQuery2.uniqueSort;

    /* eslint-enable */
  })();
  var dir = function dir(elem, _dir, until) {
    var matched = [],
      truncate = until !== undefined;
    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && _jQuery2(elem).is(until)) {
          break;
        }
        matched.push(elem);
      }
    }
    return matched;
  };
  var _siblings = function siblings(n, elem) {
    var matched = [];
    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }
    return matched;
  };
  var rneedsContext = _jQuery2.expr.match.needsContext;
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return _jQuery2.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }

    // Single element
    if (qualifier.nodeType) {
      return _jQuery2.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }

    // Arraylike of elements (jQuery, arguments, Array)
    if (typeof qualifier !== "string") {
      return _jQuery2.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    }

    // Filtered directly for both simple and complex selectors
    return _jQuery2.filter(qualifier, elements, not);
  }
  _jQuery2.filter = function (expr, elems, not) {
    var elem = elems[0];
    if (not) {
      expr = ":not(" + expr + ")";
    }
    if (elems.length === 1 && elem.nodeType === 1) {
      return _jQuery2.find.matchesSelector(elem, expr) ? [elem] : [];
    }
    return _jQuery2.find.matches(expr, _jQuery2.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };
  _jQuery2.fn.extend({
    find: function find(selector) {
      var i,
        ret,
        len = this.length,
        self = this;
      if (typeof selector !== "string") {
        return this.pushStack(_jQuery2(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (_jQuery2.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      ret = this.pushStack([]);
      for (i = 0; i < len; i++) {
        _jQuery2.find(selector, self[i], ret);
      }
      return len > 1 ? _jQuery2.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this,
      // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? _jQuery2(selector) : selector || [], false).length;
    }
  });

  // Initialize a jQuery object

  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
    // Strict HTML recognition (trac-11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
    init = _jQuery2.fn.init = function (selector, context, root) {
      var match, elem;

      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }

      // Method init() accepts an alternate rootjQuery
      // so migrate can support jQuery.sub (gh-2101)
      root = root || rootjQuery;

      // Handle HTML strings
      if (typeof selector === "string") {
        if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [null, selector, null];
        } else {
          match = rquickExpr.exec(selector);
        }

        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof _jQuery2 ? context[0] : context;

            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            _jQuery2.merge(this, _jQuery2.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && _jQuery2.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (isFunction(this[match])) {
                  this[match](context[match]);

                  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }
            return this;

            // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);
            if (elem) {
              // Inject the element directly into the jQuery object
              this[0] = elem;
              this.length = 1;
            }
            return this;
          }

          // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || root).find(selector);

          // HANDLE: $(expr, context)
          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }

        // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this[0] = selector;
        this.length = 1;
        return this;

        // HANDLE: $(function)
        // Shortcut for document ready
      } else if (isFunction(selector)) {
        return root.ready !== undefined ? root.ready(selector) :
        // Execute immediately if ready is not present
        selector(_jQuery2);
      }
      return _jQuery2.makeArray(selector, this);
    };

  // Give the init function the jQuery prototype for later instantiation
  init.prototype = _jQuery2.fn;

  // Initialize central reference
  rootjQuery = _jQuery2(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };
  _jQuery2.fn.extend({
    has: function has(target) {
      var targets = _jQuery2(target, this),
        l = targets.length;
      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (_jQuery2.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
        i = 0,
        l = this.length,
        matched = [],
        targets = typeof selectors !== "string" && _jQuery2(selectors);

      // Positional selectors never match, since there's no _selection_ context
      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :
            // Don't pass non-elements to jQuery#find
            cur.nodeType === 1 && _jQuery2.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }
      return this.pushStack(matched.length > 1 ? _jQuery2.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }

      // Index in selector
      if (typeof elem === "string") {
        return indexOf.call(_jQuery2(elem), this[0]);
      }

      // Locate the position of the desired element
      return indexOf.call(this,
      // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(_jQuery2.uniqueSort(_jQuery2.merge(this.get(), _jQuery2(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });
  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
    return cur;
  }
  _jQuery2.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, _i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, _i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, _i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (elem.contentDocument != null &&
      // Support: IE 11+
      // <object> elements with no `data` attribute has an object
      // `contentDocument` with a `null` prototype.
      getProto(elem.contentDocument)) {
        return elem.contentDocument;
      }

      // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.
      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }
      return _jQuery2.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    _jQuery2.fn[name] = function (until, selector) {
      var matched = _jQuery2.map(this, fn, until);
      if (name.slice(-5) !== "Until") {
        selector = until;
      }
      if (selector && typeof selector === "string") {
        matched = _jQuery2.filter(selector, matched);
      }
      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          _jQuery2.uniqueSort(matched);
        }

        // Reverse order for parents* and prev-derivatives
        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }
      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

  // Convert String-formatted options into Object-formatted ones
  function createOptions(options) {
    var object = {};
    _jQuery2.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  _jQuery2.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : _jQuery2.extend({}, options);
    var
      // Flag to know if list is currently firing
      firing,
      // Last fire value for non-forgettable lists
      memory,
      // Flag to know if list was already fired
      _fired,
      // Flag to prevent firing
      _locked,
      // Actual callback list
      list = [],
      // Queue of execution data for repeatable lists
      queue = [],
      // Index of currently firing callback (modified by add/remove as needed)
      firingIndex = -1,
      // Fire callbacks
      fire = function fire() {
        // Enforce single-firing
        _locked = _locked || options.once;

        // Execute callbacks for all pending executions,
        // respecting firingIndex overrides and runtime changes
        _fired = firing = true;
        for (; queue.length; firingIndex = -1) {
          memory = queue.shift();
          while (++firingIndex < list.length) {
            // Run callback and check for early termination
            if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
              // Jump to end and forget the data so .add doesn't re-fire
              firingIndex = list.length;
              memory = false;
            }
          }
        }

        // Forget the data if we're done with it
        if (!options.memory) {
          memory = false;
        }
        firing = false;

        // Clean up if we're done firing for good
        if (_locked) {
          // Keep an empty list if we have data for future add calls
          if (memory) {
            list = [];

            // Otherwise, this object is spent
          } else {
            list = "";
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function add() {
          if (list) {
            // If we have memory from a past run, we should fire after adding
            if (memory && !firing) {
              firingIndex = list.length - 1;
              queue.push(memory);
            }
            (function add(args) {
              _jQuery2.each(args, function (_, arg) {
                if (isFunction(arg)) {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && toType(arg) !== "string") {
                  // Inspect recursively
                  add(arg);
                }
              });
            })(arguments);
            if (memory && !firing) {
              fire();
            }
          }
          return this;
        },
        // Remove a callback from the list
        remove: function remove() {
          _jQuery2.each(arguments, function (_, arg) {
            var index;
            while ((index = _jQuery2.inArray(arg, list, index)) > -1) {
              list.splice(index, 1);

              // Handle firing indexes
              if (index <= firingIndex) {
                firingIndex--;
              }
            }
          });
          return this;
        },
        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function has(fn) {
          return fn ? _jQuery2.inArray(fn, list) > -1 : list.length > 0;
        },
        // Remove all callbacks from the list
        empty: function empty() {
          if (list) {
            list = [];
          }
          return this;
        },
        // Disable .fire and .add
        // Abort any current/pending executions
        // Clear all callbacks and values
        disable: function disable() {
          _locked = queue = [];
          list = memory = "";
          return this;
        },
        disabled: function disabled() {
          return !list;
        },
        // Disable .fire
        // Also disable .add unless we have memory (since it would have no effect)
        // Abort any pending executions
        lock: function lock() {
          _locked = queue = [];
          if (!memory && !firing) {
            list = memory = "";
          }
          return this;
        },
        locked: function locked() {
          return !!_locked;
        },
        // Call all callbacks with the given context and arguments
        fireWith: function fireWith(context, args) {
          if (!_locked) {
            args = args || [];
            args = [context, args.slice ? args.slice() : args];
            queue.push(args);
            if (!firing) {
              fire();
            }
          }
          return this;
        },
        // Call all the callbacks with the given arguments
        fire: function fire() {
          self.fireWith(this, arguments);
          return this;
        },
        // To know if the callbacks have already been called at least once
        fired: function fired() {
          return !!_fired;
        }
      };
    return self;
  };
  function Identity(v) {
    return v;
  }
  function Thrower(ex) {
    throw ex;
  }
  function adoptValue(value, resolve, reject, noValue) {
    var method;
    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject);

        // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject);

        // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      }

      // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.
    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }
  _jQuery2.extend({
    Deferred: function Deferred(func) {
      var tuples = [
        // action, add listener, callbacks,
        // ... .then handlers, argument index, [final state]
        ["notify", "progress", _jQuery2.Callbacks("memory"), _jQuery2.Callbacks("memory"), 2], ["resolve", "done", _jQuery2.Callbacks("once memory"), _jQuery2.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", _jQuery2.Callbacks("once memory"), _jQuery2.Callbacks("once memory"), 1, "rejected"]],
        _state = "pending",
        _promise = {
          state: function state() {
            return _state;
          },
          always: function always() {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          "catch": function _catch(fn) {
            return _promise.then(null, fn);
          },
          // Keep pipe for back-compat
          pipe: function pipe(/* fnDone, fnFail, fnProgress */
          ) {
            var fns = arguments;
            return _jQuery2.Deferred(function (newDefer) {
              _jQuery2.each(tuples, function (_i, tuple) {
                // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                // deferred.progress(function() { bind to newDefer or newDefer.notify })
                // deferred.done(function() { bind to newDefer or newDefer.resolve })
                // deferred.fail(function() { bind to newDefer or newDefer.reject })
                deferred[tuple[1]](function () {
                  var returned = fn && fn.apply(this, arguments);
                  if (returned && isFunction(returned.promise)) {
                    returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                  } else {
                    newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                  }
                });
              });
              fns = null;
            }).promise();
          },
          then: function then(onFulfilled, onRejected, onProgress) {
            var maxDepth = 0;
            function resolve(depth, deferred, handler, special) {
              return function () {
                var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                    var returned, then;

                    // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts
                    if (depth < maxDepth) {
                      return;
                    }
                    returned = handler.apply(that, args);

                    // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48
                    if (returned === deferred.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }

                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once
                    then = returned && (
                    // Support: Promises/A+ section 2.3.4
                    // https://promisesaplus.com/#point-64
                    // Only check objects and functions for thenability
                    _typeof(returned) === "object" || typeof returned === "function") && returned.then;

                    // Handle a returned thenable
                    if (isFunction(then)) {
                      // Special processors (notify) just wait for resolution
                      if (special) {
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

                        // Normal processors (resolve) also hook into progress
                      } else {
                        // ...and disregard older resolution values
                        maxDepth++;
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                      }

                      // Handle all other returned values
                    } else {
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if (handler !== Identity) {
                        that = undefined;
                        args = [returned];
                      }

                      // Process the value(s)
                      // Default process is resolve
                      (special || deferred.resolveWith)(that, args);
                    }
                  },
                  // Only normal processors (resolve) catch and reject exceptions
                  process = special ? mightThrow : function () {
                    try {
                      mightThrow();
                    } catch (e) {
                      if (_jQuery2.Deferred.exceptionHook) {
                        _jQuery2.Deferred.exceptionHook(e, process.error);
                      }

                      // Support: Promises/A+ section 2.3.3.3.4.1
                      // https://promisesaplus.com/#point-61
                      // Ignore post-resolution exceptions
                      if (depth + 1 >= maxDepth) {
                        // Only substitute handlers pass on context
                        // and multiple values (non-spec behavior)
                        if (handler !== Thrower) {
                          that = undefined;
                          args = [e];
                        }
                        deferred.rejectWith(that, args);
                      }
                    }
                  };

                // Support: Promises/A+ section 2.3.3.3.1
                // https://promisesaplus.com/#point-57
                // Re-resolve promises immediately to dodge false rejection from
                // subsequent errors
                if (depth) {
                  process();
                } else {
                  // Call an optional hook to record the error, in case of exception
                  // since it's otherwise lost when execution goes async
                  if (_jQuery2.Deferred.getErrorHook) {
                    process.error = _jQuery2.Deferred.getErrorHook();

                    // The deprecated alias of the above. While the name suggests
                    // returning the stack, not an error instance, jQuery just passes
                    // it directly to `console.warn` so both will work; an instance
                    // just better cooperates with source maps.
                  } else if (_jQuery2.Deferred.getStackHook) {
                    process.error = _jQuery2.Deferred.getStackHook();
                  }
                  window.setTimeout(process);
                }
              };
            }
            return _jQuery2.Deferred(function (newDefer) {
              // progress_handlers.add( ... )
              tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

              // fulfilled_handlers.add( ... )
              tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));

              // rejected_handlers.add( ... )
              tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
            }).promise();
          },
          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function promise(obj) {
            return obj != null ? _jQuery2.extend(obj, _promise) : _promise;
          }
        },
        deferred = {};

      // Add list-specific methods
      _jQuery2.each(tuples, function (i, tuple) {
        var list = tuple[2],
          stateString = tuple[5];

        // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add
        _promise[tuple[1]] = list.add;

        // Handle state
        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          },
          // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable,
          // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable,
          // progress_callbacks.lock
          tuples[0][2].lock,
          // progress_handlers.lock
          tuples[0][3].lock);
        }

        // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire
        list.add(tuple[3].fire);

        // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        };

        // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith
        deferred[tuple[0] + "With"] = list.fireWith;
      });

      // Make the deferred a promise
      _promise.promise(deferred);

      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }

      // All done!
      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var
        // count of uncompleted subordinates
        remaining = arguments.length,
        // count of unprocessed arguments
        i = remaining,
        // subordinate fulfillment data
        resolveContexts = Array(i),
        resolveValues = _slice.call(arguments),
        // the primary Deferred
        primary = _jQuery2.Deferred(),
        // subordinate callback factory
        updateFunc = function updateFunc(i) {
          return function (value) {
            resolveContexts[i] = this;
            resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
            if (! --remaining) {
              primary.resolveWith(resolveContexts, resolveValues);
            }
          };
        };

      // Single- and empty arguments are adopted like Promise.resolve
      if (remaining <= 1) {
        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);

        // Use .then() to unwrap secondary thenables (cf. gh-3000)
        if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return primary.then();
        }
      }

      // Multiple arguments are aggregated like Promise.all array elements
      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), primary.reject);
      }
      return primary.promise();
    }
  });

  // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.
  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
  // captured before the async barrier to get the original error cause
  // which may otherwise be hidden.
  _jQuery2.Deferred.exceptionHook = function (error, asyncError) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, asyncError);
    }
  };
  _jQuery2.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  };

  // The deferred used on DOM ready
  var readyList = _jQuery2.Deferred();
  _jQuery2.fn.ready = function (fn) {
    readyList.then(fn)

    // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    ["catch"](function (error) {
      _jQuery2.readyException(error);
    });
    return this;
  };
  _jQuery2.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See trac-6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --_jQuery2.readyWait : _jQuery2.isReady) {
        return;
      }

      // Remember that the DOM is ready
      _jQuery2.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --_jQuery2.readyWait > 0) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith(document, [_jQuery2]);
    }
  });
  _jQuery2.ready.then = readyList.then;

  // The ready event handler and self cleanup method
  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    _jQuery2.ready();
  }

  // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon
  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(_jQuery2.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed);

    // A fallback to window.onload, that will always work
    window.addEventListener("load", completed);
  }

  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var _access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
      len = elems.length,
      bulk = key == null;

    // Sets many values
    if (toType(key) === "object") {
      chainable = true;
      for (i in key) {
        _access(elems, fn, i, key[i], true, emptyGet, raw);
      }

      // Sets one value
    } else if (value !== undefined) {
      chainable = true;
      if (!isFunction(value)) {
        raw = true;
      }
      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null;

          // ...except when executing function values
        } else {
          bulk = fn;
          fn = function fn(elem, _key, value) {
            return bulk.call(_jQuery2(elem), value);
          };
        }
      }
      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }
    if (chainable) {
      return elems;
    }

    // Gets
    if (bulk) {
      return fn.call(elems);
    }
    return len ? fn(elems[0], key) : emptyGet;
  };

  // Matches dashed string for camelizing
  var rmsPrefix = /^-ms-/,
    rdashAlpha = /-([a-z])/g;

  // Used by camelCase as callback to replace()
  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  }

  // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (trac-9572)
  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }
  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };
  function Data() {
    this.expando = _jQuery2.expando + Data.uid++;
  }
  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando];

      // If not, create one
      if (!value) {
        value = {};

        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see trac-8335.
        // Always return an empty object.
        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value;

            // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }
      return value;
    },
    set: function set(owner, data, value) {
      var prop,
        cache = this.cache(owner);

      // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)
      if (typeof data === "string") {
        cache[camelCase(data)] = value;

        // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }
      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) :
      // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      }

      // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
        cache = owner[this.expando];
      if (cache === undefined) {
        return;
      }
      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key);

          // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace
          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }
        i = key.length;
        while (i--) {
          delete cache[key[i]];
        }
      }

      // Remove the expando if there's no more data
      if (key === undefined || _jQuery2.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !_jQuery2.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data();

  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /[A-Z]/g;
  function getData(data) {
    if (data === "true") {
      return true;
    }
    if (data === "false") {
      return false;
    }
    if (data === "null") {
      return null;
    }

    // Only convert to a number if it doesn't change the string
    if (data === +data + "") {
      return +data;
    }
    if (rbrace.test(data)) {
      return JSON.parse(data);
    }
    return data;
  }
  function dataAttr(elem, key, data) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);
      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {}

        // Make sure we set the data so it isn't changed later
        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }
  _jQuery2.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  _jQuery2.fn.extend({
    data: function data(key, value) {
      var i,
        name,
        data,
        elem = this[0],
        attrs = elem && elem.attributes;

      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);
          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;
            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (trac-14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }
        return data;
      }

      // Sets multiple values
      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }
      return _access(this, function (value) {
        var data;

        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);
          if (data !== undefined) {
            return data;
          }

          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr(elem, key);
          if (data !== undefined) {
            return data;
          }

          // We tried really hard, but the data doesn't exist.
          return;
        }

        // Set the data...
        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  _jQuery2.extend({
    queue: function queue(elem, type, data) {
      var queue;
      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type);

        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, _jQuery2.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";
      var queue = _jQuery2.queue(elem, type),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = _jQuery2._queueHooks(elem, type),
        next = function next() {
          _jQuery2.dequeue(elem, type);
        };

      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }
      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        }

        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }
      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: _jQuery2.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  _jQuery2.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;
      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }
      if (arguments.length < setter) {
        return _jQuery2.queue(this[0], type);
      }
      return data === undefined ? this : this.each(function () {
        var queue = _jQuery2.queue(this, type, data);

        // Ensure a hooks for this queue
        _jQuery2._queueHooks(this, type);
        if (type === "fx" && queue[0] !== "inprogress") {
          _jQuery2.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        _jQuery2.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
        count = 1,
        defer = _jQuery2.Deferred(),
        elements = this,
        i = this.length,
        resolve = function resolve() {
          if (! --count) {
            defer.resolveWith(elements, [elements]);
          }
        };
      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }
      type = type || "fx";
      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  var documentElement = document.documentElement;
  var isAttached = function isAttached(elem) {
      return _jQuery2.contains(elem.ownerDocument, elem);
    },
    composed = {
      composed: true
    };

  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.
  if (documentElement.getRootNode) {
    isAttached = function isAttached(elem) {
      return _jQuery2.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
  }
  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;

    // Inline style trumps all
    return elem.style.display === "none" || elem.style.display === "" &&
    // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    isAttached(elem) && _jQuery2.css(elem, "display") === "none";
  };
  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
      scale,
      maxIterations = 20,
      currentValue = tween ? function () {
        return tween.cur();
      } : function () {
        return _jQuery2.css(elem, prop, "");
      },
      initial = currentValue(),
      unit = valueParts && valueParts[3] || (_jQuery2.cssNumber[prop] ? "" : "px"),
      // Starting value computation is required for potential unit mismatches
      initialInUnit = elem.nodeType && (_jQuery2.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(_jQuery2.css(elem, prop));
    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2;

      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[3];

      // Iteratively approximate from a nonzero starting point
      initialInUnit = +initial || 1;
      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        _jQuery2.style(elem, prop, initialInUnit + unit);
        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }
        initialInUnit = initialInUnit / scale;
      }
      initialInUnit = initialInUnit * 2;
      _jQuery2.style(elem, prop, initialInUnit + unit);

      // Make sure we update the tween properties later on
      valueParts = valueParts || [];
    }
    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0;

      // Apply relative offset (+=/-=) if specified
      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }
    return adjusted;
  }
  var defaultDisplayMap = {};
  function getDefaultDisplay(elem) {
    var temp,
      doc = elem.ownerDocument,
      nodeName = elem.nodeName,
      display = defaultDisplayMap[nodeName];
    if (display) {
      return display;
    }
    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = _jQuery2.css(temp, "display");
    temp.parentNode.removeChild(temp);
    if (display === "none") {
      display = "block";
    }
    defaultDisplayMap[nodeName] = display;
    return display;
  }
  function showHide(elements, show) {
    var display,
      elem,
      values = [],
      index = 0,
      length = elements.length;

    // Determine new display value for elements that need to change
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      display = elem.style.display;
      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;
          if (!values[index]) {
            elem.style.display = "";
          }
        }
        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none";

          // Remember what we're overwriting
          dataPriv.set(elem, "display", display);
        }
      }
    }

    // Set the display of the elements in a second loop to avoid constant reflow
    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }
    return elements;
  }
  _jQuery2.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }
      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          _jQuery2(this).show();
        } else {
          _jQuery2(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
  (function () {
    var fragment = document.createDocumentFragment(),
      div = fragment.appendChild(document.createElement("div")),
      input = document.createElement("input");

    // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (trac-11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (trac-14901)
    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input);

    // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

    // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

    // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.
    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  })();

  // We have to close these tags to support XHTML (trac-13200)
  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  // Support: IE <=9 only
  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
  }
  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
    var ret;
    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }
    if (tag === undefined || tag && nodeName(context, tag)) {
      return _jQuery2.merge([context], ret);
    }
    return ret;
  }

  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0,
      l = elems.length;
    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }
  var rhtml = /<|&#?\w+;/;
  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
      tmp,
      tag,
      wrap,
      attached,
      j,
      fragment = context.createDocumentFragment(),
      nodes = [],
      i = 0,
      l = elems.length;
    for (; i < l; i++) {
      elem = elems[i];
      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          _jQuery2.merge(nodes, elem.nodeType ? [elem] : elem);

          // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem));

          // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div"));

          // Deserialize a standard representation
          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + _jQuery2.htmlPrefilter(elem) + wrap[2];

          // Descend through wrappers to the right content
          j = wrap[0];
          while (j--) {
            tmp = tmp.lastChild;
          }

          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          _jQuery2.merge(nodes, tmp.childNodes);

          // Remember the top-level container
          tmp = fragment.firstChild;

          // Ensure the created nodes are orphaned (trac-12392)
          tmp.textContent = "";
        }
      }
    }

    // Remove wrapper from fragment
    fragment.textContent = "";
    i = 0;
    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && _jQuery2.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }
        continue;
      }
      attached = isAttached(elem);

      // Append to fragment
      tmp = getAll(fragment.appendChild(elem), "script");

      // Preserve script evaluation history
      if (attached) {
        setGlobalEval(tmp);
      }

      // Capture executables
      if (scripts) {
        j = 0;
        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }
    return fragment;
  }
  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }
  function _on(elem, types, selector, data, fn, one) {
    var origFn, type;

    // Types can be a map of types/handlers
    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }
      return elem;
    }
    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }
    if (one === 1) {
      origFn = fn;
      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        _jQuery2().off(event);
        return origFn.apply(this, arguments);
      };

      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || (origFn.guid = _jQuery2.guid++);
    }
    return elem.each(function () {
      _jQuery2.event.add(this, types, fn, data, selector);
    });
  }

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  _jQuery2.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
        eventHandle,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.get(elem);

      // Only attach events to objects that accept data
      if (!acceptData(elem)) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)
      if (selector) {
        _jQuery2.find.matchesSelector(documentElement, selector);
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = _jQuery2.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof _jQuery2 !== "undefined" && _jQuery2.event.triggered !== e.type ? _jQuery2.event.dispatch.apply(elem, arguments) : undefined;
        };
      }

      // Handle multiple events separated by a space
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }

        // If event changes its type, use the special event handlers for the changed type
        special = _jQuery2.event.special[type] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;

        // Update special based on newly reset type
        special = _jQuery2.event.special[type] || {};

        // handleObj is passed to all event handlers
        handleObj = _jQuery2.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && _jQuery2.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn);

        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }
        if (special.add) {
          special.add.call(elem, handleObj);
          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }

        // Keep track of which events have ever been used, for event optimization
        _jQuery2.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
        origCount,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
      if (!elemData || !(events = elemData.events)) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            _jQuery2.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }
        special = _jQuery2.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];
          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);
            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            _jQuery2.removeEvent(elem, type, elemData.handle);
          }
          delete events[type];
        }
      }

      // Remove data and the expando if it's no longer used
      if (_jQuery2.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      var i,
        j,
        ret,
        matched,
        handleObj,
        handlerQueue,
        args = new Array(arguments.length),
        // Make a writable jQuery.Event from the native event object
        event = _jQuery2.event.fix(nativeEvent),
        handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
        special = _jQuery2.event.special[event.type] || {};

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }

      // Determine handlers
      handlerQueue = _jQuery2.event.handlers.call(this, event, handlers);

      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((_jQuery2.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }
      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
        handleObj,
        sel,
        matchedHandlers,
        matchedSelectors,
        handlerQueue = [],
        delegateCount = _handlers.delegateCount,
        cur = event.target;

      // Find delegate handlers
      if (delegateCount &&
      // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType &&
      // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (trac-13208)
          // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};
            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i];

              // Don't conflict with Object.prototype properties (trac-13203)
              sel = handleObj.selector + " ";
              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? _jQuery2(sel, this).index(cur) > -1 : _jQuery2.find(sel, this, null, [cur]).length;
              }
              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }
            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      cur = this;
      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }
      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(_jQuery2.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[_jQuery2.expando] ? originalEvent : new _jQuery2.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function setup(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Claim the first handler
          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", true);
          }

          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function trigger(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Force setup before triggering a click
          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            leverageNative(el, "click");
          }

          // Return non-false to allow normal event-path propagation
          return true;
        },
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function _default(event) {
          var target = event.target;
          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  };

  // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.
  function leverageNative(el, type, isSetup) {
    // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
    if (!isSetup) {
      if (dataPriv.get(el, type) === undefined) {
        _jQuery2.event.add(el, type, returnTrue);
      }
      return;
    }

    // Register the controller as a special universal handler for all event namespaces
    dataPriv.set(el, type, false);
    _jQuery2.event.add(el, type, {
      namespace: false,
      handler: function handler(event) {
        var result,
          saved = dataPriv.get(this, type);
        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          if (!saved) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = _slice.call(arguments);
            dataPriv.set(this, type, saved);

            // Trigger the native event and capture its result
            this[type]();
            result = dataPriv.get(this, type);
            dataPriv.set(this, type, false);
            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();
              return result;
            }

            // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering
            // the native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.
          } else if ((_jQuery2.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          }

          // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments
        } else if (saved) {
          // ...and capture the result
          dataPriv.set(this, type, _jQuery2.event.trigger(saved[0], saved.slice(1), this));

          // Abort handling of the native event by all jQuery handlers while allowing
          // native handlers on the same element to run. On target, this is achieved
          // by stopping immediate propagation just on the jQuery event. However,
          // the native event is re-wrapped by a jQuery one on each level of the
          // propagation so the only way to stop it for jQuery is to stop it for
          // everyone via native `stopPropagation()`. This is not a problem for
          // focus/blur which don't bubble, but it does also stop click on checkboxes
          // and radios. We accept this limitation.
          event.stopPropagation();
          event.isImmediatePropagationStopped = returnTrue;
        }
      }
    });
  }
  _jQuery2.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };
  _jQuery2.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof _jQuery2.Event)) {
      return new _jQuery2.Event(src, props);
    }

    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
      // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse;

      // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (trac-504, trac-13143)
      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget;

      // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if (props) {
      _jQuery2.extend(this, props);
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || Date.now();

    // Mark it as fixed
    this[_jQuery2.expando] = true;
  };

  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  _jQuery2.Event.prototype = {
    constructor: _jQuery2.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;
      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;
      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;
      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }
      this.stopPropagation();
    }
  };

  // Includes all common event props including KeyEvent and MouseEvent specific props
  _jQuery2.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: true
  }, _jQuery2.event.addProp);
  _jQuery2.each({
    focus: "focusin",
    blur: "focusout"
  }, function (type, delegateType) {
    function focusMappedHandler(nativeEvent) {
      if (document.documentMode) {
        // Support: IE 11+
        // Attach a single focusin/focusout handler on the document while someone wants
        // focus/blur. This is because the former are synchronous in IE while the latter
        // are async. In other browsers, all those handlers are invoked synchronously.

        // `handle` from private data would already wrap the event, but we need
        // to change the `type` here.
        var handle = dataPriv.get(this, "handle"),
          event = _jQuery2.event.fix(nativeEvent);
        event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
        event.isSimulated = true;

        // First, handle focusin/focusout
        handle(nativeEvent);

        // ...then, handle focus/blur
        //
        // focus/blur don't bubble while focusin/focusout do; simulate the former by only
        // invoking the handler at the lower level.
        if (event.target === event.currentTarget) {
          // The setup part calls `leverageNative`, which, in turn, calls
          // `jQuery.event.add`, so event handle will already have been set
          // by this point.
          handle(event);
        }
      } else {
        // For non-IE browsers, attach a single capturing handler on the document
        // while someone wants focusin/focusout.
        _jQuery2.event.simulate(delegateType, nativeEvent.target, _jQuery2.event.fix(nativeEvent));
      }
    }
    _jQuery2.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function setup() {
        var attaches;

        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, true);
        if (document.documentMode) {
          // Support: IE 9 - 11+
          // We use the same native handler for focusin & focus (and focusout & blur)
          // so we need to coordinate setup & teardown parts between those events.
          // Use `delegateType` as the key as `type` is already used by `leverageNative`.
          attaches = dataPriv.get(this, delegateType);
          if (!attaches) {
            this.addEventListener(delegateType, focusMappedHandler);
          }
          dataPriv.set(this, delegateType, (attaches || 0) + 1);
        } else {
          // Return false to allow normal processing in the caller
          return false;
        }
      },
      trigger: function trigger() {
        // Force setup before trigger
        leverageNative(this, type);

        // Return non-false to allow normal event-path propagation
        return true;
      },
      teardown: function teardown() {
        var attaches;
        if (document.documentMode) {
          attaches = dataPriv.get(this, delegateType) - 1;
          if (!attaches) {
            this.removeEventListener(delegateType, focusMappedHandler);
            dataPriv.remove(this, delegateType);
          } else {
            dataPriv.set(this, delegateType, attaches);
          }
        } else {
          // Return false to indicate standard teardown should be applied
          return false;
        }
      },
      // Suppress native focus or blur if we're currently inside
      // a leveraged native-event stack
      _default: function _default(event) {
        return dataPriv.get(event.target, type);
      },
      delegateType: delegateType
    };

    // Support: Firefox <=44
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    //
    // Support: IE 9 - 11+
    // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
    // attach a single handler for both events in IE.
    _jQuery2.event.special[delegateType] = {
      setup: function setup() {
        // Handle: regular nodes (via `this.ownerDocument`), window
        // (via `this.document`) & document (via `this`).
        var doc = this.ownerDocument || this.document || this,
          dataHolder = document.documentMode ? this : doc,
          attaches = dataPriv.get(dataHolder, delegateType);

        // Support: IE 9 - 11+
        // We use the same native handler for focusin & focus (and focusout & blur)
        // so we need to coordinate setup & teardown parts between those events.
        // Use `delegateType` as the key as `type` is already used by `leverageNative`.
        if (!attaches) {
          if (document.documentMode) {
            this.addEventListener(delegateType, focusMappedHandler);
          } else {
            doc.addEventListener(type, focusMappedHandler, true);
          }
        }
        dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
      },
      teardown: function teardown() {
        var doc = this.ownerDocument || this.document || this,
          dataHolder = document.documentMode ? this : doc,
          attaches = dataPriv.get(dataHolder, delegateType) - 1;
        if (!attaches) {
          if (document.documentMode) {
            this.removeEventListener(delegateType, focusMappedHandler);
          } else {
            doc.removeEventListener(type, focusMappedHandler, true);
          }
          dataPriv.remove(dataHolder, delegateType);
        } else {
          dataPriv.set(dataHolder, delegateType, attaches);
        }
      }
    };
  });

  // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).
  _jQuery2.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    _jQuery2.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
          target = this,
          related = event.relatedTarget,
          handleObj = event.handleObj;

        // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if (!related || related !== target && !_jQuery2.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }
        return ret;
      }
    };
  });
  _jQuery2.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        _jQuery2(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        _jQuery2.event.remove(this, types, fn, selector);
      });
    }
  });
  var
    // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

  // Prefer a tbody over its parent table for containing new rows
  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return _jQuery2(elem).children("tbody")[0] || elem;
    }
    return elem;
  }

  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }
    return elem;
  }
  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;
    if (dest.nodeType !== 1) {
      return;
    }

    // 1. Copy private data: events, handlers, etc.
    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;
      if (events) {
        dataPriv.remove(dest, "handle events");
        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            _jQuery2.event.add(dest, type, events[type][i]);
          }
        }
      }
    }

    // 2. Copy user data
    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = _jQuery2.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  }

  // Fix IE bugs, see support tests
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked;

      // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }
  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);
    var fragment,
      first,
      scripts,
      hasScripts,
      node,
      doc,
      i = 0,
      l = collection.length,
      iNoClone = l - 1,
      value = args[0],
      valueIsFunction = isFunction(value);

    // We can't cloneNode fragments that contain checked, in WebKit
    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);
        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }
        domManip(self, args, callback, ignored);
      });
    }
    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;
      if (fragment.childNodes.length === 1) {
        fragment = first;
      }

      // Require either new content or an interest in ignored elements to invoke the callback
      if (first || ignored) {
        scripts = _jQuery2.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length;

        // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (trac-8070).
        for (; i < l; i++) {
          node = fragment;
          if (i !== iNoClone) {
            node = _jQuery2.clone(node, true, true);

            // Keep references to cloned scripts for later restoration
            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              _jQuery2.merge(scripts, getAll(node, "script"));
            }
          }
          callback.call(collection[i], node, i);
        }
        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument;

          // Re-enable scripts
          _jQuery2.map(scripts, restoreScript);

          // Evaluate executable scripts on first document insertion
          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];
            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && _jQuery2.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (_jQuery2._evalUrl && !node.noModule) {
                  _jQuery2._evalUrl(node.src, {
                    nonce: node.nonce || node.getAttribute("nonce")
                  }, doc);
                }
              } else {
                // Unwrap a CDATA section containing script contents. This shouldn't be
                // needed as in XML documents they're already not visible when
                // inspecting element contents and in HTML documents they have no
                // meaning but we're preserving that logic for backwards compatibility.
                // This will be removed completely in 4.0. See gh-4904.
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }
    return collection;
  }
  function _remove(elem, selector, keepData) {
    var node,
      nodes = selector ? _jQuery2.filter(selector, elem) : elem,
      i = 0;
    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        _jQuery2.cleanData(getAll(node));
      }
      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }
        node.parentNode.removeChild(node);
      }
    }
    return elem;
  }
  _jQuery2.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html;
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
        l,
        srcElements,
        destElements,
        clone = elem.cloneNode(true),
        inPage = isAttached(elem);

      // Fix IE cloning issues
      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !_jQuery2.isXMLDoc(elem)) {
        // We eschew jQuery#find here for performance reasons:
        // https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);
        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }

      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }

      // Preserve script evaluation history
      destElements = getAll(clone, "script");
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      }

      // Return the cloned set
      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
        elem,
        type,
        special = _jQuery2.event.special,
        i = 0;
      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  _jQuery2.event.remove(elem, type);

                  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  _jQuery2.removeEvent(elem, type, data.handle);
                }
              }
            }

            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataPriv.expando] = undefined;
          }
          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  _jQuery2.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return _access(this, function (value) {
        return value === undefined ? _jQuery2.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
        i = 0;
      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          _jQuery2.cleanData(getAll(elem, false));

          // Remove any remaining nodes
          elem.textContent = "";
        }
      }
      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return _jQuery2.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return _access(this, function (value) {
        var elem = this[0] || {},
          i = 0,
          l = this.length;
        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        }

        // See if we can take a shortcut and just use innerHTML
        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = _jQuery2.htmlPrefilter(value);
          try {
            for (; i < l; i++) {
              elem = this[i] || {};

              // Remove element nodes and prevent memory leaks
              if (elem.nodeType === 1) {
                _jQuery2.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }
            elem = 0;

            // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = [];

      // Make the changes, replacing each non-ignored context element with the new content
      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;
        if (_jQuery2.inArray(this, ignored) < 0) {
          _jQuery2.cleanData(getAll(this));
          if (parent) {
            parent.replaceChild(elem, this);
          }
        }

        // Force callback invocation
      }, ignored);
    }
  });
  _jQuery2.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    _jQuery2.fn[name] = function (selector) {
      var elems,
        ret = [],
        insert = _jQuery2(selector),
        last = insert.length - 1,
        i = 0;
      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        _jQuery2(insert[i])[original](elems);

        // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit
        push.apply(ret, elems.get());
      }
      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
  var rcustomProp = /^--/;
  var getStyles = function getStyles(elem) {
    // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;
    if (!view || !view.opener) {
      view = window;
    }
    return view.getComputedStyle(elem);
  };
  var swap = function swap(elem, options, callback) {
    var ret,
      name,
      old = {};

    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }
    ret = callback.call(elem);

    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }
    return ret;
  };
  var rboxStyle = new RegExp(cssExpand.join("|"), "i");
  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }
      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%";

      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't
      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

      // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements
      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

      // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)
      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
      documentElement.removeChild(container);

      // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed
      div = null;
    }
    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }
    var pixelPositionVal,
      boxSizingReliableVal,
      scrollboxSizeVal,
      pixelBoxStylesVal,
      reliableTrDimensionsVal,
      reliableMarginLeftVal,
      container = document.createElement("div"),
      div = document.createElement("div");

    // Finish early in limited (non-browser) environments
    if (!div.style) {
      return;
    }

    // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (trac-8908)
    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    _jQuery2.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      },
      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      //
      // Support: Firefox 70+
      // Only Firefox includes border widths
      // in computed dimensions. (gh-4529)
      reliableTrDimensions: function reliableTrDimensions() {
        var table, tr, trChild, trStyle;
        if (reliableTrDimensionsVal == null) {
          table = document.createElement("table");
          tr = document.createElement("tr");
          trChild = document.createElement("div");
          table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
          tr.style.cssText = "box-sizing:content-box;border:1px solid";

          // Support: Chrome 86+
          // Height set through cssText does not get applied.
          // Computed height then comes back as 0.
          tr.style.height = "1px";
          trChild.style.height = "9px";

          // Support: Android 8 Chrome 86+
          // In our bodyBackground.html iframe,
          // display for all div elements is set to "inline",
          // which causes a problem only in Android 8 Chrome 86.
          // Ensuring the div is `display: block`
          // gets around this issue.
          trChild.style.display = "block";
          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
          documentElement.removeChild(table);
        }
        return reliableTrDimensionsVal;
      }
    });
  })();
  function curCSS(elem, name, computed) {
    var width,
      minWidth,
      maxWidth,
      ret,
      isCustomProp = rcustomProp.test(name),
      // Support: Firefox 51+
      // Retrieving style before computed somehow
      // fixes an issue with getting wrong values
      // on detached elements
      style = elem.style;
    computed = computed || getStyles(elem);

    // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, trac-12537)
    //   .css('--customProperty) (gh-3144)
    if (computed) {
      // Support: IE <=9 - 11+
      // IE only supports `"float"` in `getPropertyValue`; in computed styles
      // it's only available as `"cssFloat"`. We no longer modify properties
      // sent to `.css()` apart from camelCasing, so we need to check both.
      // Normally, this would create difference in behavior: if
      // `getPropertyValue` returns an empty string, the value returned
      // by `.css()` would be `undefined`. This is usually the case for
      // disconnected elements. However, in IE even disconnected elements
      // with no styles return `"none"` for `getPropertyValue( "float" )`
      ret = computed.getPropertyValue(name) || computed[name];
      if (isCustomProp && ret) {
        // Support: Firefox 105+, Chrome <=105+
        // Spec requires trimming whitespace for custom properties (gh-4926).
        // Firefox only trims leading whitespace. Chrome just collapses
        // both leading & trailing whitespace to a single space.
        //
        // Fall back to `undefined` if empty string returned.
        // This collapses a missing definition with property defined
        // and set to an empty string but there's no standard API
        // allowing us to differentiate them without a performance penalty
        // and returning `undefined` aligns with older jQuery.
        //
        // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
        // as whitespace while CSS does not, but this is not a problem
        // because CSS preprocessing replaces them with U+000A LINE FEED
        // (which *is* CSS whitespace)
        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
        ret = ret.replace(rtrimCSS, "$1") || undefined;
      }
      if (ret === "" && !isAttached(elem)) {
        ret = _jQuery2.style(elem, name);
      }

      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values
      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }
    return ret !== undefined ?
    // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }
  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }

        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }
  var cssPrefixes = ["Webkit", "Moz", "ms"],
    emptyStyle = document.createElement("div").style,
    vendorProps = {};

  // Return a vendor-prefixed property or undefined
  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
      i = cssPrefixes.length;
    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  }

  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
  function finalPropName(name) {
    var _final = _jQuery2.cssProps[name] || vendorProps[name];
    if (_final) {
      return _final;
    }
    if (name in emptyStyle) {
      return name;
    }
    return vendorProps[name] = vendorPropName(name) || name;
  }
  var
    // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    cssShow = {
      position: "absolute",
      visibility: "hidden",
      display: "block"
    },
    cssNormalTransform = {
      letterSpacing: "0",
      fontWeight: "400"
    };
  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ?
    // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }
  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
      extra = 0,
      delta = 0,
      marginDelta = 0;

    // Adjustment may not be necessary
    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }
    for (; i < 4; i += 2) {
      // Both box models exclude margin
      // Count margin delta separately to only add it after scroll gutter adjustment.
      // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
      if (box === "margin") {
        marginDelta += _jQuery2.css(elem, box + cssExpand[i], true, styles);
      }

      // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
      if (!isBorderBox) {
        // Add padding
        delta += _jQuery2.css(elem, "padding" + cssExpand[i], true, styles);

        // For "border" or "margin", add border
        if (box !== "padding") {
          delta += _jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);

          // But still keep track of it otherwise
        } else {
          extra += _jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }

        // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"
      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= _jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
        }

        // For "content" or "padding", subtract border
        if (box !== "margin") {
          delta -= _jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    }

    // Account for positive content-box scroll gutter when requested by providing computedVal
    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5

      // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      )) || 0;
    }
    return delta + marginDelta;
  }
  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
      // Fake content-box until we know it's needed to know the true value.
      boxSizingNeeded = !support.boxSizingReliable() || extra,
      isBorderBox = boxSizingNeeded && _jQuery2.css(elem, "boxSizing", false, styles) === "border-box",
      valueIsBorderBox = isBorderBox,
      val = curCSS(elem, dimension, styles),
      offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);

    // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.
    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }
      val = "auto";
    }

    // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.
    if ((!support.boxSizingReliable() && isBorderBox ||
    // Support: IE 10 - 11+, Edge 15 - 18+
    // IE/Edge misreport `getComputedStyle` of table rows with width/height
    // set in CSS while `offset*` properties report correct values.
    // Interestingly, in some cases IE 9 doesn't suffer from this issue.
    !support.reliableTrDimensions() && nodeName(elem, "tr") ||
    // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    val === "auto" ||
    // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    !parseFloat(val) && _jQuery2.css(elem, "display", false, styles) === "inline") &&
    // Make sure the element is visible & connected
    elem.getClientRects().length) {
      isBorderBox = _jQuery2.css(elem, "boxSizing", false, styles) === "border-box";

      // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.
      valueIsBorderBox = offsetProp in elem;
      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    }

    // Normalize "" and auto
    val = parseFloat(val) || 0;

    // Adjust for the element's box model
    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles,
    // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }
  _jQuery2.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageSlice: true,
      columnCount: true,
      flexGrow: true,
      flexShrink: true,
      fontWeight: true,
      gridArea: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnStart: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowStart: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      scale: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeMiterlimit: true,
      strokeOpacity: true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }

      // Make sure that we're working with the right name
      var ret,
        type,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name),
        style = elem.style;

      // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Gets hook for the prefixed version, then unprefixed version
      hooks = _jQuery2.cssHooks[name] || _jQuery2.cssHooks[origName];

      // Check if we're setting a value
      if (value !== undefined) {
        type = _typeof(value);

        // Convert "+=" or "-=" to relative numbers (trac-7345)
        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret);

          // Fixes bug trac-9237
          type = "number";
        }

        // Make sure that null and NaN values aren't set (trac-7116)
        if (value == null || value !== value) {
          return;
        }

        // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.
        if (type === "number" && !isCustomProp) {
          value += ret && ret[3] || (_jQuery2.cssNumber[origName] ? "" : "px");
        }

        // background-* props affect original clone's values
        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        }

        // Otherwise just get the value from the style object
        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
        num,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name);

      // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Try prefixed name followed by the unprefixed name
      hooks = _jQuery2.cssHooks[name] || _jQuery2.cssHooks[origName];

      // If a hook was provided get the computed value from there
      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      }

      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }

      // Convert "normal" to computed value
      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }

      // Make numeric if forced or a qualifier was provided and val looks numeric
      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }
      return val;
    }
  });
  _jQuery2.each(["height", "width"], function (_i, dimension) {
    _jQuery2.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(_jQuery2.css(elem, "display")) && (
          // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
          styles = getStyles(elem),
          // Only read styles.position if the test has a chance to fail
          // to avoid forcing a reflow.
          scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
          boxSizingNeeded = scrollboxSizeBuggy || extra,
          isBorderBox = boxSizingNeeded && _jQuery2.css(elem, "boxSizing", false, styles) === "border-box",
          subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;

        // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)
        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        }

        // Convert to pixels if value adjustment is needed
        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = _jQuery2.css(elem, dimension);
        }
        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  _jQuery2.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  });

  // These hooks are used by animate to expand properties
  _jQuery2.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    _jQuery2.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
          expanded = {},
          // Assumes a single number if not a string
          parts = typeof value === "string" ? value.split(" ") : [value];
        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }
        return expanded;
      }
    };
    if (prefix !== "margin") {
      _jQuery2.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  _jQuery2.fn.extend({
    css: function css(name, value) {
      return _access(this, function (elem, name, value) {
        var styles,
          len,
          map = {},
          i = 0;
        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;
          for (; i < len; i++) {
            map[name[i]] = _jQuery2.css(elem, name[i], false, styles);
          }
          return map;
        }
        return value !== undefined ? _jQuery2.style(elem, name, value) : _jQuery2.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  });
  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  _jQuery2.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || _jQuery2.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (_jQuery2.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
        hooks = Tween.propHooks[this.prop];
      if (this.options.duration) {
        this.pos = eased = _jQuery2.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;
      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }
      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result;

        // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.
        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        }

        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = _jQuery2.css(tween.elem, tween.prop, "");

        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (_jQuery2.fx.step[tween.prop]) {
          _jQuery2.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (_jQuery2.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
          _jQuery2.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  };

  // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  _jQuery2.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  _jQuery2.fx = Tween.prototype.init;

  // Back compat <1.8 extension point
  _jQuery2.fx.step = {};
  var fxNow,
    inProgress,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rrun = /queueHooks$/;
  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, _jQuery2.fx.interval);
      }
      _jQuery2.fx.tick();
    }
  }

  // Animations created synchronously will run synchronously
  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = Date.now();
  }

  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which,
      i = 0,
      attrs = {
        height: type
      };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }
    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }
    return attrs;
  }
  function createTween(value, prop, animation) {
    var tween,
      collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
      index = 0,
      length = collection.length;
    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }
  function defaultPrefilter(elem, props, opts) {
    var prop,
      value,
      toggle,
      hooks,
      oldfire,
      propTween,
      restoreDisplay,
      display,
      isBox = "width" in props || "height" in props,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHiddenWithinTree(elem),
      dataShow = dataPriv.get(elem, "fxshow");

    // Queue-skipping animations hijack the fx hooks
    if (!opts.queue) {
      hooks = _jQuery2._queueHooks(elem, "fx");
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!_jQuery2.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    }

    // Detect show/hide animations
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";
        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true;

            // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }
        orig[prop] = dataShow && dataShow[prop] || _jQuery2.style(elem, prop);
      }
    }

    // Bail out if this is a no-op like .hide().hide()
    propTween = !_jQuery2.isEmptyObject(props);
    if (!propTween && _jQuery2.isEmptyObject(orig)) {
      return;
    }

    // Restrict "overflow" and "display" styles during box animations
    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY];

      // Identify a display type, preferring old show/hide data over the CSS cascade
      restoreDisplay = dataShow && dataShow.display;
      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }
      display = _jQuery2.css(elem, "display");
      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = _jQuery2.css(elem, "display");
          showHide([elem]);
        }
      }

      // Animate inline elements as inline-block
      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
        if (_jQuery2.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });
            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }
          style.display = "inline-block";
        }
      }
    }
    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }

    // Implement show/hide animations
    propTween = false;
    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        }

        // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
        if (toggle) {
          dataShow.hidden = !hidden;
        }

        // Show elements before animating them
        if (hidden) {
          showHide([elem], true);
        }

        /* eslint-disable no-loop-func */

        anim.done(function () {
          /* eslint-enable no-loop-func */

          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }
          dataPriv.remove(elem, "fxshow");
          for (prop in orig) {
            _jQuery2.style(elem, prop, orig[prop]);
          }
        });
      }

      // Per-property setup
      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;
        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }
  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }
      if (index !== name) {
        props[name] = value;
        delete props[index];
      }
      hooks = _jQuery2.cssHooks[name];
      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name];

        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }
  function Animation(elem, properties, options) {
    var result,
      stopped,
      index = 0,
      length = Animation.prefilters.length,
      deferred = _jQuery2.Deferred().always(function () {
        // Don't match elem in the :animated selector
        delete tick.elem;
      }),
      tick = function tick() {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
          temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;
        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }
        deferred.notifyWith(elem, [animation, percent, remaining]);

        // If there's more to do, yield
        if (percent < 1 && length) {
          return remaining;
        }

        // If this was an empty animation, synthesize a final progress notification
        if (!length) {
          deferred.notifyWith(elem, [animation, 1, 0]);
        }

        // Resolve the animation and report its conclusion
        deferred.resolveWith(elem, [animation]);
        return false;
      },
      animation = deferred.promise({
        elem: elem,
        props: _jQuery2.extend({}, properties),
        opts: _jQuery2.extend(true, {
          specialEasing: {},
          easing: _jQuery2.easing._default
        }, options),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function createTween(prop, end) {
          var tween = _jQuery2.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
          animation.tweens.push(tween);
          return tween;
        },
        stop: function stop(gotoEnd) {
          var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }

          // Resolve when we played the last frame; otherwise, reject
          if (gotoEnd) {
            deferred.notifyWith(elem, [animation, 1, 0]);
            deferred.resolveWith(elem, [animation, gotoEnd]);
          } else {
            deferred.rejectWith(elem, [animation, gotoEnd]);
          }
          return this;
        }
      }),
      props = animation.props;
    propFilter(props, animation.opts.specialEasing);
    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
      if (result) {
        if (isFunction(result.stop)) {
          _jQuery2._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }
        return result;
      }
    }
    _jQuery2.map(props, createTween, animation);
    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }

    // Attach callbacks from options
    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    _jQuery2.fx.timer(_jQuery2.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    return animation;
  }
  _jQuery2.Animation = _jQuery2.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function tweener(props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }
      var prop,
        index = 0,
        length = props.length;
      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });
  _jQuery2.speed = function (speed, easing, fn) {
    var opt = speed && _typeof(speed) === "object" ? _jQuery2.extend({}, speed) : {
      complete: fn || !fn && easing || isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction(easing) && easing
    };

    // Go to the end state if fx are off
    if (_jQuery2.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in _jQuery2.fx.speeds) {
          opt.duration = _jQuery2.fx.speeds[opt.duration];
        } else {
          opt.duration = _jQuery2.fx.speeds._default;
        }
      }
    }

    // Normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;
    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }
      if (opt.queue) {
        _jQuery2.dequeue(this, opt.queue);
      }
    };
    return opt;
  };
  _jQuery2.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHiddenWithinTree).css("opacity", 0).show()

      // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = _jQuery2.isEmptyObject(prop),
        optall = _jQuery2.speed(speed, easing, callback),
        doAnimation = function doAnimation() {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, _jQuery2.extend({}, prop), optall);

          // Empty animations, or finishing resolves immediately
          if (empty || dataPriv.get(this, "finish")) {
            anim.stop(true);
          }
        };
      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };
      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue) {
        this.queue(type || "fx", []);
      }
      return this.each(function () {
        var dequeue = true,
          index = type != null && type + "queueHooks",
          timers = _jQuery2.timers,
          data = dataPriv.get(this);
        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }

        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if (dequeue || !gotoEnd) {
          _jQuery2.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }
      return this.each(function () {
        var index,
          data = dataPriv.get(this),
          queue = data[type + "queue"],
          hooks = data[type + "queueHooks"],
          timers = _jQuery2.timers,
          length = queue ? queue.length : 0;

        // Enable finishing flag on private data
        data.finish = true;

        // Empty the queue first
        _jQuery2.queue(this, type, []);
        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }

        // Look for any active animations, and finish them
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }

        // Look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }

        // Turn off finishing flag
        delete data.finish;
      });
    }
  });
  _jQuery2.each(["toggle", "show", "hide"], function (_i, name) {
    var cssFn = _jQuery2.fn[name];
    _jQuery2.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  });

  // Generate shortcuts for custom animations
  _jQuery2.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    _jQuery2.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  _jQuery2.timers = [];
  _jQuery2.fx.tick = function () {
    var timer,
      i = 0,
      timers = _jQuery2.timers;
    fxNow = Date.now();
    for (; i < timers.length; i++) {
      timer = timers[i];

      // Run the timer and safely remove it when done (allowing for external removal)
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }
    if (!timers.length) {
      _jQuery2.fx.stop();
    }
    fxNow = undefined;
  };
  _jQuery2.fx.timer = function (timer) {
    _jQuery2.timers.push(timer);
    _jQuery2.fx.start();
  };
  _jQuery2.fx.interval = 13;
  _jQuery2.fx.start = function () {
    if (inProgress) {
      return;
    }
    inProgress = true;
    schedule();
  };
  _jQuery2.fx.stop = function () {
    inProgress = null;
  };
  _jQuery2.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  };

  // Based off of the plugin by Clint Helfers, with permission.
  _jQuery2.fn.delay = function (time, type) {
    time = _jQuery2.fx ? _jQuery2.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);
      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };
  (function () {
    var input = document.createElement("input"),
      select = document.createElement("select"),
      opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox";

    // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== "";

    // Support: IE <=11 only
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: IE <=11 only
    // An input loses its value after becoming a radio
    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();
  var boolHook,
    attrHandle = _jQuery2.expr.attrHandle;
  _jQuery2.fn.extend({
    attr: function attr(name, value) {
      return _access(this, _jQuery2.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        _jQuery2.removeAttr(this, name);
      });
    }
  });
  _jQuery2.extend({
    attr: function attr(elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set attributes on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === "undefined") {
        return _jQuery2.prop(elem, name, value);
      }

      // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined
      if (nType !== 1 || !_jQuery2.isXMLDoc(elem)) {
        hooks = _jQuery2.attrHooks[name.toLowerCase()] || (_jQuery2.expr.match.bool.test(name) ? boolHook : undefined);
      }
      if (value !== undefined) {
        if (value === null) {
          _jQuery2.removeAttr(elem, name);
          return;
        }
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }
        elem.setAttribute(name, value + "");
        return value;
      }
      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }
      ret = _jQuery2.find.attr(elem, name);

      // Non-existent attributes return null, we normalize to undefined
      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
        i = 0,
        // Attribute names can contain non-HTML whitespace characters
        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
        attrNames = value && value.match(rnothtmlwhite);
      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  });

  // Hooks for boolean attributes
  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        _jQuery2.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };
  _jQuery2.each(_jQuery2.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || _jQuery2.find.attr;
    attrHandle[name] = function (elem, name, isXML) {
      var ret,
        handle,
        lowercaseName = name.toLowerCase();
      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }
      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
    rclickable = /^(?:a|area)$/i;
  _jQuery2.fn.extend({
    prop: function prop(name, value) {
      return _access(this, _jQuery2.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[_jQuery2.propFix[name] || name];
      });
    }
  });
  _jQuery2.extend({
    prop: function prop(elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set properties on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      if (nType !== 1 || !_jQuery2.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = _jQuery2.propFix[name] || name;
        hooks = _jQuery2.propHooks[name];
      }
      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }
        return elem[name] = value;
      }
      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }
      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // Use proper attribute retrieval (trac-12072)
          var tabindex = _jQuery2.find.attr(elem, "tabindex");
          if (tabindex) {
            return parseInt(tabindex, 10);
          }
          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }
          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  });

  // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop
  if (!support.optSelected) {
    _jQuery2.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent) {
          parent.selectedIndex;
          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }
  _jQuery2.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    _jQuery2.propFix[this.toLowerCase()] = this;
  });

  // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }
  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }
  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }
    return [];
  }
  _jQuery2.fn.extend({
    addClass: function addClass(value) {
      var classNames, cur, curValue, className, i, finalValue;
      if (isFunction(value)) {
        return this.each(function (j) {
          _jQuery2(this).addClass(value.call(this, j, getClass(this)));
        });
      }
      classNames = classesToArray(value);
      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);
          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];
              if (cur.indexOf(" " + className + " ") < 0) {
                cur += className + " ";
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }
      return this;
    },
    removeClass: function removeClass(value) {
      var classNames, cur, curValue, className, i, finalValue;
      if (isFunction(value)) {
        return this.each(function (j) {
          _jQuery2(this).removeClass(value.call(this, j, getClass(this)));
        });
      }
      if (!arguments.length) {
        return this.attr("class", "");
      }
      classNames = classesToArray(value);
      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);

          // This expression is here for better compressibility (see addClass)
          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];

              // Remove *all* instances
              while (cur.indexOf(" " + className + " ") > -1) {
                cur = cur.replace(" " + className + " ", " ");
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }
      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var classNames,
        className,
        i,
        self,
        type = _typeof(value),
        isValidValue = type === "string" || Array.isArray(value);
      if (isFunction(value)) {
        return this.each(function (i) {
          _jQuery2(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }
      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }
      classNames = classesToArray(value);
      return this.each(function () {
        if (isValidValue) {
          // Toggle individual class names
          self = _jQuery2(this);
          for (i = 0; i < classNames.length; i++) {
            className = classNames[i];

            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }

          // Toggle whole class name
        } else if (value === undefined || type === "boolean") {
          className = getClass(this);
          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          }

          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
        elem,
        i = 0;
      className = " " + selector + " ";
      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }
      return false;
    }
  });
  var rreturn = /\r/g;
  _jQuery2.fn.extend({
    val: function val(value) {
      var hooks,
        ret,
        valueIsFunction,
        elem = this[0];
      if (!arguments.length) {
        if (elem) {
          hooks = _jQuery2.valHooks[elem.type] || _jQuery2.valHooks[elem.nodeName.toLowerCase()];
          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }
          ret = elem.value;

          // Handle most common string cases
          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          }

          // Handle cases where value is null/undef or number
          return ret == null ? "" : ret;
        }
        return;
      }
      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;
        if (this.nodeType !== 1) {
          return;
        }
        if (valueIsFunction) {
          val = value.call(this, i, _jQuery2(this).val());
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = _jQuery2.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }
        hooks = _jQuery2.valHooks[this.type] || _jQuery2.valHooks[this.nodeName.toLowerCase()];

        // If set returns undefined, fall back to normal setting
        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  _jQuery2.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = _jQuery2.find.attr(elem, "value");
          return val != null ? val :
          // Support: IE <=10 - 11 only
          // option.text throws exceptions (trac-14686, trac-14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(_jQuery2.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
            option,
            i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one",
            values = one ? null : [],
            max = one ? index + 1 : options.length;
          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          }

          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];

            // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (trac-2551)
            if ((option.selected || i === index) &&
            // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = _jQuery2(option).val();

              // We don't need an array for one selects
              if (one) {
                return value;
              }

              // Multi-Selects return an array
              values.push(value);
            }
          }
          return values;
        },
        set: function set(elem, value) {
          var optionSet,
            option,
            options = elem.options,
            values = _jQuery2.makeArray(value),
            i = options.length;
          while (i--) {
            option = options[i];

            /* eslint-disable no-cond-assign */

            if (option.selected = _jQuery2.inArray(_jQuery2.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }

            /* eslint-enable no-cond-assign */
          }

          // Force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });

  // Radios and checkboxes getter/setter
  _jQuery2.each(["radio", "checkbox"], function () {
    _jQuery2.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = _jQuery2.inArray(_jQuery2(elem).val(), value) > -1;
        }
      }
    };
    if (!support.checkOn) {
      _jQuery2.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  });

  // Return jQuery for attributes-only inclusion
  var location = window.location;
  var nonce = {
    guid: Date.now()
  };
  var rquery = /\?/;

  // Cross-browser xml parsing
  _jQuery2.parseXML = function (data) {
    var xml, parserErrorElem;
    if (!data || typeof data !== "string") {
      return null;
    }

    // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.
    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {}
    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
    if (!xml || parserErrorElem) {
      _jQuery2.error("Invalid XML: " + (parserErrorElem ? _jQuery2.map(parserErrorElem.childNodes, function (el) {
        return el.textContent;
      }).join("\n") : data));
    }
    return xml;
  };
  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    stopPropagationCallback = function stopPropagationCallback(e) {
      e.stopPropagation();
    };
  _jQuery2.extend(_jQuery2.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
        cur,
        tmp,
        bubbleType,
        ontype,
        handle,
        special,
        lastElement,
        eventPath = [elem || document],
        type = hasOwn.call(event, "type") ? event.type : event,
        namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document;

      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + _jQuery2.event.triggered)) {
        return;
      }
      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(":") < 0 && "on" + type;

      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[_jQuery2.expando] ? event : new _jQuery2.Event(type, _typeof(event) === "object" && event);

      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : _jQuery2.makeArray(data, [event]);

      // Allow special events to draw outside the lines
      special = _jQuery2.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (trac-9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }

      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type;

        // jQuery handler
        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");
        if (handle) {
          handle.apply(cur, data);
        }

        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (trac-6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];
            if (tmp) {
              elem[ontype] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            _jQuery2.event.triggered = type;
            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }
            elem[type]();
            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }
            _jQuery2.event.triggered = undefined;
            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }
      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = _jQuery2.extend(new _jQuery2.Event(), event, {
        type: type,
        isSimulated: true
      });
      _jQuery2.event.trigger(e, null, elem);
    }
  });
  _jQuery2.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        _jQuery2.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];
      if (elem) {
        return _jQuery2.event.trigger(type, data, elem, true);
      }
    }
  });
  var rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;
  function buildParams(prefix, obj, traditional, add) {
    var name;
    if (Array.isArray(obj)) {
      // Serialize array item.
      _jQuery2.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }

  // Serialize an array of form elements or a set of
  // key/values into a query string
  _jQuery2.param = function (a, traditional) {
    var prefix,
      s = [],
      add = function add(key, valueOrFunction) {
        // If value is a function, invoke it and use its return value
        var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
        s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
      };
    if (a == null) {
      return "";
    }

    // If an array was passed in, assume that it is an array of form elements.
    if (Array.isArray(a) || a.jquery && !_jQuery2.isPlainObject(a)) {
      // Serialize the form elements
      _jQuery2.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }

    // Return the resulting serialization
    return s.join("&");
  };
  _jQuery2.fn.extend({
    serialize: function serialize() {
      return _jQuery2.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = _jQuery2.prop(this, "elements");
        return elements ? _jQuery2.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type;

        // Use .is( ":disabled" ) so that fieldset[disabled] works
        return this.name && !_jQuery2(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (_i, elem) {
        var val = _jQuery2(this).val();
        if (val == null) {
          return null;
        }
        if (Array.isArray(val)) {
          return _jQuery2.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }
        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  var r20 = /%20/g,
    rhash = /#.*$/,
    rantiCache = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
    // trac-7653, trac-8125, trac-8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},
    // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
    allTypes = "*/".concat("*"),
    // Anchor tag for parsing the document origin
    originAnchor = document.createElement("a");
  originAnchor.href = location.href;

  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }
      var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func);

            // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }

  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
      seekingTransport = structure === transports;
    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      _jQuery2.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }
    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  }

  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes trac-9887
  function ajaxExtend(target, src) {
    var key,
      deep,
      flatOptions = _jQuery2.ajaxSettings.flatOptions || {};
    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      _jQuery2.extend(true, target, deep);
    }
    return target;
  }

  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
      type,
      finalDataType,
      firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === "*") {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    }

    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }

      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }

  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
      current,
      conv,
      tmp,
      prev,
      converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }
    current = dataTypes.shift();

    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }

      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }
      prev = current;
      current = dataTypes.shift();
      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev;

          // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current];

          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];

                    // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s["throws"]) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }
    return {
      state: "success",
      data: response
    };
  }
  _jQuery2.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */

      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": JSON.parse,
        // Parse text as xml
        "text xml": _jQuery2.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ?
      // Building a settings object
      ajaxExtend(ajaxExtend(target, _jQuery2.ajaxSettings), settings) :
      // Extending ajaxSettings
      ajaxExtend(_jQuery2.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function ajax(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (_typeof(url) === "object") {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};
      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString,
        responseHeaders,
        // timeout handle
        timeoutTimer,
        // Url cleanup var
        urlAnchor,
        // Request state (becomes false upon send and true upon completion)
        completed,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // uncached part of the url
        uncached,
        // Create the final options object
        s = _jQuery2.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? _jQuery2(callbackContext) : _jQuery2.event,
        // Deferreds
        deferred = _jQuery2.Deferred(),
        completeDeferred = _jQuery2.Callbacks("once memory"),
        // Status-dependent callbacks
        _statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
        // Default abort message
        strAbort = "canceled",
        // Fake xhr
        jqXHR = {
          readyState: 0,
          // Builds headers hashtable if needed
          getResponseHeader: function getResponseHeader(key) {
            var match;
            if (completed) {
              if (!responseHeaders) {
                responseHeaders = {};
                while (match = rheaders.exec(responseHeadersString)) {
                  responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                }
              }
              match = responseHeaders[key.toLowerCase() + " "];
            }
            return match == null ? null : match.join(", ");
          },
          // Raw string
          getAllResponseHeaders: function getAllResponseHeaders() {
            return completed ? responseHeadersString : null;
          },
          // Caches the header
          setRequestHeader: function setRequestHeader(name, value) {
            if (completed == null) {
              name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
              requestHeaders[name] = value;
            }
            return this;
          },
          // Overrides response content-type header
          overrideMimeType: function overrideMimeType(type) {
            if (completed == null) {
              s.mimeType = type;
            }
            return this;
          },
          // Status-dependent callbacks
          statusCode: function statusCode(map) {
            var code;
            if (map) {
              if (completed) {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              } else {
                // Lazy-add the new callbacks in a way that preserves old ones
                for (code in map) {
                  _statusCode[code] = [_statusCode[code], map[code]];
                }
              }
            }
            return this;
          },
          // Cancel the request
          abort: function abort(statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          }
        };

      // Attach deferreds
      deferred.promise(jqXHR);

      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (trac-10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

      // Alias method option to type as per ticket trac-12004
      s.type = options.method || options.type || s.method || s.type;

      // Extract dataTypes list
      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

      // A cross-domain request is in order when the origin doesn't match the current origin.
      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a");

        // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/
        try {
          urlAnchor.href = s.url;

          // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative
          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      }

      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = _jQuery2.param(s.data, s.traditional);
      }

      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

      // If request was aborted inside a prefilter, stop there
      if (completed) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
      fireGlobals = _jQuery2.event && s.global;

      // Watch for a new set of requests
      if (fireGlobals && _jQuery2.active++ === 0) {
        _jQuery2.event.trigger("ajaxStart");
      }

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);

      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation
      cacheURL = s.url.replace(rhash, "");

      // More options handling for requests with no content
      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length);

        // If data is available and should be processed, append data to url
        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

          // trac-9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Add or update anti-cache param if needed
        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
        }

        // Put hash and anti-cache on the URL that will be requested (gh-1732)
        s.url = cacheURL + uncached;

        // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (_jQuery2.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", _jQuery2.lastModified[cacheURL]);
        }
        if (_jQuery2.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", _jQuery2.etag[cacheURL]);
        }
      }

      // Set the correct header, if data is being sent
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }

      // Allow custom headers/mimetypes and early abort
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      }

      // Aborting is no longer a cancellation
      strAbort = "abort";

      // Install callbacks on deferreds
      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error);

      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

      // If no transport, we auto-abort
      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1;

        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        }

        // If request was aborted inside ajaxSend, stop there
        if (completed) {
          return jqXHR;
        }

        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }
        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          }

          // Propagate others as results
          done(-1, e);
        }
      }

      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
          success,
          error,
          response,
          modified,
          statusText = nativeStatusText;

        // Ignore repeat invocations
        if (completed) {
          return;
        }
        completed = true;

        // Clear timeout if it exists
        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || "";

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;

        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }

        // Use a noop converter for missing script but not if jsonp
        if (!isSuccess && _jQuery2.inArray("script", s.dataTypes) > -1 && _jQuery2.inArray("json", s.dataTypes) < 0) {
          s.converters["text script"] = function () {};
        }

        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);

        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");
            if (modified) {
              _jQuery2.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader("etag");
            if (modified) {
              _jQuery2.etag[cacheURL] = modified;
            }
          }

          // if no content
          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent";

            // if not modified
          } else if (status === 304) {
            statusText = "notmodified";

            // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = "error";
            if (status < 0) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + "";

        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        }

        // Status-dependent callbacks
        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;
        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        }

        // Complete
        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

          // Handle the global AJAX counter
          if (! --_jQuery2.active) {
            _jQuery2.event.trigger("ajaxStop");
          }
        }
      }
      return jqXHR;
    },
    getJSON: function getJSON(url, data, callback) {
      return _jQuery2.get(url, data, callback, "json");
    },
    getScript: function getScript(url, callback) {
      return _jQuery2.get(url, undefined, callback, "script");
    }
  });
  _jQuery2.each(["get", "post"], function (_i, method) {
    _jQuery2[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      // The url can be an options object (which then must have .url)
      return _jQuery2.ajax(_jQuery2.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, _jQuery2.isPlainObject(url) && url));
    };
  });
  _jQuery2.ajaxPrefilter(function (s) {
    var i;
    for (i in s.headers) {
      if (i.toLowerCase() === "content-type") {
        s.contentType = s.headers[i] || "";
      }
    }
  });
  _jQuery2._evalUrl = function (url, options, doc) {
    return _jQuery2.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (trac-11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function text_script() {}
      },
      dataFilter: function dataFilter(response) {
        _jQuery2.globalEval(response, options, doc);
      }
    });
  };
  _jQuery2.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;
      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        }

        // The elements to wrap the target around
        wrap = _jQuery2(html, this[0].ownerDocument).eq(0).clone(true);
        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }
        wrap.map(function () {
          var elem = this;
          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }
          return elem;
        }).append(this);
      }
      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          _jQuery2(this).wrapInner(html.call(this, i));
        });
      }
      return this.each(function () {
        var self = _jQuery2(this),
          contents = self.contents();
        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        _jQuery2(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        _jQuery2(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });
  _jQuery2.expr.pseudos.hidden = function (elem) {
    return !_jQuery2.expr.pseudos.visible(elem);
  };
  _jQuery2.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };
  _jQuery2.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };
  var xhrSuccessStatus = {
      // File protocol always yields status code 0, assume 200
      0: 200,
      // Support: IE <=9 only
      // trac-1450: sometimes IE returns 1223 when it should be 204
      1223: 204
    },
    xhrSupported = _jQuery2.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  _jQuery2.ajaxTransport(function (options) {
    var _callback, errorCallback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
            xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password);

          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }

          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          }

          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }

          // Callback
          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete(
                    // File: protocol always yields status 0; see trac-8605, trac-14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,
                  // Support: IE <=9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          };

          // Listen to events
          xhr.onload = _callback();
          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error");

          // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts
          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          }

          // Create the abort callback
          _callback = _callback("abort");
          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // trac-14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  });

  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
  _jQuery2.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  });

  // Install script dataType
  _jQuery2.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function text_script(text) {
        _jQuery2.globalEval(text);
        return text;
      }
    }
  });

  // Handle cache's special case and crossDomain
  _jQuery2.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = "GET";
    }
  });

  // Bind script tag hack transport
  _jQuery2.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, _callback2;
      return {
        send: function send(_, complete) {
          script = _jQuery2("<script>").attr(s.scriptAttrs || {}).prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback2 = function callback(evt) {
            script.remove();
            _callback2 = null;
            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          });

          // Use native DOM manipulation to avoid our domManip AJAX trickery
          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback2) {
            _callback2();
          }
        }
      };
    }
  });
  var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

  // Default jsonp settings
  _jQuery2.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || _jQuery2.expando + "_" + nonce.guid++;
      this[callback] = true;
      return callback;
    }
  });

  // Detect, normalize options and install callbacks for jsonp requests
  _jQuery2.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
      overwritten,
      responseContainer,
      jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters["script json"] = function () {
        if (!responseContainer) {
          _jQuery2.error(callbackName + " was not called");
        }
        return responseContainer[0];
      };

      // Force json dataType
      s.dataTypes[0] = "json";

      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          _jQuery2(window).removeProp(callbackName);

          // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        }

        // Save back as free
        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // Save the callback name for future use
          oldCallbacks.push(callbackName);
        }

        // Call if it was a function and we have a response
        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }
        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return "script";
    }
  });

  // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337
  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }();

  // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  _jQuery2.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }
    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }
    var base, parsed, scripts;
    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument("");

        // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)
        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }
    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && [];

    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }
    parsed = buildFragment([data], context, scripts);
    if (scripts && scripts.length) {
      _jQuery2(scripts).remove();
    }
    return _jQuery2.merge([], parsed.childNodes);
  };

  /**
   * Load a url into a page
   */
  _jQuery2.fn.load = function (url, params, callback) {
    var selector,
      type,
      response,
      self = this,
      off = url.indexOf(" ");
    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    }

    // If it's a function
    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;

      // Otherwise, build a param string
    } else if (params && _typeof(params) === "object") {
      type = "POST";
    }

    // If we have elements to modify, make the request
    if (self.length > 0) {
      _jQuery2.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ?
        // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        _jQuery2("<div>").append(_jQuery2.parseHTML(responseText)).find(selector) :
        // Otherwise use the full result
        responseText);

        // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }
    return this;
  };
  _jQuery2.expr.pseudos.animated = function (elem) {
    return _jQuery2.grep(_jQuery2.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };
  _jQuery2.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
        curLeft,
        curCSSTop,
        curTop,
        curOffset,
        curCSSLeft,
        calculatePosition,
        position = _jQuery2.css(elem, "position"),
        curElem = _jQuery2(elem),
        props = {};

      // Set position first, in-case top/left are set even on static elem
      if (position === "static") {
        elem.style.position = "relative";
      }
      curOffset = curElem.offset();
      curCSSTop = _jQuery2.css(elem, "top");
      curCSSLeft = _jQuery2.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }
      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, _jQuery2.extend({}, curOffset));
      }
      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }
      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  _jQuery2.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          _jQuery2.offset.setOffset(this, options, i);
        });
      }
      var rect,
        win,
        elem = this[0];
      if (!elem) {
        return;
      }

      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error
      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      }

      // Get document-relative position by adding viewport scroll to viewport-relative gBCR
      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }
      var offsetParent,
        offset,
        doc,
        elem = this[0],
        parentOffset = {
          top: 0,
          left: 0
        };

      // position:fixed elements are offset from the viewport, which itself always has zero offset
      if (_jQuery2.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset();

        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;
        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && _jQuery2.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }
        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = _jQuery2(offsetParent).offset();
          parentOffset.top += _jQuery2.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += _jQuery2.css(offsetParent, "borderLeftWidth", true);
        }
      }

      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - _jQuery2.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - _jQuery2.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;
        while (offsetParent && _jQuery2.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || documentElement;
      });
    }
  });

  // Create scrollLeft and scrollTop methods
  _jQuery2.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;
    _jQuery2.fn[method] = function (val) {
      return _access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;
        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }
        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }
        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  });

  // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  _jQuery2.each(["top", "left"], function (_i, prop) {
    _jQuery2.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop);

        // If curCSS returns percentage, fallback to offset
        return rnumnonpx.test(computed) ? _jQuery2(elem).position()[prop] + "px" : computed;
      }
    });
  });

  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  _jQuery2.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    _jQuery2.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      _jQuery2.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
          extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return _access(this, function (elem, type, value) {
          var doc;
          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          }

          // Get document width or height
          if (elem.nodeType === 9) {
            doc = elem.documentElement;

            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }
          return value === undefined ?
          // Get width or height on the element, requesting but not forcing parseFloat
          _jQuery2.css(elem, type, extra) :
          // Set width or height on the element
          _jQuery2.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  _jQuery2.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
    _jQuery2.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  _jQuery2.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    },
    hover: function hover(fnOver, fnOut) {
      return this.on("mouseenter", fnOver).on("mouseleave", fnOut || fnOver);
    }
  });
  _jQuery2.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
    // Handle event binding
    _jQuery2.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });

  // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  // Require that the "whitespace run" starts from a non-whitespace
  // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
  var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

  // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon
  _jQuery2.proxy = function (fn, context) {
    var tmp, args, proxy;
    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    }

    // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.
    if (!isFunction(fn)) {
      return undefined;
    }

    // Simulated bind
    args = _slice.call(arguments, 2);
    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    };

    // Set the guid of unique handler to the same of original handler, so it can be removed
    proxy.guid = fn.guid = fn.guid || _jQuery2.guid++;
    return proxy;
  };
  _jQuery2.holdReady = function (hold) {
    if (hold) {
      _jQuery2.readyWait++;
    } else {
      _jQuery2.ready(true);
    }
  };
  _jQuery2.isArray = Array.isArray;
  _jQuery2.parseJSON = JSON.parse;
  _jQuery2.nodeName = nodeName;
  _jQuery2.isFunction = isFunction;
  _jQuery2.isWindow = isWindow;
  _jQuery2.camelCase = camelCase;
  _jQuery2.type = toType;
  _jQuery2.now = Date.now;
  _jQuery2.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = _jQuery2.type(obj);
    return (type === "number" || type === "string") &&
    // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  };
  _jQuery2.trim = function (text) {
    return text == null ? "" : (text + "").replace(rtrim, "$1");
  };

  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.

  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (typeof define === "function" && define.amd) {
    define("jquery", [], function () {
      return _jQuery2;
    });
  }
  var
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;
  _jQuery2.noConflict = function (deep) {
    if (window.$ === _jQuery2) {
      window.$ = _$;
    }
    if (deep && window.jQuery === _jQuery2) {
      window.jQuery = _jQuery;
    }
    return _jQuery2;
  };

  // Expose jQuery and $ identifiers, even in AMD
  // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (trac-13566)
  if (typeof noGlobal === "undefined") {
    window.jQuery = window.$ = _jQuery2;
  }
  return _jQuery2;
});

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var EventBus = exports["default"] = /*#__PURE__*/function () {
  function EventBus() {
    _classCallCheck(this, EventBus);
    this.events = new Map();
  }
  return _createClass(EventBus, [{
    key: "emit",
    value: function emit(eventName) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      console.log("Event emitted: ".concat(eventName), args);
      var callbacks = this.events.get(eventName);
      if (callbacks) {
        callbacks.forEach(function (callback) {
          return callback.apply(void 0, args);
        });
      }
    }
  }, {
    key: "on",
    value: function on(eventName, callback) {
      var _this$events$get;
      if (!this.events.has(eventName)) {
        this.events.set(eventName, []);
      }
      (_this$events$get = this.events.get(eventName)) === null || _this$events$get === void 0 || _this$events$get.push(callback);
    }
  }, {
    key: "off",
    value: function off(eventName, callback) {
      var callbacks = this.events.get(eventName);
      if (callbacks) {
        this.events.set(eventName, callbacks.filter(function (cb) {
          return cb !== callback;
        }));
      }
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!EventBus.instance) {
        EventBus.instance = new EventBus();
      }
      return EventBus.instance;
    }
  }]);
}();

},{}],3:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n2 = 0, F = function F() {}; return { s: F, n: function n() { return _n2 >= r.length ? { done: !0 } : { done: !1, value: r[_n2++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * Skipped minification because the original files appears to be already minified.
 * Original file: /npm/air-datepicker@3.5.0/air-datepicker.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.AirDatepicker = t() : e.AirDatepicker = t();
}(void 0, function () {
  return function () {
    "use strict";

    var e = {
        d: function d(t, i) {
          for (var s in i) e.o(i, s) && !e.o(t, s) && Object.defineProperty(t, s, {
            enumerable: !0,
            get: i[s]
          });
        },
        o: function o(e, t) {
          return Object.prototype.hasOwnProperty.call(e, t);
        }
      },
      t = {};
    e.d(t, {
      "default": function _default() {
        return R;
      }
    });
    var i = {
        days: "days",
        months: "months",
        years: "years",
        day: "day",
        month: "month",
        year: "year",
        eventChangeViewDate: "changeViewDate",
        eventChangeCurrentView: "changeCurrentView",
        eventChangeFocusDate: "changeFocusDate",
        eventChangeSelectedDate: "changeSelectedDate",
        eventChangeTime: "changeTime",
        eventChangeLastSelectedDate: "changeLastSelectedDate",
        actionSelectDate: "selectDate",
        actionUnselectDate: "unselectDate",
        cssClassWeekend: "-weekend-"
      },
      s = {
        classes: "",
        inline: !1,
        locale: {
          days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
          daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
          months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
          monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
          today: "Today",
          clear: "Clear",
          dateFormat: "mm/dd/yyyy",
          timeFormat: "hh:ii aa",
          firstDay: 1
        },
        startDate: new Date(),
        firstDay: "",
        weekends: [6, 0],
        dateFormat: "",
        altField: "",
        altFieldDateFormat: "T",
        toggleSelected: !0,
        keyboardNav: !0,
        selectedDates: !1,
        container: "",
        isMobile: !1,
        visible: !1,
        position: "bottom left",
        offset: 12,
        view: i.days,
        minView: i.days,
        showOtherMonths: !0,
        selectOtherMonths: !0,
        moveToOtherMonthsOnSelect: !0,
        showOtherYears: !0,
        selectOtherYears: !0,
        moveToOtherYearsOnSelect: !0,
        minDate: "",
        maxDate: "",
        disableNavWhenOutOfRange: !0,
        multipleDates: !1,
        multipleDatesSeparator: ", ",
        range: !1,
        dynamicRange: !0,
        buttons: !1,
        monthsField: "monthsShort",
        showEvent: "focus",
        autoClose: !1,
        fixedHeight: !1,
        prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',
        nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',
        navTitles: {
          days: "MMMM, <i>yyyy</i>",
          months: "yyyy",
          years: "yyyy1 - yyyy2"
        },
        timepicker: !1,
        onlyTimepicker: !1,
        dateTimeSeparator: " ",
        timeFormat: "",
        minHours: 0,
        maxHours: 24,
        minMinutes: 0,
        maxMinutes: 59,
        hoursStep: 1,
        minutesStep: 1,
        onSelect: !1,
        onChangeViewDate: !1,
        onChangeView: !1,
        onRenderCell: !1,
        onShow: !1,
        onHide: !1,
        onClickDayName: !1
      };
    function a(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document;
      return "string" == typeof e ? t.querySelector(e) : e;
    }
    function n() {
      var _n$classList;
      var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
        _ref$tagName = _ref.tagName,
        e = _ref$tagName === void 0 ? "div" : _ref$tagName,
        _ref$className = _ref.className,
        t = _ref$className === void 0 ? "" : _ref$className,
        _ref$innerHtml = _ref.innerHtml,
        i = _ref$innerHtml === void 0 ? "" : _ref$innerHtml,
        _ref$id = _ref.id,
        s = _ref$id === void 0 ? "" : _ref$id,
        _ref$attrs = _ref.attrs,
        a = _ref$attrs === void 0 ? {} : _ref$attrs,
        n = document.createElement(e);
      return t && (_n$classList = n.classList).add.apply(_n$classList, _toConsumableArray(t.split(" "))), s && (n.id = s), i && (n.innerHTML = i), a && r(n, a), n;
    }
    function r(e, t) {
      for (var _i = 0, _Object$entries = Object.entries(t); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          _i2 = _Object$entries$_i[0],
          _s = _Object$entries$_i[1];
        void 0 !== _s && e.setAttribute(_i2, _s);
      }
      return e;
    }
    function o(e) {
      return new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate();
    }
    function h(e) {
      var t = e.getHours(),
        _l = l(t),
        i = _l.hours,
        s = _l.dayPeriod;
      return {
        year: e.getFullYear(),
        month: e.getMonth(),
        fullMonth: e.getMonth() + 1 < 10 ? "0" + (e.getMonth() + 1) : e.getMonth() + 1,
        date: e.getDate(),
        fullDate: e.getDate() < 10 ? "0" + e.getDate() : e.getDate(),
        day: e.getDay(),
        hours: t,
        fullHours: d(t),
        hours12: i,
        dayPeriod: s,
        fullHours12: d(i),
        minutes: e.getMinutes(),
        fullMinutes: e.getMinutes() < 10 ? "0" + e.getMinutes() : e.getMinutes()
      };
    }
    function l(e) {
      return {
        dayPeriod: e > 11 ? "pm" : "am",
        hours: e % 12 == 0 ? 12 : e % 12
      };
    }
    function d(e) {
      return e < 10 ? "0" + e : e;
    }
    function c(e) {
      var t = 10 * Math.floor(e.getFullYear() / 10);
      return [t, t + 9];
    }
    function u() {
      var e = [];
      for (var t = arguments.length, i = new Array(t), s = 0; s < t; s++) i[s] = arguments[s];
      return i.forEach(function (t) {
        if ("object" == _typeof(t)) for (var _i3 in t) t[_i3] && e.push(_i3);else t && e.push(t);
      }), e.join(" ");
    }
    function p(e, t) {
      var s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.days;
      if (!e || !t) return !1;
      var a = h(e),
        n = h(t);
      return _defineProperty(_defineProperty(_defineProperty({}, i.days, a.date === n.date && a.month === n.month && a.year === n.year), i.months, a.month === n.month && a.year === n.year), i.years, a.year === n.year)[s];
    }
    function m(e, t, i) {
      var s = g(e, !1).getTime(),
        a = g(t, !1).getTime();
      return i ? s >= a : s > a;
    }
    function v(e, t) {
      return !m(e, t, !0);
    }
    function g(e) {
      var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
        i = new Date(e.getTime());
      return "boolean" != typeof t || t || function (e) {
        e.setHours(0, 0, 0, 0);
      }(i), i;
    }
    function D(e, t, i) {
      e.length ? e.forEach(function (e) {
        e.addEventListener(t, i);
      }) : e.addEventListener(t, i);
    }
    function y(e, t) {
      return !(!e || e === document || e instanceof DocumentFragment) && (e.matches(t) ? e : y(e.parentNode, t));
    }
    function f(e, t, i) {
      return e > i ? i : e < t ? t : e;
    }
    function w(e) {
      for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++) i[s - 1] = arguments[s];
      return i.filter(function (e) {
        return e;
      }).forEach(function (t) {
        for (var _i4 = 0, _Object$entries2 = Object.entries(t); _i4 < _Object$entries2.length; _i4++) {
          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i4], 2),
            _i5 = _Object$entries2$_i[0],
            _s2 = _Object$entries2$_i[1];
          if (void 0 !== _s2 && "[object Object]" === _s2.toString()) {
            var _t = void 0 !== e[_i5] ? e[_i5].toString() : void 0,
              _a = _s2.toString(),
              _n = Array.isArray(_s2) ? [] : {};
            e[_i5] = e[_i5] ? _t !== _a ? _n : e[_i5] : _n, w(e[_i5], _s2);
          } else e[_i5] = _s2;
        }
      }), e;
    }
    function b(e) {
      var t = e;
      return e instanceof Date || ("string" == typeof e && /^\d{4}-\d{2}-\d{2}$/.test(e) && (e += "T00:00:00"), t = new Date(e)), isNaN(t.getTime()) && (console.log("Unable to convert value \"".concat(e, "\" to Date object")), t = !1), t;
    }
    function k(e) {
      var t = "\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";
      return new RegExp("(^|>|" + t + ")(" + e + ")($|<|" + t + ")", "g");
    }
    function $(e, t, i) {
      return (t = function (e) {
        var t = function (e, t) {
          if ("object" != _typeof(e) || null === e) return e;
          var i = e[Symbol.toPrimitive];
          if (void 0 !== i) {
            var s = i.call(e, "string");
            if ("object" != _typeof(s)) return s;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return String(e);
        }(e);
        return "symbol" == _typeof(t) ? t : String(t);
      }(t)) in e ? Object.defineProperty(e, t, {
        value: i,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = i, e;
    }
    var C = /*#__PURE__*/function () {
      function C() {
        var _this = this;
        _classCallCheck(this, C);
        var _ref2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          e = _ref2.type,
          t = _ref2.date,
          i = _ref2.dp,
          s = _ref2.opts,
          a = _ref2.body;
        $(this, "focus", function () {
          _this.$cell.classList.add("-focus-"), _this.focused = !0;
        }), $(this, "removeFocus", function () {
          _this.$cell.classList.remove("-focus-"), _this.focused = !1;
        }), $(this, "select", function () {
          _this.$cell.classList.add("-selected-"), _this.selected = !0;
        }), $(this, "removeSelect", function () {
          _this.$cell.classList.remove("-selected-", "-range-from-", "-range-to-"), _this.selected = !1;
        }), $(this, "onChangeSelectedDate", function () {
          _this.isDisabled || (_this._handleSelectedStatus(), _this.opts.range && _this._handleRangeStatus());
        }), $(this, "onChangeFocusDate", function (e) {
          if (!e) return void (_this.focused && _this.removeFocus());
          var t = p(e, _this.date, _this.type);
          t ? _this.focus() : !t && _this.focused && _this.removeFocus(), _this.opts.range && _this._handleRangeStatus();
        }), $(this, "render", function () {
          return _this.$cell.innerHTML = _this._getHtml(), _this._handleClasses(), _this.$cell;
        }), this.type = e, this.singleType = this.type.slice(0, -1), this.date = t, this.dp = i, this.opts = s, this.body = a, this.customData = !1, this.init();
      }
      return _createClass(C, [{
        key: "init",
        value: function init() {
          var e;
          var t = this.opts.onRenderCell;
          t && (this.customData = t({
            date: this.date,
            cellType: this.singleType,
            datepicker: this.dp
          })), this._createElement(), this._bindDatepickerEvents(), null !== (e = this.customData) && void 0 !== e && e.disabled && this.dp.disableDate(this.date);
        }
      }, {
        key: "_bindDatepickerEvents",
        value: function _bindDatepickerEvents() {
          this.dp.on(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.on(i.eventChangeFocusDate, this.onChangeFocusDate);
        }
      }, {
        key: "unbindDatepickerEvents",
        value: function unbindDatepickerEvents() {
          this.dp.off(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.off(i.eventChangeFocusDate, this.onChangeFocusDate);
        }
      }, {
        key: "_createElement",
        value: function _createElement() {
          var e;
          var _h = h(this.date),
            t = _h.year,
            i = _h.month,
            s = _h.date,
            a = (null === (e = this.customData) || void 0 === e ? void 0 : e.attrs) || {};
          this.$cell = n({
            attrs: _objectSpread({
              "data-year": t,
              "data-month": i,
              "data-date": s
            }, a)
          }), this.$cell.adpCell = this;
        }
      }, {
        key: "_getClassName",
        value: function _getClassName() {
          var e;
          var t = new Date(),
            _this$opts = this.opts,
            s = _this$opts.selectOtherMonths,
            a = _this$opts.selectOtherYears,
            _this$dp = this.dp,
            n = _this$dp.minDate,
            r = _this$dp.maxDate,
            o = _this$dp.isDateDisabled,
            _h2 = h(this.date),
            l = _h2.day,
            d = this._isOutOfMinMaxRange(),
            c = o(this.date),
            m = u("air-datepicker-cell", "-".concat(this.singleType, "-"), {
              "-current-": p(t, this.date, this.type),
              "-min-date-": n && p(n, this.date, this.type),
              "-max-date-": r && p(r, this.date, this.type)
            }),
            v = "";
          switch (this.type) {
            case i.days:
              v = u({
                "-weekend-": this.dp.isWeekend(l),
                "-other-month-": this.isOtherMonth,
                "-disabled-": this.isOtherMonth && !s || d || c
              });
              break;
            case i.months:
              v = u({
                "-disabled-": d
              });
              break;
            case i.years:
              v = u({
                "-other-decade-": this.isOtherDecade,
                "-disabled-": d || this.isOtherDecade && !a
              });
          }
          return u(m, v, null === (e = this.customData) || void 0 === e ? void 0 : e.classes).split(" ");
        }
      }, {
        key: "_getHtml",
        value: function _getHtml() {
          var e;
          var _h3 = h(this.date),
            t = _h3.year,
            s = _h3.month,
            a = _h3.date,
            _this$opts2 = this.opts,
            n = _this$opts2.showOtherMonths,
            r = _this$opts2.showOtherYears;
          if (null !== (e = this.customData) && void 0 !== e && e.html) return this.customData.html;
          switch (this.type) {
            case i.days:
              return !n && this.isOtherMonth ? "" : a;
            case i.months:
              return this.dp.locale[this.opts.monthsField][s];
            case i.years:
              return !r && this.isOtherDecade ? "" : t;
          }
        }
      }, {
        key: "_isOutOfMinMaxRange",
        value: function _isOutOfMinMaxRange() {
          var _this$dp2 = this.dp,
            e = _this$dp2.minDate,
            t = _this$dp2.maxDate,
            s = this.type,
            a = this.date,
            _h4 = h(a),
            n = _h4.month,
            r = _h4.year,
            o = _h4.date,
            l = s === i.days,
            d = s === i.years,
            c = !!e && new Date(r, d ? e.getMonth() : n, l ? o : e.getDate()),
            u = !!t && new Date(r, d ? t.getMonth() : n, l ? o : t.getDate());
          return e && t ? v(c, e) || m(u, t) : e ? v(c, e) : t ? m(u, t) : void 0;
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this.unbindDatepickerEvents();
        }
      }, {
        key: "_handleRangeStatus",
        value: function _handleRangeStatus() {
          var _this$$cell$classList;
          var _this$dp3 = this.dp,
            e = _this$dp3.selectedDates,
            t = _this$dp3.focusDate,
            i = _this$dp3.rangeDateTo,
            s = _this$dp3.rangeDateFrom,
            a = e.length;
          if (!a) return;
          var n = s,
            r = i;
          if (1 === a && t) {
            var _i6 = m(t, e[0]);
            n = _i6 ? e[0] : t, r = _i6 ? t : e[0];
          }
          var o = u({
            "-in-range-": n && r && (h = this.date, l = n, d = r, m(h, l) && v(h, d)),
            "-range-from-": n && p(this.date, n, this.type),
            "-range-to-": r && p(this.date, r, this.type)
          });
          var h, l, d;
          this.$cell.classList.remove("-range-from-", "-range-to-", "-in-range-"), o && (_this$$cell$classList = this.$cell.classList).add.apply(_this$$cell$classList, _toConsumableArray(o.split(" ")));
        }
      }, {
        key: "_handleSelectedStatus",
        value: function _handleSelectedStatus() {
          var e = this.dp._checkIfDateIsSelected(this.date, this.type);
          e ? this.select() : !e && this.selected && this.removeSelect();
        }
      }, {
        key: "_handleInitialFocusStatus",
        value: function _handleInitialFocusStatus() {
          p(this.dp.focusDate, this.date, this.type) && this.focus();
        }
      }, {
        key: "_handleClasses",
        value: function _handleClasses() {
          var _this$$cell$classList2;
          this.$cell.setAttribute("class", ""), this._handleInitialFocusStatus(), this.dp.hasSelectedDates && (this._handleSelectedStatus(), this.dp.opts.range && this._handleRangeStatus()), (_this$$cell$classList2 = this.$cell.classList).add.apply(_this$$cell$classList2, _toConsumableArray(this._getClassName()));
        }
      }, {
        key: "isDisabled",
        get: function get() {
          return this.$cell.matches(".-disabled-");
        }
      }, {
        key: "isOtherMonth",
        get: function get() {
          return this.dp.isOtherMonth(this.date);
        }
      }, {
        key: "isOtherDecade",
        get: function get() {
          return this.dp.isOtherDecade(this.date);
        }
      }]);
    }();
    function _(e, t, i) {
      return (t = function (e) {
        var t = function (e, t) {
          if ("object" != _typeof(e) || null === e) return e;
          var i = e[Symbol.toPrimitive];
          if (void 0 !== i) {
            var s = i.call(e, "string");
            if ("object" != _typeof(s)) return s;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return String(e);
        }(e);
        return "symbol" == _typeof(t) ? t : String(t);
      }(t)) in e ? Object.defineProperty(e, t, {
        value: i,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = i, e;
    }
    var M = _defineProperty(_defineProperty(_defineProperty({}, i.days, "<div class=\"air-datepicker-body--day-names\"></div><div class=\"air-datepicker-body--cells -".concat(i.days, "-\"></div>")), i.months, "<div class=\"air-datepicker-body--cells -".concat(i.months, "-\"></div>")), i.years, "<div class=\"air-datepicker-body--cells -".concat(i.years, "-\"></div>"));
    var S = ".air-datepicker-cell";
    var T = /*#__PURE__*/function () {
      function T(e) {
        var _this2 = this;
        _classCallCheck(this, T);
        var t = e.dp,
          s = e.type,
          a = e.opts;
        _(this, "handleClick", function (e) {
          var t = e.target.closest(S).adpCell;
          if (t.isDisabled) return;
          if (!_this2.dp.isMinViewReached) return void _this2.dp.down();
          var i = _this2.dp._checkIfDateIsSelected(t.date, t.type);
          i ? _this2.dp._handleAlreadySelectedDates(i, t.date) : _this2.dp.selectDate(t.date);
        }), _(this, "handleDayNameClick", function (e) {
          var t = e.target.getAttribute("data-day-index");
          _this2.opts.onClickDayName({
            dayIndex: Number(t),
            datepicker: _this2.dp
          });
        }), _(this, "onChangeCurrentView", function (e) {
          e !== _this2.type ? _this2.hide() : (_this2.show(), _this2.render());
        }), _(this, "onMouseOverCell", function (e) {
          var t = y(e.target, S);
          _this2.dp.setFocusDate(!!t && t.adpCell.date);
        }), _(this, "onMouseOutCell", function () {
          _this2.dp.setFocusDate(!1);
        }), _(this, "onClickBody", function (e) {
          var t = _this2.opts.onClickDayName,
            i = e.target;
          i.closest(S) && _this2.handleClick(e), t && i.closest(".air-datepicker-body--day-name") && _this2.handleDayNameClick(e);
        }), _(this, "onMouseDown", function (e) {
          _this2.pressed = !0;
          var t = y(e.target, S),
            i = t && t.adpCell;
          p(i.date, _this2.dp.rangeDateFrom) && (_this2.rangeFromFocused = !0), p(i.date, _this2.dp.rangeDateTo) && (_this2.rangeToFocused = !0);
        }), _(this, "onMouseMove", function (e) {
          if (!_this2.pressed || !_this2.dp.isMinViewReached) return;
          e.preventDefault();
          var t = y(e.target, S),
            i = t && t.adpCell,
            _this2$dp = _this2.dp,
            s = _this2$dp.selectedDates,
            a = _this2$dp.rangeDateTo,
            n = _this2$dp.rangeDateFrom;
          if (!i || i.isDisabled) return;
          var r = i.date;
          if (2 === s.length) {
            if (_this2.rangeFromFocused && !m(r, a)) {
              var _h5 = h(n),
                _e = _h5.hours,
                _t2 = _h5.minutes;
              r.setHours(_e), r.setMinutes(_t2), _this2.dp.rangeDateFrom = r, _this2.dp.replaceDate(n, r);
            }
            if (_this2.rangeToFocused && !v(r, n)) {
              var _h6 = h(a),
                _e2 = _h6.hours,
                _t3 = _h6.minutes;
              r.setHours(_e2), r.setMinutes(_t3), _this2.dp.rangeDateTo = r, _this2.dp.replaceDate(a, r);
            }
          }
        }), _(this, "onMouseUp", function () {
          _this2.pressed = !1, _this2.rangeFromFocused = !1, _this2.rangeToFocused = !1;
        }), _(this, "onChangeViewDate", function (e, t) {
          if (!_this2.isVisible) return;
          var s = c(e),
            a = c(t);
          switch (_this2.dp.currentView) {
            case i.days:
              if (p(e, t, i.months)) return;
              break;
            case i.months:
              if (p(e, t, i.years)) return;
              break;
            case i.years:
              if (s[0] === a[0] && s[1] === a[1]) return;
          }
          _this2.render();
        }), _(this, "render", function () {
          _this2.destroyCells(), _this2._generateCells(), _this2.cells.forEach(function (e) {
            _this2.$cells.appendChild(e.render());
          });
        }), this.dp = t, this.type = s, this.opts = a, this.cells = [], this.$el = "", this.pressed = !1, this.isVisible = !0, this.init();
      }
      return _createClass(T, [{
        key: "init",
        value: function init() {
          this._buildBaseHtml(), this.type === i.days && this.renderDayNames(), this.render(), this._bindEvents(), this._bindDatepickerEvents();
        }
      }, {
        key: "_bindEvents",
        value: function _bindEvents() {
          var _this$opts3 = this.opts,
            e = _this$opts3.range,
            t = _this$opts3.dynamicRange;
          D(this.$el, "mouseover", this.onMouseOverCell), D(this.$el, "mouseout", this.onMouseOutCell), D(this.$el, "click", this.onClickBody), e && t && (D(this.$el, "mousedown", this.onMouseDown), D(this.$el, "mousemove", this.onMouseMove), D(window.document, "mouseup", this.onMouseUp));
        }
      }, {
        key: "_bindDatepickerEvents",
        value: function _bindDatepickerEvents() {
          this.dp.on(i.eventChangeViewDate, this.onChangeViewDate), this.dp.on(i.eventChangeCurrentView, this.onChangeCurrentView);
        }
      }, {
        key: "_buildBaseHtml",
        value: function _buildBaseHtml() {
          this.$el = n({
            className: "air-datepicker-body -".concat(this.type, "-"),
            innerHtml: M[this.type]
          }), this.$names = a(".air-datepicker-body--day-names", this.$el), this.$cells = a(".air-datepicker-body--cells", this.$el);
        }
      }, {
        key: "_getDayNamesHtml",
        value: function _getDayNamesHtml() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.dp.locale.firstDay,
            t = "",
            s = this.dp.isWeekend,
            a = this.opts.onClickDayName,
            n = e,
            r = 0;
          for (; r < 7;) {
            var _e3 = n % 7;
            t += "<div class=\"".concat(u("air-datepicker-body--day-name", _defineProperty(_defineProperty({}, i.cssClassWeekend, s(_e3)), "-clickable-", !!a)), "\" data-day-index='").concat(_e3, "'>").concat(this.dp.locale.daysMin[_e3], "</div>"), r++, n++;
          }
          return t;
        }
      }, {
        key: "renderDayNames",
        value: function renderDayNames() {
          this.$names.innerHTML = this._getDayNamesHtml();
        }
      }, {
        key: "_generateCell",
        value: function _generateCell(e) {
          var t = this.type,
            i = this.dp,
            s = this.opts;
          return new C({
            type: t,
            dp: i,
            opts: s,
            date: e,
            body: this
          });
        }
      }, {
        key: "_generateCells",
        value: function _generateCells() {
          var _this3 = this;
          T.getDatesFunction(this.type)(this.dp, function (e) {
            _this3.cells.push(_this3._generateCell(e));
          });
        }
      }, {
        key: "show",
        value: function show() {
          this.isVisible = !0, this.$el.classList.remove("-hidden-");
        }
      }, {
        key: "hide",
        value: function hide() {
          this.isVisible = !1, this.$el.classList.add("-hidden-");
        }
      }, {
        key: "destroyCells",
        value: function destroyCells() {
          this.cells.forEach(function (e) {
            return e.destroy();
          }), this.cells = [], this.$cells.innerHTML = "";
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this.destroyCells(), this.dp.off(i.eventChangeViewDate, this.onChangeViewDate), this.dp.off(i.eventChangeCurrentView, this.onChangeCurrentView);
        }
      }], [{
        key: "getDaysDates",
        value: function getDaysDates(e, t) {
          var i = e.viewDate,
            s = e.opts.fixedHeight,
            a = e.locale.firstDay,
            n = o(i),
            _h7 = h(i),
            r = _h7.year,
            l = _h7.month,
            d = new Date(r, l, 1),
            c = new Date(r, l, n),
            u = d.getDay() - a,
            p = 6 - c.getDay() + a;
          u = u < 0 ? u + 7 : u, p = p > 6 ? p - 7 : p;
          var m = function (e, t) {
              var _h9 = h(e),
                i = _h9.year,
                s = _h9.month,
                a = _h9.date;
              return new Date(i, s, a - t);
            }(d, u),
            v = n + u + p,
            g = m.getDate(),
            _h8 = h(m),
            D = _h8.year,
            y = _h8.month,
            f = 0;
          s && (v = 42);
          var w = [];
          for (; f < v;) {
            var _e4 = new Date(D, y, g + f);
            t && t(_e4), w.push(_e4), f++;
          }
          return w;
        }
      }, {
        key: "getMonthsDates",
        value: function getMonthsDates(e, t) {
          var i = e.parsedViewDate.year,
            s = 0,
            a = [];
          for (; s < 12;) {
            var _e5 = new Date(i, s);
            a.push(_e5), t && t(_e5), s++;
          }
          return a;
        }
      }, {
        key: "getYearsDates",
        value: function getYearsDates(e, t) {
          var i = c(e.viewDate),
            s = i[0] - 1,
            a = i[1] + 1,
            n = s,
            r = [];
          for (; n <= a;) {
            var _e6 = new Date(n, 0);
            r.push(_e6), t && t(_e6), n++;
          }
          return r;
        }
      }, {
        key: "getDatesFunction",
        value: function getDatesFunction() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : i.days;
          return _defineProperty(_defineProperty(_defineProperty({}, i.days, T.getDaysDates), i.months, T.getMonthsDates), i.years, T.getYearsDates)[e];
        }
      }]);
    }();
    function F(e, t, i) {
      return (t = function (e) {
        var t = function (e, t) {
          if ("object" != _typeof(e) || null === e) return e;
          var i = e[Symbol.toPrimitive];
          if (void 0 !== i) {
            var s = i.call(e, "string");
            if ("object" != _typeof(s)) return s;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return String(e);
        }(e);
        return "symbol" == _typeof(t) ? t : String(t);
      }(t)) in e ? Object.defineProperty(e, t, {
        value: i,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = i, e;
    }
    var V = /*#__PURE__*/function () {
      function V(e) {
        var _this4 = this;
        _classCallCheck(this, V);
        var t = e.dp,
          i = e.opts;
        F(this, "onClickNav", function (e) {
          var t = y(e.target, ".air-datepicker-nav--action");
          if (!t) return;
          var i = t.dataset.action;
          _this4.dp[i]();
        }), F(this, "onChangeViewDate", function () {
          _this4.render(), _this4._resetNavStatus(), _this4.handleNavStatus();
        }), F(this, "onChangeCurrentView", function () {
          _this4.render(), _this4._resetNavStatus(), _this4.handleNavStatus();
        }), F(this, "onClickNavTitle", function () {
          _this4.dp.isFinalView || _this4.dp.up();
        }), F(this, "update", function () {
          var _this4$opts = _this4.opts,
            e = _this4$opts.prevHtml,
            t = _this4$opts.nextHtml;
          _this4.$prev.innerHTML = e, _this4.$next.innerHTML = t, _this4._resetNavStatus(), _this4.render(), _this4.handleNavStatus();
        }), F(this, "renderDelay", function () {
          setTimeout(_this4.render);
        }), F(this, "render", function () {
          _this4.$title.innerHTML = _this4._getTitle(), function (e, t) {
            for (var _i7 in t) t[_i7] ? e.classList.add(_i7) : e.classList.remove(_i7);
          }(_this4.$title, {
            "-disabled-": _this4.dp.isFinalView
          });
        }), this.dp = t, this.opts = i, this.init();
      }
      return _createClass(V, [{
        key: "init",
        value: function init() {
          this._createElement(), this._buildBaseHtml(), this._defineDOM(), this.render(), this.handleNavStatus(), this._bindEvents(), this._bindDatepickerEvents();
        }
      }, {
        key: "_defineDOM",
        value: function _defineDOM() {
          this.$title = a(".air-datepicker-nav--title", this.$el), this.$prev = a('[data-action="prev"]', this.$el), this.$next = a('[data-action="next"]', this.$el);
        }
      }, {
        key: "_bindEvents",
        value: function _bindEvents() {
          this.$el.addEventListener("click", this.onClickNav), this.$title.addEventListener("click", this.onClickNavTitle);
        }
      }, {
        key: "_bindDatepickerEvents",
        value: function _bindDatepickerEvents() {
          this.dp.on(i.eventChangeViewDate, this.onChangeViewDate), this.dp.on(i.eventChangeCurrentView, this.onChangeCurrentView), this.isNavIsFunction && (this.dp.on(i.eventChangeSelectedDate, this.renderDelay), this.dp.opts.timepicker && this.dp.on(i.eventChangeTime, this.render));
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this.dp.off(i.eventChangeViewDate, this.onChangeViewDate), this.dp.off(i.eventChangeCurrentView, this.onChangeCurrentView), this.isNavIsFunction && (this.dp.off(i.eventChangeSelectedDate, this.renderDelay), this.dp.opts.timepicker && this.dp.off(i.eventChangeTime, this.render));
        }
      }, {
        key: "_createElement",
        value: function _createElement() {
          this.$el = n({
            tagName: "nav",
            className: "air-datepicker-nav"
          });
        }
      }, {
        key: "_getTitle",
        value: function _getTitle() {
          var e = this.dp,
            t = this.opts,
            i = t.navTitles[e.currentView];
          return "function" == typeof i ? i(e) : e.formatDate(e.viewDate, i);
        }
      }, {
        key: "handleNavStatus",
        value: function handleNavStatus() {
          var e = this.opts.disableNavWhenOutOfRange,
            _this$dp4 = this.dp,
            t = _this$dp4.minDate,
            s = _this$dp4.maxDate;
          if (!t && !s || !e) return;
          var _this$dp$parsedViewDa = this.dp.parsedViewDate,
            a = _this$dp$parsedViewDa.year,
            n = _this$dp$parsedViewDa.month,
            r = !!t && h(t),
            o = !!s && h(s);
          switch (this.dp.currentView) {
            case i.days:
              t && r.month >= n && r.year >= a && this._disableNav("prev"), s && o.month <= n && o.year <= a && this._disableNav("next");
              break;
            case i.months:
              t && r.year >= a && this._disableNav("prev"), s && o.year <= a && this._disableNav("next");
              break;
            case i.years:
              {
                var _e7 = c(this.dp.viewDate);
                t && r.year >= _e7[0] && this._disableNav("prev"), s && o.year <= _e7[1] && this._disableNav("next");
                break;
              }
          }
        }
      }, {
        key: "_disableNav",
        value: function _disableNav(e) {
          a('[data-action="' + e + '"]', this.$el).classList.add("-disabled-");
        }
      }, {
        key: "_resetNavStatus",
        value: function _resetNavStatus() {
          !function (e) {
            var _e$classList2;
            for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++) i[s - 1] = arguments[s];
            e.length ? e.forEach(function (e) {
              var _e$classList;
              (_e$classList = e.classList).remove.apply(_e$classList, i);
            }) : (_e$classList2 = e.classList).remove.apply(_e$classList2, i);
          }(this.$el.querySelectorAll(".air-datepicker-nav--action"), "-disabled-");
        }
      }, {
        key: "_buildBaseHtml",
        value: function _buildBaseHtml() {
          var _this$opts4 = this.opts,
            e = _this$opts4.prevHtml,
            t = _this$opts4.nextHtml;
          this.$el.innerHTML = "<div class=\"air-datepicker-nav--action\" data-action=\"prev\">".concat(e, "</div><div class=\"air-datepicker-nav--title\"></div><div class=\"air-datepicker-nav--action\" data-action=\"next\">").concat(t, "</div>");
        }
      }, {
        key: "isNavIsFunction",
        get: function get() {
          var e = this.opts.navTitles;
          return Object.keys(e).find(function (t) {
            return "function" == typeof e[t];
          });
        }
      }]);
    }();
    var x = {
      today: {
        content: function content(e) {
          return e.locale.today;
        },
        onClick: function onClick(e) {
          return e.setViewDate(new Date());
        }
      },
      clear: {
        content: function content(e) {
          return e.locale.clear;
        },
        onClick: function onClick(e) {
          return e.clear();
        }
      }
    };
    var H = /*#__PURE__*/function () {
      function H(e) {
        _classCallCheck(this, H);
        var t = e.dp,
          i = e.opts;
        this.dp = t, this.opts = i, this.init();
      }
      return _createClass(H, [{
        key: "init",
        value: function init() {
          this.createElement(), this.render();
        }
      }, {
        key: "createElement",
        value: function createElement() {
          this.$el = n({
            className: "air-datepicker-buttons"
          });
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this.$el.parentNode.removeChild(this.$el);
        }
      }, {
        key: "clearHtml",
        value: function clearHtml() {
          return this.$el.innerHTML = "", this;
        }
      }, {
        key: "generateButtons",
        value: function generateButtons() {
          var _this5 = this;
          var e = this.opts.buttons;
          Array.isArray(e) || (e = [e]), e.forEach(function (e) {
            var t = e;
            "string" == typeof e && x[e] && (t = x[e]);
            var i = _this5.createButton(t);
            t.onClick && _this5.attachEventToButton(i, t.onClick), _this5.$el.appendChild(i);
          });
        }
      }, {
        key: "attachEventToButton",
        value: function attachEventToButton(e, t) {
          var _this6 = this;
          e.addEventListener("click", function () {
            t(_this6.dp);
          });
        }
      }, {
        key: "createButton",
        value: function createButton(e) {
          var t = e.content,
            i = e.className,
            _e$tagName = e.tagName,
            s = _e$tagName === void 0 ? "button" : _e$tagName,
            _e$attrs = e.attrs,
            a = _e$attrs === void 0 ? {} : _e$attrs;
          return n({
            tagName: s,
            innerHtml: "<span tabindex='-1'>".concat("function" == typeof t ? t(this.dp) : t, "</span>"),
            className: u("air-datepicker-button", i),
            attrs: a
          });
        }
      }, {
        key: "render",
        value: function render() {
          this.generateButtons();
        }
      }]);
    }();
    function E(e, t, i) {
      return (t = function (e) {
        var t = function (e, t) {
          if ("object" != _typeof(e) || null === e) return e;
          var i = e[Symbol.toPrimitive];
          if (void 0 !== i) {
            var s = i.call(e, "string");
            if ("object" != _typeof(s)) return s;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return String(e);
        }(e);
        return "symbol" == _typeof(t) ? t : String(t);
      }(t)) in e ? Object.defineProperty(e, t, {
        value: i,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = i, e;
    }
    var L = /*#__PURE__*/function () {
      function L() {
        var _this7 = this;
        _classCallCheck(this, L);
        var _ref3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          e = _ref3.opts,
          t = _ref3.dp;
        E(this, "toggleTimepickerIsActive", function (e) {
          _this7.dp.timepickerIsActive = e;
        }), E(this, "onChangeSelectedDate", function (e) {
          var t = e.date,
            _e$updateTime = e.updateTime,
            i = _e$updateTime === void 0 ? !1 : _e$updateTime;
          t && (_this7.setMinMaxTime(t), _this7.setCurrentTime(!!i && t), _this7.addTimeToDate(t));
        }), E(this, "onChangeLastSelectedDate", function (e) {
          e && (_this7.setTime(e), _this7.render());
        }), E(this, "onChangeInputRange", function (e) {
          var t = e.target;
          _this7[t.getAttribute("name")] = t.value, _this7.updateText(), _this7.dp.trigger(i.eventChangeTime, {
            hours: _this7.hours,
            minutes: _this7.minutes
          });
        }), E(this, "onMouseEnterLeave", function (e) {
          var t = e.target.getAttribute("name"),
            i = _this7.$minutesText;
          "hours" === t && (i = _this7.$hoursText), i.classList.toggle("-focus-");
        }), E(this, "onFocus", function () {
          _this7.toggleTimepickerIsActive(!0);
        }), E(this, "onBlur", function () {
          _this7.toggleTimepickerIsActive(!1);
        }), this.opts = e, this.dp = t;
        var s = this.dp.locale.timeFormat;
        s && (s.match(k("h")) || s.match(k("hh"))) && (this.ampm = !0), this.init();
      }
      return _createClass(L, [{
        key: "init",
        value: function init() {
          this.setTime(this.dp.lastSelectedDate || this.dp.viewDate), this.createElement(), this.buildHtml(), this.defineDOM(), this.render(), this.bindDatepickerEvents(), this.bindDOMEvents();
        }
      }, {
        key: "bindDatepickerEvents",
        value: function bindDatepickerEvents() {
          this.dp.on(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.on(i.eventChangeLastSelectedDate, this.onChangeLastSelectedDate);
        }
      }, {
        key: "bindDOMEvents",
        value: function bindDOMEvents() {
          var e = "input";
          navigator.userAgent.match(/trident/gi) && (e = "change"), D(this.$ranges, e, this.onChangeInputRange), D(this.$ranges, "mouseenter", this.onMouseEnterLeave), D(this.$ranges, "mouseleave", this.onMouseEnterLeave), D(this.$ranges, "focus", this.onFocus), D(this.$ranges, "mousedown", this.onFocus), D(this.$ranges, "blur", this.onBlur);
        }
      }, {
        key: "createElement",
        value: function createElement() {
          this.$el = n({
            className: u("air-datepicker-time", {
              "-am-pm-": this.dp.ampm
            })
          });
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this.dp.off(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.off(i.eventChangeLastSelectedDate, this.onChangeLastSelectedDate), this.$el.parentNode.removeChild(this.$el);
        }
      }, {
        key: "buildHtml",
        value: function buildHtml() {
          var e = this.ampm,
            t = this.hours,
            i = this.displayHours,
            s = this.minutes,
            a = this.minHours,
            n = this.minMinutes,
            r = this.maxHours,
            o = this.maxMinutes,
            h = this.dayPeriod,
            _this$opts5 = this.opts,
            l = _this$opts5.hoursStep,
            c = _this$opts5.minutesStep;
          this.$el.innerHTML = "<div class=\"air-datepicker-time--current\">   <span class=\"air-datepicker-time--current-hours\">".concat(d(i), "</span>   <span class=\"air-datepicker-time--current-colon\">:</span>   <span class=\"air-datepicker-time--current-minutes\">").concat(d(s), "</span>   ") + (e ? "<span class='air-datepicker-time--current-ampm'>".concat(h, "</span>") : "") + '</div><div class="air-datepicker-time--sliders">   <div class="air-datepicker-time--row">' + "      <input type=\"range\" name=\"hours\" value=\"".concat(t, "\" min=\"").concat(a, "\" max=\"").concat(r, "\" step=\"").concat(l, "\"/>   </div>   <div class=\"air-datepicker-time--row\">") + "      <input type=\"range\" name=\"minutes\" value=\"".concat(s, "\" min=\"").concat(n, "\" max=\"").concat(o, "\" step=\"").concat(c, "\"/>   </div></div>");
        }
      }, {
        key: "defineDOM",
        value: function defineDOM() {
          var _this8 = this;
          var e = function e(_e8) {
            return a(_e8, _this8.$el);
          };
          this.$ranges = this.$el.querySelectorAll('[type="range"]'), this.$hours = e('[name="hours"]'), this.$minutes = e('[name="minutes"]'), this.$hoursText = e(".air-datepicker-time--current-hours"), this.$minutesText = e(".air-datepicker-time--current-minutes"), this.$ampm = e(".air-datepicker-time--current-ampm");
        }
      }, {
        key: "setTime",
        value: function setTime(e) {
          this.setMinMaxTime(e), this.setCurrentTime(e);
        }
      }, {
        key: "addTimeToDate",
        value: function addTimeToDate(e) {
          e && (e.setHours(this.hours), e.setMinutes(this.minutes));
        }
      }, {
        key: "setMinMaxTime",
        value: function setMinMaxTime(e) {
          if (this.setMinMaxTimeFromOptions(), e) {
            var _this$dp5 = this.dp,
              _t4 = _this$dp5.minDate,
              _i8 = _this$dp5.maxDate;
            _t4 && p(e, _t4) && this.setMinTimeFromMinDate(_t4), _i8 && p(e, _i8) && this.setMaxTimeFromMaxDate(_i8);
          }
        }
      }, {
        key: "setCurrentTime",
        value: function setCurrentTime(e) {
          var _ref4 = e ? h(e) : this,
            t = _ref4.hours,
            i = _ref4.minutes;
          this.hours = f(t, this.minHours, this.maxHours), this.minutes = f(i, this.minMinutes, this.maxMinutes);
        }
      }, {
        key: "setMinMaxTimeFromOptions",
        value: function setMinMaxTimeFromOptions() {
          var _this$opts6 = this.opts,
            e = _this$opts6.minHours,
            t = _this$opts6.minMinutes,
            i = _this$opts6.maxHours,
            s = _this$opts6.maxMinutes;
          this.minHours = f(e, 0, 23), this.minMinutes = f(t, 0, 59), this.maxHours = f(i, 0, 23), this.maxMinutes = f(s, 0, 59);
        }
      }, {
        key: "setMinTimeFromMinDate",
        value: function setMinTimeFromMinDate(e) {
          var t = this.dp.lastSelectedDate;
          this.minHours = e.getHours(), t && t.getHours() > e.getHours() ? this.minMinutes = this.opts.minMinutes : this.minMinutes = e.getMinutes();
        }
      }, {
        key: "setMaxTimeFromMaxDate",
        value: function setMaxTimeFromMaxDate(e) {
          var t = this.dp.lastSelectedDate;
          this.maxHours = e.getHours(), t && t.getHours() < e.getHours() ? this.maxMinutes = this.opts.maxMinutes : this.maxMinutes = e.getMinutes();
        }
      }, {
        key: "updateSliders",
        value: function updateSliders() {
          r(this.$hours, {
            min: this.minHours,
            max: this.maxHours
          }).value = this.hours, r(this.$minutes, {
            min: this.minMinutes,
            max: this.maxMinutes
          }).value = this.minutes;
        }
      }, {
        key: "updateText",
        value: function updateText() {
          this.$hoursText.innerHTML = d(this.displayHours), this.$minutesText.innerHTML = d(this.minutes), this.ampm && (this.$ampm.innerHTML = this.dayPeriod);
        }
      }, {
        key: "hours",
        get: function get() {
          return this._hours;
        },
        set: function set(e) {
          this._hours = e;
          var _l2 = l(e),
            t = _l2.hours,
            i = _l2.dayPeriod;
          this.displayHours = this.ampm ? t : e, this.dayPeriod = i;
        }
      }, {
        key: "render",
        value: function render() {
          this.updateSliders(), this.updateText();
        }
      }]);
    }();
    function O(e, t, i) {
      return (t = function (e) {
        var t = function (e, t) {
          if ("object" != _typeof(e) || null === e) return e;
          var i = e[Symbol.toPrimitive];
          if (void 0 !== i) {
            var s = i.call(e, "string");
            if ("object" != _typeof(s)) return s;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return String(e);
        }(e);
        return "symbol" == _typeof(t) ? t : String(t);
      }(t)) in e ? Object.defineProperty(e, t, {
        value: i,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = i, e;
    }
    var A = /*#__PURE__*/function () {
      function A(e) {
        var _this9 = this;
        _classCallCheck(this, A);
        var t = e.dp,
          i = e.opts;
        O(this, "pressedKeys", new Set()), O(this, "hotKeys", new Map([[[["Control", "ArrowRight"], ["Control", "ArrowUp"]], function (e) {
          return e.month++;
        }], [[["Control", "ArrowLeft"], ["Control", "ArrowDown"]], function (e) {
          return e.month--;
        }], [[["Shift", "ArrowRight"], ["Shift", "ArrowUp"]], function (e) {
          return e.year++;
        }], [[["Shift", "ArrowLeft"], ["Shift", "ArrowDown"]], function (e) {
          return e.year--;
        }], [[["Alt", "ArrowRight"], ["Alt", "ArrowUp"]], function (e) {
          return e.year += 10;
        }], [[["Alt", "ArrowLeft"], ["Alt", "ArrowDown"]], function (e) {
          return e.year -= 10;
        }], [["Control", "Shift", "ArrowUp"], function (e, t) {
          return t.up();
        }]])), O(this, "handleHotKey", function (e) {
          var t = _this9.hotKeys.get(e),
            i = h(_this9.getInitialFocusDate());
          t(i, _this9.dp);
          var s = i.year,
            a = i.month,
            n = i.date,
            r = o(new Date(s, a));
          r < n && (n = r);
          var l = _this9.dp.getClampedDate(new Date(s, a, n));
          _this9.dp.setFocusDate(l, {
            viewDateTransition: !0
          });
        }), O(this, "isHotKeyPressed", function () {
          var e = !1,
            t = _this9.pressedKeys.size,
            i = function i(e) {
              return _this9.pressedKeys.has(e);
            };
          var _iterator = _createForOfIteratorHelper(_this9.hotKeys),
            _step;
          try {
            var _loop = function _loop() {
                var _step$value = _slicedToArray(_step.value, 1),
                  s = _step$value[0];
                if (e) return 0; // break
                if (Array.isArray(s[0])) s.forEach(function (a) {
                  e || t !== a.length || (e = a.every(i) && s);
                });else {
                  if (t !== s.length) return 1; // continue
                  e = s.every(i) && s;
                }
              },
              _ret;
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              _ret = _loop();
              if (_ret === 0) break;
              if (_ret === 1) continue;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          return e;
        }), O(this, "isArrow", function (e) {
          return e >= 37 && e <= 40;
        }), O(this, "onKeyDown", function (e) {
          var t = e.key,
            i = e.which,
            s = _this9.dp,
            a = _this9.dp.focusDate,
            n = _this9.opts;
          _this9.registerKey(t);
          var r = _this9.isHotKeyPressed();
          if (r) return e.preventDefault(), void _this9.handleHotKey(r);
          if (_this9.isArrow(i)) return e.preventDefault(), void _this9.focusNextCell(t);
          if ("Enter" === t) {
            if (s.currentView !== n.minView) return void s.down();
            if (a) {
              var _e9 = s._checkIfDateIsSelected(a);
              return void (_e9 ? s._handleAlreadySelectedDates(_e9, a) : s.selectDate(a));
            }
          }
          "Escape" === t && _this9.dp.hide();
        }), O(this, "onKeyUp", function (e) {
          _this9.removeKey(e.key);
        }), this.dp = t, this.opts = i, this.init();
      }
      return _createClass(A, [{
        key: "init",
        value: function init() {
          this.bindKeyboardEvents();
        }
      }, {
        key: "bindKeyboardEvents",
        value: function bindKeyboardEvents() {
          var e = this.dp.$el;
          e.addEventListener("keydown", this.onKeyDown), e.addEventListener("keyup", this.onKeyUp);
        }
      }, {
        key: "destroy",
        value: function destroy() {
          var e = this.dp.$el;
          e.removeEventListener("keydown", this.onKeyDown), e.removeEventListener("keyup", this.onKeyUp), this.hotKeys = null, this.pressedKeys = null;
        }
      }, {
        key: "getInitialFocusDate",
        value: function getInitialFocusDate() {
          var _this$dp6 = this.dp,
            e = _this$dp6.focusDate,
            t = _this$dp6.currentView,
            s = _this$dp6.selectedDates,
            _this$dp6$parsedViewD = _this$dp6.parsedViewDate,
            a = _this$dp6$parsedViewD.year,
            n = _this$dp6$parsedViewD.month,
            r = e || s[s.length - 1];
          if (!r) switch (t) {
            case i.days:
              r = new Date(a, n, new Date().getDate());
              break;
            case i.months:
              r = new Date(a, n, 1);
              break;
            case i.years:
              r = new Date(a, 0, 1);
          }
          return r;
        }
      }, {
        key: "focusNextCell",
        value: function focusNextCell(e) {
          var t = this.getInitialFocusDate(),
            s = this.dp.currentView,
            a = i.days,
            n = i.months,
            r = i.years,
            o = h(t),
            l = o.year,
            d = o.month,
            c = o.date;
          switch (e) {
            case "ArrowLeft":
              s === a && (c -= 1), s === n && (d -= 1), s === r && (l -= 1);
              break;
            case "ArrowUp":
              s === a && (c -= 7), s === n && (d -= 3), s === r && (l -= 4);
              break;
            case "ArrowRight":
              s === a && (c += 1), s === n && (d += 1), s === r && (l += 1);
              break;
            case "ArrowDown":
              s === a && (c += 7), s === n && (d += 3), s === r && (l += 4);
          }
          var u = this.dp.getClampedDate(new Date(l, d, c));
          this.dp.setFocusDate(u, {
            viewDateTransition: !0
          });
        }
      }, {
        key: "registerKey",
        value: function registerKey(e) {
          this.pressedKeys.add(e);
        }
      }, {
        key: "removeKey",
        value: function removeKey(e) {
          this.pressedKeys["delete"](e);
        }
      }]);
    }();
    var N = {
      on: function on(e, t) {
        this.__events || (this.__events = {}), this.__events[e] ? this.__events[e].push(t) : this.__events[e] = [t];
      },
      off: function off(e, t) {
        this.__events && this.__events[e] && (this.__events[e] = this.__events[e].filter(function (e) {
          return e !== t;
        }));
      },
      removeAllEvents: function removeAllEvents() {
        this.__events = {};
      },
      trigger: function trigger(e) {
        for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++) i[s - 1] = arguments[s];
        this.__events && this.__events[e] && this.__events[e].forEach(function (e) {
          e.apply(void 0, i);
        });
      }
    };
    function I(e, t, i) {
      return (t = function (e) {
        var t = function (e, t) {
          if ("object" != _typeof(e) || null === e) return e;
          var i = e[Symbol.toPrimitive];
          if (void 0 !== i) {
            var s = i.call(e, "string");
            if ("object" != _typeof(s)) return s;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return String(e);
        }(e);
        return "symbol" == _typeof(t) ? t : String(t);
      }(t)) in e ? Object.defineProperty(e, t, {
        value: i,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = i, e;
    }
    var P = "",
      j = "",
      B = !1;
    var R = /*#__PURE__*/function () {
      function R(e, t) {
        var _this10 = this;
        _classCallCheck(this, R);
        var r = this;
        if (I(this, "viewIndexes", [i.days, i.months, i.years]), I(this, "next", function () {
          var _this10$parsedViewDat = _this10.parsedViewDate,
            e = _this10$parsedViewDat.year,
            t = _this10$parsedViewDat.month;
          switch (_this10.currentView) {
            case i.days:
              _this10.setViewDate(new Date(e, t + 1, 1));
              break;
            case i.months:
              _this10.setViewDate(new Date(e + 1, t, 1));
              break;
            case i.years:
              _this10.setViewDate(new Date(e + 10, 0, 1));
          }
        }), I(this, "prev", function () {
          var _this10$parsedViewDat2 = _this10.parsedViewDate,
            e = _this10$parsedViewDat2.year,
            t = _this10$parsedViewDat2.month;
          switch (_this10.currentView) {
            case i.days:
              _this10.setViewDate(new Date(e, t - 1, 1));
              break;
            case i.months:
              _this10.setViewDate(new Date(e - 1, t, 1));
              break;
            case i.years:
              _this10.setViewDate(new Date(e - 10, 0, 1));
          }
        }), I(this, "_finishHide", function () {
          _this10.hideAnimation = !1, _this10._destroyComponents(), _this10.$container.removeChild(_this10.$datepicker);
        }), I(this, "setPosition", function (e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          if ("function" == typeof (e = e || r.opts.position)) return void (r.customHide = e({
            $datepicker: r.$datepicker,
            $target: r.$el,
            $pointer: r.$pointer,
            isViewChange: t,
            done: r._finishHide
          }));
          var i,
            s,
            a = r.opts.isMobile,
            n = r.$el.getBoundingClientRect(),
            o = r.$el.getBoundingClientRect(),
            h = r.$datepicker.offsetParent,
            l = r.$el.offsetParent,
            d = r.$datepicker.getBoundingClientRect(),
            c = e.split(" "),
            u = window.scrollY,
            p = window.scrollX,
            m = r.opts.offset,
            v = c[0],
            g = c[1];
          if (a) r.$datepicker.style.cssText = "left: 50%; top: 50%";else {
            if (h === l && h !== document.body && (o = {
              top: r.$el.offsetTop,
              left: r.$el.offsetLeft,
              width: n.width,
              height: r.$el.offsetHeight
            }, u = 0, p = 0), h !== l && h !== document.body) {
              var _e10 = h.getBoundingClientRect();
              o = {
                top: n.top - _e10.top,
                left: n.left - _e10.left,
                width: n.width,
                height: n.height
              }, u = 0, p = 0;
            }
            switch (v) {
              case "top":
                i = o.top - d.height - m;
                break;
              case "right":
                s = o.left + o.width + m;
                break;
              case "bottom":
                i = o.top + o.height + m;
                break;
              case "left":
                s = o.left - d.width - m;
            }
            switch (g) {
              case "top":
                i = o.top;
                break;
              case "right":
                s = o.left + o.width - d.width;
                break;
              case "bottom":
                i = o.top + o.height - d.height;
                break;
              case "left":
                s = o.left;
                break;
              case "center":
                /left|right/.test(v) ? i = o.top + o.height / 2 - d.height / 2 : s = o.left + o.width / 2 - d.width / 2;
            }
            r.$datepicker.style.cssText = "left: ".concat(s + p, "px; top: ").concat(i + u, "px");
          }
        }), I(this, "_setInputValue", function () {
          var e = _this10.opts,
            t = _this10.$altField,
            i = _this10.locale.dateFormat,
            s = e.altFieldDateFormat,
            a = e.altField;
          a && t && (t.value = _this10._getInputValue(s)), _this10.$el.value = _this10._getInputValue(i);
        }), I(this, "_getInputValue", function (e) {
          var t = _this10.selectedDates,
            i = _this10.opts,
            s = i.multipleDates,
            a = i.multipleDatesSeparator;
          if (!t.length) return "";
          var n = "function" == typeof e,
            r = n ? e(s ? t : t[0]) : t.map(function (t) {
              return _this10.formatDate(t, e);
            });
          return r = n ? r : r.join(a), r;
        }), I(this, "_checkIfDateIsSelected", function (e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.days,
            s = !1;
          return r.selectedDates.some(function (i) {
            var a = p(e, i, t);
            return s = a && i, a;
          }), s;
        }), I(this, "_scheduleCallAfterTransition", function (e) {
          _this10._cancelScheduledCall(), e && e(!1), _this10._onTransitionEnd = function () {
            e && e(!0);
          }, _this10.$datepicker.addEventListener("transitionend", _this10._onTransitionEnd, {
            once: !0
          });
        }), I(this, "_cancelScheduledCall", function () {
          _this10.$datepicker.removeEventListener("transitionend", _this10._onTransitionEnd);
        }), I(this, "setViewDate", function (e) {
          if (!((e = b(e)) instanceof Date)) return;
          if (p(e, _this10.viewDate)) return;
          var t = _this10.viewDate;
          _this10.viewDate = e;
          var s = _this10.opts.onChangeViewDate;
          if (s) {
            var _this10$parsedViewDat3 = _this10.parsedViewDate,
              _e11 = _this10$parsedViewDat3.month,
              _t5 = _this10$parsedViewDat3.year;
            s({
              month: _e11,
              year: _t5,
              decade: _this10.curDecade
            });
          }
          _this10.trigger(i.eventChangeViewDate, e, t);
        }), I(this, "setFocusDate", function (e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          (!e || (e = b(e)) instanceof Date) && (r.focusDate = e, r.trigger(i.eventChangeFocusDate, e, t));
        }), I(this, "setCurrentView", function (e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if (r.viewIndexes.includes(e)) {
            if (r.currentView = e, r.elIsInput && r.visible && r.setPosition(void 0, !0), r.trigger(i.eventChangeCurrentView, e), !r.views[e]) {
              var _t6 = r.views[e] = new T({
                dp: r,
                opts: r.opts,
                type: e
              });
              r.shouldUpdateDOM && r.$content.appendChild(_t6.$el);
            }
            r.opts.onChangeView && !t.silent && r.opts.onChangeView(e);
          }
        }), I(this, "_updateLastSelectedDate", function (e) {
          _this10.lastSelectedDate = e, _this10.trigger(i.eventChangeLastSelectedDate, e);
        }), I(this, "destroy", function () {
          var _this10$opts = _this10.opts,
            e = _this10$opts.showEvent,
            t = _this10$opts.isMobile,
            i = _this10.$datepicker.parentNode;
          i && i.removeChild(_this10.$datepicker), _this10.$el.removeEventListener(e, _this10._onFocus), _this10.$el.removeEventListener("blur", _this10._onBlur), window.removeEventListener("resize", _this10._onResize), t && _this10._removeMobileAttributes(), _this10.keyboardNav && _this10.keyboardNav.destroy(), _this10.views = null, _this10.nav = null, _this10.$datepicker = null, _this10.opts = null, _this10.$customContainer = null, _this10.viewDate = null, _this10.focusDate = null, _this10.selectedDates = null, _this10.rangeDateFrom = null, _this10.rangeDateTo = null;
        }), I(this, "update", function () {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
            s = w({}, r.opts),
            a = t.silent;
          w(r.opts, e);
          var _r$opts = r.opts,
            n = _r$opts.timepicker,
            o = _r$opts.buttons,
            h = _r$opts.range,
            l = _r$opts.selectedDates,
            d = _r$opts.isMobile,
            c = r.visible || r.treatAsInline;
          r._createMinMaxDates(), r._limitViewDateByMaxMinDates(), r._handleLocale(), l && (r.selectedDates = [], r.selectDate(l, {
            silent: a
          })), e.view && r.setCurrentView(e.view, {
            silent: a
          }), r._setInputValue(), s.range && !h ? (r.rangeDateTo = !1, r.rangeDateFrom = !1) : !s.range && h && r.selectedDates.length && (r.rangeDateFrom = r.selectedDates[0], r.rangeDateTo = r.selectedDates[1]), s.timepicker && !n ? (c && r.timepicker.destroy(), r.timepicker = !1, r.$timepicker.parentNode.removeChild(r.$timepicker)) : !s.timepicker && n && r._addTimepicker(), !s.buttons && o ? r._addButtons() : s.buttons && !o ? (r.buttons.destroy(), r.$buttons.parentNode.removeChild(r.$buttons)) : c && s.buttons && o && r.buttons.clearHtml().render(), !s.isMobile && d ? (r.treatAsInline || j || r._createMobileOverlay(), r._addMobileAttributes(), r.visible && r._showMobileOverlay()) : s.isMobile && !d && (r._removeMobileAttributes(), r.visible && (j.classList.remove("-active-"), "function" != typeof r.opts.position && r.setPosition())), c && (r.nav.update(), r.views[r.currentView].render(), r.currentView === i.days && r.views[r.currentView].renderDayNames());
        }), I(this, "disableDate", function (e, t) {
          (Array.isArray(e) ? e : [e]).forEach(function (e) {
            var i = b(e);
            if (!i) return;
            var s = t ? "delete" : "add";
            _this10.disabledDates[s](_this10.formatDate(i, "yyyy-MM-dd"));
            var a = _this10.getCell(i, _this10.currentViewSingular);
            a && a.adpCell.render();
          }, []);
        }), I(this, "enableDate", function (e) {
          _this10.disableDate(e, !0);
        }), I(this, "isDateDisabled", function (e) {
          var t = b(e);
          return _this10.disabledDates.has(_this10.formatDate(t, "yyyy-MM-dd"));
        }), I(this, "isOtherMonth", function (e) {
          var _h10 = h(e),
            t = _h10.month;
          return t !== _this10.parsedViewDate.month;
        }), I(this, "isOtherYear", function (e) {
          var _h11 = h(e),
            t = _h11.year;
          return t !== _this10.parsedViewDate.year;
        }), I(this, "isOtherDecade", function (e) {
          var _h12 = h(e),
            t = _h12.year,
            _c = c(_this10.viewDate),
            _c2 = _slicedToArray(_c, 2),
            i = _c2[0],
            s = _c2[1];
          return t < i || t > s;
        }), I(this, "_onChangeSelectedDate", function (e) {
          var t = e.silent;
          setTimeout(function () {
            _this10._setInputValue(), _this10.opts.onSelect && !t && _this10._triggerOnSelect();
          });
        }), I(this, "_onChangeFocusedDate", function (e) {
          var _ref5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
            t = _ref5.viewDateTransition;
          if (!e) return;
          var i = !1;
          t && (i = r.isOtherMonth(e) || r.isOtherYear(e) || r.isOtherDecade(e)), i && r.setViewDate(e), r.opts.onFocus && r.opts.onFocus({
            datepicker: r,
            date: e
          });
        }), I(this, "_onChangeTime", function (e) {
          var t = e.hours,
            i = e.minutes,
            s = new Date(),
            a = _this10.lastSelectedDate,
            n = _this10.opts.onSelect,
            r = a;
          a || (r = s);
          var o = _this10.getCell(r, _this10.currentViewSingular),
            h = o && o.adpCell;
          h && h.isDisabled || (r.setHours(t), r.setMinutes(i), a ? (_this10._setInputValue(), n && _this10._triggerOnSelect()) : _this10.selectDate(r));
        }), I(this, "_onFocus", function (e) {
          _this10.visible || _this10.show();
        }), I(this, "_onBlur", function (e) {
          _this10.inFocus || !_this10.visible || _this10.opts.isMobile || _this10.hide();
        }), I(this, "_onMouseDown", function (e) {
          _this10.inFocus = !0;
        }), I(this, "_onMouseUp", function (e) {
          _this10.inFocus = !1, _this10.$el.focus();
        }), I(this, "_onResize", function () {
          _this10.visible && "function" != typeof _this10.opts.position && _this10.setPosition();
        }), I(this, "_onClickOverlay", function () {
          _this10.visible && _this10.hide();
        }), I(this, "getViewDates", function () {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : i.days;
          return T.getDatesFunction(e)(r);
        }), I(this, "isWeekend", function (e) {
          return _this10.opts.weekends.includes(e);
        }), I(this, "getClampedDate", function (e) {
          var t = _this10.minDate,
            i = _this10.maxDate,
            s = e;
          return i && m(e, i) ? s = i : t && v(e, t) && (s = t), s;
        }), this.$el = a(e), !this.$el) return;
        this.$datepicker = n({
          className: "air-datepicker"
        }), this.opts = w({}, s, t), this.$customContainer = !!this.opts.container && a(this.opts.container), this.$altField = a(this.opts.altField || !1);
        var _this$opts7 = this.opts,
          o = _this$opts7.view,
          l = _this$opts7.startDate;
        l || (this.opts.startDate = new Date()), "INPUT" === this.$el.nodeName && (this.elIsInput = !0), this.inited = !1, this.visible = !1, this.viewDate = b(this.opts.startDate), this.focusDate = !1, this.initialReadonly = this.$el.getAttribute("readonly"), this.customHide = !1, this.currentView = o, this.selectedDates = [], this.disabledDates = new Set(), this.views = {}, this.keys = [], this.rangeDateFrom = "", this.rangeDateTo = "", this.timepickerIsActive = !1, this.treatAsInline = this.opts.inline || !this.elIsInput, this.init();
      }
      return _createClass(R, [{
        key: "init",
        value: function init() {
          var e = this.opts,
            t = this.treatAsInline,
            _this$opts8 = this.opts,
            i = _this$opts8.inline,
            s = _this$opts8.isMobile,
            n = _this$opts8.selectedDates,
            r = _this$opts8.keyboardNav,
            o = _this$opts8.onlyTimepicker,
            h = a("body");
          (!B || B && P && !h.contains(P)) && !i && this.elIsInput && !this.$customContainer && R.buildGlobalContainer(R.defaultGlobalContainerId), !s || j || t || this._createMobileOverlay(), this._handleLocale(), this._bindSubEvents(), this._createMinMaxDates(), this._limitViewDateByMaxMinDates(), this.elIsInput && (i || this._bindEvents(), r && !o && (this.keyboardNav = new A({
            dp: this,
            opts: e
          }))), n && this.selectDate(n, {
            silent: !0
          }), this.opts.visible && !t && this.show(), s && !t && this.$el.setAttribute("readonly", !0), t && this._createComponents();
        }
      }, {
        key: "_createMobileOverlay",
        value: function _createMobileOverlay() {
          j = n({
            className: "air-datepicker-overlay"
          }), P.appendChild(j);
        }
      }, {
        key: "_createComponents",
        value: function _createComponents() {
          var _this$$datepicker$cla;
          var e = this.opts,
            t = this.treatAsInline,
            _this$opts9 = this.opts,
            i = _this$opts9.inline,
            s = _this$opts9.buttons,
            a = _this$opts9.timepicker,
            n = _this$opts9.position,
            r = _this$opts9.classes,
            o = _this$opts9.onlyTimepicker,
            h = _this$opts9.isMobile;
          this._buildBaseHtml(), this.elIsInput && (i || this._setPositionClasses(n)), !i && this.elIsInput || this.$datepicker.classList.add("-inline-"), r && (_this$$datepicker$cla = this.$datepicker.classList).add.apply(_this$$datepicker$cla, _toConsumableArray(r.split(" "))), o && this.$datepicker.classList.add("-only-timepicker-"), h && !t && this._addMobileAttributes(), this.views[this.currentView] = new T({
            dp: this,
            type: this.currentView,
            opts: e
          }), this.nav = new V({
            dp: this,
            opts: e
          }), a && this._addTimepicker(), s && this._addButtons(), this.$content.appendChild(this.views[this.currentView].$el), this.$nav.appendChild(this.nav.$el);
        }
      }, {
        key: "_destroyComponents",
        value: function _destroyComponents() {
          for (var _e12 in this.views) this.views[_e12].destroy();
          this.views = {}, this.nav.destroy(), this.timepicker && this.timepicker.destroy();
        }
      }, {
        key: "_addMobileAttributes",
        value: function _addMobileAttributes() {
          j.addEventListener("click", this._onClickOverlay), this.$datepicker.classList.add("-is-mobile-"), this.$el.setAttribute("readonly", !0);
        }
      }, {
        key: "_removeMobileAttributes",
        value: function _removeMobileAttributes() {
          j.removeEventListener("click", this._onClickOverlay), this.$datepicker.classList.remove("-is-mobile-"), this.initialReadonly || "" === this.initialReadonly || this.$el.removeAttribute("readonly");
        }
      }, {
        key: "_createMinMaxDates",
        value: function _createMinMaxDates() {
          var _this$opts10 = this.opts,
            e = _this$opts10.minDate,
            t = _this$opts10.maxDate;
          this.minDate = !!e && b(e), this.maxDate = !!t && b(t);
        }
      }, {
        key: "_addTimepicker",
        value: function _addTimepicker() {
          this.$timepicker = n({
            className: "air-datepicker--time"
          }), this.$datepicker.appendChild(this.$timepicker), this.timepicker = new L({
            dp: this,
            opts: this.opts
          }), this.$timepicker.appendChild(this.timepicker.$el);
        }
      }, {
        key: "_addButtons",
        value: function _addButtons() {
          this.$buttons = n({
            className: "air-datepicker--buttons"
          }), this.$datepicker.appendChild(this.$buttons), this.buttons = new H({
            dp: this,
            opts: this.opts
          }), this.$buttons.appendChild(this.buttons.$el);
        }
      }, {
        key: "_bindSubEvents",
        value: function _bindSubEvents() {
          this.on(i.eventChangeSelectedDate, this._onChangeSelectedDate), this.on(i.eventChangeFocusDate, this._onChangeFocusedDate), this.on(i.eventChangeTime, this._onChangeTime);
        }
      }, {
        key: "_buildBaseHtml",
        value: function _buildBaseHtml() {
          var e = this.opts.inline;
          var t, i;
          this.elIsInput ? e ? (t = this.$datepicker, (i = this.$el).parentNode.insertBefore(t, i.nextSibling)) : this.$container.appendChild(this.$datepicker) : this.$el.appendChild(this.$datepicker), this.$datepicker.innerHTML = '<i class="air-datepicker--pointer"></i><div class="air-datepicker--navigation"></div><div class="air-datepicker--content"></div>', this.$content = a(".air-datepicker--content", this.$datepicker), this.$pointer = a(".air-datepicker--pointer", this.$datepicker), this.$nav = a(".air-datepicker--navigation", this.$datepicker);
        }
      }, {
        key: "_handleLocale",
        value: function _handleLocale() {
          var _this$opts11 = this.opts,
            e = _this$opts11.locale,
            t = _this$opts11.dateFormat,
            i = _this$opts11.firstDay,
            s = _this$opts11.timepicker,
            a = _this$opts11.onlyTimepicker,
            n = _this$opts11.timeFormat,
            r = _this$opts11.dateTimeSeparator;
          var o;
          this.locale = (o = e, JSON.parse(JSON.stringify(o))), t && (this.locale.dateFormat = t), void 0 !== n && "" !== n && (this.locale.timeFormat = n);
          var h = this.locale.timeFormat;
          if ("" !== i && (this.locale.firstDay = i), s && "function" != typeof t) {
            var _e13 = h ? r : "";
            this.locale.dateFormat = [this.locale.dateFormat, h || ""].join(_e13);
          }
          a && "function" != typeof t && (this.locale.dateFormat = this.locale.timeFormat);
        }
      }, {
        key: "_setPositionClasses",
        value: function _setPositionClasses(e) {
          var _this$$datepicker$cla2;
          if ("function" == typeof e) return void this.$datepicker.classList.add("-custom-position-");
          var t = (e = e.split(" "))[0],
            i = "air-datepicker -".concat(t, "-").concat(e[1], "- -from-").concat(t, "-");
          (_this$$datepicker$cla2 = this.$datepicker.classList).add.apply(_this$$datepicker$cla2, _toConsumableArray(i.split(" ")));
        }
      }, {
        key: "_bindEvents",
        value: function _bindEvents() {
          this.$el.addEventListener(this.opts.showEvent, this._onFocus), this.$el.addEventListener("blur", this._onBlur), this.$datepicker.addEventListener("mousedown", this._onMouseDown), this.$datepicker.addEventListener("mouseup", this._onMouseUp), window.addEventListener("resize", this._onResize);
        }
      }, {
        key: "_limitViewDateByMaxMinDates",
        value: function _limitViewDateByMaxMinDates() {
          var e = this.viewDate,
            t = this.minDate,
            i = this.maxDate;
          i && m(e, i) && this.setViewDate(i), t && v(e, t) && this.setViewDate(t);
        }
      }, {
        key: "formatDate",
        value: function formatDate() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.viewDate,
            t = arguments.length > 1 ? arguments[1] : void 0;
          if (e = b(e), !(e instanceof Date)) return;
          var i = t,
            s = this.locale,
            a = h(e),
            n = a.dayPeriod,
            r = c(e),
            o = R.replacer,
            l = {
              T: e.getTime(),
              m: a.minutes,
              mm: a.fullMinutes,
              h: a.hours12,
              hh: a.fullHours12,
              H: a.hours,
              HH: a.fullHours,
              aa: n,
              AA: n.toUpperCase(),
              E: s.daysShort[a.day],
              EEEE: s.days[a.day],
              d: a.date,
              dd: a.fullDate,
              M: a.month + 1,
              MM: a.fullMonth,
              MMM: s.monthsShort[a.month],
              MMMM: s.months[a.month],
              yy: a.year.toString().slice(-2),
              yyyy: a.year,
              yyyy1: r[0],
              yyyy2: r[1]
            };
          for (var _i9 = 0, _Object$entries3 = Object.entries(l); _i9 < _Object$entries3.length; _i9++) {
            var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i9], 2),
              _e14 = _Object$entries3$_i[0],
              _t7 = _Object$entries3$_i[1];
            i = o(i, k(_e14), _t7);
          }
          return i;
        }
      }, {
        key: "down",
        value: function down(e) {
          this._handleUpDownActions(e, "down");
        }
      }, {
        key: "up",
        value: function up(e) {
          this._handleUpDownActions(e, "up");
        }
      }, {
        key: "selectDate",
        value: function selectDate(e) {
          var _this11 = this;
          var t,
            s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
            a = this.currentView,
            n = this.parsedViewDate,
            r = this.selectedDates,
            o = s.updateTime,
            _this$opts12 = this.opts,
            h = _this$opts12.moveToOtherMonthsOnSelect,
            l = _this$opts12.moveToOtherYearsOnSelect,
            d = _this$opts12.multipleDates,
            c = _this$opts12.range,
            u = _this$opts12.autoClose,
            p = _this$opts12.onBeforeSelect,
            v = r.length;
          if (Array.isArray(e)) return e.forEach(function (e) {
            _this11.selectDate(e, s);
          }), new Promise(function (e) {
            setTimeout(e);
          });
          if ((e = b(e)) instanceof Date) {
            if (p && !p({
              date: e,
              datepicker: this
            })) return Promise.resolve();
            if (a === i.days && e.getMonth() !== n.month && h && (t = new Date(e.getFullYear(), e.getMonth(), 1)), a === i.years && e.getFullYear() !== n.year && l && (t = new Date(e.getFullYear(), 0, 1)), t && this.setViewDate(t), d && !c) {
              if (v === d) return;
              this._checkIfDateIsSelected(e) || r.push(e);
            } else if (c) switch (v) {
              case 1:
                r.push(e), this.rangeDateTo || (this.rangeDateTo = e), m(this.rangeDateFrom, this.rangeDateTo) && (this.rangeDateTo = this.rangeDateFrom, this.rangeDateFrom = e), this.selectedDates = [this.rangeDateFrom, this.rangeDateTo];
                break;
              case 2:
                this.selectedDates = [e], this.rangeDateFrom = e, this.rangeDateTo = "";
                break;
              default:
                this.selectedDates = [e], this.rangeDateFrom = e;
            } else this.selectedDates = [e];
            return this.trigger(i.eventChangeSelectedDate, {
              action: i.actionSelectDate,
              silent: null == s ? void 0 : s.silent,
              date: e,
              updateTime: o
            }), this._updateLastSelectedDate(e), u && !this.timepickerIsActive && this.visible && (d || c ? c && 1 === v && this.hide() : this.hide()), new Promise(function (e) {
              setTimeout(e);
            });
          }
        }
      }, {
        key: "unselectDate",
        value: function unselectDate(e) {
          var _this12 = this;
          var t = this.selectedDates,
            s = this;
          if ((e = b(e)) instanceof Date) return t.some(function (a, n) {
            if (p(a, e)) return t.splice(n, 1), s.selectedDates.length ? s._updateLastSelectedDate(s.selectedDates[s.selectedDates.length - 1]) : (s.rangeDateFrom = "", s.rangeDateTo = "", s._updateLastSelectedDate(!1)), _this12.trigger(i.eventChangeSelectedDate, {
              action: i.actionUnselectDate,
              date: e
            }), !0;
          });
        }
      }, {
        key: "replaceDate",
        value: function replaceDate(e, t) {
          var _this13 = this;
          var s = this.selectedDates.find(function (t) {
              return p(t, e, _this13.currentView);
            }),
            a = this.selectedDates.indexOf(s);
          a < 0 || p(this.selectedDates[a], t, this.currentView) || (this.selectedDates[a] = t, this.trigger(i.eventChangeSelectedDate, {
            action: i.actionSelectDate,
            date: t,
            updateTime: !0
          }), this._updateLastSelectedDate(t));
        }
      }, {
        key: "clear",
        value: function clear() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          return this.selectedDates = [], this.rangeDateFrom = !1, this.rangeDateTo = !1, this.lastSelectedDate = !1, this.trigger(i.eventChangeSelectedDate, {
            action: i.actionUnselectDate,
            silent: e.silent
          }), new Promise(function (e) {
            setTimeout(e);
          });
        }
      }, {
        key: "show",
        value: function show() {
          var _this$opts13 = this.opts,
            e = _this$opts13.onShow,
            t = _this$opts13.isMobile;
          this._cancelScheduledCall(), this.visible || this.hideAnimation || this._createComponents(), this.setPosition(this.opts.position), this.$datepicker.classList.add("-active-"), this.visible = !0, e && this._scheduleCallAfterTransition(e), t && this._showMobileOverlay();
        }
      }, {
        key: "hide",
        value: function hide() {
          var _this14 = this;
          var _this$opts14 = this.opts,
            e = _this$opts14.onHide,
            t = _this$opts14.isMobile,
            i = this._hasTransition();
          this.visible = !1, this.hideAnimation = !0, this.$datepicker.classList.remove("-active-"), this.customHide && this.customHide(), this.elIsInput && this.$el.blur(), this._scheduleCallAfterTransition(function (t) {
            !_this14.customHide && (t && i || !t && !i) && _this14._finishHide(), e && e(t);
          }), t && j.classList.remove("-active-");
        }
      }, {
        key: "_triggerOnSelect",
        value: function _triggerOnSelect() {
          var _this15 = this;
          var e = [],
            t = [],
            i = this.selectedDates,
            s = this.locale,
            _this$opts15 = this.opts,
            a = _this$opts15.onSelect,
            n = _this$opts15.multipleDates,
            r = _this$opts15.range,
            o = n || r,
            h = "function" == typeof s.dateFormat;
          i.length && (e = i.map(g), t = h ? n ? s.dateFormat(e) : e.map(function (e) {
            return s.dateFormat(e);
          }) : e.map(function (e) {
            return _this15.formatDate(e, s.dateFormat);
          })), a({
            date: o ? e : e[0],
            formattedDate: o ? t : t[0],
            datepicker: this
          });
        }
      }, {
        key: "_handleAlreadySelectedDates",
        value: function _handleAlreadySelectedDates(e, t) {
          var i = this.selectedDates,
            s = this.rangeDateFrom,
            a = this.rangeDateTo,
            _this$opts16 = this.opts,
            n = _this$opts16.range,
            r = _this$opts16.toggleSelected,
            o = i.length,
            h = "function" == typeof r ? r({
              datepicker: this,
              date: t
            }) : r,
            l = Boolean(n && 1 === o && e),
            d = l ? g(t) : t;
          n && !h && (2 !== o && this.selectDate(d), 2 === o && p(s, a)) || (h ? this.unselectDate(d) : this._updateLastSelectedDate(l ? d : e));
        }
      }, {
        key: "_handleUpDownActions",
        value: function _handleUpDownActions(e, t) {
          if (!((e = b(e || this.focusDate || this.viewDate)) instanceof Date)) return;
          var i = "up" === t ? this.viewIndex + 1 : this.viewIndex - 1;
          i > 2 && (i = 2), i < 0 && (i = 0), this.setViewDate(new Date(e.getFullYear(), e.getMonth(), 1)), this.setCurrentView(this.viewIndexes[i]);
        }
      }, {
        key: "getCell",
        value: function getCell(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.day;
          if (!((e = b(e)) instanceof Date)) return;
          var _h13 = h(e),
            s = _h13.year,
            a = _h13.month,
            n = _h13.date,
            r = "[data-year=\"".concat(s, "\"]"),
            o = "[data-month=\"".concat(a, "\"]"),
            l = _defineProperty(_defineProperty(_defineProperty({}, i.day, "".concat(r).concat(o, "[data-date=\"").concat(n, "\"]")), i.month, "".concat(r).concat(o)), i.year, "".concat(r));
          return this.views[this.currentView] ? this.views[this.currentView].$el.querySelector(l[t]) : void 0;
        }
      }, {
        key: "_showMobileOverlay",
        value: function _showMobileOverlay() {
          j.classList.add("-active-");
        }
      }, {
        key: "_hasTransition",
        value: function _hasTransition() {
          return window.getComputedStyle(this.$datepicker).getPropertyValue("transition-duration").split(", ").reduce(function (e, t) {
            return parseFloat(t) + e;
          }, 0) > 0;
        }
      }, {
        key: "shouldUpdateDOM",
        get: function get() {
          return this.visible || this.treatAsInline;
        }
      }, {
        key: "parsedViewDate",
        get: function get() {
          return h(this.viewDate);
        }
      }, {
        key: "currentViewSingular",
        get: function get() {
          return this.currentView.slice(0, -1);
        }
      }, {
        key: "curDecade",
        get: function get() {
          return c(this.viewDate);
        }
      }, {
        key: "viewIndex",
        get: function get() {
          return this.viewIndexes.indexOf(this.currentView);
        }
      }, {
        key: "isFinalView",
        get: function get() {
          return this.currentView === i.years;
        }
      }, {
        key: "hasSelectedDates",
        get: function get() {
          return this.selectedDates.length > 0;
        }
      }, {
        key: "isMinViewReached",
        get: function get() {
          return this.currentView === this.opts.minView || this.currentView === i.days;
        }
      }, {
        key: "$container",
        get: function get() {
          return this.$customContainer || P;
        }
      }], [{
        key: "buildGlobalContainer",
        value: function buildGlobalContainer(e) {
          B = !0, P = n({
            className: e,
            id: e
          }), a("body").appendChild(P);
        }
      }, {
        key: "replacer",
        value: function replacer(e, t, i) {
          return e.replace(t, function (e, t, s, a) {
            return t + i + a;
          });
        }
      }]);
    }();
    var K;
    return I(R, "defaults", s), I(R, "version", "3.5.0"), I(R, "defaultGlobalContainerId", "air-datepicker-global-container"), K = R.prototype, Object.assign(K, N), t["default"];
  }();
});

},{}],4:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var a, b;
"undefined" != typeof navigator && (a = window || {}, b = function b(window) {
  "use strict";

  var svgNS = "http://www.w3.org/2000/svg",
    locationHref = "",
    initialDefaultFrame = -999999,
    subframeEnabled = !0,
    expressionsPlugin,
    isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent),
    cachedColors = {},
    bm_rounder = Math.round,
    bm_rnd,
    bm_pow = Math.pow,
    bm_sqrt = Math.sqrt,
    bm_abs = Math.abs,
    bm_floor = Math.floor,
    bm_max = Math.max,
    bm_min = Math.min,
    blitter = 10,
    BMMath = {};
  function ProjectInterface() {
    return {};
  }
  !function () {
    var t,
      e = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"],
      r = e.length;
    for (t = 0; t < r; t += 1) BMMath[e[t]] = Math[e[t]];
  }(), BMMath.random = Math.random, BMMath.abs = function (t) {
    if ("object" === _typeof(t) && t.length) {
      var e,
        r = createSizedArray(t.length),
        i = t.length;
      for (e = 0; e < i; e += 1) r[e] = Math.abs(t[e]);
      return r;
    }
    return Math.abs(t);
  };
  var defaultCurveSegments = 150,
    degToRads = Math.PI / 180,
    roundCorner = .5519;
  function roundValues(t) {
    bm_rnd = t ? Math.round : function (t) {
      return t;
    };
  }
  function styleDiv(t) {
    t.style.position = "absolute", t.style.top = 0, t.style.left = 0, t.style.display = "block", t.style.transformOrigin = t.style.webkitTransformOrigin = "0 0", t.style.backfaceVisibility = t.style.webkitBackfaceVisibility = "visible", t.style.transformStyle = t.style.webkitTransformStyle = t.style.mozTransformStyle = "preserve-3d";
  }
  function BMEnterFrameEvent(t, e, r, i) {
    this.type = t, this.currentTime = e, this.totalTime = r, this.direction = i < 0 ? -1 : 1;
  }
  function BMCompleteEvent(t, e) {
    this.type = t, this.direction = e < 0 ? -1 : 1;
  }
  function BMCompleteLoopEvent(t, e, r, i) {
    this.type = t, this.currentLoop = r, this.totalLoops = e, this.direction = i < 0 ? -1 : 1;
  }
  function BMSegmentStartEvent(t, e, r) {
    this.type = t, this.firstFrame = e, this.totalFrames = r;
  }
  function BMDestroyEvent(t, e) {
    this.type = t, this.target = e;
  }
  function BMRenderFrameErrorEvent(t, e) {
    this.type = "renderFrameError", this.nativeError = t, this.currentTime = e;
  }
  function BMConfigErrorEvent(t) {
    this.type = "configError", this.nativeError = t;
  }
  function BMAnimationConfigErrorEvent(t, e) {
    this.type = t, this.nativeError = e, this.currentTime = currentTime;
  }
  roundValues(!1);
  var createElementID = (I = 0, function () {
      return "__lottie_element_" + ++I;
    }),
    I;
  function HSVtoRGB(t, e, r) {
    var i, s, a, n, o, h, l, p;
    switch (h = r * (1 - e), l = r * (1 - (o = 6 * t - (n = Math.floor(6 * t))) * e), p = r * (1 - (1 - o) * e), n % 6) {
      case 0:
        i = r, s = p, a = h;
        break;
      case 1:
        i = l, s = r, a = h;
        break;
      case 2:
        i = h, s = r, a = p;
        break;
      case 3:
        i = h, s = l, a = r;
        break;
      case 4:
        i = p, s = h, a = r;
        break;
      case 5:
        i = r, s = h, a = l;
    }
    return [i, s, a];
  }
  function RGBtoHSV(t, e, r) {
    var i,
      s = Math.max(t, e, r),
      a = Math.min(t, e, r),
      n = s - a,
      o = 0 === s ? 0 : n / s,
      h = s / 255;
    switch (s) {
      case a:
        i = 0;
        break;
      case t:
        i = e - r + n * (e < r ? 6 : 0), i /= 6 * n;
        break;
      case e:
        i = r - t + 2 * n, i /= 6 * n;
        break;
      case r:
        i = t - e + 4 * n, i /= 6 * n;
    }
    return [i, o, h];
  }
  function addSaturationToRGB(t, e) {
    var r = RGBtoHSV(255 * t[0], 255 * t[1], 255 * t[2]);
    return r[1] += e, 1 < r[1] ? r[1] = 1 : r[1] <= 0 && (r[1] = 0), HSVtoRGB(r[0], r[1], r[2]);
  }
  function addBrightnessToRGB(t, e) {
    var r = RGBtoHSV(255 * t[0], 255 * t[1], 255 * t[2]);
    return r[2] += e, 1 < r[2] ? r[2] = 1 : r[2] < 0 && (r[2] = 0), HSVtoRGB(r[0], r[1], r[2]);
  }
  function addHueToRGB(t, e) {
    var r = RGBtoHSV(255 * t[0], 255 * t[1], 255 * t[2]);
    return r[0] += e / 360, 1 < r[0] ? r[0] -= 1 : r[0] < 0 && (r[0] += 1), HSVtoRGB(r[0], r[1], r[2]);
  }
  var rgbToHex = function () {
    var t,
      e,
      i = [];
    for (t = 0; t < 256; t += 1) e = t.toString(16), i[t] = 1 == e.length ? "0" + e : e;
    return function (t, e, r) {
      return t < 0 && (t = 0), e < 0 && (e = 0), r < 0 && (r = 0), "#" + i[t] + i[e] + i[r];
    };
  }();
  function BaseEvent() {}
  BaseEvent.prototype = {
    triggerEvent: function triggerEvent(t, e) {
      if (this._cbs[t]) for (var r = this._cbs[t].length, i = 0; i < r; i++) this._cbs[t][i](e);
    },
    addEventListener: function addEventListener(t, e) {
      return this._cbs[t] || (this._cbs[t] = []), this._cbs[t].push(e), function () {
        this.removeEventListener(t, e);
      }.bind(this);
    },
    removeEventListener: function removeEventListener(t, e) {
      if (e) {
        if (this._cbs[t]) {
          for (var r = 0, i = this._cbs[t].length; r < i;) this._cbs[t][r] === e && (this._cbs[t].splice(r, 1), r -= 1, i -= 1), r += 1;
          this._cbs[t].length || (this._cbs[t] = null);
        }
      } else this._cbs[t] = null;
    }
  };
  var createTypedArray = "function" == typeof Uint8ClampedArray && "function" == typeof Float32Array ? function (t, e) {
    return "float32" === t ? new Float32Array(e) : "int16" === t ? new Int16Array(e) : "uint8c" === t ? new Uint8ClampedArray(e) : void 0;
  } : function (t, e) {
    var r,
      i = 0,
      s = [];
    switch (t) {
      case "int16":
      case "uint8c":
        r = 1;
        break;
      default:
        r = 1.1;
    }
    for (i = 0; i < e; i += 1) s.push(r);
    return s;
  };
  function createSizedArray(t) {
    return Array.apply(null, {
      length: t
    });
  }
  function createNS(t) {
    return document.createElementNS(svgNS, t);
  }
  function createTag(t) {
    return document.createElement(t);
  }
  function DynamicPropertyContainer() {}
  DynamicPropertyContainer.prototype = {
    addDynamicProperty: function addDynamicProperty(t) {
      -1 === this.dynamicProperties.indexOf(t) && (this.dynamicProperties.push(t), this.container.addDynamicProperty(this), this._isAnimated = !0);
    },
    iterateDynamicProperties: function iterateDynamicProperties() {
      this._mdf = !1;
      var t,
        e = this.dynamicProperties.length;
      for (t = 0; t < e; t += 1) this.dynamicProperties[t].getValue(), this.dynamicProperties[t]._mdf && (this._mdf = !0);
    },
    initDynamicPropertyContainer: function initDynamicPropertyContainer(t) {
      this.container = t, this.dynamicProperties = [], this._mdf = !1, this._isAnimated = !1;
    }
  };
  var getBlendMode = (Ra = {
      0: "source-over",
      1: "multiply",
      2: "screen",
      3: "overlay",
      4: "darken",
      5: "lighten",
      6: "color-dodge",
      7: "color-burn",
      8: "hard-light",
      9: "soft-light",
      10: "difference",
      11: "exclusion",
      12: "hue",
      13: "saturation",
      14: "color",
      15: "luminosity"
    }, function (t) {
      return Ra[t] || "";
    }),
    Ra,
    Matrix = function () {
      var s = Math.cos,
        a = Math.sin,
        n = Math.tan,
        i = Math.round;
      function t() {
        return this.props[0] = 1, this.props[1] = 0, this.props[2] = 0, this.props[3] = 0, this.props[4] = 0, this.props[5] = 1, this.props[6] = 0, this.props[7] = 0, this.props[8] = 0, this.props[9] = 0, this.props[10] = 1, this.props[11] = 0, this.props[12] = 0, this.props[13] = 0, this.props[14] = 0, this.props[15] = 1, this;
      }
      function e(t) {
        if (0 === t) return this;
        var e = s(t),
          r = a(t);
        return this._t(e, -r, 0, 0, r, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function r(t) {
        if (0 === t) return this;
        var e = s(t),
          r = a(t);
        return this._t(1, 0, 0, 0, 0, e, -r, 0, 0, r, e, 0, 0, 0, 0, 1);
      }
      function o(t) {
        if (0 === t) return this;
        var e = s(t),
          r = a(t);
        return this._t(e, 0, r, 0, 0, 1, 0, 0, -r, 0, e, 0, 0, 0, 0, 1);
      }
      function h(t) {
        if (0 === t) return this;
        var e = s(t),
          r = a(t);
        return this._t(e, -r, 0, 0, r, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function l(t, e) {
        return this._t(1, e, t, 1, 0, 0);
      }
      function p(t, e) {
        return this.shear(n(t), n(e));
      }
      function m(t, e) {
        var r = s(e),
          i = a(e);
        return this._t(r, i, 0, 0, -i, r, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, n(t), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(r, -i, 0, 0, i, r, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function f(t, e, r) {
        return r || 0 === r || (r = 1), 1 === t && 1 === e && 1 === r ? this : this._t(t, 0, 0, 0, 0, e, 0, 0, 0, 0, r, 0, 0, 0, 0, 1);
      }
      function c(t, e, r, i, s, a, n, o, h, l, p, m, f, c, d, u) {
        return this.props[0] = t, this.props[1] = e, this.props[2] = r, this.props[3] = i, this.props[4] = s, this.props[5] = a, this.props[6] = n, this.props[7] = o, this.props[8] = h, this.props[9] = l, this.props[10] = p, this.props[11] = m, this.props[12] = f, this.props[13] = c, this.props[14] = d, this.props[15] = u, this;
      }
      function d(t, e, r) {
        return r = r || 0, 0 !== t || 0 !== e || 0 !== r ? this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, t, e, r, 1) : this;
      }
      function u(t, e, r, i, s, a, n, o, h, l, p, m, f, c, d, u) {
        var y = this.props;
        if (1 === t && 0 === e && 0 === r && 0 === i && 0 === s && 1 === a && 0 === n && 0 === o && 0 === h && 0 === l && 1 === p && 0 === m) return y[12] = y[12] * t + y[15] * f, y[13] = y[13] * a + y[15] * c, y[14] = y[14] * p + y[15] * d, y[15] = y[15] * u, this._identityCalculated = !1, this;
        var g = y[0],
          v = y[1],
          b = y[2],
          E = y[3],
          x = y[4],
          P = y[5],
          S = y[6],
          _ = y[7],
          A = y[8],
          C = y[9],
          T = y[10],
          k = y[11],
          M = y[12],
          D = y[13],
          w = y[14],
          F = y[15];
        return y[0] = g * t + v * s + b * h + E * f, y[1] = g * e + v * a + b * l + E * c, y[2] = g * r + v * n + b * p + E * d, y[3] = g * i + v * o + b * m + E * u, y[4] = x * t + P * s + S * h + _ * f, y[5] = x * e + P * a + S * l + _ * c, y[6] = x * r + P * n + S * p + _ * d, y[7] = x * i + P * o + S * m + _ * u, y[8] = A * t + C * s + T * h + k * f, y[9] = A * e + C * a + T * l + k * c, y[10] = A * r + C * n + T * p + k * d, y[11] = A * i + C * o + T * m + k * u, y[12] = M * t + D * s + w * h + F * f, y[13] = M * e + D * a + w * l + F * c, y[14] = M * r + D * n + w * p + F * d, y[15] = M * i + D * o + w * m + F * u, this._identityCalculated = !1, this;
      }
      function y() {
        return this._identityCalculated || (this._identity = !(1 !== this.props[0] || 0 !== this.props[1] || 0 !== this.props[2] || 0 !== this.props[3] || 0 !== this.props[4] || 1 !== this.props[5] || 0 !== this.props[6] || 0 !== this.props[7] || 0 !== this.props[8] || 0 !== this.props[9] || 1 !== this.props[10] || 0 !== this.props[11] || 0 !== this.props[12] || 0 !== this.props[13] || 0 !== this.props[14] || 1 !== this.props[15]), this._identityCalculated = !0), this._identity;
      }
      function g(t) {
        for (var e = 0; e < 16;) {
          if (t.props[e] !== this.props[e]) return !1;
          e += 1;
        }
        return !0;
      }
      function v(t) {
        var e;
        for (e = 0; e < 16; e += 1) t.props[e] = this.props[e];
      }
      function b(t) {
        var e;
        for (e = 0; e < 16; e += 1) this.props[e] = t[e];
      }
      function E(t, e, r) {
        return {
          x: t * this.props[0] + e * this.props[4] + r * this.props[8] + this.props[12],
          y: t * this.props[1] + e * this.props[5] + r * this.props[9] + this.props[13],
          z: t * this.props[2] + e * this.props[6] + r * this.props[10] + this.props[14]
        };
      }
      function x(t, e, r) {
        return t * this.props[0] + e * this.props[4] + r * this.props[8] + this.props[12];
      }
      function P(t, e, r) {
        return t * this.props[1] + e * this.props[5] + r * this.props[9] + this.props[13];
      }
      function S(t, e, r) {
        return t * this.props[2] + e * this.props[6] + r * this.props[10] + this.props[14];
      }
      function _(t) {
        var e = this.props[0] * this.props[5] - this.props[1] * this.props[4],
          r = this.props[5] / e,
          i = -this.props[1] / e,
          s = -this.props[4] / e,
          a = this.props[0] / e,
          n = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / e,
          o = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / e;
        return [t[0] * r + t[1] * s + n, t[0] * i + t[1] * a + o, 0];
      }
      function A(t) {
        var e,
          r = t.length,
          i = [];
        for (e = 0; e < r; e += 1) i[e] = _(t[e]);
        return i;
      }
      function C(t, e, r) {
        var i = createTypedArray("float32", 6);
        if (this.isIdentity()) i[0] = t[0], i[1] = t[1], i[2] = e[0], i[3] = e[1], i[4] = r[0], i[5] = r[1];else {
          var s = this.props[0],
            a = this.props[1],
            n = this.props[4],
            o = this.props[5],
            h = this.props[12],
            l = this.props[13];
          i[0] = t[0] * s + t[1] * n + h, i[1] = t[0] * a + t[1] * o + l, i[2] = e[0] * s + e[1] * n + h, i[3] = e[0] * a + e[1] * o + l, i[4] = r[0] * s + r[1] * n + h, i[5] = r[0] * a + r[1] * o + l;
        }
        return i;
      }
      function T(t, e, r) {
        return this.isIdentity() ? [t, e, r] : [t * this.props[0] + e * this.props[4] + r * this.props[8] + this.props[12], t * this.props[1] + e * this.props[5] + r * this.props[9] + this.props[13], t * this.props[2] + e * this.props[6] + r * this.props[10] + this.props[14]];
      }
      function k(t, e) {
        if (this.isIdentity()) return t + "," + e;
        var r = this.props;
        return Math.round(100 * (t * r[0] + e * r[4] + r[12])) / 100 + "," + Math.round(100 * (t * r[1] + e * r[5] + r[13])) / 100;
      }
      function M() {
        for (var t = 0, e = this.props, r = "matrix3d("; t < 16;) r += i(1e4 * e[t]) / 1e4, r += 15 === t ? ")" : ",", t += 1;
        return r;
      }
      function D(t) {
        return t < 1e-6 && 0 < t || -1e-6 < t && t < 0 ? i(1e4 * t) / 1e4 : t;
      }
      function w() {
        var t = this.props;
        return "matrix(" + D(t[0]) + "," + D(t[1]) + "," + D(t[4]) + "," + D(t[5]) + "," + D(t[12]) + "," + D(t[13]) + ")";
      }
      return function () {
        this.reset = t, this.rotate = e, this.rotateX = r, this.rotateY = o, this.rotateZ = h, this.skew = p, this.skewFromAxis = m, this.shear = l, this.scale = f, this.setTransform = c, this.translate = d, this.transform = u, this.applyToPoint = E, this.applyToX = x, this.applyToY = P, this.applyToZ = S, this.applyToPointArray = T, this.applyToTriplePoints = C, this.applyToPointStringified = k, this.toCSS = M, this.to2dCSS = w, this.clone = v, this.cloneFromProps = b, this.equals = g, this.inversePoints = A, this.inversePoint = _, this._t = this.transform, this.isIdentity = y, this._identity = !0, this._identityCalculated = !1, this.props = createTypedArray("float32", 16), this.reset();
      };
    }();
  !function (o, h) {
    var l,
      p = this,
      m = 256,
      f = 6,
      c = "random",
      d = h.pow(m, f),
      u = h.pow(2, 52),
      y = 2 * u,
      g = m - 1;
    function v(t) {
      var e,
        r = t.length,
        n = this,
        i = 0,
        s = n.i = n.j = 0,
        a = n.S = [];
      for (r || (t = [r++]); i < m;) a[i] = i++;
      for (i = 0; i < m; i++) a[i] = a[s = g & s + t[i % r] + (e = a[i])], a[s] = e;
      n.g = function (t) {
        for (var e, r = 0, i = n.i, s = n.j, a = n.S; t--;) e = a[i = g & i + 1], r = r * m + a[g & (a[i] = a[s = g & s + e]) + (a[s] = e)];
        return n.i = i, n.j = s, r;
      };
    }
    function b(t, e) {
      return e.i = t.i, e.j = t.j, e.S = t.S.slice(), e;
    }
    function E(t, e) {
      for (var r, i = t + "", s = 0; s < i.length;) e[g & s] = g & (r ^= 19 * e[g & s]) + i.charCodeAt(s++);
      return x(e);
    }
    function x(t) {
      return String.fromCharCode.apply(0, t);
    }
    h["seed" + c] = function (t, e, r) {
      var i = [],
        s = E(function t(e, r) {
          var i,
            s = [],
            a = _typeof(e);
          if (r && "object" == a) for (i in e) try {
            s.push(t(e[i], r - 1));
          } catch (t) {}
          return s.length ? s : "string" == a ? e : e + "\0";
        }((e = !0 === e ? {
          entropy: !0
        } : e || {}).entropy ? [t, x(o)] : null === t ? function () {
          try {
            if (l) return x(l.randomBytes(m));
            var t = new Uint8Array(m);
            return (p.crypto || p.msCrypto).getRandomValues(t), x(t);
          } catch (t) {
            var e = p.navigator,
              r = e && e.plugins;
            return [+new Date(), p, r, p.screen, x(o)];
          }
        }() : t, 3), i),
        a = new v(i),
        n = function n() {
          for (var t = a.g(f), e = d, r = 0; t < u;) t = (t + r) * m, e *= m, r = a.g(1);
          for (; y <= t;) t /= 2, e /= 2, r >>>= 1;
          return (t + r) / e;
        };
      return n.int32 = function () {
        return 0 | a.g(4);
      }, n.quick = function () {
        return a.g(4) / 4294967296;
      }, n["double"] = n, E(x(a.S), o), (e.pass || r || function (t, e, r, i) {
        return i && (i.S && b(i, a), t.state = function () {
          return b(a, {});
        }), r ? (h[c] = t, e) : t;
      })(n, s, "global" in e ? e.global : this == h, e.state);
    }, E(h.random(), o);
  }([], BMMath);
  var BezierFactory = function () {
    var t = {
        getBezierEasing: function getBezierEasing(t, e, r, i, s) {
          var a = s || ("bez_" + t + "_" + e + "_" + r + "_" + i).replace(/\./g, "p");
          if (o[a]) return o[a];
          var n = new h([t, e, r, i]);
          return o[a] = n;
        }
      },
      o = {};
    var l = 11,
      p = 1 / (l - 1),
      e = "function" == typeof Float32Array;
    function i(t, e) {
      return 1 - 3 * e + 3 * t;
    }
    function s(t, e) {
      return 3 * e - 6 * t;
    }
    function a(t) {
      return 3 * t;
    }
    function m(t, e, r) {
      return ((i(e, r) * t + s(e, r)) * t + a(e)) * t;
    }
    function f(t, e, r) {
      return 3 * i(e, r) * t * t + 2 * s(e, r) * t + a(e);
    }
    function h(t) {
      this._p = t, this._mSampleValues = e ? new Float32Array(l) : new Array(l), this._precomputed = !1, this.get = this.get.bind(this);
    }
    return h.prototype = {
      get: function get(t) {
        var e = this._p[0],
          r = this._p[1],
          i = this._p[2],
          s = this._p[3];
        return this._precomputed || this._precompute(), e === r && i === s ? t : 0 === t ? 0 : 1 === t ? 1 : m(this._getTForX(t), r, s);
      },
      _precompute: function _precompute() {
        var t = this._p[0],
          e = this._p[1],
          r = this._p[2],
          i = this._p[3];
        this._precomputed = !0, t === e && r === i || this._calcSampleValues();
      },
      _calcSampleValues: function _calcSampleValues() {
        for (var t = this._p[0], e = this._p[2], r = 0; r < l; ++r) this._mSampleValues[r] = m(r * p, t, e);
      },
      _getTForX: function _getTForX(t) {
        for (var e = this._p[0], r = this._p[2], i = this._mSampleValues, s = 0, a = 1, n = l - 1; a !== n && i[a] <= t; ++a) s += p;
        var o = s + (t - i[--a]) / (i[a + 1] - i[a]) * p,
          h = f(o, e, r);
        return .001 <= h ? function (t, e, r, i) {
          for (var s = 0; s < 4; ++s) {
            var a = f(e, r, i);
            if (0 === a) return e;
            e -= (m(e, r, i) - t) / a;
          }
          return e;
        }(t, o, e, r) : 0 === h ? o : function (t, e, r, i, s) {
          for (var a, n, o = 0; 0 < (a = m(n = e + (r - e) / 2, i, s) - t) ? r = n : e = n, 1e-7 < Math.abs(a) && ++o < 10;);
          return n;
        }(t, s, s + p, e, r);
      }
    }, t;
  }();
  function extendPrototype(t, e) {
    var r,
      i,
      s = t.length;
    for (r = 0; r < s; r += 1) for (var a in i = t[r].prototype) i.hasOwnProperty(a) && (e.prototype[a] = i[a]);
  }
  function getDescriptor(t, e) {
    return Object.getOwnPropertyDescriptor(t, e);
  }
  function createProxyFunction(t) {
    function e() {}
    return e.prototype = t, e;
  }
  function bezFunction() {
    Math;
    function y(t, e, r, i, s, a) {
      var n = t * i + e * s + r * a - s * i - a * t - r * e;
      return -.001 < n && n < .001;
    }
    var p = function p(t, e, r, i) {
      var s,
        a,
        n,
        o,
        h,
        l,
        p = defaultCurveSegments,
        m = 0,
        f = [],
        c = [],
        d = bezier_length_pool.newElement();
      for (n = r.length, s = 0; s < p; s += 1) {
        for (h = s / (p - 1), a = l = 0; a < n; a += 1) o = bm_pow(1 - h, 3) * t[a] + 3 * bm_pow(1 - h, 2) * h * r[a] + 3 * (1 - h) * bm_pow(h, 2) * i[a] + bm_pow(h, 3) * e[a], f[a] = o, null !== c[a] && (l += bm_pow(f[a] - c[a], 2)), c[a] = f[a];
        l && (m += l = bm_sqrt(l)), d.percents[s] = h, d.lengths[s] = m;
      }
      return d.addedLength = m, d;
    };
    function g(t) {
      this.segmentLength = 0, this.points = new Array(t);
    }
    function v(t, e) {
      this.partialLength = t, this.point = e;
    }
    var b,
      t = (b = {}, function (t, e, r, i) {
        var s = (t[0] + "_" + t[1] + "_" + e[0] + "_" + e[1] + "_" + r[0] + "_" + r[1] + "_" + i[0] + "_" + i[1]).replace(/\./g, "p");
        if (!b[s]) {
          var a,
            n,
            o,
            h,
            l,
            p,
            m,
            f = defaultCurveSegments,
            c = 0,
            d = null;
          2 === t.length && (t[0] != e[0] || t[1] != e[1]) && y(t[0], t[1], e[0], e[1], t[0] + r[0], t[1] + r[1]) && y(t[0], t[1], e[0], e[1], e[0] + i[0], e[1] + i[1]) && (f = 2);
          var u = new g(f);
          for (o = r.length, a = 0; a < f; a += 1) {
            for (m = createSizedArray(o), l = a / (f - 1), n = p = 0; n < o; n += 1) h = bm_pow(1 - l, 3) * t[n] + 3 * bm_pow(1 - l, 2) * l * (t[n] + r[n]) + 3 * (1 - l) * bm_pow(l, 2) * (e[n] + i[n]) + bm_pow(l, 3) * e[n], m[n] = h, null !== d && (p += bm_pow(m[n] - d[n], 2));
            c += p = bm_sqrt(p), u.points[a] = new v(p, m), d = m;
          }
          u.segmentLength = c, b[s] = u;
        }
        return b[s];
      });
    function M(t, e) {
      var r = e.percents,
        i = e.lengths,
        s = r.length,
        a = bm_floor((s - 1) * t),
        n = t * e.addedLength,
        o = 0;
      if (a === s - 1 || 0 === a || n === i[a]) return r[a];
      for (var h = i[a] > n ? -1 : 1, l = !0; l;) if (i[a] <= n && i[a + 1] > n ? (o = (n - i[a]) / (i[a + 1] - i[a]), l = !1) : a += h, a < 0 || s - 1 <= a) {
        if (a === s - 1) return r[a];
        l = !1;
      }
      return r[a] + (r[a + 1] - r[a]) * o;
    }
    var D = createTypedArray("float32", 8);
    return {
      getSegmentsLength: function getSegmentsLength(t) {
        var e,
          r = segments_length_pool.newElement(),
          i = t.c,
          s = t.v,
          a = t.o,
          n = t.i,
          o = t._length,
          h = r.lengths,
          l = 0;
        for (e = 0; e < o - 1; e += 1) h[e] = p(s[e], s[e + 1], a[e], n[e + 1]), l += h[e].addedLength;
        return i && o && (h[e] = p(s[e], s[0], a[e], n[0]), l += h[e].addedLength), r.totalLength = l, r;
      },
      getNewSegment: function getNewSegment(t, e, r, i, s, a, n) {
        var o,
          h = M(s = s < 0 ? 0 : 1 < s ? 1 : s, n),
          l = M(a = 1 < a ? 1 : a, n),
          p = t.length,
          m = 1 - h,
          f = 1 - l,
          c = m * m * m,
          d = h * m * m * 3,
          u = h * h * m * 3,
          y = h * h * h,
          g = m * m * f,
          v = h * m * f + m * h * f + m * m * l,
          b = h * h * f + m * h * l + h * m * l,
          E = h * h * l,
          x = m * f * f,
          P = h * f * f + m * l * f + m * f * l,
          S = h * l * f + m * l * l + h * f * l,
          _ = h * l * l,
          A = f * f * f,
          C = l * f * f + f * l * f + f * f * l,
          T = l * l * f + f * l * l + l * f * l,
          k = l * l * l;
        for (o = 0; o < p; o += 1) D[4 * o] = Math.round(1e3 * (c * t[o] + d * r[o] + u * i[o] + y * e[o])) / 1e3, D[4 * o + 1] = Math.round(1e3 * (g * t[o] + v * r[o] + b * i[o] + E * e[o])) / 1e3, D[4 * o + 2] = Math.round(1e3 * (x * t[o] + P * r[o] + S * i[o] + _ * e[o])) / 1e3, D[4 * o + 3] = Math.round(1e3 * (A * t[o] + C * r[o] + T * i[o] + k * e[o])) / 1e3;
        return D;
      },
      getPointInSegment: function getPointInSegment(t, e, r, i, s, a) {
        var n = M(s, a),
          o = 1 - n;
        return [Math.round(1e3 * (o * o * o * t[0] + (n * o * o + o * n * o + o * o * n) * r[0] + (n * n * o + o * n * n + n * o * n) * i[0] + n * n * n * e[0])) / 1e3, Math.round(1e3 * (o * o * o * t[1] + (n * o * o + o * n * o + o * o * n) * r[1] + (n * n * o + o * n * n + n * o * n) * i[1] + n * n * n * e[1])) / 1e3];
      },
      buildBezierData: t,
      pointOnLine2D: y,
      pointOnLine3D: function pointOnLine3D(t, e, r, i, s, a, n, o, h) {
        if (0 === r && 0 === a && 0 === h) return y(t, e, i, s, n, o);
        var l,
          p = Math.sqrt(Math.pow(i - t, 2) + Math.pow(s - e, 2) + Math.pow(a - r, 2)),
          m = Math.sqrt(Math.pow(n - t, 2) + Math.pow(o - e, 2) + Math.pow(h - r, 2)),
          f = Math.sqrt(Math.pow(n - i, 2) + Math.pow(o - s, 2) + Math.pow(h - a, 2));
        return -1e-4 < (l = m < p ? f < p ? p - m - f : f - m - p : m < f ? f - m - p : m - p - f) && l < 1e-4;
      }
    };
  }
  !function () {
    for (var a = 0, t = ["ms", "moz", "webkit", "o"], e = 0; e < t.length && !window.requestAnimationFrame; ++e) window.requestAnimationFrame = window[t[e] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[t[e] + "CancelAnimationFrame"] || window[t[e] + "CancelRequestAnimationFrame"];
    window.requestAnimationFrame || (window.requestAnimationFrame = function (t, e) {
      var r = new Date().getTime(),
        i = Math.max(0, 16 - (r - a)),
        s = setTimeout(function () {
          t(r + i);
        }, i);
      return a = r + i, s;
    }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function (t) {
      clearTimeout(t);
    });
  }();
  var bez = bezFunction();
  function dataFunctionManager() {
    function c(t, e) {
      for (var r = 0, i = e.length; r < i;) {
        if (e[r].id === t) return e[r].layers.__used ? JSON.parse(JSON.stringify(e[r].layers)) : (e[r].layers.__used = !0, e[r].layers);
        r += 1;
      }
    }
    function d(t) {
      var e, r, i;
      for (e = t.length - 1; 0 <= e; e -= 1) if ("sh" == t[e].ty) {
        if (t[e].ks.k.i) u(t[e].ks.k);else for (i = t[e].ks.k.length, r = 0; r < i; r += 1) t[e].ks.k[r].s && u(t[e].ks.k[r].s[0]), t[e].ks.k[r].e && u(t[e].ks.k[r].e[0]);
        !0;
      } else "gr" == t[e].ty && d(t[e].it);
    }
    function u(t) {
      var e,
        r = t.i.length;
      for (e = 0; e < r; e += 1) t.i[e][0] += t.v[e][0], t.i[e][1] += t.v[e][1], t.o[e][0] += t.v[e][0], t.o[e][1] += t.v[e][1];
    }
    function o(t, e) {
      var r = e ? e.split(".") : [100, 100, 100];
      return t[0] > r[0] || !(r[0] > t[0]) && (t[1] > r[1] || !(r[1] > t[1]) && (t[2] > r[2] || !(r[2] > t[2]) && void 0));
    }
    var h,
      r = function () {
        var i = [4, 4, 14];
        function s(t) {
          var e,
            r,
            i,
            s = t.length;
          for (e = 0; e < s; e += 1) 5 === t[e].ty && (r = t[e], void 0, i = r.t.d, r.t.d = {
            k: [{
              s: i,
              t: 0
            }]
          });
        }
        return function (t) {
          if (o(i, t.v) && (s(t.layers), t.assets)) {
            var e,
              r = t.assets.length;
            for (e = 0; e < r; e += 1) t.assets[e].layers && s(t.assets[e].layers);
          }
        };
      }(),
      i = (h = [4, 7, 99], function (t) {
        if (t.chars && !o(h, t.v)) {
          var e,
            r,
            i,
            s,
            a,
            n = t.chars.length;
          for (e = 0; e < n; e += 1) if (t.chars[e].data && t.chars[e].data.shapes) for (i = (a = t.chars[e].data.shapes[0].it).length, r = 0; r < i; r += 1) (s = a[r].ks.k).__converted || (u(a[r].ks.k), s.__converted = !0);
        }
      }),
      s = function () {
        var i = [4, 1, 9];
        function a(t) {
          var e,
            r,
            i,
            s = t.length;
          for (e = 0; e < s; e += 1) if ("gr" === t[e].ty) a(t[e].it);else if ("fl" === t[e].ty || "st" === t[e].ty) if (t[e].c.k && t[e].c.k[0].i) for (i = t[e].c.k.length, r = 0; r < i; r += 1) t[e].c.k[r].s && (t[e].c.k[r].s[0] /= 255, t[e].c.k[r].s[1] /= 255, t[e].c.k[r].s[2] /= 255, t[e].c.k[r].s[3] /= 255), t[e].c.k[r].e && (t[e].c.k[r].e[0] /= 255, t[e].c.k[r].e[1] /= 255, t[e].c.k[r].e[2] /= 255, t[e].c.k[r].e[3] /= 255);else t[e].c.k[0] /= 255, t[e].c.k[1] /= 255, t[e].c.k[2] /= 255, t[e].c.k[3] /= 255;
        }
        function s(t) {
          var e,
            r = t.length;
          for (e = 0; e < r; e += 1) 4 === t[e].ty && a(t[e].shapes);
        }
        return function (t) {
          if (o(i, t.v) && (s(t.layers), t.assets)) {
            var e,
              r = t.assets.length;
            for (e = 0; e < r; e += 1) t.assets[e].layers && s(t.assets[e].layers);
          }
        };
      }(),
      a = function () {
        var i = [4, 4, 18];
        function l(t) {
          var e, r, i;
          for (e = t.length - 1; 0 <= e; e -= 1) if ("sh" == t[e].ty) {
            if (t[e].ks.k.i) t[e].ks.k.c = t[e].closed;else for (i = t[e].ks.k.length, r = 0; r < i; r += 1) t[e].ks.k[r].s && (t[e].ks.k[r].s[0].c = t[e].closed), t[e].ks.k[r].e && (t[e].ks.k[r].e[0].c = t[e].closed);
            !0;
          } else "gr" == t[e].ty && l(t[e].it);
        }
        function s(t) {
          var e,
            r,
            i,
            s,
            a,
            n,
            o = t.length;
          for (r = 0; r < o; r += 1) {
            if ((e = t[r]).hasMask) {
              var h = e.masksProperties;
              for (s = h.length, i = 0; i < s; i += 1) if (h[i].pt.k.i) h[i].pt.k.c = h[i].cl;else for (n = h[i].pt.k.length, a = 0; a < n; a += 1) h[i].pt.k[a].s && (h[i].pt.k[a].s[0].c = h[i].cl), h[i].pt.k[a].e && (h[i].pt.k[a].e[0].c = h[i].cl);
            }
            4 === e.ty && l(e.shapes);
          }
        }
        return function (t) {
          if (o(i, t.v) && (s(t.layers), t.assets)) {
            var e,
              r = t.assets.length;
            for (e = 0; e < r; e += 1) t.assets[e].layers && s(t.assets[e].layers);
          }
        };
      }();
    var t = {};
    return t.completeData = function (t, e) {
      t.__complete || (s(t), r(t), i(t), a(t), function t(e, r, i) {
        var s,
          a,
          n,
          o,
          h,
          l,
          p,
          m = e.length;
        for (a = 0; a < m; a += 1) if ("ks" in (s = e[a]) && !s.completed) {
          if (s.completed = !0, s.tt && (e[a - 1].td = s.tt), s.hasMask) {
            var f = s.masksProperties;
            for (o = f.length, n = 0; n < o; n += 1) if (f[n].pt.k.i) u(f[n].pt.k);else for (l = f[n].pt.k.length, h = 0; h < l; h += 1) f[n].pt.k[h].s && u(f[n].pt.k[h].s[0]), f[n].pt.k[h].e && u(f[n].pt.k[h].e[0]);
          }
          0 === s.ty ? (s.layers = c(s.refId, r), t(s.layers, r, i)) : 4 === s.ty ? d(s.shapes) : 5 == s.ty && (0 !== (p = s).t.a.length || "m" in p.t.p || (p.singleShape = !0));
        }
      }(t.layers, t.assets, e), t.__complete = !0);
    }, t;
  }
  var dataManager = dataFunctionManager(),
    FontManager = function () {
      var a = {
          w: 0,
          size: 0,
          shapes: []
        },
        t = [];
      function u(t, e) {
        var r = createTag("span");
        r.style.fontFamily = e;
        var i = createTag("span");
        i.innerHTML = "giItT1WQy@!-/#", r.style.position = "absolute", r.style.left = "-10000px", r.style.top = "-10000px", r.style.fontSize = "300px", r.style.fontVariant = "normal", r.style.fontStyle = "normal", r.style.fontWeight = "normal", r.style.letterSpacing = "0", r.appendChild(i), document.body.appendChild(r);
        var s = i.offsetWidth;
        return i.style.fontFamily = t + ", " + e, {
          node: i,
          w: s,
          parent: r
        };
      }
      t = t.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
      var e = function e() {
        this.fonts = [], this.chars = null, this.typekitLoaded = 0, this.isLoaded = !1, this.initTime = Date.now();
      };
      return e.getCombinedCharacterCodes = function () {
        return t;
      }, e.prototype.addChars = function (t) {
        if (t) {
          this.chars || (this.chars = []);
          var e,
            r,
            i,
            s = t.length,
            a = this.chars.length;
          for (e = 0; e < s; e += 1) {
            for (r = 0, i = !1; r < a;) this.chars[r].style === t[e].style && this.chars[r].fFamily === t[e].fFamily && this.chars[r].ch === t[e].ch && (i = !0), r += 1;
            i || (this.chars.push(t[e]), a += 1);
          }
        }
      }, e.prototype.addFonts = function (t, e) {
        if (t) {
          if (this.chars) return this.isLoaded = !0, void (this.fonts = t.list);
          var r,
            i,
            s,
            a,
            n = t.list,
            o = n.length,
            h = o;
          for (r = 0; r < o; r += 1) {
            var l,
              p,
              m = !0;
            if (n[r].loaded = !1, n[r].monoCase = u(n[r].fFamily, "monospace"), n[r].sansCase = u(n[r].fFamily, "sans-serif"), n[r].fPath) {
              if ("p" === n[r].fOrigin || 3 === n[r].origin) {
                if (0 < (l = document.querySelectorAll('style[f-forigin="p"][f-family="' + n[r].fFamily + '"], style[f-origin="3"][f-family="' + n[r].fFamily + '"]')).length && (m = !1), m) {
                  var f = createTag("style");
                  f.setAttribute("f-forigin", n[r].fOrigin), f.setAttribute("f-origin", n[r].origin), f.setAttribute("f-family", n[r].fFamily), f.type = "text/css", f.innerHTML = "@font-face {font-family: " + n[r].fFamily + "; font-style: normal; src: url('" + n[r].fPath + "');}", e.appendChild(f);
                }
              } else if ("g" === n[r].fOrigin || 1 === n[r].origin) {
                for (l = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'), p = 0; p < l.length; p++) -1 !== l[p].href.indexOf(n[r].fPath) && (m = !1);
                if (m) {
                  var c = createTag("link");
                  c.setAttribute("f-forigin", n[r].fOrigin), c.setAttribute("f-origin", n[r].origin), c.type = "text/css", c.rel = "stylesheet", c.href = n[r].fPath, document.body.appendChild(c);
                }
              } else if ("t" === n[r].fOrigin || 2 === n[r].origin) {
                for (l = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'), p = 0; p < l.length; p++) n[r].fPath === l[p].src && (m = !1);
                if (m) {
                  var d = createTag("link");
                  d.setAttribute("f-forigin", n[r].fOrigin), d.setAttribute("f-origin", n[r].origin), d.setAttribute("rel", "stylesheet"), d.setAttribute("href", n[r].fPath), e.appendChild(d);
                }
              }
            } else n[r].loaded = !0, h -= 1;
            n[r].helper = (i = e, s = n[r], a = void 0, (a = createNS("text")).style.fontSize = "100px", a.setAttribute("font-family", s.fFamily), a.setAttribute("font-style", s.fStyle), a.setAttribute("font-weight", s.fWeight), a.textContent = "1", s.fClass ? (a.style.fontFamily = "inherit", a.setAttribute("class", s.fClass)) : a.style.fontFamily = s.fFamily, i.appendChild(a), createTag("canvas").getContext("2d").font = s.fWeight + " " + s.fStyle + " 100px " + s.fFamily, a), n[r].cache = {}, this.fonts.push(n[r]);
          }
          0 === h ? this.isLoaded = !0 : setTimeout(this.checkLoadedFonts.bind(this), 100);
        } else this.isLoaded = !0;
      }, e.prototype.getCharData = function (t, e, r) {
        for (var i = 0, s = this.chars.length; i < s;) {
          if (this.chars[i].ch === t && this.chars[i].style === e && this.chars[i].fFamily === r) return this.chars[i];
          i += 1;
        }
        return ("string" == typeof t && 13 !== t.charCodeAt(0) || !t) && console && console.warn && console.warn("Missing character from exported characters list: ", t, e, r), a;
      }, e.prototype.getFontByName = function (t) {
        for (var e = 0, r = this.fonts.length; e < r;) {
          if (this.fonts[e].fName === t) return this.fonts[e];
          e += 1;
        }
        return this.fonts[0];
      }, e.prototype.measureText = function (t, e, r) {
        var i = this.getFontByName(e),
          s = t.charCodeAt(0);
        if (!i.cache[s + 1]) {
          var a = i.helper;
          if (" " === t) {
            a.textContent = "|" + t + "|";
            var n = a.getComputedTextLength();
            a.textContent = "||";
            var o = a.getComputedTextLength();
            i.cache[s + 1] = (n - o) / 100;
          } else a.textContent = t, i.cache[s + 1] = a.getComputedTextLength() / 100;
        }
        return i.cache[s + 1] * r;
      }, e.prototype.checkLoadedFonts = function () {
        var t,
          e,
          r,
          i = this.fonts.length,
          s = i;
        for (t = 0; t < i; t += 1) this.fonts[t].loaded ? s -= 1 : "n" === this.fonts[t].fOrigin || 0 === this.fonts[t].origin ? this.fonts[t].loaded = !0 : (e = this.fonts[t].monoCase.node, r = this.fonts[t].monoCase.w, e.offsetWidth !== r ? (s -= 1, this.fonts[t].loaded = !0) : (e = this.fonts[t].sansCase.node, r = this.fonts[t].sansCase.w, e.offsetWidth !== r && (s -= 1, this.fonts[t].loaded = !0)), this.fonts[t].loaded && (this.fonts[t].sansCase.parent.parentNode.removeChild(this.fonts[t].sansCase.parent), this.fonts[t].monoCase.parent.parentNode.removeChild(this.fonts[t].monoCase.parent)));
        0 !== s && Date.now() - this.initTime < 5e3 ? setTimeout(this.checkLoadedFonts.bind(this), 20) : setTimeout(function () {
          this.isLoaded = !0;
        }.bind(this), 0);
      }, e.prototype.loaded = function () {
        return this.isLoaded;
      }, e;
    }(),
    PropertyFactory = function () {
      var m = initialDefaultFrame,
        s = Math.abs;
      function f(t, e) {
        var r,
          i = this.offsetTime;
        "multidimensional" === this.propType && (r = createTypedArray("float32", this.pv.length));
        for (var s, a, n, o, h, l, p, m, f = e.lastIndex, c = f, d = this.keyframes.length - 1, u = !0; u;) {
          if (s = this.keyframes[c], a = this.keyframes[c + 1], c === d - 1 && t >= a.t - i) {
            s.h && (s = a), f = 0;
            break;
          }
          if (a.t - i > t) {
            f = c;
            break;
          }
          c < d - 1 ? c += 1 : (f = 0, u = !1);
        }
        var y,
          g,
          v,
          b,
          E,
          x,
          P,
          S,
          _,
          A,
          C = a.t - i,
          T = s.t - i;
        if (s.to) {
          s.bezierData || (s.bezierData = bez.buildBezierData(s.s, a.s || s.e, s.to, s.ti));
          var k = s.bezierData;
          if (C <= t || t < T) {
            var M = C <= t ? k.points.length - 1 : 0;
            for (o = k.points[M].point.length, n = 0; n < o; n += 1) r[n] = k.points[M].point[n];
          } else {
            s.__fnct ? m = s.__fnct : (m = BezierFactory.getBezierEasing(s.o.x, s.o.y, s.i.x, s.i.y, s.n).get, s.__fnct = m), h = m((t - T) / (C - T));
            var D,
              w = k.segmentLength * h,
              F = e.lastFrame < t && e._lastKeyframeIndex === c ? e._lastAddedLength : 0;
            for (p = e.lastFrame < t && e._lastKeyframeIndex === c ? e._lastPoint : 0, u = !0, l = k.points.length; u;) {
              if (F += k.points[p].partialLength, 0 === w || 0 === h || p === k.points.length - 1) {
                for (o = k.points[p].point.length, n = 0; n < o; n += 1) r[n] = k.points[p].point[n];
                break;
              }
              if (F <= w && w < F + k.points[p + 1].partialLength) {
                for (D = (w - F) / k.points[p + 1].partialLength, o = k.points[p].point.length, n = 0; n < o; n += 1) r[n] = k.points[p].point[n] + (k.points[p + 1].point[n] - k.points[p].point[n]) * D;
                break;
              }
              p < l - 1 ? p += 1 : u = !1;
            }
            e._lastPoint = p, e._lastAddedLength = F - k.points[p].partialLength, e._lastKeyframeIndex = c;
          }
        } else {
          var I, V, R, B, L;
          if (d = s.s.length, y = a.s || s.e, this.sh && 1 !== s.h) {
            if (C <= t) r[0] = y[0], r[1] = y[1], r[2] = y[2];else if (t <= T) r[0] = s.s[0], r[1] = s.s[1], r[2] = s.s[2];else {
              var G = N(s.s),
                z = N(y);
              g = r, v = function (t, e, r) {
                var i,
                  s,
                  a,
                  n,
                  o,
                  h = [],
                  l = t[0],
                  p = t[1],
                  m = t[2],
                  f = t[3],
                  c = e[0],
                  d = e[1],
                  u = e[2],
                  y = e[3];
                (s = l * c + p * d + m * u + f * y) < 0 && (s = -s, c = -c, d = -d, u = -u, y = -y);
                o = 1e-6 < 1 - s ? (i = Math.acos(s), a = Math.sin(i), n = Math.sin((1 - r) * i) / a, Math.sin(r * i) / a) : (n = 1 - r, r);
                return h[0] = n * l + o * c, h[1] = n * p + o * d, h[2] = n * m + o * u, h[3] = n * f + o * y, h;
              }(G, z, (t - T) / (C - T)), b = v[0], E = v[1], x = v[2], P = v[3], S = Math.atan2(2 * E * P - 2 * b * x, 1 - 2 * E * E - 2 * x * x), _ = Math.asin(2 * b * E + 2 * x * P), A = Math.atan2(2 * b * P - 2 * E * x, 1 - 2 * b * b - 2 * x * x), g[0] = S / degToRads, g[1] = _ / degToRads, g[2] = A / degToRads;
            }
          } else for (c = 0; c < d; c += 1) 1 !== s.h && (h = C <= t ? 1 : t < T ? 0 : (s.o.x.constructor === Array ? (s.__fnct || (s.__fnct = []), s.__fnct[c] ? m = s.__fnct[c] : (I = void 0 === s.o.x[c] ? s.o.x[0] : s.o.x[c], V = void 0 === s.o.y[c] ? s.o.y[0] : s.o.y[c], R = void 0 === s.i.x[c] ? s.i.x[0] : s.i.x[c], B = void 0 === s.i.y[c] ? s.i.y[0] : s.i.y[c], m = BezierFactory.getBezierEasing(I, V, R, B).get, s.__fnct[c] = m)) : s.__fnct ? m = s.__fnct : (I = s.o.x, V = s.o.y, R = s.i.x, B = s.i.y, m = BezierFactory.getBezierEasing(I, V, R, B).get, s.__fnct = m), m((t - T) / (C - T)))), y = a.s || s.e, L = 1 === s.h ? s.s[c] : s.s[c] + (y[c] - s.s[c]) * h, "multidimensional" === this.propType ? r[c] = L : r = L;
        }
        return e.lastIndex = f, r;
      }
      function N(t) {
        var e = t[0] * degToRads,
          r = t[1] * degToRads,
          i = t[2] * degToRads,
          s = Math.cos(e / 2),
          a = Math.cos(r / 2),
          n = Math.cos(i / 2),
          o = Math.sin(e / 2),
          h = Math.sin(r / 2),
          l = Math.sin(i / 2);
        return [o * h * n + s * a * l, o * a * n + s * h * l, s * h * n - o * a * l, s * a * n - o * h * l];
      }
      function c() {
        var t = this.comp.renderedFrame - this.offsetTime,
          e = this.keyframes[0].t - this.offsetTime,
          r = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
        if (!(t === this._caching.lastFrame || this._caching.lastFrame !== m && (this._caching.lastFrame >= r && r <= t || this._caching.lastFrame < e && t < e))) {
          this._caching.lastFrame >= t && (this._caching._lastKeyframeIndex = -1, this._caching.lastIndex = 0);
          var i = this.interpolateValue(t, this._caching);
          this.pv = i;
        }
        return this._caching.lastFrame = t, this.pv;
      }
      function d(t) {
        var e;
        if ("unidimensional" === this.propType) e = t * this.mult, 1e-5 < s(this.v - e) && (this.v = e, this._mdf = !0);else for (var r = 0, i = this.v.length; r < i;) e = t[r] * this.mult, 1e-5 < s(this.v[r] - e) && (this.v[r] = e, this._mdf = !0), r += 1;
      }
      function u() {
        if (this.elem.globalData.frameId !== this.frameId && this.effectsSequence.length) if (this.lock) this.setVValue(this.pv);else {
          this.lock = !0, this._mdf = this._isFirstFrame;
          var t,
            e = this.effectsSequence.length,
            r = this.kf ? this.pv : this.data.k;
          for (t = 0; t < e; t += 1) r = this.effectsSequence[t](r);
          this.setVValue(r), this._isFirstFrame = !1, this.lock = !1, this.frameId = this.elem.globalData.frameId;
        }
      }
      function y(t) {
        this.effectsSequence.push(t), this.container.addDynamicProperty(this);
      }
      function n(t, e, r, i) {
        this.propType = "unidimensional", this.mult = r || 1, this.data = e, this.v = r ? e.k * r : e.k, this.pv = e.k, this._mdf = !1, this.elem = t, this.container = i, this.comp = t.comp, this.k = !1, this.kf = !1, this.vel = 0, this.effectsSequence = [], this._isFirstFrame = !0, this.getValue = u, this.setVValue = d, this.addEffect = y;
      }
      function o(t, e, r, i) {
        this.propType = "multidimensional", this.mult = r || 1, this.data = e, this._mdf = !1, this.elem = t, this.container = i, this.comp = t.comp, this.k = !1, this.kf = !1, this.frameId = -1;
        var s,
          a = e.k.length;
        this.v = createTypedArray("float32", a), this.pv = createTypedArray("float32", a);
        createTypedArray("float32", a);
        for (this.vel = createTypedArray("float32", a), s = 0; s < a; s += 1) this.v[s] = e.k[s] * this.mult, this.pv[s] = e.k[s];
        this._isFirstFrame = !0, this.effectsSequence = [], this.getValue = u, this.setVValue = d, this.addEffect = y;
      }
      function h(t, e, r, i) {
        this.propType = "unidimensional", this.keyframes = e.k, this.offsetTime = t.data.st, this.frameId = -1, this._caching = {
          lastFrame: m,
          lastIndex: 0,
          value: 0,
          _lastKeyframeIndex: -1
        }, this.k = !0, this.kf = !0, this.data = e, this.mult = r || 1, this.elem = t, this.container = i, this.comp = t.comp, this.v = m, this.pv = m, this._isFirstFrame = !0, this.getValue = u, this.setVValue = d, this.interpolateValue = f, this.effectsSequence = [c.bind(this)], this.addEffect = y;
      }
      function l(t, e, r, i) {
        this.propType = "multidimensional";
        var s,
          a,
          n,
          o,
          h,
          l = e.k.length;
        for (s = 0; s < l - 1; s += 1) e.k[s].to && e.k[s].s && e.k[s].e && (a = e.k[s].s, n = e.k[s].e, o = e.k[s].to, h = e.k[s].ti, (2 === a.length && (a[0] !== n[0] || a[1] !== n[1]) && bez.pointOnLine2D(a[0], a[1], n[0], n[1], a[0] + o[0], a[1] + o[1]) && bez.pointOnLine2D(a[0], a[1], n[0], n[1], n[0] + h[0], n[1] + h[1]) || 3 === a.length && (a[0] !== n[0] || a[1] !== n[1] || a[2] !== n[2]) && bez.pointOnLine3D(a[0], a[1], a[2], n[0], n[1], n[2], a[0] + o[0], a[1] + o[1], a[2] + o[2]) && bez.pointOnLine3D(a[0], a[1], a[2], n[0], n[1], n[2], n[0] + h[0], n[1] + h[1], n[2] + h[2])) && (e.k[s].to = null, e.k[s].ti = null), a[0] === n[0] && a[1] === n[1] && 0 === o[0] && 0 === o[1] && 0 === h[0] && 0 === h[1] && (2 === a.length || a[2] === n[2] && 0 === o[2] && 0 === h[2]) && (e.k[s].to = null, e.k[s].ti = null));
        this.effectsSequence = [c.bind(this)], this.keyframes = e.k, this.offsetTime = t.data.st, this.k = !0, this.kf = !0, this._isFirstFrame = !0, this.mult = r || 1, this.elem = t, this.container = i, this.comp = t.comp, this.getValue = u, this.setVValue = d, this.interpolateValue = f, this.frameId = -1;
        var p = e.k[0].s.length;
        for (this.v = createTypedArray("float32", p), this.pv = createTypedArray("float32", p), s = 0; s < p; s += 1) this.v[s] = m, this.pv[s] = m;
        this._caching = {
          lastFrame: m,
          lastIndex: 0,
          value: createTypedArray("float32", p)
        }, this.addEffect = y;
      }
      return {
        getProp: function getProp(t, e, r, i, s) {
          var a;
          if (e.k.length) {
            if ("number" == typeof e.k[0]) a = new o(t, e, i, s);else switch (r) {
              case 0:
                a = new h(t, e, i, s);
                break;
              case 1:
                a = new l(t, e, i, s);
            }
          } else a = new n(t, e, i, s);
          return a.effectsSequence.length && s.addDynamicProperty(a), a;
        }
      };
    }(),
    TransformPropertyFactory = function () {
      function i(t, e, r) {
        if (this.elem = t, this.frameId = -1, this.propType = "transform", this.data = e, this.v = new Matrix(), this.pre = new Matrix(), this.appliedTransformations = 0, this.initDynamicPropertyContainer(r || t), e.p && e.p.s ? (this.px = PropertyFactory.getProp(t, e.p.x, 0, 0, this), this.py = PropertyFactory.getProp(t, e.p.y, 0, 0, this), e.p.z && (this.pz = PropertyFactory.getProp(t, e.p.z, 0, 0, this))) : this.p = PropertyFactory.getProp(t, e.p || {
          k: [0, 0, 0]
        }, 1, 0, this), e.rx) {
          if (this.rx = PropertyFactory.getProp(t, e.rx, 0, degToRads, this), this.ry = PropertyFactory.getProp(t, e.ry, 0, degToRads, this), this.rz = PropertyFactory.getProp(t, e.rz, 0, degToRads, this), e.or.k[0].ti) {
            var i,
              s = e.or.k.length;
            for (i = 0; i < s; i += 1) e.or.k[i].to = e.or.k[i].ti = null;
          }
          this.or = PropertyFactory.getProp(t, e.or, 1, degToRads, this), this.or.sh = !0;
        } else this.r = PropertyFactory.getProp(t, e.r || {
          k: 0
        }, 0, degToRads, this);
        e.sk && (this.sk = PropertyFactory.getProp(t, e.sk, 0, degToRads, this), this.sa = PropertyFactory.getProp(t, e.sa, 0, degToRads, this)), this.a = PropertyFactory.getProp(t, e.a || {
          k: [0, 0, 0]
        }, 1, 0, this), this.s = PropertyFactory.getProp(t, e.s || {
          k: [100, 100, 100]
        }, 1, .01, this), e.o ? this.o = PropertyFactory.getProp(t, e.o, 0, .01, t) : this.o = {
          _mdf: !1,
          v: 1
        }, this._isDirty = !0, this.dynamicProperties.length || this.getValue(!0);
      }
      return i.prototype = {
        applyToMatrix: function applyToMatrix(t) {
          var e = this._mdf;
          this.iterateDynamicProperties(), this._mdf = this._mdf || e, this.a && t.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]), this.s && t.scale(this.s.v[0], this.s.v[1], this.s.v[2]), this.sk && t.skewFromAxis(-this.sk.v, this.sa.v), this.r ? t.rotate(-this.r.v) : t.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]), this.data.p.s ? this.data.p.z ? t.translate(this.px.v, this.py.v, -this.pz.v) : t.translate(this.px.v, this.py.v, 0) : t.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
        },
        getValue: function getValue(t) {
          if (this.elem.globalData.frameId !== this.frameId) {
            if (this._isDirty && (this.precalculateMatrix(), this._isDirty = !1), this.iterateDynamicProperties(), this._mdf || t) {
              if (this.v.cloneFromProps(this.pre.props), this.appliedTransformations < 1 && this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]), this.appliedTransformations < 2 && this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]), this.sk && this.appliedTransformations < 3 && this.v.skewFromAxis(-this.sk.v, this.sa.v), this.r && this.appliedTransformations < 4 ? this.v.rotate(-this.r.v) : !this.r && this.appliedTransformations < 4 && this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]), this.autoOriented) {
                var e,
                  r,
                  i = this.elem.globalData.frameRate;
                if (this.p && this.p.keyframes && this.p.getValueAtTime) r = this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t ? (e = this.p.getValueAtTime((this.p.keyframes[0].t + .01) / i, 0), this.p.getValueAtTime(this.p.keyframes[0].t / i, 0)) : this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t ? (e = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / i, 0), this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - .05) / i, 0)) : (e = this.p.pv, this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - .01) / i, this.p.offsetTime));else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
                  e = [], r = [];
                  var s = this.px,
                    a = this.py;
                  s._caching.lastFrame + s.offsetTime <= s.keyframes[0].t ? (e[0] = s.getValueAtTime((s.keyframes[0].t + .01) / i, 0), e[1] = a.getValueAtTime((a.keyframes[0].t + .01) / i, 0), r[0] = s.getValueAtTime(s.keyframes[0].t / i, 0), r[1] = a.getValueAtTime(a.keyframes[0].t / i, 0)) : s._caching.lastFrame + s.offsetTime >= s.keyframes[s.keyframes.length - 1].t ? (e[0] = s.getValueAtTime(s.keyframes[s.keyframes.length - 1].t / i, 0), e[1] = a.getValueAtTime(a.keyframes[a.keyframes.length - 1].t / i, 0), r[0] = s.getValueAtTime((s.keyframes[s.keyframes.length - 1].t - .01) / i, 0), r[1] = a.getValueAtTime((a.keyframes[a.keyframes.length - 1].t - .01) / i, 0)) : (e = [s.pv, a.pv], r[0] = s.getValueAtTime((s._caching.lastFrame + s.offsetTime - .01) / i, s.offsetTime), r[1] = a.getValueAtTime((a._caching.lastFrame + a.offsetTime - .01) / i, a.offsetTime));
                }
                this.v.rotate(-Math.atan2(e[1] - r[1], e[0] - r[0]));
              }
              this.data.p && this.data.p.s ? this.data.p.z ? this.v.translate(this.px.v, this.py.v, -this.pz.v) : this.v.translate(this.px.v, this.py.v, 0) : this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
            }
            this.frameId = this.elem.globalData.frameId;
          }
        },
        precalculateMatrix: function precalculateMatrix() {
          if (!this.a.k && (this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]), this.appliedTransformations = 1, !this.s.effectsSequence.length)) {
            if (this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]), this.appliedTransformations = 2, this.sk) {
              if (this.sk.effectsSequence.length || this.sa.effectsSequence.length) return;
              this.pre.skewFromAxis(-this.sk.v, this.sa.v), this.appliedTransformations = 3;
            }
            if (this.r) {
              if (this.r.effectsSequence.length) return;
              this.pre.rotate(-this.r.v), this.appliedTransformations = 4;
            } else this.rz.effectsSequence.length || this.ry.effectsSequence.length || this.rx.effectsSequence.length || this.or.effectsSequence.length || (this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]), this.appliedTransformations = 4);
          }
        },
        autoOrient: function autoOrient() {}
      }, extendPrototype([DynamicPropertyContainer], i), i.prototype.addDynamicProperty = function (t) {
        this._addDynamicProperty(t), this.elem.addDynamicProperty(t), this._isDirty = !0;
      }, i.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty, {
        getTransformProperty: function getTransformProperty(t, e, r) {
          return new i(t, e, r);
        }
      };
    }();
  function ShapePath() {
    this.c = !1, this._length = 0, this._maxLength = 8, this.v = createSizedArray(this._maxLength), this.o = createSizedArray(this._maxLength), this.i = createSizedArray(this._maxLength);
  }
  ShapePath.prototype.setPathData = function (t, e) {
    this.c = t, this.setLength(e);
    for (var r = 0; r < e;) this.v[r] = point_pool.newElement(), this.o[r] = point_pool.newElement(), this.i[r] = point_pool.newElement(), r += 1;
  }, ShapePath.prototype.setLength = function (t) {
    for (; this._maxLength < t;) this.doubleArrayLength();
    this._length = t;
  }, ShapePath.prototype.doubleArrayLength = function () {
    this.v = this.v.concat(createSizedArray(this._maxLength)), this.i = this.i.concat(createSizedArray(this._maxLength)), this.o = this.o.concat(createSizedArray(this._maxLength)), this._maxLength *= 2;
  }, ShapePath.prototype.setXYAt = function (t, e, r, i, s) {
    var a;
    switch (this._length = Math.max(this._length, i + 1), this._length >= this._maxLength && this.doubleArrayLength(), r) {
      case "v":
        a = this.v;
        break;
      case "i":
        a = this.i;
        break;
      case "o":
        a = this.o;
    }
    (!a[i] || a[i] && !s) && (a[i] = point_pool.newElement()), a[i][0] = t, a[i][1] = e;
  }, ShapePath.prototype.setTripleAt = function (t, e, r, i, s, a, n, o) {
    this.setXYAt(t, e, "v", n, o), this.setXYAt(r, i, "o", n, o), this.setXYAt(s, a, "i", n, o);
  }, ShapePath.prototype.reverse = function () {
    var t = new ShapePath();
    t.setPathData(this.c, this._length);
    var e = this.v,
      r = this.o,
      i = this.i,
      s = 0;
    this.c && (t.setTripleAt(e[0][0], e[0][1], i[0][0], i[0][1], r[0][0], r[0][1], 0, !1), s = 1);
    var a,
      n = this._length - 1,
      o = this._length;
    for (a = s; a < o; a += 1) t.setTripleAt(e[n][0], e[n][1], i[n][0], i[n][1], r[n][0], r[n][1], a, !1), n -= 1;
    return t;
  };
  var ShapePropertyFactory = function () {
      var s = -999999;
      function t(t, e, r) {
        var i,
          s,
          a,
          n,
          o,
          h,
          l,
          p,
          m,
          f = r.lastIndex,
          c = this.keyframes;
        if (t < c[0].t - this.offsetTime) i = c[0].s[0], a = !0, f = 0;else if (t >= c[c.length - 1].t - this.offsetTime) i = c[c.length - 1].s ? c[c.length - 1].s[0] : c[c.length - 2].e[0], a = !0;else {
          for (var d, u, y = f, g = c.length - 1, v = !0; v && (d = c[y], !((u = c[y + 1]).t - this.offsetTime > t));) y < g - 1 ? y += 1 : v = !1;
          if (f = y, !(a = 1 === d.h)) {
            if (t >= u.t - this.offsetTime) p = 1;else if (t < d.t - this.offsetTime) p = 0;else {
              var b;
              d.__fnct ? b = d.__fnct : (b = BezierFactory.getBezierEasing(d.o.x, d.o.y, d.i.x, d.i.y).get, d.__fnct = b), p = b((t - (d.t - this.offsetTime)) / (u.t - this.offsetTime - (d.t - this.offsetTime)));
            }
            s = u.s ? u.s[0] : d.e[0];
          }
          i = d.s[0];
        }
        for (h = e._length, l = i.i[0].length, r.lastIndex = f, n = 0; n < h; n += 1) for (o = 0; o < l; o += 1) m = a ? i.i[n][o] : i.i[n][o] + (s.i[n][o] - i.i[n][o]) * p, e.i[n][o] = m, m = a ? i.o[n][o] : i.o[n][o] + (s.o[n][o] - i.o[n][o]) * p, e.o[n][o] = m, m = a ? i.v[n][o] : i.v[n][o] + (s.v[n][o] - i.v[n][o]) * p, e.v[n][o] = m;
      }
      function a() {
        this.paths = this.localShapeCollection;
      }
      function e(t) {
        (function (t, e) {
          if (t._length !== e._length || t.c !== e.c) return !1;
          var r,
            i = t._length;
          for (r = 0; r < i; r += 1) if (t.v[r][0] !== e.v[r][0] || t.v[r][1] !== e.v[r][1] || t.o[r][0] !== e.o[r][0] || t.o[r][1] !== e.o[r][1] || t.i[r][0] !== e.i[r][0] || t.i[r][1] !== e.i[r][1]) return !1;
          return !0;
        })(this.v, t) || (this.v = shape_pool.clone(t), this.localShapeCollection.releaseShapes(), this.localShapeCollection.addShape(this.v), this._mdf = !0, this.paths = this.localShapeCollection);
      }
      function r() {
        if (this.elem.globalData.frameId !== this.frameId) if (this.effectsSequence.length) {
          if (this.lock) this.setVValue(this.pv);else {
            this.lock = !0, this._mdf = !1;
            var t,
              e = this.kf ? this.pv : this.data.ks ? this.data.ks.k : this.data.pt.k,
              r = this.effectsSequence.length;
            for (t = 0; t < r; t += 1) e = this.effectsSequence[t](e);
            this.setVValue(e), this.lock = !1, this.frameId = this.elem.globalData.frameId;
          }
        } else this._mdf = !1;
      }
      function n(t, e, r) {
        this.propType = "shape", this.comp = t.comp, this.container = t, this.elem = t, this.data = e, this.k = !1, this.kf = !1, this._mdf = !1;
        var i = 3 === r ? e.pt.k : e.ks.k;
        this.v = shape_pool.clone(i), this.pv = shape_pool.clone(this.v), this.localShapeCollection = shapeCollection_pool.newShapeCollection(), this.paths = this.localShapeCollection, this.paths.addShape(this.v), this.reset = a, this.effectsSequence = [];
      }
      function i(t) {
        this.effectsSequence.push(t), this.container.addDynamicProperty(this);
      }
      function o(t, e, r) {
        this.propType = "shape", this.comp = t.comp, this.elem = t, this.container = t, this.offsetTime = t.data.st, this.keyframes = 3 === r ? e.pt.k : e.ks.k, this.k = !0, this.kf = !0;
        var i = this.keyframes[0].s[0].i.length;
        this.keyframes[0].s[0].i[0].length;
        this.v = shape_pool.newElement(), this.v.setPathData(this.keyframes[0].s[0].c, i), this.pv = shape_pool.clone(this.v), this.localShapeCollection = shapeCollection_pool.newShapeCollection(), this.paths = this.localShapeCollection, this.paths.addShape(this.v), this.lastFrame = s, this.reset = a, this._caching = {
          lastFrame: s,
          lastIndex: 0
        }, this.effectsSequence = [function () {
          var t = this.comp.renderedFrame - this.offsetTime,
            e = this.keyframes[0].t - this.offsetTime,
            r = this.keyframes[this.keyframes.length - 1].t - this.offsetTime,
            i = this._caching.lastFrame;
          return i !== s && (i < e && t < e || r < i && r < t) || (this._caching.lastIndex = i < t ? this._caching.lastIndex : 0, this.interpolateShape(t, this.pv, this._caching)), this._caching.lastFrame = t, this.pv;
        }.bind(this)];
      }
      n.prototype.interpolateShape = t, n.prototype.getValue = r, n.prototype.setVValue = e, n.prototype.addEffect = i, o.prototype.getValue = r, o.prototype.interpolateShape = t, o.prototype.setVValue = e, o.prototype.addEffect = i;
      var h = function () {
          var n = roundCorner;
          function t(t, e) {
            this.v = shape_pool.newElement(), this.v.setPathData(!0, 4), this.localShapeCollection = shapeCollection_pool.newShapeCollection(), this.paths = this.localShapeCollection, this.localShapeCollection.addShape(this.v), this.d = e.d, this.elem = t, this.comp = t.comp, this.frameId = -1, this.initDynamicPropertyContainer(t), this.p = PropertyFactory.getProp(t, e.p, 1, 0, this), this.s = PropertyFactory.getProp(t, e.s, 1, 0, this), this.dynamicProperties.length ? this.k = !0 : (this.k = !1, this.convertEllToPath());
          }
          return t.prototype = {
            reset: a,
            getValue: function getValue() {
              this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf && this.convertEllToPath());
            },
            convertEllToPath: function convertEllToPath() {
              var t = this.p.v[0],
                e = this.p.v[1],
                r = this.s.v[0] / 2,
                i = this.s.v[1] / 2,
                s = 3 !== this.d,
                a = this.v;
              a.v[0][0] = t, a.v[0][1] = e - i, a.v[1][0] = s ? t + r : t - r, a.v[1][1] = e, a.v[2][0] = t, a.v[2][1] = e + i, a.v[3][0] = s ? t - r : t + r, a.v[3][1] = e, a.i[0][0] = s ? t - r * n : t + r * n, a.i[0][1] = e - i, a.i[1][0] = s ? t + r : t - r, a.i[1][1] = e - i * n, a.i[2][0] = s ? t + r * n : t - r * n, a.i[2][1] = e + i, a.i[3][0] = s ? t - r : t + r, a.i[3][1] = e + i * n, a.o[0][0] = s ? t + r * n : t - r * n, a.o[0][1] = e - i, a.o[1][0] = s ? t + r : t - r, a.o[1][1] = e + i * n, a.o[2][0] = s ? t - r * n : t + r * n, a.o[2][1] = e + i, a.o[3][0] = s ? t - r : t + r, a.o[3][1] = e - i * n;
            }
          }, extendPrototype([DynamicPropertyContainer], t), t;
        }(),
        l = function () {
          function t(t, e) {
            this.v = shape_pool.newElement(), this.v.setPathData(!0, 0), this.elem = t, this.comp = t.comp, this.data = e, this.frameId = -1, this.d = e.d, this.initDynamicPropertyContainer(t), 1 === e.sy ? (this.ir = PropertyFactory.getProp(t, e.ir, 0, 0, this), this.is = PropertyFactory.getProp(t, e.is, 0, .01, this), this.convertToPath = this.convertStarToPath) : this.convertToPath = this.convertPolygonToPath, this.pt = PropertyFactory.getProp(t, e.pt, 0, 0, this), this.p = PropertyFactory.getProp(t, e.p, 1, 0, this), this.r = PropertyFactory.getProp(t, e.r, 0, degToRads, this), this.or = PropertyFactory.getProp(t, e.or, 0, 0, this), this.os = PropertyFactory.getProp(t, e.os, 0, .01, this), this.localShapeCollection = shapeCollection_pool.newShapeCollection(), this.localShapeCollection.addShape(this.v), this.paths = this.localShapeCollection, this.dynamicProperties.length ? this.k = !0 : (this.k = !1, this.convertToPath());
          }
          return t.prototype = {
            reset: a,
            getValue: function getValue() {
              this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf && this.convertToPath());
            },
            convertStarToPath: function convertStarToPath() {
              var t,
                e,
                r,
                i,
                s = 2 * Math.floor(this.pt.v),
                a = 2 * Math.PI / s,
                n = !0,
                o = this.or.v,
                h = this.ir.v,
                l = this.os.v,
                p = this.is.v,
                m = 2 * Math.PI * o / (2 * s),
                f = 2 * Math.PI * h / (2 * s),
                c = -Math.PI / 2;
              c += this.r.v;
              var d = 3 === this.data.d ? -1 : 1;
              for (t = this.v._length = 0; t < s; t += 1) {
                r = n ? l : p, i = n ? m : f;
                var u = (e = n ? o : h) * Math.cos(c),
                  y = e * Math.sin(c),
                  g = 0 === u && 0 === y ? 0 : y / Math.sqrt(u * u + y * y),
                  v = 0 === u && 0 === y ? 0 : -u / Math.sqrt(u * u + y * y);
                u += +this.p.v[0], y += +this.p.v[1], this.v.setTripleAt(u, y, u - g * i * r * d, y - v * i * r * d, u + g * i * r * d, y + v * i * r * d, t, !0), n = !n, c += a * d;
              }
            },
            convertPolygonToPath: function convertPolygonToPath() {
              var t,
                e = Math.floor(this.pt.v),
                r = 2 * Math.PI / e,
                i = this.or.v,
                s = this.os.v,
                a = 2 * Math.PI * i / (4 * e),
                n = -Math.PI / 2,
                o = 3 === this.data.d ? -1 : 1;
              for (n += this.r.v, t = this.v._length = 0; t < e; t += 1) {
                var h = i * Math.cos(n),
                  l = i * Math.sin(n),
                  p = 0 === h && 0 === l ? 0 : l / Math.sqrt(h * h + l * l),
                  m = 0 === h && 0 === l ? 0 : -h / Math.sqrt(h * h + l * l);
                h += +this.p.v[0], l += +this.p.v[1], this.v.setTripleAt(h, l, h - p * a * s * o, l - m * a * s * o, h + p * a * s * o, l + m * a * s * o, t, !0), n += r * o;
              }
              this.paths.length = 0, this.paths[0] = this.v;
            }
          }, extendPrototype([DynamicPropertyContainer], t), t;
        }(),
        p = function () {
          function t(t, e) {
            this.v = shape_pool.newElement(), this.v.c = !0, this.localShapeCollection = shapeCollection_pool.newShapeCollection(), this.localShapeCollection.addShape(this.v), this.paths = this.localShapeCollection, this.elem = t, this.comp = t.comp, this.frameId = -1, this.d = e.d, this.initDynamicPropertyContainer(t), this.p = PropertyFactory.getProp(t, e.p, 1, 0, this), this.s = PropertyFactory.getProp(t, e.s, 1, 0, this), this.r = PropertyFactory.getProp(t, e.r, 0, 0, this), this.dynamicProperties.length ? this.k = !0 : (this.k = !1, this.convertRectToPath());
          }
          return t.prototype = {
            convertRectToPath: function convertRectToPath() {
              var t = this.p.v[0],
                e = this.p.v[1],
                r = this.s.v[0] / 2,
                i = this.s.v[1] / 2,
                s = bm_min(r, i, this.r.v),
                a = s * (1 - roundCorner);
              this.v._length = 0, 2 === this.d || 1 === this.d ? (this.v.setTripleAt(t + r, e - i + s, t + r, e - i + s, t + r, e - i + a, 0, !0), this.v.setTripleAt(t + r, e + i - s, t + r, e + i - a, t + r, e + i - s, 1, !0), 0 !== s ? (this.v.setTripleAt(t + r - s, e + i, t + r - s, e + i, t + r - a, e + i, 2, !0), this.v.setTripleAt(t - r + s, e + i, t - r + a, e + i, t - r + s, e + i, 3, !0), this.v.setTripleAt(t - r, e + i - s, t - r, e + i - s, t - r, e + i - a, 4, !0), this.v.setTripleAt(t - r, e - i + s, t - r, e - i + a, t - r, e - i + s, 5, !0), this.v.setTripleAt(t - r + s, e - i, t - r + s, e - i, t - r + a, e - i, 6, !0), this.v.setTripleAt(t + r - s, e - i, t + r - a, e - i, t + r - s, e - i, 7, !0)) : (this.v.setTripleAt(t - r, e + i, t - r + a, e + i, t - r, e + i, 2), this.v.setTripleAt(t - r, e - i, t - r, e - i + a, t - r, e - i, 3))) : (this.v.setTripleAt(t + r, e - i + s, t + r, e - i + a, t + r, e - i + s, 0, !0), 0 !== s ? (this.v.setTripleAt(t + r - s, e - i, t + r - s, e - i, t + r - a, e - i, 1, !0), this.v.setTripleAt(t - r + s, e - i, t - r + a, e - i, t - r + s, e - i, 2, !0), this.v.setTripleAt(t - r, e - i + s, t - r, e - i + s, t - r, e - i + a, 3, !0), this.v.setTripleAt(t - r, e + i - s, t - r, e + i - a, t - r, e + i - s, 4, !0), this.v.setTripleAt(t - r + s, e + i, t - r + s, e + i, t - r + a, e + i, 5, !0), this.v.setTripleAt(t + r - s, e + i, t + r - a, e + i, t + r - s, e + i, 6, !0), this.v.setTripleAt(t + r, e + i - s, t + r, e + i - s, t + r, e + i - a, 7, !0)) : (this.v.setTripleAt(t - r, e - i, t - r + a, e - i, t - r, e - i, 1, !0), this.v.setTripleAt(t - r, e + i, t - r, e + i - a, t - r, e + i, 2, !0), this.v.setTripleAt(t + r, e + i, t + r - a, e + i, t + r, e + i, 3, !0)));
            },
            getValue: function getValue(t) {
              this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf && this.convertRectToPath());
            },
            reset: a
          }, extendPrototype([DynamicPropertyContainer], t), t;
        }();
      var m = {
        getShapeProp: function getShapeProp(t, e, r) {
          var i;
          return 3 === r || 4 === r ? i = (3 === r ? e.pt : e.ks).k.length ? new o(t, e, r) : new n(t, e, r) : 5 === r ? i = new p(t, e) : 6 === r ? i = new h(t, e) : 7 === r && (i = new l(t, e)), i.k && t.addDynamicProperty(i), i;
        },
        getConstructorFunction: function getConstructorFunction() {
          return n;
        },
        getKeyframedConstructorFunction: function getKeyframedConstructorFunction() {
          return o;
        }
      };
      return m;
    }(),
    ShapeModifiers = (Yr = {}, Zr = {}, Yr.registerModifier = function (t, e) {
      Zr[t] || (Zr[t] = e);
    }, Yr.getModifier = function (t, e, r) {
      return new Zr[t](e, r);
    }, Yr),
    Yr,
    Zr;
  function ShapeModifier() {}
  function TrimModifier() {}
  function RoundCornersModifier() {}
  function RepeaterModifier() {}
  function ShapeCollection() {
    this._length = 0, this._maxLength = 4, this.shapes = createSizedArray(this._maxLength);
  }
  function DashProperty(t, e, r, i) {
    this.elem = t, this.frameId = -1, this.dataProps = createSizedArray(e.length), this.renderer = r, this.k = !1, this.dashStr = "", this.dashArray = createTypedArray("float32", e.length ? e.length - 1 : 0), this.dashoffset = createTypedArray("float32", 1), this.initDynamicPropertyContainer(i);
    var s,
      a,
      n = e.length || 0;
    for (s = 0; s < n; s += 1) a = PropertyFactory.getProp(t, e[s].v, 0, 0, this), this.k = a.k || this.k, this.dataProps[s] = {
      n: e[s].n,
      p: a
    };
    this.k || this.getValue(!0), this._isAnimated = this.k;
  }
  function GradientProperty(t, e, r) {
    this.data = e, this.c = createTypedArray("uint8c", 4 * e.p);
    var i = e.k.k[0].s ? e.k.k[0].s.length - 4 * e.p : e.k.k.length - 4 * e.p;
    this.o = createTypedArray("float32", i), this._cmdf = !1, this._omdf = !1, this._collapsable = this.checkCollapsable(), this._hasOpacity = i, this.initDynamicPropertyContainer(r), this.prop = PropertyFactory.getProp(t, e.k, 1, null, this), this.k = this.prop.k, this.getValue(!0);
  }
  ShapeModifier.prototype.initModifierProperties = function () {}, ShapeModifier.prototype.addShapeToModifier = function () {}, ShapeModifier.prototype.addShape = function (t) {
    if (!this.closed) {
      t.sh.container.addDynamicProperty(t.sh);
      var e = {
        shape: t.sh,
        data: t,
        localShapeCollection: shapeCollection_pool.newShapeCollection()
      };
      this.shapes.push(e), this.addShapeToModifier(e), this._isAnimated && t.setAsAnimated();
    }
  }, ShapeModifier.prototype.init = function (t, e) {
    this.shapes = [], this.elem = t, this.initDynamicPropertyContainer(t), this.initModifierProperties(t, e), this.frameId = initialDefaultFrame, this.closed = !1, this.k = !1, this.dynamicProperties.length ? this.k = !0 : this.getValue(!0);
  }, ShapeModifier.prototype.processKeys = function () {
    this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties());
  }, extendPrototype([DynamicPropertyContainer], ShapeModifier), extendPrototype([ShapeModifier], TrimModifier), TrimModifier.prototype.initModifierProperties = function (t, e) {
    this.s = PropertyFactory.getProp(t, e.s, 0, .01, this), this.e = PropertyFactory.getProp(t, e.e, 0, .01, this), this.o = PropertyFactory.getProp(t, e.o, 0, 0, this), this.sValue = 0, this.eValue = 0, this.getValue = this.processKeys, this.m = e.m, this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
  }, TrimModifier.prototype.addShapeToModifier = function (t) {
    t.pathsData = [];
  }, TrimModifier.prototype.calculateShapeEdges = function (t, e, r, i, s) {
    var a = [];
    e <= 1 ? a.push({
      s: t,
      e: e
    }) : 1 <= t ? a.push({
      s: t - 1,
      e: e - 1
    }) : (a.push({
      s: t,
      e: 1
    }), a.push({
      s: 0,
      e: e - 1
    }));
    var n,
      o,
      h = [],
      l = a.length;
    for (n = 0; n < l; n += 1) {
      var p, m;
      if ((o = a[n]).e * s < i || o.s * s > i + r) ;else p = o.s * s <= i ? 0 : (o.s * s - i) / r, m = o.e * s >= i + r ? 1 : (o.e * s - i) / r, h.push([p, m]);
    }
    return h.length || h.push([0, 0]), h;
  }, TrimModifier.prototype.releasePathsData = function (t) {
    var e,
      r = t.length;
    for (e = 0; e < r; e += 1) segments_length_pool.release(t[e]);
    return t.length = 0, t;
  }, TrimModifier.prototype.processShapes = function (t) {
    var e, r, i;
    if (this._mdf || t) {
      var s = this.o.v % 360 / 360;
      if (s < 0 && (s += 1), e = (1 < this.s.v ? 1 : this.s.v < 0 ? 0 : this.s.v) + s, (r = (1 < this.e.v ? 1 : this.e.v < 0 ? 0 : this.e.v) + s) < e) {
        var a = e;
        e = r, r = a;
      }
      e = 1e-4 * Math.round(1e4 * e), r = 1e-4 * Math.round(1e4 * r), this.sValue = e, this.eValue = r;
    } else e = this.sValue, r = this.eValue;
    var n,
      o,
      h,
      l,
      p,
      m,
      f = this.shapes.length,
      c = 0;
    if (r === e) for (n = 0; n < f; n += 1) this.shapes[n].localShapeCollection.releaseShapes(), this.shapes[n].shape._mdf = !0, this.shapes[n].shape.paths = this.shapes[n].localShapeCollection;else if (1 === r && 0 === e || 0 === r && 1 === e) {
      if (this._mdf) for (n = 0; n < f; n += 1) this.shapes[n].pathsData.length = 0, this.shapes[n].shape._mdf = !0;
    } else {
      var d,
        u,
        y = [];
      for (n = 0; n < f; n += 1) if ((d = this.shapes[n]).shape._mdf || this._mdf || t || 2 === this.m) {
        if (h = (i = d.shape.paths)._length, m = 0, !d.shape._mdf && d.pathsData.length) m = d.totalShapeLength;else {
          for (l = this.releasePathsData(d.pathsData), o = 0; o < h; o += 1) p = bez.getSegmentsLength(i.shapes[o]), l.push(p), m += p.totalLength;
          d.totalShapeLength = m, d.pathsData = l;
        }
        c += m, d.shape._mdf = !0;
      } else d.shape.paths = d.localShapeCollection;
      var g,
        v = e,
        b = r,
        E = 0;
      for (n = f - 1; 0 <= n; n -= 1) if ((d = this.shapes[n]).shape._mdf) {
        for ((u = d.localShapeCollection).releaseShapes(), 2 === this.m && 1 < f ? (g = this.calculateShapeEdges(e, r, d.totalShapeLength, E, c), E += d.totalShapeLength) : g = [[v, b]], h = g.length, o = 0; o < h; o += 1) {
          v = g[o][0], b = g[o][1], y.length = 0, b <= 1 ? y.push({
            s: d.totalShapeLength * v,
            e: d.totalShapeLength * b
          }) : 1 <= v ? y.push({
            s: d.totalShapeLength * (v - 1),
            e: d.totalShapeLength * (b - 1)
          }) : (y.push({
            s: d.totalShapeLength * v,
            e: d.totalShapeLength
          }), y.push({
            s: 0,
            e: d.totalShapeLength * (b - 1)
          }));
          var x = this.addShapes(d, y[0]);
          if (y[0].s !== y[0].e) {
            if (1 < y.length) if (d.shape.paths.shapes[d.shape.paths._length - 1].c) {
              var P = x.pop();
              this.addPaths(x, u), x = this.addShapes(d, y[1], P);
            } else this.addPaths(x, u), x = this.addShapes(d, y[1]);
            this.addPaths(x, u);
          }
        }
        d.shape.paths = u;
      }
    }
  }, TrimModifier.prototype.addPaths = function (t, e) {
    var r,
      i = t.length;
    for (r = 0; r < i; r += 1) e.addShape(t[r]);
  }, TrimModifier.prototype.addSegment = function (t, e, r, i, s, a, n) {
    s.setXYAt(e[0], e[1], "o", a), s.setXYAt(r[0], r[1], "i", a + 1), n && s.setXYAt(t[0], t[1], "v", a), s.setXYAt(i[0], i[1], "v", a + 1);
  }, TrimModifier.prototype.addSegmentFromArray = function (t, e, r, i) {
    e.setXYAt(t[1], t[5], "o", r), e.setXYAt(t[2], t[6], "i", r + 1), i && e.setXYAt(t[0], t[4], "v", r), e.setXYAt(t[3], t[7], "v", r + 1);
  }, TrimModifier.prototype.addShapes = function (t, e, r) {
    var i,
      s,
      a,
      n,
      o,
      h,
      l,
      p,
      m = t.pathsData,
      f = t.shape.paths.shapes,
      c = t.shape.paths._length,
      d = 0,
      u = [],
      y = !0;
    for (p = r ? (o = r._length, r._length) : (r = shape_pool.newElement(), o = 0), u.push(r), i = 0; i < c; i += 1) {
      for (h = m[i].lengths, r.c = f[i].c, a = f[i].c ? h.length : h.length + 1, s = 1; s < a; s += 1) if (d + (n = h[s - 1]).addedLength < e.s) d += n.addedLength, r.c = !1;else {
        if (d > e.e) {
          r.c = !1;
          break;
        }
        e.s <= d && e.e >= d + n.addedLength ? (this.addSegment(f[i].v[s - 1], f[i].o[s - 1], f[i].i[s], f[i].v[s], r, o, y), y = !1) : (l = bez.getNewSegment(f[i].v[s - 1], f[i].v[s], f[i].o[s - 1], f[i].i[s], (e.s - d) / n.addedLength, (e.e - d) / n.addedLength, h[s - 1]), this.addSegmentFromArray(l, r, o, y), y = !1, r.c = !1), d += n.addedLength, o += 1;
      }
      if (f[i].c && h.length) {
        if (n = h[s - 1], d <= e.e) {
          var g = h[s - 1].addedLength;
          e.s <= d && e.e >= d + g ? (this.addSegment(f[i].v[s - 1], f[i].o[s - 1], f[i].i[0], f[i].v[0], r, o, y), y = !1) : (l = bez.getNewSegment(f[i].v[s - 1], f[i].v[0], f[i].o[s - 1], f[i].i[0], (e.s - d) / g, (e.e - d) / g, h[s - 1]), this.addSegmentFromArray(l, r, o, y), y = !1, r.c = !1);
        } else r.c = !1;
        d += n.addedLength, o += 1;
      }
      if (r._length && (r.setXYAt(r.v[p][0], r.v[p][1], "i", p), r.setXYAt(r.v[r._length - 1][0], r.v[r._length - 1][1], "o", r._length - 1)), d > e.e) break;
      i < c - 1 && (r = shape_pool.newElement(), y = !0, u.push(r), o = 0);
    }
    return u;
  }, ShapeModifiers.registerModifier("tm", TrimModifier), extendPrototype([ShapeModifier], RoundCornersModifier), RoundCornersModifier.prototype.initModifierProperties = function (t, e) {
    this.getValue = this.processKeys, this.rd = PropertyFactory.getProp(t, e.r, 0, null, this), this._isAnimated = !!this.rd.effectsSequence.length;
  }, RoundCornersModifier.prototype.processPath = function (t, e) {
    var r = shape_pool.newElement();
    r.c = t.c;
    var i,
      s,
      a,
      n,
      o,
      h,
      l,
      p,
      m,
      f,
      c,
      d,
      u,
      y = t._length,
      g = 0;
    for (i = 0; i < y; i += 1) s = t.v[i], n = t.o[i], a = t.i[i], s[0] === n[0] && s[1] === n[1] && s[0] === a[0] && s[1] === a[1] ? 0 !== i && i !== y - 1 || t.c ? (o = 0 === i ? t.v[y - 1] : t.v[i - 1], l = (h = Math.sqrt(Math.pow(s[0] - o[0], 2) + Math.pow(s[1] - o[1], 2))) ? Math.min(h / 2, e) / h : 0, p = d = s[0] + (o[0] - s[0]) * l, m = u = s[1] - (s[1] - o[1]) * l, f = p - (p - s[0]) * roundCorner, c = m - (m - s[1]) * roundCorner, r.setTripleAt(p, m, f, c, d, u, g), g += 1, o = i === y - 1 ? t.v[0] : t.v[i + 1], l = (h = Math.sqrt(Math.pow(s[0] - o[0], 2) + Math.pow(s[1] - o[1], 2))) ? Math.min(h / 2, e) / h : 0, p = f = s[0] + (o[0] - s[0]) * l, m = c = s[1] + (o[1] - s[1]) * l, d = p - (p - s[0]) * roundCorner, u = m - (m - s[1]) * roundCorner, r.setTripleAt(p, m, f, c, d, u, g)) : r.setTripleAt(s[0], s[1], n[0], n[1], a[0], a[1], g) : r.setTripleAt(t.v[i][0], t.v[i][1], t.o[i][0], t.o[i][1], t.i[i][0], t.i[i][1], g), g += 1;
    return r;
  }, RoundCornersModifier.prototype.processShapes = function (t) {
    var e,
      r,
      i,
      s,
      a,
      n,
      o = this.shapes.length,
      h = this.rd.v;
    if (0 !== h) for (r = 0; r < o; r += 1) {
      if ((a = this.shapes[r]).shape.paths, n = a.localShapeCollection, a.shape._mdf || this._mdf || t) for (n.releaseShapes(), a.shape._mdf = !0, e = a.shape.paths.shapes, s = a.shape.paths._length, i = 0; i < s; i += 1) n.addShape(this.processPath(e[i], h));
      a.shape.paths = a.localShapeCollection;
    }
    this.dynamicProperties.length || (this._mdf = !1);
  }, ShapeModifiers.registerModifier("rd", RoundCornersModifier), extendPrototype([ShapeModifier], RepeaterModifier), RepeaterModifier.prototype.initModifierProperties = function (t, e) {
    this.getValue = this.processKeys, this.c = PropertyFactory.getProp(t, e.c, 0, null, this), this.o = PropertyFactory.getProp(t, e.o, 0, null, this), this.tr = TransformPropertyFactory.getTransformProperty(t, e.tr, this), this.so = PropertyFactory.getProp(t, e.tr.so, 0, .01, this), this.eo = PropertyFactory.getProp(t, e.tr.eo, 0, .01, this), this.data = e, this.dynamicProperties.length || this.getValue(!0), this._isAnimated = !!this.dynamicProperties.length, this.pMatrix = new Matrix(), this.rMatrix = new Matrix(), this.sMatrix = new Matrix(), this.tMatrix = new Matrix(), this.matrix = new Matrix();
  }, RepeaterModifier.prototype.applyTransforms = function (t, e, r, i, s, a) {
    var n = a ? -1 : 1,
      o = i.s.v[0] + (1 - i.s.v[0]) * (1 - s),
      h = i.s.v[1] + (1 - i.s.v[1]) * (1 - s);
    t.translate(i.p.v[0] * n * s, i.p.v[1] * n * s, i.p.v[2]), e.translate(-i.a.v[0], -i.a.v[1], i.a.v[2]), e.rotate(-i.r.v * n * s), e.translate(i.a.v[0], i.a.v[1], i.a.v[2]), r.translate(-i.a.v[0], -i.a.v[1], i.a.v[2]), r.scale(a ? 1 / o : o, a ? 1 / h : h), r.translate(i.a.v[0], i.a.v[1], i.a.v[2]);
  }, RepeaterModifier.prototype.init = function (t, e, r, i) {
    this.elem = t, this.arr = e, this.pos = r, this.elemsData = i, this._currentCopies = 0, this._elements = [], this._groups = [], this.frameId = -1, this.initDynamicPropertyContainer(t), this.initModifierProperties(t, e[r]);
    for (; 0 < r;) r -= 1, this._elements.unshift(e[r]), 1;
    this.dynamicProperties.length ? this.k = !0 : this.getValue(!0);
  }, RepeaterModifier.prototype.resetElements = function (t) {
    var e,
      r = t.length;
    for (e = 0; e < r; e += 1) t[e]._processed = !1, "gr" === t[e].ty && this.resetElements(t[e].it);
  }, RepeaterModifier.prototype.cloneElements = function (t) {
    t.length;
    var e = JSON.parse(JSON.stringify(t));
    return this.resetElements(e), e;
  }, RepeaterModifier.prototype.changeGroupRender = function (t, e) {
    var r,
      i = t.length;
    for (r = 0; r < i; r += 1) t[r]._render = e, "gr" === t[r].ty && this.changeGroupRender(t[r].it, e);
  }, RepeaterModifier.prototype.processShapes = function (t) {
    var e, r, i, s, a;
    if (this._mdf || t) {
      var n,
        o = Math.ceil(this.c.v);
      if (this._groups.length < o) {
        for (; this._groups.length < o;) {
          var h = {
            it: this.cloneElements(this._elements),
            ty: "gr"
          };
          h.it.push({
            a: {
              a: 0,
              ix: 1,
              k: [0, 0]
            },
            nm: "Transform",
            o: {
              a: 0,
              ix: 7,
              k: 100
            },
            p: {
              a: 0,
              ix: 2,
              k: [0, 0]
            },
            r: {
              a: 1,
              ix: 6,
              k: [{
                s: 0,
                e: 0,
                t: 0
              }, {
                s: 0,
                e: 0,
                t: 1
              }]
            },
            s: {
              a: 0,
              ix: 3,
              k: [100, 100]
            },
            sa: {
              a: 0,
              ix: 5,
              k: 0
            },
            sk: {
              a: 0,
              ix: 4,
              k: 0
            },
            ty: "tr"
          }), this.arr.splice(0, 0, h), this._groups.splice(0, 0, h), this._currentCopies += 1;
        }
        this.elem.reloadShapes();
      }
      for (i = a = 0; i <= this._groups.length - 1; i += 1) n = a < o, this._groups[i]._render = n, this.changeGroupRender(this._groups[i].it, n), a += 1;
      this._currentCopies = o;
      var l = this.o.v,
        p = l % 1,
        m = 0 < l ? Math.floor(l) : Math.ceil(l),
        f = (this.tr.v.props, this.pMatrix.props),
        c = this.rMatrix.props,
        d = this.sMatrix.props;
      this.pMatrix.reset(), this.rMatrix.reset(), this.sMatrix.reset(), this.tMatrix.reset(), this.matrix.reset();
      var u,
        y,
        g = 0;
      if (0 < l) {
        for (; g < m;) this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, !1), g += 1;
        p && (this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, p, !1), g += p);
      } else if (l < 0) {
        for (; m < g;) this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, !0), g -= 1;
        p && (this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -p, !0), g -= p);
      }
      for (i = 1 === this.data.m ? 0 : this._currentCopies - 1, s = 1 === this.data.m ? 1 : -1, a = this._currentCopies; a;) {
        if (y = (r = (e = this.elemsData[i].it)[e.length - 1].transform.mProps.v.props).length, e[e.length - 1].transform.mProps._mdf = !0, e[e.length - 1].transform.op._mdf = !0, e[e.length - 1].transform.op.v = this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1)), 0 !== g) {
          for ((0 !== i && 1 === s || i !== this._currentCopies - 1 && -1 === s) && this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, !1), this.matrix.transform(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15]), this.matrix.transform(d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11], d[12], d[13], d[14], d[15]), this.matrix.transform(f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8], f[9], f[10], f[11], f[12], f[13], f[14], f[15]), u = 0; u < y; u += 1) r[u] = this.matrix.props[u];
          this.matrix.reset();
        } else for (this.matrix.reset(), u = 0; u < y; u += 1) r[u] = this.matrix.props[u];
        g += 1, a -= 1, i += s;
      }
    } else for (a = this._currentCopies, i = 0, s = 1; a;) r = (e = this.elemsData[i].it)[e.length - 1].transform.mProps.v.props, e[e.length - 1].transform.mProps._mdf = !1, e[e.length - 1].transform.op._mdf = !1, a -= 1, i += s;
  }, RepeaterModifier.prototype.addShape = function () {}, ShapeModifiers.registerModifier("rp", RepeaterModifier), ShapeCollection.prototype.addShape = function (t) {
    this._length === this._maxLength && (this.shapes = this.shapes.concat(createSizedArray(this._maxLength)), this._maxLength *= 2), this.shapes[this._length] = t, this._length += 1;
  }, ShapeCollection.prototype.releaseShapes = function () {
    var t;
    for (t = 0; t < this._length; t += 1) shape_pool.release(this.shapes[t]);
    this._length = 0;
  }, DashProperty.prototype.getValue = function (t) {
    if ((this.elem.globalData.frameId !== this.frameId || t) && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf = this._mdf || t, this._mdf)) {
      var e = 0,
        r = this.dataProps.length;
      for ("svg" === this.renderer && (this.dashStr = ""), e = 0; e < r; e += 1) "o" != this.dataProps[e].n ? "svg" === this.renderer ? this.dashStr += " " + this.dataProps[e].p.v : this.dashArray[e] = this.dataProps[e].p.v : this.dashoffset[0] = this.dataProps[e].p.v;
    }
  }, extendPrototype([DynamicPropertyContainer], DashProperty), GradientProperty.prototype.comparePoints = function (t, e) {
    for (var r = 0, i = this.o.length / 2; r < i;) {
      if (.01 < Math.abs(t[4 * r] - t[4 * e + 2 * r])) return !1;
      r += 1;
    }
    return !0;
  }, GradientProperty.prototype.checkCollapsable = function () {
    if (this.o.length / 2 != this.c.length / 4) return !1;
    if (this.data.k.k[0].s) for (var t = 0, e = this.data.k.k.length; t < e;) {
      if (!this.comparePoints(this.data.k.k[t].s, this.data.p)) return !1;
      t += 1;
    } else if (!this.comparePoints(this.data.k.k, this.data.p)) return !1;
    return !0;
  }, GradientProperty.prototype.getValue = function (t) {
    if (this.prop.getValue(), this._mdf = !1, this._cmdf = !1, this._omdf = !1, this.prop._mdf || t) {
      var e,
        r,
        i,
        s = 4 * this.data.p;
      for (e = 0; e < s; e += 1) r = e % 4 == 0 ? 100 : 255, i = Math.round(this.prop.v[e] * r), this.c[e] !== i && (this.c[e] = i, this._cmdf = !t);
      if (this.o.length) for (s = this.prop.v.length, e = 4 * this.data.p; e < s; e += 1) r = e % 2 == 0 ? 100 : 1, i = e % 2 == 0 ? Math.round(100 * this.prop.v[e]) : this.prop.v[e], this.o[e - 4 * this.data.p] !== i && (this.o[e - 4 * this.data.p] = i, this._omdf = !t);
      this._mdf = !t;
    }
  }, extendPrototype([DynamicPropertyContainer], GradientProperty);
  var buildShapeString = function buildShapeString(t, e, r, i) {
      if (0 === e) return "";
      var s,
        a = t.o,
        n = t.i,
        o = t.v,
        h = " M" + i.applyToPointStringified(o[0][0], o[0][1]);
      for (s = 1; s < e; s += 1) h += " C" + i.applyToPointStringified(a[s - 1][0], a[s - 1][1]) + " " + i.applyToPointStringified(n[s][0], n[s][1]) + " " + i.applyToPointStringified(o[s][0], o[s][1]);
      return r && e && (h += " C" + i.applyToPointStringified(a[s - 1][0], a[s - 1][1]) + " " + i.applyToPointStringified(n[0][0], n[0][1]) + " " + i.applyToPointStringified(o[0][0], o[0][1]), h += "z"), h;
    },
    ImagePreloader = function () {
      var s = function () {
        var t = createTag("canvas");
        t.width = 1, t.height = 1;
        var e = t.getContext("2d");
        return e.fillStyle = "rgba(0,0,0,0)", e.fillRect(0, 0, 1, 1), t;
      }();
      function t() {
        this.loadedAssets += 1, this.loadedAssets === this.totalImages && this.imagesLoadedCb && this.imagesLoadedCb(null);
      }
      function e(t) {
        var e = function (t, e, r) {
            var i = "";
            if (t.e) i = t.p;else if (e) {
              var s = t.p;
              -1 !== s.indexOf("images/") && (s = s.split("/")[1]), i = e + s;
            } else i = r, i += t.u ? t.u : "", i += t.p;
            return i;
          }(t, this.assetsPath, this.path),
          r = createTag("img");
        r.crossOrigin = "anonymous", r.addEventListener("load", this._imageLoaded.bind(this), !1), r.addEventListener("error", function () {
          i.img = s, this._imageLoaded();
        }.bind(this), !1), r.src = e;
        var i = {
          img: r,
          assetData: t
        };
        return i;
      }
      function r(t, e) {
        this.imagesLoadedCb = e;
        var r,
          i = t.length;
        for (r = 0; r < i; r += 1) t[r].layers || (this.totalImages += 1, this.images.push(this._createImageData(t[r])));
      }
      function i(t) {
        this.path = t || "";
      }
      function a(t) {
        this.assetsPath = t || "";
      }
      function n(t) {
        for (var e = 0, r = this.images.length; e < r;) {
          if (this.images[e].assetData === t) return this.images[e].img;
          e += 1;
        }
      }
      function o() {
        this.imagesLoadedCb = null, this.images.length = 0;
      }
      function h() {
        return this.totalImages === this.loadedAssets;
      }
      return function () {
        this.loadAssets = r, this.setAssetsPath = a, this.setPath = i, this.loaded = h, this.destroy = o, this.getImage = n, this._createImageData = e, this._imageLoaded = t, this.assetsPath = "", this.path = "", this.totalImages = 0, this.loadedAssets = 0, this.imagesLoadedCb = null, this.images = [];
      };
    }(),
    featureSupport = (qw = {
      maskType: !0
    }, (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) && (qw.maskType = !1), qw),
    qw,
    filtersFactory = (rw = {}, rw.createFilter = function (t) {
      var e = createNS("filter");
      return e.setAttribute("id", t), e.setAttribute("filterUnits", "objectBoundingBox"), e.setAttribute("x", "0%"), e.setAttribute("y", "0%"), e.setAttribute("width", "100%"), e.setAttribute("height", "100%"), e;
    }, rw.createAlphaToLuminanceFilter = function () {
      var t = createNS("feColorMatrix");
      return t.setAttribute("type", "matrix"), t.setAttribute("color-interpolation-filters", "sRGB"), t.setAttribute("values", "0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"), t;
    }, rw),
    rw,
    assetLoader = function () {
      function a(t) {
        return t.response && "object" == _typeof(t.response) ? t.response : t.response && "string" == typeof t.response ? JSON.parse(t.response) : t.responseText ? JSON.parse(t.responseText) : void 0;
      }
      return {
        load: function load(t, e, r) {
          var i,
            s = new XMLHttpRequest();
          s.open("GET", t, !0);
          try {
            s.responseType = "json";
          } catch (t) {}
          s.send(), s.onreadystatechange = function () {
            if (4 == s.readyState) if (200 == s.status) i = a(s), e(i);else try {
              i = a(s), e(i);
            } catch (t) {
              r && r(t);
            }
          };
        }
      };
    }();
  function TextAnimatorProperty(t, e, r) {
    this._isFirstFrame = !0, this._hasMaskedPath = !1, this._frameId = -1, this._textData = t, this._renderType = e, this._elem = r, this._animatorsData = createSizedArray(this._textData.a.length), this._pathData = {}, this._moreOptions = {
      alignment: {}
    }, this.renderedLetters = [], this.lettersChangedFlag = !1, this.initDynamicPropertyContainer(r);
  }
  function TextAnimatorDataProperty(t, e, r) {
    var i = {
        propType: !1
      },
      s = PropertyFactory.getProp,
      a = e.a;
    this.a = {
      r: a.r ? s(t, a.r, 0, degToRads, r) : i,
      rx: a.rx ? s(t, a.rx, 0, degToRads, r) : i,
      ry: a.ry ? s(t, a.ry, 0, degToRads, r) : i,
      sk: a.sk ? s(t, a.sk, 0, degToRads, r) : i,
      sa: a.sa ? s(t, a.sa, 0, degToRads, r) : i,
      s: a.s ? s(t, a.s, 1, .01, r) : i,
      a: a.a ? s(t, a.a, 1, 0, r) : i,
      o: a.o ? s(t, a.o, 0, .01, r) : i,
      p: a.p ? s(t, a.p, 1, 0, r) : i,
      sw: a.sw ? s(t, a.sw, 0, 0, r) : i,
      sc: a.sc ? s(t, a.sc, 1, 0, r) : i,
      fc: a.fc ? s(t, a.fc, 1, 0, r) : i,
      fh: a.fh ? s(t, a.fh, 0, 0, r) : i,
      fs: a.fs ? s(t, a.fs, 0, .01, r) : i,
      fb: a.fb ? s(t, a.fb, 0, .01, r) : i,
      t: a.t ? s(t, a.t, 0, 0, r) : i
    }, this.s = TextSelectorProp.getTextSelectorProp(t, e.s, r), this.s.t = e.s.t;
  }
  function LetterProps(t, e, r, i, s, a) {
    this.o = t, this.sw = e, this.sc = r, this.fc = i, this.m = s, this.p = a, this._mdf = {
      o: !0,
      sw: !!e,
      sc: !!r,
      fc: !!i,
      m: !0,
      p: !0
    };
  }
  function TextProperty(t, e) {
    this._frameId = initialDefaultFrame, this.pv = "", this.v = "", this.kf = !1, this._isFirstFrame = !0, this._mdf = !1, this.data = e, this.elem = t, this.comp = this.elem.comp, this.keysIndex = 0, this.canResize = !1, this.minimumFontSize = 1, this.effectsSequence = [], this.currentData = {
      ascent: 0,
      boxWidth: this.defaultBoxWidth,
      f: "",
      fStyle: "",
      fWeight: "",
      fc: "",
      j: "",
      justifyOffset: "",
      l: [],
      lh: 0,
      lineWidths: [],
      ls: "",
      of: "",
      s: "",
      sc: "",
      sw: 0,
      t: 0,
      tr: 0,
      sz: 0,
      ps: null,
      fillColorAnim: !1,
      strokeColorAnim: !1,
      strokeWidthAnim: !1,
      yOffset: 0,
      finalSize: 0,
      finalText: [],
      finalLineHeight: 0,
      __complete: !1
    }, this.copyData(this.currentData, this.data.d.k[0].s), this.searchProperty() || this.completeTextData(this.currentData);
  }
  TextAnimatorProperty.prototype.searchProperties = function () {
    var t,
      e,
      r = this._textData.a.length,
      i = PropertyFactory.getProp;
    for (t = 0; t < r; t += 1) e = this._textData.a[t], this._animatorsData[t] = new TextAnimatorDataProperty(this._elem, e, this);
    this._textData.p && "m" in this._textData.p ? (this._pathData = {
      f: i(this._elem, this._textData.p.f, 0, 0, this),
      l: i(this._elem, this._textData.p.l, 0, 0, this),
      r: this._textData.p.r,
      m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
    }, this._hasMaskedPath = !0) : this._hasMaskedPath = !1, this._moreOptions.alignment = i(this._elem, this._textData.m.a, 1, 0, this);
  }, TextAnimatorProperty.prototype.getMeasures = function (t, e) {
    if (this.lettersChangedFlag = e, this._mdf || this._isFirstFrame || e || this._hasMaskedPath && this._pathData.m._mdf) {
      this._isFirstFrame = !1;
      var r,
        i,
        s,
        a,
        n,
        o,
        h,
        l,
        p,
        m,
        f,
        c,
        d,
        u,
        y,
        g,
        v,
        b,
        E,
        x = this._moreOptions.alignment.v,
        P = this._animatorsData,
        S = this._textData,
        _ = this.mHelper,
        A = this._renderType,
        C = this.renderedLetters.length,
        T = (this.data, t.l);
      if (this._hasMaskedPath) {
        if (E = this._pathData.m, !this._pathData.n || this._pathData._mdf) {
          var k,
            M = E.v;
          for (this._pathData.r && (M = M.reverse()), n = {
            tLength: 0,
            segments: []
          }, a = M._length - 1, s = g = 0; s < a; s += 1) k = bez.buildBezierData(M.v[s], M.v[s + 1], [M.o[s][0] - M.v[s][0], M.o[s][1] - M.v[s][1]], [M.i[s + 1][0] - M.v[s + 1][0], M.i[s + 1][1] - M.v[s + 1][1]]), n.tLength += k.segmentLength, n.segments.push(k), g += k.segmentLength;
          s = a, E.v.c && (k = bez.buildBezierData(M.v[s], M.v[0], [M.o[s][0] - M.v[s][0], M.o[s][1] - M.v[s][1]], [M.i[0][0] - M.v[0][0], M.i[0][1] - M.v[0][1]]), n.tLength += k.segmentLength, n.segments.push(k), g += k.segmentLength), this._pathData.pi = n;
        }
        if (n = this._pathData.pi, o = this._pathData.f.v, m = 1, p = !(l = f = 0), u = n.segments, o < 0 && E.v.c) for (n.tLength < Math.abs(o) && (o = -Math.abs(o) % n.tLength), m = (d = u[f = u.length - 1].points).length - 1; o < 0;) o += d[m].partialLength, (m -= 1) < 0 && (m = (d = u[f -= 1].points).length - 1);
        c = (d = u[f].points)[m - 1], y = (h = d[m]).partialLength;
      }
      a = T.length, i = r = 0;
      var D,
        w,
        F,
        I,
        V = 1.2 * t.finalSize * .714,
        R = !0;
      F = P.length;
      var B,
        L,
        G,
        z,
        N,
        O,
        H,
        j,
        q,
        W,
        Y,
        X,
        $,
        K = -1,
        Z = o,
        J = f,
        Q = m,
        U = -1,
        tt = "",
        et = this.defaultPropsArray;
      if (2 === t.j || 1 === t.j) {
        var rt = 0,
          it = 0,
          st = 2 === t.j ? -.5 : -1,
          at = 0,
          nt = !0;
        for (s = 0; s < a; s += 1) if (T[s].n) {
          for (rt && (rt += it); at < s;) T[at].animatorJustifyOffset = rt, at += 1;
          nt = !(rt = 0);
        } else {
          for (w = 0; w < F; w += 1) (D = P[w].a).t.propType && (nt && 2 === t.j && (it += D.t.v * st), (B = P[w].s.getMult(T[s].anIndexes[w], S.a[w].s.totalChars)).length ? rt += D.t.v * B[0] * st : rt += D.t.v * B * st);
          nt = !1;
        }
        for (rt && (rt += it); at < s;) T[at].animatorJustifyOffset = rt, at += 1;
      }
      for (s = 0; s < a; s += 1) {
        if (_.reset(), N = 1, T[s].n) r = 0, i += t.yOffset, i += R ? 1 : 0, o = Z, R = !1, 0, this._hasMaskedPath && (m = Q, c = (d = u[f = J].points)[m - 1], y = (h = d[m]).partialLength, l = 0), $ = W = X = tt = "", et = this.defaultPropsArray;else {
          if (this._hasMaskedPath) {
            if (U !== T[s].line) {
              switch (t.j) {
                case 1:
                  o += g - t.lineWidths[T[s].line];
                  break;
                case 2:
                  o += (g - t.lineWidths[T[s].line]) / 2;
              }
              U = T[s].line;
            }
            K !== T[s].ind && (T[K] && (o += T[K].extra), o += T[s].an / 2, K = T[s].ind), o += x[0] * T[s].an / 200;
            var ot = 0;
            for (w = 0; w < F; w += 1) (D = P[w].a).p.propType && ((B = P[w].s.getMult(T[s].anIndexes[w], S.a[w].s.totalChars)).length ? ot += D.p.v[0] * B[0] : ot += D.p.v[0] * B), D.a.propType && ((B = P[w].s.getMult(T[s].anIndexes[w], S.a[w].s.totalChars)).length ? ot += D.a.v[0] * B[0] : ot += D.a.v[0] * B);
            for (p = !0; p;) o + ot <= l + y || !d ? (v = (o + ot - l) / h.partialLength, G = c.point[0] + (h.point[0] - c.point[0]) * v, z = c.point[1] + (h.point[1] - c.point[1]) * v, _.translate(-x[0] * T[s].an / 200, -x[1] * V / 100), p = !1) : d && (l += h.partialLength, (m += 1) >= d.length && (m = 0, d = u[f += 1] ? u[f].points : E.v.c ? u[f = m = 0].points : (l -= h.partialLength, null)), d && (c = h, y = (h = d[m]).partialLength));
            L = T[s].an / 2 - T[s].add, _.translate(-L, 0, 0);
          } else L = T[s].an / 2 - T[s].add, _.translate(-L, 0, 0), _.translate(-x[0] * T[s].an / 200, -x[1] * V / 100, 0);
          for (T[s].l / 2, w = 0; w < F; w += 1) (D = P[w].a).t.propType && (B = P[w].s.getMult(T[s].anIndexes[w], S.a[w].s.totalChars), 0 === r && 0 === t.j || (this._hasMaskedPath ? B.length ? o += D.t.v * B[0] : o += D.t.v * B : B.length ? r += D.t.v * B[0] : r += D.t.v * B));
          for (T[s].l / 2, t.strokeWidthAnim && (H = t.sw || 0), t.strokeColorAnim && (O = t.sc ? [t.sc[0], t.sc[1], t.sc[2]] : [0, 0, 0]), t.fillColorAnim && t.fc && (j = [t.fc[0], t.fc[1], t.fc[2]]), w = 0; w < F; w += 1) (D = P[w].a).a.propType && ((B = P[w].s.getMult(T[s].anIndexes[w], S.a[w].s.totalChars)).length ? _.translate(-D.a.v[0] * B[0], -D.a.v[1] * B[1], D.a.v[2] * B[2]) : _.translate(-D.a.v[0] * B, -D.a.v[1] * B, D.a.v[2] * B));
          for (w = 0; w < F; w += 1) (D = P[w].a).s.propType && ((B = P[w].s.getMult(T[s].anIndexes[w], S.a[w].s.totalChars)).length ? _.scale(1 + (D.s.v[0] - 1) * B[0], 1 + (D.s.v[1] - 1) * B[1], 1) : _.scale(1 + (D.s.v[0] - 1) * B, 1 + (D.s.v[1] - 1) * B, 1));
          for (w = 0; w < F; w += 1) {
            if (D = P[w].a, B = P[w].s.getMult(T[s].anIndexes[w], S.a[w].s.totalChars), D.sk.propType && (B.length ? _.skewFromAxis(-D.sk.v * B[0], D.sa.v * B[1]) : _.skewFromAxis(-D.sk.v * B, D.sa.v * B)), D.r.propType && (B.length ? _.rotateZ(-D.r.v * B[2]) : _.rotateZ(-D.r.v * B)), D.ry.propType && (B.length ? _.rotateY(D.ry.v * B[1]) : _.rotateY(D.ry.v * B)), D.rx.propType && (B.length ? _.rotateX(D.rx.v * B[0]) : _.rotateX(D.rx.v * B)), D.o.propType && (B.length ? N += (D.o.v * B[0] - N) * B[0] : N += (D.o.v * B - N) * B), t.strokeWidthAnim && D.sw.propType && (B.length ? H += D.sw.v * B[0] : H += D.sw.v * B), t.strokeColorAnim && D.sc.propType) for (q = 0; q < 3; q += 1) B.length ? O[q] = O[q] + (D.sc.v[q] - O[q]) * B[0] : O[q] = O[q] + (D.sc.v[q] - O[q]) * B;
            if (t.fillColorAnim && t.fc) {
              if (D.fc.propType) for (q = 0; q < 3; q += 1) B.length ? j[q] = j[q] + (D.fc.v[q] - j[q]) * B[0] : j[q] = j[q] + (D.fc.v[q] - j[q]) * B;
              D.fh.propType && (j = B.length ? addHueToRGB(j, D.fh.v * B[0]) : addHueToRGB(j, D.fh.v * B)), D.fs.propType && (j = B.length ? addSaturationToRGB(j, D.fs.v * B[0]) : addSaturationToRGB(j, D.fs.v * B)), D.fb.propType && (j = B.length ? addBrightnessToRGB(j, D.fb.v * B[0]) : addBrightnessToRGB(j, D.fb.v * B));
            }
          }
          for (w = 0; w < F; w += 1) (D = P[w].a).p.propType && (B = P[w].s.getMult(T[s].anIndexes[w], S.a[w].s.totalChars), this._hasMaskedPath ? B.length ? _.translate(0, D.p.v[1] * B[0], -D.p.v[2] * B[1]) : _.translate(0, D.p.v[1] * B, -D.p.v[2] * B) : B.length ? _.translate(D.p.v[0] * B[0], D.p.v[1] * B[1], -D.p.v[2] * B[2]) : _.translate(D.p.v[0] * B, D.p.v[1] * B, -D.p.v[2] * B));
          if (t.strokeWidthAnim && (W = H < 0 ? 0 : H), t.strokeColorAnim && (Y = "rgb(" + Math.round(255 * O[0]) + "," + Math.round(255 * O[1]) + "," + Math.round(255 * O[2]) + ")"), t.fillColorAnim && t.fc && (X = "rgb(" + Math.round(255 * j[0]) + "," + Math.round(255 * j[1]) + "," + Math.round(255 * j[2]) + ")"), this._hasMaskedPath) {
            if (_.translate(0, -t.ls), _.translate(0, x[1] * V / 100 + i, 0), S.p.p) {
              b = (h.point[1] - c.point[1]) / (h.point[0] - c.point[0]);
              var ht = 180 * Math.atan(b) / Math.PI;
              h.point[0] < c.point[0] && (ht += 180), _.rotate(-ht * Math.PI / 180);
            }
            _.translate(G, z, 0), o -= x[0] * T[s].an / 200, T[s + 1] && K !== T[s + 1].ind && (o += T[s].an / 2, o += t.tr / 1e3 * t.finalSize);
          } else {
            switch (_.translate(r, i, 0), t.ps && _.translate(t.ps[0], t.ps[1] + t.ascent, 0), t.j) {
              case 1:
                _.translate(T[s].animatorJustifyOffset + t.justifyOffset + (t.boxWidth - t.lineWidths[T[s].line]), 0, 0);
                break;
              case 2:
                _.translate(T[s].animatorJustifyOffset + t.justifyOffset + (t.boxWidth - t.lineWidths[T[s].line]) / 2, 0, 0);
            }
            _.translate(0, -t.ls), _.translate(L, 0, 0), _.translate(x[0] * T[s].an / 200, x[1] * V / 100, 0), r += T[s].l + t.tr / 1e3 * t.finalSize;
          }
          "html" === A ? tt = _.toCSS() : "svg" === A ? tt = _.to2dCSS() : et = [_.props[0], _.props[1], _.props[2], _.props[3], _.props[4], _.props[5], _.props[6], _.props[7], _.props[8], _.props[9], _.props[10], _.props[11], _.props[12], _.props[13], _.props[14], _.props[15]], $ = N;
        }
        this.lettersChangedFlag = C <= s ? (I = new LetterProps($, W, Y, X, tt, et), this.renderedLetters.push(I), C += 1, !0) : (I = this.renderedLetters[s]).update($, W, Y, X, tt, et) || this.lettersChangedFlag;
      }
    }
  }, TextAnimatorProperty.prototype.getValue = function () {
    this._elem.globalData.frameId !== this._frameId && (this._frameId = this._elem.globalData.frameId, this.iterateDynamicProperties());
  }, TextAnimatorProperty.prototype.mHelper = new Matrix(), TextAnimatorProperty.prototype.defaultPropsArray = [], extendPrototype([DynamicPropertyContainer], TextAnimatorProperty), LetterProps.prototype.update = function (t, e, r, i, s, a) {
    this._mdf.o = !1, this._mdf.sw = !1, this._mdf.sc = !1, this._mdf.fc = !1, this._mdf.m = !1;
    var n = this._mdf.p = !1;
    return this.o !== t && (this.o = t, n = this._mdf.o = !0), this.sw !== e && (this.sw = e, n = this._mdf.sw = !0), this.sc !== r && (this.sc = r, n = this._mdf.sc = !0), this.fc !== i && (this.fc = i, n = this._mdf.fc = !0), this.m !== s && (this.m = s, n = this._mdf.m = !0), !a.length || this.p[0] === a[0] && this.p[1] === a[1] && this.p[4] === a[4] && this.p[5] === a[5] && this.p[12] === a[12] && this.p[13] === a[13] || (this.p = a, n = this._mdf.p = !0), n;
  }, TextProperty.prototype.defaultBoxWidth = [0, 0], TextProperty.prototype.copyData = function (t, e) {
    for (var r in e) e.hasOwnProperty(r) && (t[r] = e[r]);
    return t;
  }, TextProperty.prototype.setCurrentData = function (t) {
    t.__complete || this.completeTextData(t), this.currentData = t, this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth, this._mdf = !0;
  }, TextProperty.prototype.searchProperty = function () {
    return this.searchKeyframes();
  }, TextProperty.prototype.searchKeyframes = function () {
    return this.kf = 1 < this.data.d.k.length, this.kf && this.addEffect(this.getKeyframeValue.bind(this)), this.kf;
  }, TextProperty.prototype.addEffect = function (t) {
    this.effectsSequence.push(t), this.elem.addDynamicProperty(this);
  }, TextProperty.prototype.getValue = function (t) {
    if (this.elem.globalData.frameId !== this.frameId && this.effectsSequence.length || t) {
      this.currentData.t = this.data.d.k[this.keysIndex].s.t;
      var e = this.currentData,
        r = this.keysIndex;
      if (this.lock) this.setCurrentData(this.currentData);else {
        this.lock = !0, this._mdf = !1;
        var i,
          s = this.effectsSequence.length,
          a = t || this.data.d.k[this.keysIndex].s;
        for (i = 0; i < s; i += 1) a = r !== this.keysIndex ? this.effectsSequence[i](a, a.t) : this.effectsSequence[i](this.currentData, a.t);
        e !== a && this.setCurrentData(a), this.pv = this.v = this.currentData, this.lock = !1, this.frameId = this.elem.globalData.frameId;
      }
    }
  }, TextProperty.prototype.getKeyframeValue = function () {
    for (var t = this.data.d.k, e = this.elem.comp.renderedFrame, r = 0, i = t.length; r <= i - 1 && (t[r].s, !(r === i - 1 || t[r + 1].t > e));) r += 1;
    return this.keysIndex !== r && (this.keysIndex = r), this.data.d.k[this.keysIndex].s;
  }, TextProperty.prototype.buildFinalText = function (t) {
    for (var e, r = FontManager.getCombinedCharacterCodes(), i = [], s = 0, a = t.length; s < a;) e = t.charCodeAt(s), -1 !== r.indexOf(e) ? i[i.length - 1] += t.charAt(s) : 55296 <= e && e <= 56319 && 56320 <= (e = t.charCodeAt(s + 1)) && e <= 57343 ? (i.push(t.substr(s, 2)), ++s) : i.push(t.charAt(s)), s += 1;
    return i;
  }, TextProperty.prototype.completeTextData = function (t) {
    t.__complete = !0;
    var e,
      r,
      i,
      s,
      a,
      n,
      o,
      h = this.elem.globalData.fontManager,
      l = this.data,
      p = [],
      m = 0,
      f = l.m.g,
      c = 0,
      d = 0,
      u = 0,
      y = [],
      g = 0,
      v = 0,
      b = h.getFontByName(t.f),
      E = 0,
      x = b.fStyle ? b.fStyle.split(" ") : [],
      P = "normal",
      S = "normal";
    for (r = x.length, e = 0; e < r; e += 1) switch (x[e].toLowerCase()) {
      case "italic":
        S = "italic";
        break;
      case "bold":
        P = "700";
        break;
      case "black":
        P = "900";
        break;
      case "medium":
        P = "500";
        break;
      case "regular":
      case "normal":
        P = "400";
        break;
      case "light":
      case "thin":
        P = "200";
    }
    t.fWeight = b.fWeight || P, t.fStyle = S, t.finalSize = t.s, t.finalText = this.buildFinalText(t.t), r = t.finalText.length, t.finalLineHeight = t.lh;
    var _,
      A = t.tr / 1e3 * t.finalSize;
    if (t.sz) for (var C, T, k = !0, M = t.sz[0], D = t.sz[1]; k;) {
      g = C = 0, r = (T = this.buildFinalText(t.t)).length, A = t.tr / 1e3 * t.finalSize;
      var w = -1;
      for (e = 0; e < r; e += 1) _ = T[e].charCodeAt(0), i = !1, " " === T[e] ? w = e : 13 !== _ && 3 !== _ || (i = !(g = 0), C += t.finalLineHeight || 1.2 * t.finalSize), M < g + (E = h.chars ? (o = h.getCharData(T[e], b.fStyle, b.fFamily), i ? 0 : o.w * t.finalSize / 100) : h.measureText(T[e], t.f, t.finalSize)) && " " !== T[e] ? (-1 === w ? r += 1 : e = w, C += t.finalLineHeight || 1.2 * t.finalSize, T.splice(e, w === e ? 1 : 0, "\r"), w = -1, g = 0) : (g += E, g += A);
      C += b.ascent * t.finalSize / 100, this.canResize && t.finalSize > this.minimumFontSize && D < C ? (t.finalSize -= 1, t.finalLineHeight = t.finalSize * t.lh / t.s) : (t.finalText = T, r = t.finalText.length, k = !1);
    }
    g = -A;
    var F,
      I = E = 0;
    for (e = 0; e < r; e += 1) if (i = !1, _ = (F = t.finalText[e]).charCodeAt(0), " " === F ? s = "\xa0" : 13 === _ || 3 === _ ? (I = 0, y.push(g), v = v < g ? g : v, g = -2 * A, i = !(s = ""), u += 1) : s = t.finalText[e], E = h.chars ? (o = h.getCharData(F, b.fStyle, h.getFontByName(t.f).fFamily), i ? 0 : o.w * t.finalSize / 100) : h.measureText(s, t.f, t.finalSize), " " === F ? I += E + A : (g += E + A + I, I = 0), p.push({
      l: E,
      an: E,
      add: c,
      n: i,
      anIndexes: [],
      val: s,
      line: u,
      animatorJustifyOffset: 0
    }), 2 == f) {
      if (c += E, "" === s || "\xa0" === s || e === r - 1) {
        for ("" !== s && "\xa0" !== s || (c -= E); d <= e;) p[d].an = c, p[d].ind = m, p[d].extra = E, d += 1;
        m += 1, c = 0;
      }
    } else if (3 == f) {
      if (c += E, "" === s || e === r - 1) {
        for ("" === s && (c -= E); d <= e;) p[d].an = c, p[d].ind = m, p[d].extra = E, d += 1;
        c = 0, m += 1;
      }
    } else p[m].ind = m, p[m].extra = 0, m += 1;
    if (t.l = p, v = v < g ? g : v, y.push(g), t.sz) t.boxWidth = t.sz[0], t.justifyOffset = 0;else switch (t.boxWidth = v, t.j) {
      case 1:
        t.justifyOffset = -t.boxWidth;
        break;
      case 2:
        t.justifyOffset = -t.boxWidth / 2;
        break;
      default:
        t.justifyOffset = 0;
    }
    t.lineWidths = y;
    var V,
      R,
      B = l.a;
    n = B.length;
    var L,
      G,
      z = [];
    for (a = 0; a < n; a += 1) {
      for ((V = B[a]).a.sc && (t.strokeColorAnim = !0), V.a.sw && (t.strokeWidthAnim = !0), (V.a.fc || V.a.fh || V.a.fs || V.a.fb) && (t.fillColorAnim = !0), G = 0, L = V.s.b, e = 0; e < r; e += 1) (R = p[e]).anIndexes[a] = G, (1 == L && "" !== R.val || 2 == L && "" !== R.val && "\xa0" !== R.val || 3 == L && (R.n || "\xa0" == R.val || e == r - 1) || 4 == L && (R.n || e == r - 1)) && (1 === V.s.rn && z.push(G), G += 1);
      l.a[a].s.totalChars = G;
      var N,
        O = -1;
      if (1 === V.s.rn) for (e = 0; e < r; e += 1) O != (R = p[e]).anIndexes[a] && (O = R.anIndexes[a], N = z.splice(Math.floor(Math.random() * z.length), 1)[0]), R.anIndexes[a] = N;
    }
    t.yOffset = t.finalLineHeight || 1.2 * t.finalSize, t.ls = t.ls || 0, t.ascent = b.ascent * t.finalSize / 100;
  }, TextProperty.prototype.updateDocumentData = function (t, e) {
    e = void 0 === e ? this.keysIndex : e;
    var r = this.copyData({}, this.data.d.k[e].s);
    r = this.copyData(r, t), this.data.d.k[e].s = r, this.recalculate(e), this.elem.addDynamicProperty(this);
  }, TextProperty.prototype.recalculate = function (t) {
    var e = this.data.d.k[t].s;
    e.__complete = !1, this.keysIndex = 0, this._isFirstFrame = !0, this.getValue(e);
  }, TextProperty.prototype.canResizeFont = function (t) {
    this.canResize = t, this.recalculate(this.keysIndex), this.elem.addDynamicProperty(this);
  }, TextProperty.prototype.setMinimumFontSize = function (t) {
    this.minimumFontSize = Math.floor(t) || 1, this.recalculate(this.keysIndex), this.elem.addDynamicProperty(this);
  };
  var TextSelectorProp = function () {
      var l = Math.max,
        p = Math.min,
        m = Math.floor;
      function i(t, e) {
        this._currentTextLength = -1, this.k = !1, this.data = e, this.elem = t, this.comp = t.comp, this.finalS = 0, this.finalE = 0, this.initDynamicPropertyContainer(t), this.s = PropertyFactory.getProp(t, e.s || {
          k: 0
        }, 0, 0, this), this.e = "e" in e ? PropertyFactory.getProp(t, e.e, 0, 0, this) : {
          v: 100
        }, this.o = PropertyFactory.getProp(t, e.o || {
          k: 0
        }, 0, 0, this), this.xe = PropertyFactory.getProp(t, e.xe || {
          k: 0
        }, 0, 0, this), this.ne = PropertyFactory.getProp(t, e.ne || {
          k: 0
        }, 0, 0, this), this.a = PropertyFactory.getProp(t, e.a, 0, .01, this), this.dynamicProperties.length || this.getValue();
      }
      return i.prototype = {
        getMult: function getMult(t) {
          this._currentTextLength !== this.elem.textProperty.currentData.l.length && this.getValue();
          var e = BezierFactory.getBezierEasing(this.ne.v / 100, 0, 1 - this.xe.v / 100, 1).get,
            r = 0,
            i = this.finalS,
            s = this.finalE,
            a = this.data.sh;
          if (2 == a) r = e(r = s === i ? s <= t ? 1 : 0 : l(0, p(.5 / (s - i) + (t - i) / (s - i), 1)));else if (3 == a) r = e(r = s === i ? s <= t ? 0 : 1 : 1 - l(0, p(.5 / (s - i) + (t - i) / (s - i), 1)));else if (4 == a) s === i ? r = 0 : (r = l(0, p(.5 / (s - i) + (t - i) / (s - i), 1))) < .5 ? r *= 2 : r = 1 - 2 * (r - .5), r = e(r);else if (5 == a) {
            if (s === i) r = 0;else {
              var n = s - i,
                o = -n / 2 + (t = p(l(0, t + .5 - i), s - i)),
                h = n / 2;
              r = Math.sqrt(1 - o * o / (h * h));
            }
            r = e(r);
          } else r = 6 == a ? e(r = s === i ? 0 : (t = p(l(0, t + .5 - i), s - i), (1 + Math.cos(Math.PI + 2 * Math.PI * t / (s - i))) / 2)) : (t >= m(i) && (r = t - i < 0 ? 1 - (i - t) : l(0, p(s - t, 1))), e(r));
          return r * this.a.v;
        },
        getValue: function getValue(t) {
          this.iterateDynamicProperties(), this._mdf = t || this._mdf, this._currentTextLength = this.elem.textProperty.currentData.l.length || 0, t && 2 === this.data.r && (this.e.v = this._currentTextLength);
          var e = 2 === this.data.r ? 1 : 100 / this.data.totalChars,
            r = this.o.v / e,
            i = this.s.v / e + r,
            s = this.e.v / e + r;
          if (s < i) {
            var a = i;
            i = s, s = a;
          }
          this.finalS = i, this.finalE = s;
        }
      }, extendPrototype([DynamicPropertyContainer], i), {
        getTextSelectorProp: function getTextSelectorProp(t, e, r) {
          return new i(t, e, r);
        }
      };
    }(),
    pool_factory = function pool_factory(t, e, r, i) {
      var s = 0,
        a = t,
        n = createSizedArray(a);
      function o() {
        return s ? n[s -= 1] : e();
      }
      return {
        newElement: o,
        release: function release(t) {
          s === a && (n = pooling["double"](n), a *= 2), r && r(t), n[s] = t, s += 1;
        }
      };
    },
    pooling = {
      "double": function double(t) {
        return t.concat(createSizedArray(t.length));
      }
    },
    point_pool = pool_factory(8, function () {
      return createTypedArray("float32", 2);
    }),
    shape_pool = (EA = pool_factory(4, function () {
      return new ShapePath();
    }, function (t) {
      var e,
        r = t._length;
      for (e = 0; e < r; e += 1) point_pool.release(t.v[e]), point_pool.release(t.i[e]), point_pool.release(t.o[e]), t.v[e] = null, t.i[e] = null, t.o[e] = null;
      t._length = 0, t.c = !1;
    }), EA.clone = function (t) {
      var e,
        r = EA.newElement(),
        i = void 0 === t._length ? t.v.length : t._length;
      for (r.setLength(i), r.c = t.c, e = 0; e < i; e += 1) r.setTripleAt(t.v[e][0], t.v[e][1], t.o[e][0], t.o[e][1], t.i[e][0], t.i[e][1], e);
      return r;
    }, EA),
    EA,
    shapeCollection_pool = (NA = {
      newShapeCollection: function newShapeCollection() {
        var t;
        t = OA ? QA[OA -= 1] : new ShapeCollection();
        return t;
      },
      release: function release(t) {
        var e,
          r = t._length;
        for (e = 0; e < r; e += 1) shape_pool.release(t.shapes[e]);
        t._length = 0, OA === PA && (QA = pooling["double"](QA), PA *= 2);
        QA[OA] = t, OA += 1;
      }
    }, OA = 0, PA = 4, QA = createSizedArray(PA), NA),
    NA,
    OA,
    PA,
    QA,
    segments_length_pool = pool_factory(8, function () {
      return {
        lengths: [],
        totalLength: 0
      };
    }, function (t) {
      var e,
        r = t.lengths.length;
      for (e = 0; e < r; e += 1) bezier_length_pool.release(t.lengths[e]);
      t.lengths.length = 0;
    }),
    bezier_length_pool = pool_factory(8, function () {
      return {
        addedLength: 0,
        percents: createTypedArray("float32", defaultCurveSegments),
        lengths: createTypedArray("float32", defaultCurveSegments)
      };
    });
  function BaseRenderer() {}
  function SVGRenderer(t, e) {
    this.animationItem = t, this.layers = null, this.renderedFrame = -1, this.svgElement = createNS("svg");
    var r = "";
    if (e && e.title) {
      var i = createNS("title"),
        s = createElementID();
      i.setAttribute("id", s), i.textContent = e.title, this.svgElement.appendChild(i), r += s;
    }
    if (e && e.description) {
      var a = createNS("desc"),
        n = createElementID();
      a.setAttribute("id", n), a.textContent = e.description, this.svgElement.appendChild(a), r += " " + n;
    }
    r && this.svgElement.setAttribute("aria-labelledby", r);
    var o = createNS("defs");
    this.svgElement.appendChild(o);
    var h = createNS("g");
    this.svgElement.appendChild(h), this.layerElement = h, this.renderConfig = {
      preserveAspectRatio: e && e.preserveAspectRatio || "xMidYMid meet",
      imagePreserveAspectRatio: e && e.imagePreserveAspectRatio || "xMidYMid slice",
      progressiveLoad: e && e.progressiveLoad || !1,
      hideOnTransparent: !e || !1 !== e.hideOnTransparent,
      viewBoxOnly: e && e.viewBoxOnly || !1,
      viewBoxSize: e && e.viewBoxSize || !1,
      className: e && e.className || "",
      focusable: e && e.focusable
    }, this.globalData = {
      _mdf: !1,
      frameNum: -1,
      defs: o,
      renderConfig: this.renderConfig
    }, this.elements = [], this.pendingElements = [], this.destroyed = !1, this.rendererType = "svg";
  }
  function CanvasRenderer(t, e) {
    this.animationItem = t, this.renderConfig = {
      clearCanvas: !e || void 0 === e.clearCanvas || e.clearCanvas,
      context: e && e.context || null,
      progressiveLoad: e && e.progressiveLoad || !1,
      preserveAspectRatio: e && e.preserveAspectRatio || "xMidYMid meet",
      imagePreserveAspectRatio: e && e.imagePreserveAspectRatio || "xMidYMid slice",
      className: e && e.className || ""
    }, this.renderConfig.dpr = e && e.dpr || 1, this.animationItem.wrapper && (this.renderConfig.dpr = e && e.dpr || window.devicePixelRatio || 1), this.renderedFrame = -1, this.globalData = {
      frameNum: -1,
      _mdf: !1,
      renderConfig: this.renderConfig,
      currentGlobalAlpha: -1
    }, this.contextData = new CVContextData(), this.elements = [], this.pendingElements = [], this.transformMat = new Matrix(), this.completeLayers = !1, this.rendererType = "canvas";
  }
  function HybridRenderer(t, e) {
    this.animationItem = t, this.layers = null, this.renderedFrame = -1, this.renderConfig = {
      className: e && e.className || "",
      imagePreserveAspectRatio: e && e.imagePreserveAspectRatio || "xMidYMid slice",
      hideOnTransparent: !e || !1 !== e.hideOnTransparent
    }, this.globalData = {
      _mdf: !1,
      frameNum: -1,
      renderConfig: this.renderConfig
    }, this.pendingElements = [], this.elements = [], this.threeDElements = [], this.destroyed = !1, this.camera = null, this.supports3d = !0, this.rendererType = "html";
  }
  function MaskElement(t, e, r) {
    this.data = t, this.element = e, this.globalData = r, this.storedData = [], this.masksProperties = this.data.masksProperties || [], this.maskElement = null;
    var i,
      s = this.globalData.defs,
      a = this.masksProperties ? this.masksProperties.length : 0;
    this.viewData = createSizedArray(a), this.solidPath = "";
    var n,
      o,
      h,
      l,
      p,
      m,
      f,
      c = this.masksProperties,
      d = 0,
      u = [],
      y = createElementID(),
      g = "clipPath",
      v = "clip-path";
    for (i = 0; i < a; i++) if (("a" !== c[i].mode && "n" !== c[i].mode || c[i].inv || 100 !== c[i].o.k || c[i].o.x) && (v = g = "mask"), "s" != c[i].mode && "i" != c[i].mode || 0 !== d ? l = null : ((l = createNS("rect")).setAttribute("fill", "#ffffff"), l.setAttribute("width", this.element.comp.data.w || 0), l.setAttribute("height", this.element.comp.data.h || 0), u.push(l)), n = createNS("path"), "n" != c[i].mode) {
      var b;
      if (d += 1, n.setAttribute("fill", "s" === c[i].mode ? "#000000" : "#ffffff"), n.setAttribute("clip-rule", "nonzero"), 0 !== c[i].x.k ? (v = g = "mask", f = PropertyFactory.getProp(this.element, c[i].x, 0, null, this.element), b = createElementID(), (p = createNS("filter")).setAttribute("id", b), (m = createNS("feMorphology")).setAttribute("operator", "erode"), m.setAttribute("in", "SourceGraphic"), m.setAttribute("radius", "0"), p.appendChild(m), s.appendChild(p), n.setAttribute("stroke", "s" === c[i].mode ? "#000000" : "#ffffff")) : f = m = null, this.storedData[i] = {
        elem: n,
        x: f,
        expan: m,
        lastPath: "",
        lastOperator: "",
        filterId: b,
        lastRadius: 0
      }, "i" == c[i].mode) {
        h = u.length;
        var E = createNS("g");
        for (o = 0; o < h; o += 1) E.appendChild(u[o]);
        var x = createNS("mask");
        x.setAttribute("mask-type", "alpha"), x.setAttribute("id", y + "_" + d), x.appendChild(n), s.appendChild(x), E.setAttribute("mask", "url(" + locationHref + "#" + y + "_" + d + ")"), u.length = 0, u.push(E);
      } else u.push(n);
      c[i].inv && !this.solidPath && (this.solidPath = this.createLayerSolidPath()), this.viewData[i] = {
        elem: n,
        lastPath: "",
        op: PropertyFactory.getProp(this.element, c[i].o, 0, .01, this.element),
        prop: ShapePropertyFactory.getShapeProp(this.element, c[i], 3),
        invRect: l
      }, this.viewData[i].prop.k || this.drawPath(c[i], this.viewData[i].prop.v, this.viewData[i]);
    } else this.viewData[i] = {
      op: PropertyFactory.getProp(this.element, c[i].o, 0, .01, this.element),
      prop: ShapePropertyFactory.getShapeProp(this.element, c[i], 3),
      elem: n,
      lastPath: ""
    }, s.appendChild(n);
    for (this.maskElement = createNS(g), a = u.length, i = 0; i < a; i += 1) this.maskElement.appendChild(u[i]);
    0 < d && (this.maskElement.setAttribute("id", y), this.element.maskedElement.setAttribute(v, "url(" + locationHref + "#" + y + ")"), s.appendChild(this.maskElement)), this.viewData.length && this.element.addRenderableComponent(this);
  }
  function HierarchyElement() {}
  function FrameElement() {}
  function TransformElement() {}
  function RenderableElement() {}
  function RenderableDOMElement() {}
  function ProcessedElement(t, e) {
    this.elem = t, this.pos = e;
  }
  function SVGStyleData(t, e) {
    this.data = t, this.type = t.ty, this.d = "", this.lvl = e, this._mdf = !1, this.closed = !0 === t.hd, this.pElem = createNS("path"), this.msElem = null;
  }
  function SVGShapeData(t, e, r) {
    this.caches = [], this.styles = [], this.transformers = t, this.lStr = "", this.sh = r, this.lvl = e, this._isAnimated = !!r.k;
    for (var i = 0, s = t.length; i < s;) {
      if (t[i].mProps.dynamicProperties.length) {
        this._isAnimated = !0;
        break;
      }
      i += 1;
    }
  }
  function SVGTransformData(t, e, r) {
    this.transform = {
      mProps: t,
      op: e,
      container: r
    }, this.elements = [], this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
  }
  function SVGStrokeStyleData(t, e, r) {
    this.initDynamicPropertyContainer(t), this.getValue = this.iterateDynamicProperties, this.o = PropertyFactory.getProp(t, e.o, 0, .01, this), this.w = PropertyFactory.getProp(t, e.w, 0, null, this), this.d = new DashProperty(t, e.d || {}, "svg", this), this.c = PropertyFactory.getProp(t, e.c, 1, 255, this), this.style = r, this._isAnimated = !!this._isAnimated;
  }
  function SVGFillStyleData(t, e, r) {
    this.initDynamicPropertyContainer(t), this.getValue = this.iterateDynamicProperties, this.o = PropertyFactory.getProp(t, e.o, 0, .01, this), this.c = PropertyFactory.getProp(t, e.c, 1, 255, this), this.style = r;
  }
  function SVGGradientFillStyleData(t, e, r) {
    this.initDynamicPropertyContainer(t), this.getValue = this.iterateDynamicProperties, this.initGradientData(t, e, r);
  }
  function SVGGradientStrokeStyleData(t, e, r) {
    this.initDynamicPropertyContainer(t), this.getValue = this.iterateDynamicProperties, this.w = PropertyFactory.getProp(t, e.w, 0, null, this), this.d = new DashProperty(t, e.d || {}, "svg", this), this.initGradientData(t, e, r), this._isAnimated = !!this._isAnimated;
  }
  function ShapeGroupData() {
    this.it = [], this.prevViewData = [], this.gr = createNS("g");
  }
  BaseRenderer.prototype.checkLayers = function (t) {
    var e,
      r,
      i = this.layers.length;
    for (this.completeLayers = !0, e = i - 1; 0 <= e; e--) this.elements[e] || (r = this.layers[e]).ip - r.st <= t - this.layers[e].st && r.op - r.st > t - this.layers[e].st && this.buildItem(e), this.completeLayers = !!this.elements[e] && this.completeLayers;
    this.checkPendingElements();
  }, BaseRenderer.prototype.createItem = function (t) {
    switch (t.ty) {
      case 2:
        return this.createImage(t);
      case 0:
        return this.createComp(t);
      case 1:
        return this.createSolid(t);
      case 3:
        return this.createNull(t);
      case 4:
        return this.createShape(t);
      case 5:
        return this.createText(t);
      case 13:
        return this.createCamera(t);
    }
    return this.createNull(t);
  }, BaseRenderer.prototype.createCamera = function () {
    throw new Error("You're using a 3d camera. Try the html renderer.");
  }, BaseRenderer.prototype.buildAllItems = function () {
    var t,
      e = this.layers.length;
    for (t = 0; t < e; t += 1) this.buildItem(t);
    this.checkPendingElements();
  }, BaseRenderer.prototype.includeLayers = function (t) {
    this.completeLayers = !1;
    var e,
      r,
      i = t.length,
      s = this.layers.length;
    for (e = 0; e < i; e += 1) for (r = 0; r < s;) {
      if (this.layers[r].id == t[e].id) {
        this.layers[r] = t[e];
        break;
      }
      r += 1;
    }
  }, BaseRenderer.prototype.setProjectInterface = function (t) {
    this.globalData.projectInterface = t;
  }, BaseRenderer.prototype.initItems = function () {
    this.globalData.progressiveLoad || this.buildAllItems();
  }, BaseRenderer.prototype.buildElementParenting = function (t, e, r) {
    for (var i = this.elements, s = this.layers, a = 0, n = s.length; a < n;) s[a].ind == e && (i[a] && !0 !== i[a] ? (r.push(i[a]), i[a].setAsParent(), void 0 !== s[a].parent ? this.buildElementParenting(t, s[a].parent, r) : t.setHierarchy(r)) : (this.buildItem(a), this.addPendingElement(t))), a += 1;
  }, BaseRenderer.prototype.addPendingElement = function (t) {
    this.pendingElements.push(t);
  }, BaseRenderer.prototype.searchExtraCompositions = function (t) {
    var e,
      r = t.length;
    for (e = 0; e < r; e += 1) if (t[e].xt) {
      var i = this.createComp(t[e]);
      i.initExpressions(), this.globalData.projectInterface.registerComposition(i);
    }
  }, BaseRenderer.prototype.setupGlobalData = function (t, e) {
    this.globalData.fontManager = new FontManager(), this.globalData.fontManager.addChars(t.chars), this.globalData.fontManager.addFonts(t.fonts, e), this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem), this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem), this.globalData.imageLoader = this.animationItem.imagePreloader, this.globalData.frameId = 0, this.globalData.frameRate = t.fr, this.globalData.nm = t.nm, this.globalData.compSize = {
      w: t.w,
      h: t.h
    };
  }, extendPrototype([BaseRenderer], SVGRenderer), SVGRenderer.prototype.createNull = function (t) {
    return new NullElement(t, this.globalData, this);
  }, SVGRenderer.prototype.createShape = function (t) {
    return new SVGShapeElement(t, this.globalData, this);
  }, SVGRenderer.prototype.createText = function (t) {
    return new SVGTextElement(t, this.globalData, this);
  }, SVGRenderer.prototype.createImage = function (t) {
    return new IImageElement(t, this.globalData, this);
  }, SVGRenderer.prototype.createComp = function (t) {
    return new SVGCompElement(t, this.globalData, this);
  }, SVGRenderer.prototype.createSolid = function (t) {
    return new ISolidElement(t, this.globalData, this);
  }, SVGRenderer.prototype.configAnimation = function (t) {
    this.svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg"), this.renderConfig.viewBoxSize ? this.svgElement.setAttribute("viewBox", this.renderConfig.viewBoxSize) : this.svgElement.setAttribute("viewBox", "0 0 " + t.w + " " + t.h), this.renderConfig.viewBoxOnly || (this.svgElement.setAttribute("width", t.w), this.svgElement.setAttribute("height", t.h), this.svgElement.style.width = "100%", this.svgElement.style.height = "100%", this.svgElement.style.transform = "translate3d(0,0,0)"), this.renderConfig.className && this.svgElement.setAttribute("class", this.renderConfig.className), void 0 !== this.renderConfig.focusable && this.svgElement.setAttribute("focusable", this.renderConfig.focusable), this.svgElement.setAttribute("preserveAspectRatio", this.renderConfig.preserveAspectRatio), this.animationItem.wrapper.appendChild(this.svgElement);
    var e = this.globalData.defs;
    this.setupGlobalData(t, e), this.globalData.progressiveLoad = this.renderConfig.progressiveLoad, this.data = t;
    var r = createNS("clipPath"),
      i = createNS("rect");
    i.setAttribute("width", t.w), i.setAttribute("height", t.h), i.setAttribute("x", 0), i.setAttribute("y", 0);
    var s = createElementID();
    r.setAttribute("id", s), r.appendChild(i), this.layerElement.setAttribute("clip-path", "url(" + locationHref + "#" + s + ")"), e.appendChild(r), this.layers = t.layers, this.elements = createSizedArray(t.layers.length);
  }, SVGRenderer.prototype.destroy = function () {
    this.animationItem.wrapper.innerHTML = "", this.layerElement = null, this.globalData.defs = null;
    var t,
      e = this.layers ? this.layers.length : 0;
    for (t = 0; t < e; t++) this.elements[t] && this.elements[t].destroy();
    this.elements.length = 0, this.destroyed = !0, this.animationItem = null;
  }, SVGRenderer.prototype.updateContainerSize = function () {}, SVGRenderer.prototype.buildItem = function (t) {
    var e = this.elements;
    if (!e[t] && 99 != this.layers[t].ty) {
      e[t] = !0;
      var r = this.createItem(this.layers[t]);
      e[t] = r, expressionsPlugin && (0 === this.layers[t].ty && this.globalData.projectInterface.registerComposition(r), r.initExpressions()), this.appendElementInPos(r, t), this.layers[t].tt && (this.elements[t - 1] && !0 !== this.elements[t - 1] ? r.setMatte(e[t - 1].layerId) : (this.buildItem(t - 1), this.addPendingElement(r)));
    }
  }, SVGRenderer.prototype.checkPendingElements = function () {
    for (; this.pendingElements.length;) {
      var t = this.pendingElements.pop();
      if (t.checkParenting(), t.data.tt) for (var e = 0, r = this.elements.length; e < r;) {
        if (this.elements[e] === t) {
          t.setMatte(this.elements[e - 1].layerId);
          break;
        }
        e += 1;
      }
    }
  }, SVGRenderer.prototype.renderFrame = function (t) {
    if (this.renderedFrame !== t && !this.destroyed) {
      null === t ? t = this.renderedFrame : this.renderedFrame = t, this.globalData.frameNum = t, this.globalData.frameId += 1, this.globalData.projectInterface.currentFrame = t, this.globalData._mdf = !1;
      var e,
        r = this.layers.length;
      for (this.completeLayers || this.checkLayers(t), e = r - 1; 0 <= e; e--) (this.completeLayers || this.elements[e]) && this.elements[e].prepareFrame(t - this.layers[e].st);
      if (this.globalData._mdf) for (e = 0; e < r; e += 1) (this.completeLayers || this.elements[e]) && this.elements[e].renderFrame();
    }
  }, SVGRenderer.prototype.appendElementInPos = function (t, e) {
    var r = t.getBaseElement();
    if (r) {
      for (var i, s = 0; s < e;) this.elements[s] && !0 !== this.elements[s] && this.elements[s].getBaseElement() && (i = this.elements[s].getBaseElement()), s += 1;
      i ? this.layerElement.insertBefore(r, i) : this.layerElement.appendChild(r);
    }
  }, SVGRenderer.prototype.hide = function () {
    this.layerElement.style.display = "none";
  }, SVGRenderer.prototype.show = function () {
    this.layerElement.style.display = "block";
  }, extendPrototype([BaseRenderer], CanvasRenderer), CanvasRenderer.prototype.createShape = function (t) {
    return new CVShapeElement(t, this.globalData, this);
  }, CanvasRenderer.prototype.createText = function (t) {
    return new CVTextElement(t, this.globalData, this);
  }, CanvasRenderer.prototype.createImage = function (t) {
    return new CVImageElement(t, this.globalData, this);
  }, CanvasRenderer.prototype.createComp = function (t) {
    return new CVCompElement(t, this.globalData, this);
  }, CanvasRenderer.prototype.createSolid = function (t) {
    return new CVSolidElement(t, this.globalData, this);
  }, CanvasRenderer.prototype.createNull = SVGRenderer.prototype.createNull, CanvasRenderer.prototype.ctxTransform = function (t) {
    if (1 !== t[0] || 0 !== t[1] || 0 !== t[4] || 1 !== t[5] || 0 !== t[12] || 0 !== t[13]) if (this.renderConfig.clearCanvas) {
      this.transformMat.cloneFromProps(t);
      var e = this.contextData.cTr.props;
      this.transformMat.transform(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15]), this.contextData.cTr.cloneFromProps(this.transformMat.props);
      var r = this.contextData.cTr.props;
      this.canvasContext.setTransform(r[0], r[1], r[4], r[5], r[12], r[13]);
    } else this.canvasContext.transform(t[0], t[1], t[4], t[5], t[12], t[13]);
  }, CanvasRenderer.prototype.ctxOpacity = function (t) {
    if (!this.renderConfig.clearCanvas) return this.canvasContext.globalAlpha *= t < 0 ? 0 : t, void (this.globalData.currentGlobalAlpha = this.contextData.cO);
    this.contextData.cO *= t < 0 ? 0 : t, this.globalData.currentGlobalAlpha !== this.contextData.cO && (this.canvasContext.globalAlpha = this.contextData.cO, this.globalData.currentGlobalAlpha = this.contextData.cO);
  }, CanvasRenderer.prototype.reset = function () {
    this.renderConfig.clearCanvas ? this.contextData.reset() : this.canvasContext.restore();
  }, CanvasRenderer.prototype.save = function (t) {
    if (this.renderConfig.clearCanvas) {
      t && this.canvasContext.save();
      var e = this.contextData.cTr.props;
      this.contextData._length <= this.contextData.cArrPos && this.contextData.duplicate();
      var r,
        i = this.contextData.saved[this.contextData.cArrPos];
      for (r = 0; r < 16; r += 1) i[r] = e[r];
      this.contextData.savedOp[this.contextData.cArrPos] = this.contextData.cO, this.contextData.cArrPos += 1;
    } else this.canvasContext.save();
  }, CanvasRenderer.prototype.restore = function (t) {
    if (this.renderConfig.clearCanvas) {
      t && (this.canvasContext.restore(), this.globalData.blendMode = "source-over"), this.contextData.cArrPos -= 1;
      var e,
        r = this.contextData.saved[this.contextData.cArrPos],
        i = this.contextData.cTr.props;
      for (e = 0; e < 16; e += 1) i[e] = r[e];
      this.canvasContext.setTransform(r[0], r[1], r[4], r[5], r[12], r[13]), r = this.contextData.savedOp[this.contextData.cArrPos], this.contextData.cO = r, this.globalData.currentGlobalAlpha !== r && (this.canvasContext.globalAlpha = r, this.globalData.currentGlobalAlpha = r);
    } else this.canvasContext.restore();
  }, CanvasRenderer.prototype.configAnimation = function (t) {
    this.animationItem.wrapper ? (this.animationItem.container = createTag("canvas"), this.animationItem.container.style.width = "100%", this.animationItem.container.style.height = "100%", this.animationItem.container.style.transformOrigin = this.animationItem.container.style.mozTransformOrigin = this.animationItem.container.style.webkitTransformOrigin = this.animationItem.container.style["-webkit-transform"] = "0px 0px 0px", this.animationItem.wrapper.appendChild(this.animationItem.container), this.canvasContext = this.animationItem.container.getContext("2d"), this.renderConfig.className && this.animationItem.container.setAttribute("class", this.renderConfig.className)) : this.canvasContext = this.renderConfig.context, this.data = t, this.layers = t.layers, this.transformCanvas = {
      w: t.w,
      h: t.h,
      sx: 0,
      sy: 0,
      tx: 0,
      ty: 0
    }, this.setupGlobalData(t, document.body), this.globalData.canvasContext = this.canvasContext, (this.globalData.renderer = this).globalData.isDashed = !1, this.globalData.progressiveLoad = this.renderConfig.progressiveLoad, this.globalData.transformCanvas = this.transformCanvas, this.elements = createSizedArray(t.layers.length), this.updateContainerSize();
  }, CanvasRenderer.prototype.updateContainerSize = function () {
    var t, e, r, i;
    if (this.reset(), this.animationItem.wrapper && this.animationItem.container ? (t = this.animationItem.wrapper.offsetWidth, e = this.animationItem.wrapper.offsetHeight, this.animationItem.container.setAttribute("width", t * this.renderConfig.dpr), this.animationItem.container.setAttribute("height", e * this.renderConfig.dpr)) : (t = this.canvasContext.canvas.width * this.renderConfig.dpr, e = this.canvasContext.canvas.height * this.renderConfig.dpr), -1 !== this.renderConfig.preserveAspectRatio.indexOf("meet") || -1 !== this.renderConfig.preserveAspectRatio.indexOf("slice")) {
      var s = this.renderConfig.preserveAspectRatio.split(" "),
        a = s[1] || "meet",
        n = s[0] || "xMidYMid",
        o = n.substr(0, 4),
        h = n.substr(4);
      r = t / e, i = this.transformCanvas.w / this.transformCanvas.h, this.transformCanvas.sy = r < i && "meet" === a || i < r && "slice" === a ? (this.transformCanvas.sx = t / (this.transformCanvas.w / this.renderConfig.dpr), t / (this.transformCanvas.w / this.renderConfig.dpr)) : (this.transformCanvas.sx = e / (this.transformCanvas.h / this.renderConfig.dpr), e / (this.transformCanvas.h / this.renderConfig.dpr)), this.transformCanvas.tx = "xMid" === o && (i < r && "meet" === a || r < i && "slice" === a) ? (t - this.transformCanvas.w * (e / this.transformCanvas.h)) / 2 * this.renderConfig.dpr : "xMax" === o && (i < r && "meet" === a || r < i && "slice" === a) ? (t - this.transformCanvas.w * (e / this.transformCanvas.h)) * this.renderConfig.dpr : 0, this.transformCanvas.ty = "YMid" === h && (r < i && "meet" === a || i < r && "slice" === a) ? (e - this.transformCanvas.h * (t / this.transformCanvas.w)) / 2 * this.renderConfig.dpr : "YMax" === h && (r < i && "meet" === a || i < r && "slice" === a) ? (e - this.transformCanvas.h * (t / this.transformCanvas.w)) * this.renderConfig.dpr : 0;
    } else "none" == this.renderConfig.preserveAspectRatio ? (this.transformCanvas.sx = t / (this.transformCanvas.w / this.renderConfig.dpr), this.transformCanvas.sy = e / (this.transformCanvas.h / this.renderConfig.dpr)) : (this.transformCanvas.sx = this.renderConfig.dpr, this.transformCanvas.sy = this.renderConfig.dpr), this.transformCanvas.tx = 0, this.transformCanvas.ty = 0;
    this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1], this.ctxTransform(this.transformCanvas.props), this.canvasContext.beginPath(), this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h), this.canvasContext.closePath(), this.canvasContext.clip(), this.renderFrame(this.renderedFrame, !0);
  }, CanvasRenderer.prototype.destroy = function () {
    var t;
    for (this.renderConfig.clearCanvas && (this.animationItem.wrapper.innerHTML = ""), t = (this.layers ? this.layers.length : 0) - 1; 0 <= t; t -= 1) this.elements[t] && this.elements[t].destroy();
    this.elements.length = 0, this.globalData.canvasContext = null, this.animationItem.container = null, this.destroyed = !0;
  }, CanvasRenderer.prototype.renderFrame = function (t, e) {
    if ((this.renderedFrame !== t || !0 !== this.renderConfig.clearCanvas || e) && !this.destroyed && -1 !== t) {
      this.renderedFrame = t, this.globalData.frameNum = t - this.animationItem._isFirstFrame, this.globalData.frameId += 1, this.globalData._mdf = !this.renderConfig.clearCanvas || e, this.globalData.projectInterface.currentFrame = t;
      var r,
        i = this.layers.length;
      for (this.completeLayers || this.checkLayers(t), r = 0; r < i; r++) (this.completeLayers || this.elements[r]) && this.elements[r].prepareFrame(t - this.layers[r].st);
      if (this.globalData._mdf) {
        for (!0 === this.renderConfig.clearCanvas ? this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h) : this.save(), r = i - 1; 0 <= r; r -= 1) (this.completeLayers || this.elements[r]) && this.elements[r].renderFrame();
        !0 !== this.renderConfig.clearCanvas && this.restore();
      }
    }
  }, CanvasRenderer.prototype.buildItem = function (t) {
    var e = this.elements;
    if (!e[t] && 99 != this.layers[t].ty) {
      var r = this.createItem(this.layers[t], this, this.globalData);
      (e[t] = r).initExpressions();
    }
  }, CanvasRenderer.prototype.checkPendingElements = function () {
    for (; this.pendingElements.length;) {
      this.pendingElements.pop().checkParenting();
    }
  }, CanvasRenderer.prototype.hide = function () {
    this.animationItem.container.style.display = "none";
  }, CanvasRenderer.prototype.show = function () {
    this.animationItem.container.style.display = "block";
  }, extendPrototype([BaseRenderer], HybridRenderer), HybridRenderer.prototype.buildItem = SVGRenderer.prototype.buildItem, HybridRenderer.prototype.checkPendingElements = function () {
    for (; this.pendingElements.length;) {
      this.pendingElements.pop().checkParenting();
    }
  }, HybridRenderer.prototype.appendElementInPos = function (t, e) {
    var r = t.getBaseElement();
    if (r) {
      var i = this.layers[e];
      if (i.ddd && this.supports3d) this.addTo3dContainer(r, e);else if (this.threeDElements) this.addTo3dContainer(r, e);else {
        for (var s, a, n = 0; n < e;) this.elements[n] && !0 !== this.elements[n] && this.elements[n].getBaseElement && (a = this.elements[n], s = (this.layers[n].ddd ? this.getThreeDContainerByPos(n) : a.getBaseElement()) || s), n += 1;
        s ? i.ddd && this.supports3d || this.layerElement.insertBefore(r, s) : i.ddd && this.supports3d || this.layerElement.appendChild(r);
      }
    }
  }, HybridRenderer.prototype.createShape = function (t) {
    return this.supports3d ? new HShapeElement(t, this.globalData, this) : new SVGShapeElement(t, this.globalData, this);
  }, HybridRenderer.prototype.createText = function (t) {
    return this.supports3d ? new HTextElement(t, this.globalData, this) : new SVGTextElement(t, this.globalData, this);
  }, HybridRenderer.prototype.createCamera = function (t) {
    return this.camera = new HCameraElement(t, this.globalData, this), this.camera;
  }, HybridRenderer.prototype.createImage = function (t) {
    return this.supports3d ? new HImageElement(t, this.globalData, this) : new IImageElement(t, this.globalData, this);
  }, HybridRenderer.prototype.createComp = function (t) {
    return this.supports3d ? new HCompElement(t, this.globalData, this) : new SVGCompElement(t, this.globalData, this);
  }, HybridRenderer.prototype.createSolid = function (t) {
    return this.supports3d ? new HSolidElement(t, this.globalData, this) : new ISolidElement(t, this.globalData, this);
  }, HybridRenderer.prototype.createNull = SVGRenderer.prototype.createNull, HybridRenderer.prototype.getThreeDContainerByPos = function (t) {
    for (var e = 0, r = this.threeDElements.length; e < r;) {
      if (this.threeDElements[e].startPos <= t && this.threeDElements[e].endPos >= t) return this.threeDElements[e].perspectiveElem;
      e += 1;
    }
  }, HybridRenderer.prototype.createThreeDContainer = function (t, e) {
    var r = createTag("div");
    styleDiv(r);
    var i = createTag("div");
    styleDiv(i), "3d" === e && (r.style.width = this.globalData.compSize.w + "px", r.style.height = this.globalData.compSize.h + "px", r.style.transformOrigin = r.style.mozTransformOrigin = r.style.webkitTransformOrigin = "50% 50%", i.style.transform = i.style.webkitTransform = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)"), r.appendChild(i);
    var s = {
      container: i,
      perspectiveElem: r,
      startPos: t,
      endPos: t,
      type: e
    };
    return this.threeDElements.push(s), s;
  }, HybridRenderer.prototype.build3dContainers = function () {
    var t,
      e,
      r = this.layers.length,
      i = "";
    for (t = 0; t < r; t += 1) this.layers[t].ddd && 3 !== this.layers[t].ty ? "3d" !== i && (i = "3d", e = this.createThreeDContainer(t, "3d")) : "2d" !== i && (i = "2d", e = this.createThreeDContainer(t, "2d")), e.endPos = Math.max(e.endPos, t);
    for (t = (r = this.threeDElements.length) - 1; 0 <= t; t--) this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem);
  }, HybridRenderer.prototype.addTo3dContainer = function (t, e) {
    for (var r = 0, i = this.threeDElements.length; r < i;) {
      if (e <= this.threeDElements[r].endPos) {
        for (var s, a = this.threeDElements[r].startPos; a < e;) this.elements[a] && this.elements[a].getBaseElement && (s = this.elements[a].getBaseElement()), a += 1;
        s ? this.threeDElements[r].container.insertBefore(t, s) : this.threeDElements[r].container.appendChild(t);
        break;
      }
      r += 1;
    }
  }, HybridRenderer.prototype.configAnimation = function (t) {
    var e = createTag("div"),
      r = this.animationItem.wrapper;
    e.style.width = t.w + "px", e.style.height = t.h + "px", styleDiv(this.resizerElem = e), e.style.transformStyle = e.style.webkitTransformStyle = e.style.mozTransformStyle = "flat", this.renderConfig.className && e.setAttribute("class", this.renderConfig.className), r.appendChild(e), e.style.overflow = "hidden";
    var i = createNS("svg");
    i.setAttribute("width", "1"), i.setAttribute("height", "1"), styleDiv(i), this.resizerElem.appendChild(i);
    var s = createNS("defs");
    i.appendChild(s), this.data = t, this.setupGlobalData(t, i), this.globalData.defs = s, this.layers = t.layers, this.layerElement = this.resizerElem, this.build3dContainers(), this.updateContainerSize();
  }, HybridRenderer.prototype.destroy = function () {
    this.animationItem.wrapper.innerHTML = "", this.animationItem.container = null, this.globalData.defs = null;
    var t,
      e = this.layers ? this.layers.length : 0;
    for (t = 0; t < e; t++) this.elements[t].destroy();
    this.elements.length = 0, this.destroyed = !0, this.animationItem = null;
  }, HybridRenderer.prototype.updateContainerSize = function () {
    var t,
      e,
      r,
      i,
      s = this.animationItem.wrapper.offsetWidth,
      a = this.animationItem.wrapper.offsetHeight;
    i = s / a < this.globalData.compSize.w / this.globalData.compSize.h ? (t = s / this.globalData.compSize.w, e = s / this.globalData.compSize.w, r = 0, (a - this.globalData.compSize.h * (s / this.globalData.compSize.w)) / 2) : (t = a / this.globalData.compSize.h, e = a / this.globalData.compSize.h, r = (s - this.globalData.compSize.w * (a / this.globalData.compSize.h)) / 2, 0), this.resizerElem.style.transform = this.resizerElem.style.webkitTransform = "matrix3d(" + t + ",0,0,0,0," + e + ",0,0,0,0,1,0," + r + "," + i + ",0,1)";
  }, HybridRenderer.prototype.renderFrame = SVGRenderer.prototype.renderFrame, HybridRenderer.prototype.hide = function () {
    this.resizerElem.style.display = "none";
  }, HybridRenderer.prototype.show = function () {
    this.resizerElem.style.display = "block";
  }, HybridRenderer.prototype.initItems = function () {
    if (this.buildAllItems(), this.camera) this.camera.setup();else {
      var t,
        e = this.globalData.compSize.w,
        r = this.globalData.compSize.h,
        i = this.threeDElements.length;
      for (t = 0; t < i; t += 1) this.threeDElements[t].perspectiveElem.style.perspective = this.threeDElements[t].perspectiveElem.style.webkitPerspective = Math.sqrt(Math.pow(e, 2) + Math.pow(r, 2)) + "px";
    }
  }, HybridRenderer.prototype.searchExtraCompositions = function (t) {
    var e,
      r = t.length,
      i = createTag("div");
    for (e = 0; e < r; e += 1) if (t[e].xt) {
      var s = this.createComp(t[e], i, this.globalData.comp, null);
      s.initExpressions(), this.globalData.projectInterface.registerComposition(s);
    }
  }, MaskElement.prototype.getMaskProperty = function (t) {
    return this.viewData[t].prop;
  }, MaskElement.prototype.renderFrame = function (t) {
    var e,
      r = this.element.finalTransform.mat,
      i = this.masksProperties.length;
    for (e = 0; e < i; e++) if ((this.viewData[e].prop._mdf || t) && this.drawPath(this.masksProperties[e], this.viewData[e].prop.v, this.viewData[e]), (this.viewData[e].op._mdf || t) && this.viewData[e].elem.setAttribute("fill-opacity", this.viewData[e].op.v), "n" !== this.masksProperties[e].mode && (this.viewData[e].invRect && (this.element.finalTransform.mProp._mdf || t) && (this.viewData[e].invRect.setAttribute("x", -r.props[12]), this.viewData[e].invRect.setAttribute("y", -r.props[13])), this.storedData[e].x && (this.storedData[e].x._mdf || t))) {
      var s = this.storedData[e].expan;
      this.storedData[e].x.v < 0 ? ("erode" !== this.storedData[e].lastOperator && (this.storedData[e].lastOperator = "erode", this.storedData[e].elem.setAttribute("filter", "url(" + locationHref + "#" + this.storedData[e].filterId + ")")), s.setAttribute("radius", -this.storedData[e].x.v)) : ("dilate" !== this.storedData[e].lastOperator && (this.storedData[e].lastOperator = "dilate", this.storedData[e].elem.setAttribute("filter", null)), this.storedData[e].elem.setAttribute("stroke-width", 2 * this.storedData[e].x.v));
    }
  }, MaskElement.prototype.getMaskelement = function () {
    return this.maskElement;
  }, MaskElement.prototype.createLayerSolidPath = function () {
    var t = "M0,0 ";
    return t += " h" + this.globalData.compSize.w, t += " v" + this.globalData.compSize.h, t += " h-" + this.globalData.compSize.w, t += " v-" + this.globalData.compSize.h + " ";
  }, MaskElement.prototype.drawPath = function (t, e, r) {
    var i,
      s,
      a = " M" + e.v[0][0] + "," + e.v[0][1];
    for (s = e._length, i = 1; i < s; i += 1) a += " C" + e.o[i - 1][0] + "," + e.o[i - 1][1] + " " + e.i[i][0] + "," + e.i[i][1] + " " + e.v[i][0] + "," + e.v[i][1];
    if (e.c && 1 < s && (a += " C" + e.o[i - 1][0] + "," + e.o[i - 1][1] + " " + e.i[0][0] + "," + e.i[0][1] + " " + e.v[0][0] + "," + e.v[0][1]), r.lastPath !== a) {
      var n = "";
      r.elem && (e.c && (n = t.inv ? this.solidPath + a : a), r.elem.setAttribute("d", n)), r.lastPath = a;
    }
  }, MaskElement.prototype.destroy = function () {
    this.element = null, this.globalData = null, this.maskElement = null, this.data = null, this.masksProperties = null;
  }, HierarchyElement.prototype = {
    initHierarchy: function initHierarchy() {
      this.hierarchy = [], this._isParent = !1, this.checkParenting();
    },
    setHierarchy: function setHierarchy(t) {
      this.hierarchy = t;
    },
    setAsParent: function setAsParent() {
      this._isParent = !0;
    },
    checkParenting: function checkParenting() {
      void 0 !== this.data.parent && this.comp.buildElementParenting(this, this.data.parent, []);
    }
  }, FrameElement.prototype = {
    initFrame: function initFrame() {
      this._isFirstFrame = !1, this.dynamicProperties = [], this._mdf = !1;
    },
    prepareProperties: function prepareProperties(t, e) {
      var r,
        i = this.dynamicProperties.length;
      for (r = 0; r < i; r += 1) (e || this._isParent && "transform" === this.dynamicProperties[r].propType) && (this.dynamicProperties[r].getValue(), this.dynamicProperties[r]._mdf && (this.globalData._mdf = !0, this._mdf = !0));
    },
    addDynamicProperty: function addDynamicProperty(t) {
      -1 === this.dynamicProperties.indexOf(t) && this.dynamicProperties.push(t);
    }
  }, TransformElement.prototype = {
    initTransform: function initTransform() {
      this.finalTransform = {
        mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
          o: 0
        },
        _matMdf: !1,
        _opMdf: !1,
        mat: new Matrix()
      }, this.data.ao && (this.finalTransform.mProp.autoOriented = !0), this.data.ty;
    },
    renderTransform: function renderTransform() {
      if (this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame, this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame, this.hierarchy) {
        var t,
          e = this.finalTransform.mat,
          r = 0,
          i = this.hierarchy.length;
        if (!this.finalTransform._matMdf) for (; r < i;) {
          if (this.hierarchy[r].finalTransform.mProp._mdf) {
            this.finalTransform._matMdf = !0;
            break;
          }
          r += 1;
        }
        if (this.finalTransform._matMdf) for (t = this.finalTransform.mProp.v.props, e.cloneFromProps(t), r = 0; r < i; r += 1) t = this.hierarchy[r].finalTransform.mProp.v.props, e.transform(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15]);
      }
    },
    globalToLocal: function globalToLocal(t) {
      var e = [];
      e.push(this.finalTransform);
      for (var r = !0, i = this.comp; r;) i.finalTransform ? (i.data.hasMask && e.splice(0, 0, i.finalTransform), i = i.comp) : r = !1;
      var s,
        a,
        n = e.length;
      for (s = 0; s < n; s += 1) a = e[s].mat.applyToPointArray(0, 0, 0), t = [t[0] - a[0], t[1] - a[1], 0];
      return t;
    },
    mHelper: new Matrix()
  }, RenderableElement.prototype = {
    initRenderable: function initRenderable() {
      this.isInRange = !1, this.hidden = !1, this.isTransparent = !1, this.renderableComponents = [];
    },
    addRenderableComponent: function addRenderableComponent(t) {
      -1 === this.renderableComponents.indexOf(t) && this.renderableComponents.push(t);
    },
    removeRenderableComponent: function removeRenderableComponent(t) {
      -1 !== this.renderableComponents.indexOf(t) && this.renderableComponents.splice(this.renderableComponents.indexOf(t), 1);
    },
    prepareRenderableFrame: function prepareRenderableFrame(t) {
      this.checkLayerLimits(t);
    },
    checkTransparency: function checkTransparency() {
      this.finalTransform.mProp.o.v <= 0 ? !this.isTransparent && this.globalData.renderConfig.hideOnTransparent && (this.isTransparent = !0, this.hide()) : this.isTransparent && (this.isTransparent = !1, this.show());
    },
    checkLayerLimits: function checkLayerLimits(t) {
      this.data.ip - this.data.st <= t && this.data.op - this.data.st > t ? !0 !== this.isInRange && (this.globalData._mdf = !0, this._mdf = !0, this.isInRange = !0, this.show()) : !1 !== this.isInRange && (this.globalData._mdf = !0, this.isInRange = !1, this.hide());
    },
    renderRenderable: function renderRenderable() {
      var t,
        e = this.renderableComponents.length;
      for (t = 0; t < e; t += 1) this.renderableComponents[t].renderFrame(this._isFirstFrame);
    },
    sourceRectAtTime: function sourceRectAtTime() {
      return {
        top: 0,
        left: 0,
        width: 100,
        height: 100
      };
    },
    getLayerSize: function getLayerSize() {
      return 5 === this.data.ty ? {
        w: this.data.textData.width,
        h: this.data.textData.height
      } : {
        w: this.data.width,
        h: this.data.height
      };
    }
  }, extendPrototype([RenderableElement, createProxyFunction({
    initElement: function initElement(t, e, r) {
      this.initFrame(), this.initBaseData(t, e, r), this.initTransform(t, e, r), this.initHierarchy(), this.initRenderable(), this.initRendererElement(), this.createContainerElements(), this.createRenderableComponents(), this.createContent(), this.hide();
    },
    hide: function hide() {
      this.hidden || this.isInRange && !this.isTransparent || ((this.baseElement || this.layerElement).style.display = "none", this.hidden = !0);
    },
    show: function show() {
      this.isInRange && !this.isTransparent && (this.data.hd || ((this.baseElement || this.layerElement).style.display = "block"), this.hidden = !1, this._isFirstFrame = !0);
    },
    renderFrame: function renderFrame() {
      this.data.hd || this.hidden || (this.renderTransform(), this.renderRenderable(), this.renderElement(), this.renderInnerContent(), this._isFirstFrame && (this._isFirstFrame = !1));
    },
    renderInnerContent: function renderInnerContent() {},
    prepareFrame: function prepareFrame(t) {
      this._mdf = !1, this.prepareRenderableFrame(t), this.prepareProperties(t, this.isInRange), this.checkTransparency();
    },
    destroy: function destroy() {
      this.innerElem = null, this.destroyBaseElement();
    }
  })], RenderableDOMElement), SVGStyleData.prototype.reset = function () {
    this.d = "", this._mdf = !1;
  }, SVGShapeData.prototype.setAsAnimated = function () {
    this._isAnimated = !0;
  }, extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData), extendPrototype([DynamicPropertyContainer], SVGFillStyleData), SVGGradientFillStyleData.prototype.initGradientData = function (t, e, r) {
    this.o = PropertyFactory.getProp(t, e.o, 0, .01, this), this.s = PropertyFactory.getProp(t, e.s, 1, null, this), this.e = PropertyFactory.getProp(t, e.e, 1, null, this), this.h = PropertyFactory.getProp(t, e.h || {
      k: 0
    }, 0, .01, this), this.a = PropertyFactory.getProp(t, e.a || {
      k: 0
    }, 0, degToRads, this), this.g = new GradientProperty(t, e.g, this), this.style = r, this.stops = [], this.setGradientData(r.pElem, e), this.setGradientOpacity(e, r), this._isAnimated = !!this._isAnimated;
  }, SVGGradientFillStyleData.prototype.setGradientData = function (t, e) {
    var r = createElementID(),
      i = createNS(1 === e.t ? "linearGradient" : "radialGradient");
    i.setAttribute("id", r), i.setAttribute("spreadMethod", "pad"), i.setAttribute("gradientUnits", "userSpaceOnUse");
    var s,
      a,
      n,
      o = [];
    for (n = 4 * e.g.p, a = 0; a < n; a += 4) s = createNS("stop"), i.appendChild(s), o.push(s);
    t.setAttribute("gf" === e.ty ? "fill" : "stroke", "url(" + locationHref + "#" + r + ")"), this.gf = i, this.cst = o;
  }, SVGGradientFillStyleData.prototype.setGradientOpacity = function (t, e) {
    if (this.g._hasOpacity && !this.g._collapsable) {
      var r,
        i,
        s,
        a = createNS("mask"),
        n = createNS("path");
      a.appendChild(n);
      var o = createElementID(),
        h = createElementID();
      a.setAttribute("id", h);
      var l = createNS(1 === t.t ? "linearGradient" : "radialGradient");
      l.setAttribute("id", o), l.setAttribute("spreadMethod", "pad"), l.setAttribute("gradientUnits", "userSpaceOnUse"), s = t.g.k.k[0].s ? t.g.k.k[0].s.length : t.g.k.k.length;
      var p = this.stops;
      for (i = 4 * t.g.p; i < s; i += 2) (r = createNS("stop")).setAttribute("stop-color", "rgb(255,255,255)"), l.appendChild(r), p.push(r);
      n.setAttribute("gf" === t.ty ? "fill" : "stroke", "url(" + locationHref + "#" + o + ")"), this.of = l, this.ms = a, this.ost = p, this.maskId = h, e.msElem = n;
    }
  }, extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData), extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
  var SVGElementsRenderer = function () {
    var y = new Matrix(),
      g = new Matrix();
    function e(t, e, r) {
      (r || e.transform.op._mdf) && e.transform.container.setAttribute("opacity", e.transform.op.v), (r || e.transform.mProps._mdf) && e.transform.container.setAttribute("transform", e.transform.mProps.v.to2dCSS());
    }
    function r(t, e, r) {
      var i,
        s,
        a,
        n,
        o,
        h,
        l,
        p,
        m,
        f,
        c,
        d = e.styles.length,
        u = e.lvl;
      for (h = 0; h < d; h += 1) {
        if (n = e.sh._mdf || r, e.styles[h].lvl < u) {
          for (p = g.reset(), f = u - e.styles[h].lvl, c = e.transformers.length - 1; !n && 0 < f;) n = e.transformers[c].mProps._mdf || n, f--, c--;
          if (n) for (f = u - e.styles[h].lvl, c = e.transformers.length - 1; 0 < f;) m = e.transformers[c].mProps.v.props, p.transform(m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]), f--, c--;
        } else p = y;
        if (s = (l = e.sh.paths)._length, n) {
          for (a = "", i = 0; i < s; i += 1) (o = l.shapes[i]) && o._length && (a += buildShapeString(o, o._length, o.c, p));
          e.caches[h] = a;
        } else a = e.caches[h];
        e.styles[h].d += !0 === t.hd ? "" : a, e.styles[h]._mdf = n || e.styles[h]._mdf;
      }
    }
    function i(t, e, r) {
      var i = e.style;
      (e.c._mdf || r) && i.pElem.setAttribute("fill", "rgb(" + bm_floor(e.c.v[0]) + "," + bm_floor(e.c.v[1]) + "," + bm_floor(e.c.v[2]) + ")"), (e.o._mdf || r) && i.pElem.setAttribute("fill-opacity", e.o.v);
    }
    function s(t, e, r) {
      a(t, e, r), n(t, e, r);
    }
    function a(t, e, r) {
      var i,
        s,
        a,
        n,
        o,
        h = e.gf,
        l = e.g._hasOpacity,
        p = e.s.v,
        m = e.e.v;
      if (e.o._mdf || r) {
        var f = "gf" === t.ty ? "fill-opacity" : "stroke-opacity";
        e.style.pElem.setAttribute(f, e.o.v);
      }
      if (e.s._mdf || r) {
        var c = 1 === t.t ? "x1" : "cx",
          d = "x1" === c ? "y1" : "cy";
        h.setAttribute(c, p[0]), h.setAttribute(d, p[1]), l && !e.g._collapsable && (e.of.setAttribute(c, p[0]), e.of.setAttribute(d, p[1]));
      }
      if (e.g._cmdf || r) {
        i = e.cst;
        var u = e.g.c;
        for (a = i.length, s = 0; s < a; s += 1) (n = i[s]).setAttribute("offset", u[4 * s] + "%"), n.setAttribute("stop-color", "rgb(" + u[4 * s + 1] + "," + u[4 * s + 2] + "," + u[4 * s + 3] + ")");
      }
      if (l && (e.g._omdf || r)) {
        var y = e.g.o;
        for (a = (i = e.g._collapsable ? e.cst : e.ost).length, s = 0; s < a; s += 1) n = i[s], e.g._collapsable || n.setAttribute("offset", y[2 * s] + "%"), n.setAttribute("stop-opacity", y[2 * s + 1]);
      }
      if (1 === t.t) (e.e._mdf || r) && (h.setAttribute("x2", m[0]), h.setAttribute("y2", m[1]), l && !e.g._collapsable && (e.of.setAttribute("x2", m[0]), e.of.setAttribute("y2", m[1])));else if ((e.s._mdf || e.e._mdf || r) && (o = Math.sqrt(Math.pow(p[0] - m[0], 2) + Math.pow(p[1] - m[1], 2)), h.setAttribute("r", o), l && !e.g._collapsable && e.of.setAttribute("r", o)), e.e._mdf || e.h._mdf || e.a._mdf || r) {
        o || (o = Math.sqrt(Math.pow(p[0] - m[0], 2) + Math.pow(p[1] - m[1], 2)));
        var g = Math.atan2(m[1] - p[1], m[0] - p[0]),
          v = o * (1 <= e.h.v ? .99 : e.h.v <= -1 ? -.99 : e.h.v),
          b = Math.cos(g + e.a.v) * v + p[0],
          E = Math.sin(g + e.a.v) * v + p[1];
        h.setAttribute("fx", b), h.setAttribute("fy", E), l && !e.g._collapsable && (e.of.setAttribute("fx", b), e.of.setAttribute("fy", E));
      }
    }
    function n(t, e, r) {
      var i = e.style,
        s = e.d;
      s && (s._mdf || r) && s.dashStr && (i.pElem.setAttribute("stroke-dasharray", s.dashStr), i.pElem.setAttribute("stroke-dashoffset", s.dashoffset[0])), e.c && (e.c._mdf || r) && i.pElem.setAttribute("stroke", "rgb(" + bm_floor(e.c.v[0]) + "," + bm_floor(e.c.v[1]) + "," + bm_floor(e.c.v[2]) + ")"), (e.o._mdf || r) && i.pElem.setAttribute("stroke-opacity", e.o.v), (e.w._mdf || r) && (i.pElem.setAttribute("stroke-width", e.w.v), i.msElem && i.msElem.setAttribute("stroke-width", e.w.v));
    }
    return {
      createRenderFunction: function createRenderFunction(t) {
        t.ty;
        switch (t.ty) {
          case "fl":
            return i;
          case "gf":
            return a;
          case "gs":
            return s;
          case "st":
            return n;
          case "sh":
          case "el":
          case "rc":
          case "sr":
            return r;
          case "tr":
            return e;
        }
      }
    };
  }();
  function ShapeTransformManager() {
    this.sequences = {}, this.sequenceList = [], this.transform_key_count = 0;
  }
  function CVShapeData(t, e, r, i) {
    this.styledShapes = [], this.tr = [0, 0, 0, 0, 0, 0];
    var s = 4;
    "rc" == e.ty ? s = 5 : "el" == e.ty ? s = 6 : "sr" == e.ty && (s = 7), this.sh = ShapePropertyFactory.getShapeProp(t, e, s, t);
    var a,
      n,
      o = r.length;
    for (a = 0; a < o; a += 1) r[a].closed || (n = {
      transforms: i.addTransformSequence(r[a].transforms),
      trNodes: []
    }, this.styledShapes.push(n), r[a].elements.push(n));
  }
  function BaseElement() {}
  function NullElement(t, e, r) {
    this.initFrame(), this.initBaseData(t, e, r), this.initFrame(), this.initTransform(t, e, r), this.initHierarchy();
  }
  function SVGBaseElement() {}
  function IShapeElement() {}
  function ITextElement() {}
  function ICompElement() {}
  function IImageElement(t, e, r) {
    this.assetData = e.getAssetData(t.refId), this.initElement(t, e, r), this.sourceRect = {
      top: 0,
      left: 0,
      width: this.assetData.w,
      height: this.assetData.h
    };
  }
  function ISolidElement(t, e, r) {
    this.initElement(t, e, r);
  }
  function SVGCompElement(t, e, r) {
    this.layers = t.layers, this.supports3d = !0, this.completeLayers = !1, this.pendingElements = [], this.elements = this.layers ? createSizedArray(this.layers.length) : [], this.initElement(t, e, r), this.tm = t.tm ? PropertyFactory.getProp(this, t.tm, 0, e.frameRate, this) : {
      _placeholder: !0
    };
  }
  function SVGTextElement(t, e, r) {
    this.textSpans = [], this.renderType = "svg", this.initElement(t, e, r);
  }
  function SVGShapeElement(t, e, r) {
    this.shapes = [], this.shapesData = t.shapes, this.stylesList = [], this.shapeModifiers = [], this.itemsData = [], this.processedElements = [], this.animatedContents = [], this.initElement(t, e, r), this.prevViewData = [];
  }
  function SVGTintFilter(t, e) {
    this.filterManager = e;
    var r = createNS("feColorMatrix");
    if (r.setAttribute("type", "matrix"), r.setAttribute("color-interpolation-filters", "linearRGB"), r.setAttribute("values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"), r.setAttribute("result", "f1"), t.appendChild(r), (r = createNS("feColorMatrix")).setAttribute("type", "matrix"), r.setAttribute("color-interpolation-filters", "sRGB"), r.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"), r.setAttribute("result", "f2"), t.appendChild(r), this.matrixFilter = r, 100 !== e.effectElements[2].p.v || e.effectElements[2].p.k) {
      var i,
        s = createNS("feMerge");
      t.appendChild(s), (i = createNS("feMergeNode")).setAttribute("in", "SourceGraphic"), s.appendChild(i), (i = createNS("feMergeNode")).setAttribute("in", "f2"), s.appendChild(i);
    }
  }
  function SVGFillFilter(t, e) {
    this.filterManager = e;
    var r = createNS("feColorMatrix");
    r.setAttribute("type", "matrix"), r.setAttribute("color-interpolation-filters", "sRGB"), r.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"), t.appendChild(r), this.matrixFilter = r;
  }
  function SVGGaussianBlurEffect(t, e) {
    t.setAttribute("x", "-100%"), t.setAttribute("y", "-100%"), t.setAttribute("width", "300%"), t.setAttribute("height", "300%"), this.filterManager = e;
    var r = createNS("feGaussianBlur");
    t.appendChild(r), this.feGaussianBlur = r;
  }
  function SVGStrokeEffect(t, e) {
    this.initialized = !1, this.filterManager = e, this.elem = t, this.paths = [];
  }
  function SVGTritoneFilter(t, e) {
    this.filterManager = e;
    var r = createNS("feColorMatrix");
    r.setAttribute("type", "matrix"), r.setAttribute("color-interpolation-filters", "linearRGB"), r.setAttribute("values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"), r.setAttribute("result", "f1"), t.appendChild(r);
    var i = createNS("feComponentTransfer");
    i.setAttribute("color-interpolation-filters", "sRGB"), t.appendChild(i), this.matrixFilter = i;
    var s = createNS("feFuncR");
    s.setAttribute("type", "table"), i.appendChild(s), this.feFuncR = s;
    var a = createNS("feFuncG");
    a.setAttribute("type", "table"), i.appendChild(a), this.feFuncG = a;
    var n = createNS("feFuncB");
    n.setAttribute("type", "table"), i.appendChild(n), this.feFuncB = n;
  }
  function SVGProLevelsFilter(t, e) {
    this.filterManager = e;
    var r = this.filterManager.effectElements,
      i = createNS("feComponentTransfer");
    (r[10].p.k || 0 !== r[10].p.v || r[11].p.k || 1 !== r[11].p.v || r[12].p.k || 1 !== r[12].p.v || r[13].p.k || 0 !== r[13].p.v || r[14].p.k || 1 !== r[14].p.v) && (this.feFuncR = this.createFeFunc("feFuncR", i)), (r[17].p.k || 0 !== r[17].p.v || r[18].p.k || 1 !== r[18].p.v || r[19].p.k || 1 !== r[19].p.v || r[20].p.k || 0 !== r[20].p.v || r[21].p.k || 1 !== r[21].p.v) && (this.feFuncG = this.createFeFunc("feFuncG", i)), (r[24].p.k || 0 !== r[24].p.v || r[25].p.k || 1 !== r[25].p.v || r[26].p.k || 1 !== r[26].p.v || r[27].p.k || 0 !== r[27].p.v || r[28].p.k || 1 !== r[28].p.v) && (this.feFuncB = this.createFeFunc("feFuncB", i)), (r[31].p.k || 0 !== r[31].p.v || r[32].p.k || 1 !== r[32].p.v || r[33].p.k || 1 !== r[33].p.v || r[34].p.k || 0 !== r[34].p.v || r[35].p.k || 1 !== r[35].p.v) && (this.feFuncA = this.createFeFunc("feFuncA", i)), (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) && (i.setAttribute("color-interpolation-filters", "sRGB"), t.appendChild(i), i = createNS("feComponentTransfer")), (r[3].p.k || 0 !== r[3].p.v || r[4].p.k || 1 !== r[4].p.v || r[5].p.k || 1 !== r[5].p.v || r[6].p.k || 0 !== r[6].p.v || r[7].p.k || 1 !== r[7].p.v) && (i.setAttribute("color-interpolation-filters", "sRGB"), t.appendChild(i), this.feFuncRComposed = this.createFeFunc("feFuncR", i), this.feFuncGComposed = this.createFeFunc("feFuncG", i), this.feFuncBComposed = this.createFeFunc("feFuncB", i));
  }
  function SVGDropShadowEffect(t, e) {
    t.setAttribute("x", "-100%"), t.setAttribute("y", "-100%"), t.setAttribute("width", "400%"), t.setAttribute("height", "400%"), this.filterManager = e;
    var r = createNS("feGaussianBlur");
    r.setAttribute("in", "SourceAlpha"), r.setAttribute("result", "drop_shadow_1"), r.setAttribute("stdDeviation", "0"), this.feGaussianBlur = r, t.appendChild(r);
    var i = createNS("feOffset");
    i.setAttribute("dx", "25"), i.setAttribute("dy", "0"), i.setAttribute("in", "drop_shadow_1"), i.setAttribute("result", "drop_shadow_2"), this.feOffset = i, t.appendChild(i);
    var s = createNS("feFlood");
    s.setAttribute("flood-color", "#00ff00"), s.setAttribute("flood-opacity", "1"), s.setAttribute("result", "drop_shadow_3"), this.feFlood = s, t.appendChild(s);
    var a = createNS("feComposite");
    a.setAttribute("in", "drop_shadow_3"), a.setAttribute("in2", "drop_shadow_2"), a.setAttribute("operator", "in"), a.setAttribute("result", "drop_shadow_4"), t.appendChild(a);
    var n,
      o = createNS("feMerge");
    t.appendChild(o), n = createNS("feMergeNode"), o.appendChild(n), (n = createNS("feMergeNode")).setAttribute("in", "SourceGraphic"), this.feMergeNode = n, this.feMerge = o, this.originalNodeAdded = !1, o.appendChild(n);
  }
  ShapeTransformManager.prototype = {
    addTransformSequence: function addTransformSequence(t) {
      var e,
        r = t.length,
        i = "_";
      for (e = 0; e < r; e += 1) i += t[e].transform.key + "_";
      var s = this.sequences[i];
      return s || (s = {
        transforms: [].concat(t),
        finalTransform: new Matrix(),
        _mdf: !1
      }, this.sequences[i] = s, this.sequenceList.push(s)), s;
    },
    processSequence: function processSequence(t, e) {
      for (var r, i = 0, s = t.transforms.length, a = e; i < s && !e;) {
        if (t.transforms[i].transform.mProps._mdf) {
          a = !0;
          break;
        }
        i += 1;
      }
      if (a) for (t.finalTransform.reset(), i = s - 1; 0 <= i; i -= 1) r = t.transforms[i].transform.mProps.v.props, t.finalTransform.transform(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10], r[11], r[12], r[13], r[14], r[15]);
      t._mdf = a;
    },
    processSequences: function processSequences(t) {
      var e,
        r = this.sequenceList.length;
      for (e = 0; e < r; e += 1) this.processSequence(this.sequenceList[e], t);
    },
    getNewKey: function getNewKey() {
      return "_" + this.transform_key_count++;
    }
  }, CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated, BaseElement.prototype = {
    checkMasks: function checkMasks() {
      if (!this.data.hasMask) return !1;
      for (var t = 0, e = this.data.masksProperties.length; t < e;) {
        if ("n" !== this.data.masksProperties[t].mode && !1 !== this.data.masksProperties[t].cl) return !0;
        t += 1;
      }
      return !1;
    },
    initExpressions: function initExpressions() {
      this.layerInterface = LayerExpressionInterface(this), this.data.hasMask && this.maskManager && this.layerInterface.registerMaskInterface(this.maskManager);
      var t = EffectsExpressionInterface.createEffectsInterface(this, this.layerInterface);
      this.layerInterface.registerEffectsInterface(t), 0 === this.data.ty || this.data.xt ? this.compInterface = CompExpressionInterface(this) : 4 === this.data.ty ? (this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData, this.itemsData, this.layerInterface), this.layerInterface.content = this.layerInterface.shapeInterface) : 5 === this.data.ty && (this.layerInterface.textInterface = TextExpressionInterface(this), this.layerInterface.text = this.layerInterface.textInterface);
    },
    setBlendMode: function setBlendMode() {
      var t = getBlendMode(this.data.bm);
      (this.baseElement || this.layerElement).style["mix-blend-mode"] = t;
    },
    initBaseData: function initBaseData(t, e, r) {
      this.globalData = e, this.comp = r, this.data = t, this.layerId = createElementID(), this.data.sr || (this.data.sr = 1), this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
    },
    getType: function getType() {
      return this.type;
    },
    sourceRectAtTime: function sourceRectAtTime() {}
  }, NullElement.prototype.prepareFrame = function (t) {
    this.prepareProperties(t, !0);
  }, NullElement.prototype.renderFrame = function () {}, NullElement.prototype.getBaseElement = function () {
    return null;
  }, NullElement.prototype.destroy = function () {}, NullElement.prototype.sourceRectAtTime = function () {}, NullElement.prototype.hide = function () {}, extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement), SVGBaseElement.prototype = {
    initRendererElement: function initRendererElement() {
      this.layerElement = createNS("g");
    },
    createContainerElements: function createContainerElements() {
      this.matteElement = createNS("g"), this.transformedElement = this.layerElement, this.maskedElement = this.layerElement, this._sizeChanged = !1;
      var t,
        e,
        r,
        i = null;
      if (this.data.td) {
        if (3 == this.data.td || 1 == this.data.td) {
          var s = createNS("mask");
          s.setAttribute("id", this.layerId), s.setAttribute("mask-type", 3 == this.data.td ? "luminance" : "alpha"), s.appendChild(this.layerElement), i = s, this.globalData.defs.appendChild(s), featureSupport.maskType || 1 != this.data.td || (s.setAttribute("mask-type", "luminance"), t = createElementID(), e = filtersFactory.createFilter(t), this.globalData.defs.appendChild(e), e.appendChild(filtersFactory.createAlphaToLuminanceFilter()), (r = createNS("g")).appendChild(this.layerElement), i = r, s.appendChild(r), r.setAttribute("filter", "url(" + locationHref + "#" + t + ")"));
        } else if (2 == this.data.td) {
          var a = createNS("mask");
          a.setAttribute("id", this.layerId), a.setAttribute("mask-type", "alpha");
          var n = createNS("g");
          a.appendChild(n), t = createElementID(), e = filtersFactory.createFilter(t);
          var o = createNS("feComponentTransfer");
          o.setAttribute("in", "SourceGraphic"), e.appendChild(o);
          var h = createNS("feFuncA");
          h.setAttribute("type", "table"), h.setAttribute("tableValues", "1.0 0.0"), o.appendChild(h), this.globalData.defs.appendChild(e);
          var l = createNS("rect");
          l.setAttribute("width", this.comp.data.w), l.setAttribute("height", this.comp.data.h), l.setAttribute("x", "0"), l.setAttribute("y", "0"), l.setAttribute("fill", "#ffffff"), l.setAttribute("opacity", "0"), n.setAttribute("filter", "url(" + locationHref + "#" + t + ")"), n.appendChild(l), n.appendChild(this.layerElement), i = n, featureSupport.maskType || (a.setAttribute("mask-type", "luminance"), e.appendChild(filtersFactory.createAlphaToLuminanceFilter()), r = createNS("g"), n.appendChild(l), r.appendChild(this.layerElement), i = r, n.appendChild(r)), this.globalData.defs.appendChild(a);
        }
      } else this.data.tt ? (this.matteElement.appendChild(this.layerElement), i = this.matteElement, this.baseElement = this.matteElement) : this.baseElement = this.layerElement;
      if (this.data.ln && this.layerElement.setAttribute("id", this.data.ln), this.data.cl && this.layerElement.setAttribute("class", this.data.cl), 0 === this.data.ty && !this.data.hd) {
        var p = createNS("clipPath"),
          m = createNS("path");
        m.setAttribute("d", "M0,0 L" + this.data.w + ",0 L" + this.data.w + "," + this.data.h + " L0," + this.data.h + "z");
        var f = createElementID();
        if (p.setAttribute("id", f), p.appendChild(m), this.globalData.defs.appendChild(p), this.checkMasks()) {
          var c = createNS("g");
          c.setAttribute("clip-path", "url(" + locationHref + "#" + f + ")"), c.appendChild(this.layerElement), this.transformedElement = c, i ? i.appendChild(this.transformedElement) : this.baseElement = this.transformedElement;
        } else this.layerElement.setAttribute("clip-path", "url(" + locationHref + "#" + f + ")");
      }
      0 !== this.data.bm && this.setBlendMode();
    },
    renderElement: function renderElement() {
      this.finalTransform._matMdf && this.transformedElement.setAttribute("transform", this.finalTransform.mat.to2dCSS()), this.finalTransform._opMdf && this.transformedElement.setAttribute("opacity", this.finalTransform.mProp.o.v);
    },
    destroyBaseElement: function destroyBaseElement() {
      this.layerElement = null, this.matteElement = null, this.maskManager.destroy();
    },
    getBaseElement: function getBaseElement() {
      return this.data.hd ? null : this.baseElement;
    },
    createRenderableComponents: function createRenderableComponents() {
      this.maskManager = new MaskElement(this.data, this, this.globalData), this.renderableEffectsManager = new SVGEffects(this);
    },
    setMatte: function setMatte(t) {
      this.matteElement && this.matteElement.setAttribute("mask", "url(" + locationHref + "#" + t + ")");
    }
  }, IShapeElement.prototype = {
    addShapeToModifiers: function addShapeToModifiers(t) {
      var e,
        r = this.shapeModifiers.length;
      for (e = 0; e < r; e += 1) this.shapeModifiers[e].addShape(t);
    },
    isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(t) {
      for (var e = this.shapeModifiers.length; 0 < e;) if (this.shapeModifiers[0].isAnimatedWithShape(t)) return !0;
      return !1;
    },
    renderModifiers: function renderModifiers() {
      if (this.shapeModifiers.length) {
        var t,
          e = this.shapes.length;
        for (t = 0; t < e; t += 1) this.shapes[t].sh.reset();
        for (t = (e = this.shapeModifiers.length) - 1; 0 <= t; t -= 1) this.shapeModifiers[t].processShapes(this._isFirstFrame);
      }
    },
    lcEnum: {
      1: "butt",
      2: "round",
      3: "square"
    },
    ljEnum: {
      1: "miter",
      2: "round",
      3: "bevel"
    },
    searchProcessedElement: function searchProcessedElement(t) {
      for (var e = this.processedElements, r = 0, i = e.length; r < i;) {
        if (e[r].elem === t) return e[r].pos;
        r += 1;
      }
      return 0;
    },
    addProcessedElement: function addProcessedElement(t, e) {
      for (var r = this.processedElements, i = r.length; i;) if (r[i -= 1].elem === t) return void (r[i].pos = e);
      r.push(new ProcessedElement(t, e));
    },
    prepareFrame: function prepareFrame(t) {
      this.prepareRenderableFrame(t), this.prepareProperties(t, this.isInRange);
    }
  }, ITextElement.prototype.initElement = function (t, e, r) {
    this.lettersChangedFlag = !0, this.initFrame(), this.initBaseData(t, e, r), this.textProperty = new TextProperty(this, t.t, this.dynamicProperties), this.textAnimator = new TextAnimatorProperty(t.t, this.renderType, this), this.initTransform(t, e, r), this.initHierarchy(), this.initRenderable(), this.initRendererElement(), this.createContainerElements(), this.createRenderableComponents(), this.createContent(), this.hide(), this.textAnimator.searchProperties(this.dynamicProperties);
  }, ITextElement.prototype.prepareFrame = function (t) {
    this._mdf = !1, this.prepareRenderableFrame(t), this.prepareProperties(t, this.isInRange), (this.textProperty._mdf || this.textProperty._isFirstFrame) && (this.buildNewText(), this.textProperty._isFirstFrame = !1, this.textProperty._mdf = !1);
  }, ITextElement.prototype.createPathShape = function (t, e) {
    var r,
      i,
      s = e.length,
      a = "";
    for (r = 0; r < s; r += 1) i = e[r].ks.k, a += buildShapeString(i, i.i.length, !0, t);
    return a;
  }, ITextElement.prototype.updateDocumentData = function (t, e) {
    this.textProperty.updateDocumentData(t, e);
  }, ITextElement.prototype.canResizeFont = function (t) {
    this.textProperty.canResizeFont(t);
  }, ITextElement.prototype.setMinimumFontSize = function (t) {
    this.textProperty.setMinimumFontSize(t);
  }, ITextElement.prototype.applyTextPropertiesToMatrix = function (t, e, r, i, s) {
    switch (t.ps && e.translate(t.ps[0], t.ps[1] + t.ascent, 0), e.translate(0, -t.ls, 0), t.j) {
      case 1:
        e.translate(t.justifyOffset + (t.boxWidth - t.lineWidths[r]), 0, 0);
        break;
      case 2:
        e.translate(t.justifyOffset + (t.boxWidth - t.lineWidths[r]) / 2, 0, 0);
    }
    e.translate(i, s, 0);
  }, ITextElement.prototype.buildColor = function (t) {
    return "rgb(" + Math.round(255 * t[0]) + "," + Math.round(255 * t[1]) + "," + Math.round(255 * t[2]) + ")";
  }, ITextElement.prototype.emptyProp = new LetterProps(), ITextElement.prototype.destroy = function () {}, extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement), ICompElement.prototype.initElement = function (t, e, r) {
    this.initFrame(), this.initBaseData(t, e, r), this.initTransform(t, e, r), this.initRenderable(), this.initHierarchy(), this.initRendererElement(), this.createContainerElements(), this.createRenderableComponents(), !this.data.xt && e.progressiveLoad || this.buildAllItems(), this.hide();
  }, ICompElement.prototype.prepareFrame = function (t) {
    if (this._mdf = !1, this.prepareRenderableFrame(t), this.prepareProperties(t, this.isInRange), this.isInRange || this.data.xt) {
      if (this.tm._placeholder) this.renderedFrame = t / this.data.sr;else {
        var e = this.tm.v;
        e === this.data.op && (e = this.data.op - 1), this.renderedFrame = e;
      }
      var r,
        i = this.elements.length;
      for (this.completeLayers || this.checkLayers(this.renderedFrame), r = i - 1; 0 <= r; r -= 1) (this.completeLayers || this.elements[r]) && (this.elements[r].prepareFrame(this.renderedFrame - this.layers[r].st), this.elements[r]._mdf && (this._mdf = !0));
    }
  }, ICompElement.prototype.renderInnerContent = function () {
    var t,
      e = this.layers.length;
    for (t = 0; t < e; t += 1) (this.completeLayers || this.elements[t]) && this.elements[t].renderFrame();
  }, ICompElement.prototype.setElements = function (t) {
    this.elements = t;
  }, ICompElement.prototype.getElements = function () {
    return this.elements;
  }, ICompElement.prototype.destroyElements = function () {
    var t,
      e = this.layers.length;
    for (t = 0; t < e; t += 1) this.elements[t] && this.elements[t].destroy();
  }, ICompElement.prototype.destroy = function () {
    this.destroyElements(), this.destroyBaseElement();
  }, extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement), IImageElement.prototype.createContent = function () {
    var t = this.globalData.getAssetsPath(this.assetData);
    this.innerElem = createNS("image"), this.innerElem.setAttribute("width", this.assetData.w + "px"), this.innerElem.setAttribute("height", this.assetData.h + "px"), this.innerElem.setAttribute("preserveAspectRatio", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio), this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", t), this.layerElement.appendChild(this.innerElem);
  }, IImageElement.prototype.sourceRectAtTime = function () {
    return this.sourceRect;
  }, extendPrototype([IImageElement], ISolidElement), ISolidElement.prototype.createContent = function () {
    var t = createNS("rect");
    t.setAttribute("width", this.data.sw), t.setAttribute("height", this.data.sh), t.setAttribute("fill", this.data.sc), this.layerElement.appendChild(t);
  }, extendPrototype([SVGRenderer, ICompElement, SVGBaseElement], SVGCompElement), extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextElement), SVGTextElement.prototype.createContent = function () {
    this.data.singleShape && !this.globalData.fontManager.chars && (this.textContainer = createNS("text"));
  }, SVGTextElement.prototype.buildTextContents = function (t) {
    for (var e = 0, r = t.length, i = [], s = ""; e < r;) t[e] === String.fromCharCode(13) || t[e] === String.fromCharCode(3) ? (i.push(s), s = "") : s += t[e], e += 1;
    return i.push(s), i;
  }, SVGTextElement.prototype.buildNewText = function () {
    var t,
      e,
      r = this.textProperty.currentData;
    this.renderedLetters = createSizedArray(r ? r.l.length : 0), r.fc ? this.layerElement.setAttribute("fill", this.buildColor(r.fc)) : this.layerElement.setAttribute("fill", "rgba(0,0,0,0)"), r.sc && (this.layerElement.setAttribute("stroke", this.buildColor(r.sc)), this.layerElement.setAttribute("stroke-width", r.sw)), this.layerElement.setAttribute("font-size", r.finalSize);
    var i = this.globalData.fontManager.getFontByName(r.f);
    if (i.fClass) this.layerElement.setAttribute("class", i.fClass);else {
      this.layerElement.setAttribute("font-family", i.fFamily);
      var s = r.fWeight,
        a = r.fStyle;
      this.layerElement.setAttribute("font-style", a), this.layerElement.setAttribute("font-weight", s);
    }
    this.layerElement.setAttribute("aria-label", r.t);
    var n,
      o = r.l || [],
      h = !!this.globalData.fontManager.chars;
    e = o.length;
    var l,
      p = this.mHelper,
      m = "",
      f = this.data.singleShape,
      c = 0,
      d = 0,
      u = !0,
      y = r.tr / 1e3 * r.finalSize;
    if (!f || h || r.sz) {
      var g,
        v,
        b = this.textSpans.length;
      for (t = 0; t < e; t += 1) h && f && 0 !== t || (n = t < b ? this.textSpans[t] : createNS(h ? "path" : "text"), b <= t && (n.setAttribute("stroke-linecap", "butt"), n.setAttribute("stroke-linejoin", "round"), n.setAttribute("stroke-miterlimit", "4"), this.textSpans[t] = n, this.layerElement.appendChild(n)), n.style.display = "inherit"), p.reset(), p.scale(r.finalSize / 100, r.finalSize / 100), f && (o[t].n && (c = -y, d += r.yOffset, d += u ? 1 : 0, u = !1), this.applyTextPropertiesToMatrix(r, p, o[t].line, c, d), c += o[t].l || 0, c += y), h ? (l = (g = (v = this.globalData.fontManager.getCharData(r.finalText[t], i.fStyle, this.globalData.fontManager.getFontByName(r.f).fFamily)) && v.data || {}).shapes ? g.shapes[0].it : [], f ? m += this.createPathShape(p, l) : n.setAttribute("d", this.createPathShape(p, l))) : (f && n.setAttribute("transform", "translate(" + p.props[12] + "," + p.props[13] + ")"), n.textContent = o[t].val, n.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve"));
      f && n && n.setAttribute("d", m);
    } else {
      var E = this.textContainer,
        x = "start";
      switch (r.j) {
        case 1:
          x = "end";
          break;
        case 2:
          x = "middle";
      }
      E.setAttribute("text-anchor", x), E.setAttribute("letter-spacing", y);
      var P = this.buildTextContents(r.finalText);
      for (e = P.length, d = r.ps ? r.ps[1] + r.ascent : 0, t = 0; t < e; t += 1) (n = this.textSpans[t] || createNS("tspan")).textContent = P[t], n.setAttribute("x", 0), n.setAttribute("y", d), n.style.display = "inherit", E.appendChild(n), this.textSpans[t] = n, d += r.finalLineHeight;
      this.layerElement.appendChild(E);
    }
    for (; t < this.textSpans.length;) this.textSpans[t].style.display = "none", t += 1;
    this._sizeChanged = !0;
  }, SVGTextElement.prototype.sourceRectAtTime = function (t) {
    if (this.prepareFrame(this.comp.renderedFrame - this.data.st), this.renderInnerContent(), this._sizeChanged) {
      this._sizeChanged = !1;
      var e = this.layerElement.getBBox();
      this.bbox = {
        top: e.y,
        left: e.x,
        width: e.width,
        height: e.height
      };
    }
    return this.bbox;
  }, SVGTextElement.prototype.renderInnerContent = function () {
    if (!this.data.singleShape && (this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag), this.lettersChangedFlag || this.textAnimator.lettersChangedFlag)) {
      var t, e;
      this._sizeChanged = !0;
      var r,
        i,
        s = this.textAnimator.renderedLetters,
        a = this.textProperty.currentData.l;
      for (e = a.length, t = 0; t < e; t += 1) a[t].n || (r = s[t], i = this.textSpans[t], r._mdf.m && i.setAttribute("transform", r.m), r._mdf.o && i.setAttribute("opacity", r.o), r._mdf.sw && i.setAttribute("stroke-width", r.sw), r._mdf.sc && i.setAttribute("stroke", r.sc), r._mdf.fc && i.setAttribute("fill", r.fc));
    }
  }, extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement), SVGShapeElement.prototype.initSecondaryElement = function () {}, SVGShapeElement.prototype.identityMatrix = new Matrix(), SVGShapeElement.prototype.buildExpressionInterface = function () {}, SVGShapeElement.prototype.createContent = function () {
    this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], !0), this.filterUniqueShapes();
  }, SVGShapeElement.prototype.filterUniqueShapes = function () {
    var t,
      e,
      r,
      i,
      s = this.shapes.length,
      a = this.stylesList.length,
      n = [],
      o = !1;
    for (r = 0; r < a; r += 1) {
      for (i = this.stylesList[r], o = !1, t = n.length = 0; t < s; t += 1) -1 !== (e = this.shapes[t]).styles.indexOf(i) && (n.push(e), o = e._isAnimated || o);
      1 < n.length && o && this.setShapesAsAnimated(n);
    }
  }, SVGShapeElement.prototype.setShapesAsAnimated = function (t) {
    var e,
      r = t.length;
    for (e = 0; e < r; e += 1) t[e].setAsAnimated();
  }, SVGShapeElement.prototype.createStyleElement = function (t, e) {
    var r,
      i = new SVGStyleData(t, e),
      s = i.pElem;
    if ("st" === t.ty) r = new SVGStrokeStyleData(this, t, i);else if ("fl" === t.ty) r = new SVGFillStyleData(this, t, i);else if ("gf" === t.ty || "gs" === t.ty) {
      r = new ("gf" === t.ty ? SVGGradientFillStyleData : SVGGradientStrokeStyleData)(this, t, i), this.globalData.defs.appendChild(r.gf), r.maskId && (this.globalData.defs.appendChild(r.ms), this.globalData.defs.appendChild(r.of), s.setAttribute("mask", "url(" + locationHref + "#" + r.maskId + ")"));
    }
    return "st" !== t.ty && "gs" !== t.ty || (s.setAttribute("stroke-linecap", this.lcEnum[t.lc] || "round"), s.setAttribute("stroke-linejoin", this.ljEnum[t.lj] || "round"), s.setAttribute("fill-opacity", "0"), 1 === t.lj && s.setAttribute("stroke-miterlimit", t.ml)), 2 === t.r && s.setAttribute("fill-rule", "evenodd"), t.ln && s.setAttribute("id", t.ln), t.cl && s.setAttribute("class", t.cl), t.bm && (s.style["mix-blend-mode"] = getBlendMode(t.bm)), this.stylesList.push(i), this.addToAnimatedContents(t, r), r;
  }, SVGShapeElement.prototype.createGroupElement = function (t) {
    var e = new ShapeGroupData();
    return t.ln && e.gr.setAttribute("id", t.ln), t.cl && e.gr.setAttribute("class", t.cl), t.bm && (e.gr.style["mix-blend-mode"] = getBlendMode(t.bm)), e;
  }, SVGShapeElement.prototype.createTransformElement = function (t, e) {
    var r = TransformPropertyFactory.getTransformProperty(this, t, this),
      i = new SVGTransformData(r, r.o, e);
    return this.addToAnimatedContents(t, i), i;
  }, SVGShapeElement.prototype.createShapeElement = function (t, e, r) {
    var i = 4;
    "rc" === t.ty ? i = 5 : "el" === t.ty ? i = 6 : "sr" === t.ty && (i = 7);
    var s = new SVGShapeData(e, r, ShapePropertyFactory.getShapeProp(this, t, i, this));
    return this.shapes.push(s), this.addShapeToModifiers(s), this.addToAnimatedContents(t, s), s;
  }, SVGShapeElement.prototype.addToAnimatedContents = function (t, e) {
    for (var r = 0, i = this.animatedContents.length; r < i;) {
      if (this.animatedContents[r].element === e) return;
      r += 1;
    }
    this.animatedContents.push({
      fn: SVGElementsRenderer.createRenderFunction(t),
      element: e,
      data: t
    });
  }, SVGShapeElement.prototype.setElementStyles = function (t) {
    var e,
      r = t.styles,
      i = this.stylesList.length;
    for (e = 0; e < i; e += 1) this.stylesList[e].closed || r.push(this.stylesList[e]);
  }, SVGShapeElement.prototype.reloadShapes = function () {
    this._isFirstFrame = !0;
    var t,
      e = this.itemsData.length;
    for (t = 0; t < e; t += 1) this.prevViewData[t] = this.itemsData[t];
    for (this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], !0), this.filterUniqueShapes(), e = this.dynamicProperties.length, t = 0; t < e; t += 1) this.dynamicProperties[t].getValue();
    this.renderModifiers();
  }, SVGShapeElement.prototype.searchShapes = function (t, e, r, i, s, a, n) {
    var o,
      h,
      l,
      p,
      m,
      f,
      c = [].concat(a),
      d = t.length - 1,
      u = [],
      y = [];
    for (o = d; 0 <= o; o -= 1) {
      if ((f = this.searchProcessedElement(t[o])) ? e[o] = r[f - 1] : t[o]._render = n, "fl" == t[o].ty || "st" == t[o].ty || "gf" == t[o].ty || "gs" == t[o].ty) f ? e[o].style.closed = !1 : e[o] = this.createStyleElement(t[o], s), t[o]._render && i.appendChild(e[o].style.pElem), u.push(e[o].style);else if ("gr" == t[o].ty) {
        if (f) for (l = e[o].it.length, h = 0; h < l; h += 1) e[o].prevViewData[h] = e[o].it[h];else e[o] = this.createGroupElement(t[o]);
        this.searchShapes(t[o].it, e[o].it, e[o].prevViewData, e[o].gr, s + 1, c, n), t[o]._render && i.appendChild(e[o].gr);
      } else "tr" == t[o].ty ? (f || (e[o] = this.createTransformElement(t[o], i)), p = e[o].transform, c.push(p)) : "sh" == t[o].ty || "rc" == t[o].ty || "el" == t[o].ty || "sr" == t[o].ty ? (f || (e[o] = this.createShapeElement(t[o], c, s)), this.setElementStyles(e[o])) : "tm" == t[o].ty || "rd" == t[o].ty || "ms" == t[o].ty ? (f ? (m = e[o]).closed = !1 : ((m = ShapeModifiers.getModifier(t[o].ty)).init(this, t[o]), e[o] = m, this.shapeModifiers.push(m)), y.push(m)) : "rp" == t[o].ty && (f ? (m = e[o]).closed = !0 : (m = ShapeModifiers.getModifier(t[o].ty), (e[o] = m).init(this, t, o, e), this.shapeModifiers.push(m), n = !1), y.push(m));
      this.addProcessedElement(t[o], o + 1);
    }
    for (d = u.length, o = 0; o < d; o += 1) u[o].closed = !0;
    for (d = y.length, o = 0; o < d; o += 1) y[o].closed = !0;
  }, SVGShapeElement.prototype.renderInnerContent = function () {
    this.renderModifiers();
    var t,
      e = this.stylesList.length;
    for (t = 0; t < e; t += 1) this.stylesList[t].reset();
    for (this.renderShape(), t = 0; t < e; t += 1) (this.stylesList[t]._mdf || this._isFirstFrame) && (this.stylesList[t].msElem && (this.stylesList[t].msElem.setAttribute("d", this.stylesList[t].d), this.stylesList[t].d = "M0 0" + this.stylesList[t].d), this.stylesList[t].pElem.setAttribute("d", this.stylesList[t].d || "M0 0"));
  }, SVGShapeElement.prototype.renderShape = function () {
    var t,
      e,
      r = this.animatedContents.length;
    for (t = 0; t < r; t += 1) e = this.animatedContents[t], (this._isFirstFrame || e.element._isAnimated) && !0 !== e.data && e.fn(e.data, e.element, this._isFirstFrame);
  }, SVGShapeElement.prototype.destroy = function () {
    this.destroyBaseElement(), this.shapesData = null, this.itemsData = null;
  }, SVGTintFilter.prototype.renderFrame = function (t) {
    if (t || this.filterManager._mdf) {
      var e = this.filterManager.effectElements[0].p.v,
        r = this.filterManager.effectElements[1].p.v,
        i = this.filterManager.effectElements[2].p.v / 100;
      this.matrixFilter.setAttribute("values", r[0] - e[0] + " 0 0 0 " + e[0] + " " + (r[1] - e[1]) + " 0 0 0 " + e[1] + " " + (r[2] - e[2]) + " 0 0 0 " + e[2] + " 0 0 0 " + i + " 0");
    }
  }, SVGFillFilter.prototype.renderFrame = function (t) {
    if (t || this.filterManager._mdf) {
      var e = this.filterManager.effectElements[2].p.v,
        r = this.filterManager.effectElements[6].p.v;
      this.matrixFilter.setAttribute("values", "0 0 0 0 " + e[0] + " 0 0 0 0 " + e[1] + " 0 0 0 0 " + e[2] + " 0 0 0 " + r + " 0");
    }
  }, SVGGaussianBlurEffect.prototype.renderFrame = function (t) {
    if (t || this.filterManager._mdf) {
      var e = .3 * this.filterManager.effectElements[0].p.v,
        r = this.filterManager.effectElements[1].p.v,
        i = 3 == r ? 0 : e,
        s = 2 == r ? 0 : e;
      this.feGaussianBlur.setAttribute("stdDeviation", i + " " + s);
      var a = 1 == this.filterManager.effectElements[2].p.v ? "wrap" : "duplicate";
      this.feGaussianBlur.setAttribute("edgeMode", a);
    }
  }, SVGStrokeEffect.prototype.initialize = function () {
    var t,
      e,
      r,
      i,
      s = this.elem.layerElement.children || this.elem.layerElement.childNodes;
    for (1 === this.filterManager.effectElements[1].p.v ? (i = this.elem.maskManager.masksProperties.length, r = 0) : i = (r = this.filterManager.effectElements[0].p.v - 1) + 1, (e = createNS("g")).setAttribute("fill", "none"), e.setAttribute("stroke-linecap", "round"), e.setAttribute("stroke-dashoffset", 1); r < i; r += 1) t = createNS("path"), e.appendChild(t), this.paths.push({
      p: t,
      m: r
    });
    if (3 === this.filterManager.effectElements[10].p.v) {
      var a = createNS("mask"),
        n = createElementID();
      a.setAttribute("id", n), a.setAttribute("mask-type", "alpha"), a.appendChild(e), this.elem.globalData.defs.appendChild(a);
      var o = createNS("g");
      for (o.setAttribute("mask", "url(" + locationHref + "#" + n + ")"); s[0];) o.appendChild(s[0]);
      this.elem.layerElement.appendChild(o), this.masker = a, e.setAttribute("stroke", "#fff");
    } else if (1 === this.filterManager.effectElements[10].p.v || 2 === this.filterManager.effectElements[10].p.v) {
      if (2 === this.filterManager.effectElements[10].p.v) for (s = this.elem.layerElement.children || this.elem.layerElement.childNodes; s.length;) this.elem.layerElement.removeChild(s[0]);
      this.elem.layerElement.appendChild(e), this.elem.layerElement.removeAttribute("mask"), e.setAttribute("stroke", "#fff");
    }
    this.initialized = !0, this.pathMasker = e;
  }, SVGStrokeEffect.prototype.renderFrame = function (t) {
    this.initialized || this.initialize();
    var e,
      r,
      i,
      s = this.paths.length;
    for (e = 0; e < s; e += 1) if (-1 !== this.paths[e].m && (r = this.elem.maskManager.viewData[this.paths[e].m], i = this.paths[e].p, (t || this.filterManager._mdf || r.prop._mdf) && i.setAttribute("d", r.lastPath), t || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || r.prop._mdf)) {
      var a;
      if (0 !== this.filterManager.effectElements[7].p.v || 100 !== this.filterManager.effectElements[8].p.v) {
        var n = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) / 100,
          o = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) / 100,
          h = i.getTotalLength();
        a = "0 0 0 " + h * n + " ";
        var l,
          p = h * (o - n),
          m = 1 + 2 * this.filterManager.effectElements[4].p.v * this.filterManager.effectElements[9].p.v / 100,
          f = Math.floor(p / m);
        for (l = 0; l < f; l += 1) a += "1 " + 2 * this.filterManager.effectElements[4].p.v * this.filterManager.effectElements[9].p.v / 100 + " ";
        a += "0 " + 10 * h + " 0 0";
      } else a = "1 " + 2 * this.filterManager.effectElements[4].p.v * this.filterManager.effectElements[9].p.v / 100;
      i.setAttribute("stroke-dasharray", a);
    }
    if ((t || this.filterManager.effectElements[4].p._mdf) && this.pathMasker.setAttribute("stroke-width", 2 * this.filterManager.effectElements[4].p.v), (t || this.filterManager.effectElements[6].p._mdf) && this.pathMasker.setAttribute("opacity", this.filterManager.effectElements[6].p.v), (1 === this.filterManager.effectElements[10].p.v || 2 === this.filterManager.effectElements[10].p.v) && (t || this.filterManager.effectElements[3].p._mdf)) {
      var c = this.filterManager.effectElements[3].p.v;
      this.pathMasker.setAttribute("stroke", "rgb(" + bm_floor(255 * c[0]) + "," + bm_floor(255 * c[1]) + "," + bm_floor(255 * c[2]) + ")");
    }
  }, SVGTritoneFilter.prototype.renderFrame = function (t) {
    if (t || this.filterManager._mdf) {
      var e = this.filterManager.effectElements[0].p.v,
        r = this.filterManager.effectElements[1].p.v,
        i = this.filterManager.effectElements[2].p.v,
        s = i[0] + " " + r[0] + " " + e[0],
        a = i[1] + " " + r[1] + " " + e[1],
        n = i[2] + " " + r[2] + " " + e[2];
      this.feFuncR.setAttribute("tableValues", s), this.feFuncG.setAttribute("tableValues", a), this.feFuncB.setAttribute("tableValues", n);
    }
  }, SVGProLevelsFilter.prototype.createFeFunc = function (t, e) {
    var r = createNS(t);
    return r.setAttribute("type", "table"), e.appendChild(r), r;
  }, SVGProLevelsFilter.prototype.getTableValue = function (t, e, r, i, s) {
    for (var a, n, o = 0, h = Math.min(t, e), l = Math.max(t, e), p = Array.call(null, {
        length: 256
      }), m = 0, f = s - i, c = e - t; o <= 256;) n = (a = o / 256) <= h ? c < 0 ? s : i : l <= a ? c < 0 ? i : s : i + f * Math.pow((a - t) / c, 1 / r), p[m++] = n, o += 256 / 255;
    return p.join(" ");
  }, SVGProLevelsFilter.prototype.renderFrame = function (t) {
    if (t || this.filterManager._mdf) {
      var e,
        r = this.filterManager.effectElements;
      this.feFuncRComposed && (t || r[3].p._mdf || r[4].p._mdf || r[5].p._mdf || r[6].p._mdf || r[7].p._mdf) && (e = this.getTableValue(r[3].p.v, r[4].p.v, r[5].p.v, r[6].p.v, r[7].p.v), this.feFuncRComposed.setAttribute("tableValues", e), this.feFuncGComposed.setAttribute("tableValues", e), this.feFuncBComposed.setAttribute("tableValues", e)), this.feFuncR && (t || r[10].p._mdf || r[11].p._mdf || r[12].p._mdf || r[13].p._mdf || r[14].p._mdf) && (e = this.getTableValue(r[10].p.v, r[11].p.v, r[12].p.v, r[13].p.v, r[14].p.v), this.feFuncR.setAttribute("tableValues", e)), this.feFuncG && (t || r[17].p._mdf || r[18].p._mdf || r[19].p._mdf || r[20].p._mdf || r[21].p._mdf) && (e = this.getTableValue(r[17].p.v, r[18].p.v, r[19].p.v, r[20].p.v, r[21].p.v), this.feFuncG.setAttribute("tableValues", e)), this.feFuncB && (t || r[24].p._mdf || r[25].p._mdf || r[26].p._mdf || r[27].p._mdf || r[28].p._mdf) && (e = this.getTableValue(r[24].p.v, r[25].p.v, r[26].p.v, r[27].p.v, r[28].p.v), this.feFuncB.setAttribute("tableValues", e)), this.feFuncA && (t || r[31].p._mdf || r[32].p._mdf || r[33].p._mdf || r[34].p._mdf || r[35].p._mdf) && (e = this.getTableValue(r[31].p.v, r[32].p.v, r[33].p.v, r[34].p.v, r[35].p.v), this.feFuncA.setAttribute("tableValues", e));
    }
  }, SVGDropShadowEffect.prototype.renderFrame = function (t) {
    if (t || this.filterManager._mdf) {
      if ((t || this.filterManager.effectElements[4].p._mdf) && this.feGaussianBlur.setAttribute("stdDeviation", this.filterManager.effectElements[4].p.v / 4), t || this.filterManager.effectElements[0].p._mdf) {
        var e = this.filterManager.effectElements[0].p.v;
        this.feFlood.setAttribute("flood-color", rgbToHex(Math.round(255 * e[0]), Math.round(255 * e[1]), Math.round(255 * e[2])));
      }
      if ((t || this.filterManager.effectElements[1].p._mdf) && this.feFlood.setAttribute("flood-opacity", this.filterManager.effectElements[1].p.v / 255), t || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
        var r = this.filterManager.effectElements[3].p.v,
          i = (this.filterManager.effectElements[2].p.v - 90) * degToRads,
          s = r * Math.cos(i),
          a = r * Math.sin(i);
        this.feOffset.setAttribute("dx", s), this.feOffset.setAttribute("dy", a);
      }
    }
  };
  var _svgMatteSymbols = [];
  function SVGMatte3Effect(t, e, r) {
    this.initialized = !1, this.filterManager = e, this.filterElem = t, (this.elem = r).matteElement = createNS("g"), r.matteElement.appendChild(r.layerElement), r.matteElement.appendChild(r.transformedElement), r.baseElement = r.matteElement;
  }
  function SVGEffects(t) {
    var e,
      r,
      i = t.data.ef ? t.data.ef.length : 0,
      s = createElementID(),
      a = filtersFactory.createFilter(s),
      n = 0;
    for (this.filters = [], e = 0; e < i; e += 1) r = null, 20 === t.data.ef[e].ty ? (n += 1, r = new SVGTintFilter(a, t.effectsManager.effectElements[e])) : 21 === t.data.ef[e].ty ? (n += 1, r = new SVGFillFilter(a, t.effectsManager.effectElements[e])) : 22 === t.data.ef[e].ty ? r = new SVGStrokeEffect(t, t.effectsManager.effectElements[e]) : 23 === t.data.ef[e].ty ? (n += 1, r = new SVGTritoneFilter(a, t.effectsManager.effectElements[e])) : 24 === t.data.ef[e].ty ? (n += 1, r = new SVGProLevelsFilter(a, t.effectsManager.effectElements[e])) : 25 === t.data.ef[e].ty ? (n += 1, r = new SVGDropShadowEffect(a, t.effectsManager.effectElements[e])) : 28 === t.data.ef[e].ty ? r = new SVGMatte3Effect(a, t.effectsManager.effectElements[e], t) : 29 === t.data.ef[e].ty && (n += 1, r = new SVGGaussianBlurEffect(a, t.effectsManager.effectElements[e])), r && this.filters.push(r);
    n && (t.globalData.defs.appendChild(a), t.layerElement.setAttribute("filter", "url(" + locationHref + "#" + s + ")")), this.filters.length && t.addRenderableComponent(this);
  }
  function CVContextData() {
    this.saved = [], this.cArrPos = 0, this.cTr = new Matrix(), this.cO = 1;
    var t;
    for (this.savedOp = createTypedArray("float32", 15), t = 0; t < 15; t += 1) this.saved[t] = createTypedArray("float32", 16);
    this._length = 15;
  }
  function CVBaseElement() {}
  function CVImageElement(t, e, r) {
    this.assetData = e.getAssetData(t.refId), this.img = e.imageLoader.getImage(this.assetData), this.initElement(t, e, r);
  }
  function CVCompElement(t, e, r) {
    this.completeLayers = !1, this.layers = t.layers, this.pendingElements = [], this.elements = createSizedArray(this.layers.length), this.initElement(t, e, r), this.tm = t.tm ? PropertyFactory.getProp(this, t.tm, 0, e.frameRate, this) : {
      _placeholder: !0
    };
  }
  function CVMaskElement(t, e) {
    this.data = t, this.element = e, this.masksProperties = this.data.masksProperties || [], this.viewData = createSizedArray(this.masksProperties.length);
    var r,
      i = this.masksProperties.length,
      s = !1;
    for (r = 0; r < i; r++) "n" !== this.masksProperties[r].mode && (s = !0), this.viewData[r] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[r], 3);
    (this.hasMasks = s) && this.element.addRenderableComponent(this);
  }
  function CVShapeElement(t, e, r) {
    this.shapes = [], this.shapesData = t.shapes, this.stylesList = [], this.itemsData = [], this.prevViewData = [], this.shapeModifiers = [], this.processedElements = [], this.transformsManager = new ShapeTransformManager(), this.initElement(t, e, r);
  }
  function CVSolidElement(t, e, r) {
    this.initElement(t, e, r);
  }
  function CVTextElement(t, e, r) {
    this.textSpans = [], this.yOffset = 0, this.fillColorAnim = !1, this.strokeColorAnim = !1, this.strokeWidthAnim = !1, this.stroke = !1, this.fill = !1, this.justifyOffset = 0, this.currentRender = null, this.renderType = "canvas", this.values = {
      fill: "rgba(0,0,0,0)",
      stroke: "rgba(0,0,0,0)",
      sWidth: 0,
      fValue: ""
    }, this.initElement(t, e, r);
  }
  function CVEffects() {}
  function HBaseElement(t, e, r) {}
  function HSolidElement(t, e, r) {
    this.initElement(t, e, r);
  }
  function HCompElement(t, e, r) {
    this.layers = t.layers, this.supports3d = !t.hasMask, this.completeLayers = !1, this.pendingElements = [], this.elements = this.layers ? createSizedArray(this.layers.length) : [], this.initElement(t, e, r), this.tm = t.tm ? PropertyFactory.getProp(this, t.tm, 0, e.frameRate, this) : {
      _placeholder: !0
    };
  }
  function HShapeElement(t, e, r) {
    this.shapes = [], this.shapesData = t.shapes, this.stylesList = [], this.shapeModifiers = [], this.itemsData = [], this.processedElements = [], this.animatedContents = [], this.shapesContainer = createNS("g"), this.initElement(t, e, r), this.prevViewData = [], this.currentBBox = {
      x: 999999,
      y: -999999,
      h: 0,
      w: 0
    };
  }
  function HTextElement(t, e, r) {
    this.textSpans = [], this.textPaths = [], this.currentBBox = {
      x: 999999,
      y: -999999,
      h: 0,
      w: 0
    }, this.renderType = "svg", this.isMasked = !1, this.initElement(t, e, r);
  }
  function HImageElement(t, e, r) {
    this.assetData = e.getAssetData(t.refId), this.initElement(t, e, r);
  }
  function HCameraElement(t, e, r) {
    this.initFrame(), this.initBaseData(t, e, r), this.initHierarchy();
    var i = PropertyFactory.getProp;
    if (this.pe = i(this, t.pe, 0, 0, this), t.ks.p.s ? (this.px = i(this, t.ks.p.x, 1, 0, this), this.py = i(this, t.ks.p.y, 1, 0, this), this.pz = i(this, t.ks.p.z, 1, 0, this)) : this.p = i(this, t.ks.p, 1, 0, this), t.ks.a && (this.a = i(this, t.ks.a, 1, 0, this)), t.ks.or.k.length && t.ks.or.k[0].to) {
      var s,
        a = t.ks.or.k.length;
      for (s = 0; s < a; s += 1) t.ks.or.k[s].to = null, t.ks.or.k[s].ti = null;
    }
    this.or = i(this, t.ks.or, 1, degToRads, this), this.or.sh = !0, this.rx = i(this, t.ks.rx, 0, degToRads, this), this.ry = i(this, t.ks.ry, 0, degToRads, this), this.rz = i(this, t.ks.rz, 0, degToRads, this), this.mat = new Matrix(), this._prevMat = new Matrix(), this._isFirstFrame = !0, this.finalTransform = {
      mProp: this
    };
  }
  function HEffects() {}
  SVGMatte3Effect.prototype.findSymbol = function (t) {
    for (var e = 0, r = _svgMatteSymbols.length; e < r;) {
      if (_svgMatteSymbols[e] === t) return _svgMatteSymbols[e];
      e += 1;
    }
    return null;
  }, SVGMatte3Effect.prototype.replaceInParent = function (t, e) {
    var r = t.layerElement.parentNode;
    if (r) {
      for (var i, s = r.children, a = 0, n = s.length; a < n && s[a] !== t.layerElement;) a += 1;
      a <= n - 2 && (i = s[a + 1]);
      var o = createNS("use");
      o.setAttribute("href", "#" + e), i ? r.insertBefore(o, i) : r.appendChild(o);
    }
  }, SVGMatte3Effect.prototype.setElementAsMask = function (t, e) {
    if (!this.findSymbol(e)) {
      var r = createElementID(),
        i = createNS("mask");
      i.setAttribute("id", e.layerId), i.setAttribute("mask-type", "alpha"), _svgMatteSymbols.push(e);
      var s = t.globalData.defs;
      s.appendChild(i);
      var a = createNS("symbol");
      a.setAttribute("id", r), this.replaceInParent(e, r), a.appendChild(e.layerElement), s.appendChild(a);
      var n = createNS("use");
      n.setAttribute("href", "#" + r), i.appendChild(n), e.data.hd = !1, e.show();
    }
    t.setMatte(e.layerId);
  }, SVGMatte3Effect.prototype.initialize = function () {
    for (var t = this.filterManager.effectElements[0].p.v, e = this.elem.comp.elements, r = 0, i = e.length; r < i;) e[r] && e[r].data.ind === t && this.setElementAsMask(this.elem, e[r]), r += 1;
    this.initialized = !0;
  }, SVGMatte3Effect.prototype.renderFrame = function () {
    this.initialized || this.initialize();
  }, SVGEffects.prototype.renderFrame = function (t) {
    var e,
      r = this.filters.length;
    for (e = 0; e < r; e += 1) this.filters[e].renderFrame(t);
  }, CVContextData.prototype.duplicate = function () {
    var t = 2 * this._length,
      e = this.savedOp;
    this.savedOp = createTypedArray("float32", t), this.savedOp.set(e);
    var r = 0;
    for (r = this._length; r < t; r += 1) this.saved[r] = createTypedArray("float32", 16);
    this._length = t;
  }, CVContextData.prototype.reset = function () {
    this.cArrPos = 0, this.cTr.reset(), this.cO = 1;
  }, CVBaseElement.prototype = {
    createElements: function createElements() {},
    initRendererElement: function initRendererElement() {},
    createContainerElements: function createContainerElements() {
      this.canvasContext = this.globalData.canvasContext, this.renderableEffectsManager = new CVEffects(this);
    },
    createContent: function createContent() {},
    setBlendMode: function setBlendMode() {
      var t = this.globalData;
      if (t.blendMode !== this.data.bm) {
        t.blendMode = this.data.bm;
        var e = getBlendMode(this.data.bm);
        t.canvasContext.globalCompositeOperation = e;
      }
    },
    createRenderableComponents: function createRenderableComponents() {
      this.maskManager = new CVMaskElement(this.data, this);
    },
    hideElement: function hideElement() {
      this.hidden || this.isInRange && !this.isTransparent || (this.hidden = !0);
    },
    showElement: function showElement() {
      this.isInRange && !this.isTransparent && (this.hidden = !1, this._isFirstFrame = !0, this.maskManager._isFirstFrame = !0);
    },
    renderFrame: function renderFrame() {
      if (!this.hidden && !this.data.hd) {
        this.renderTransform(), this.renderRenderable(), this.setBlendMode();
        var t = 0 === this.data.ty;
        this.globalData.renderer.save(t), this.globalData.renderer.ctxTransform(this.finalTransform.mat.props), this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v), this.renderInnerContent(), this.globalData.renderer.restore(t), this.maskManager.hasMasks && this.globalData.renderer.restore(!0), this._isFirstFrame && (this._isFirstFrame = !1);
      }
    },
    destroy: function destroy() {
      this.canvasContext = null, this.data = null, this.globalData = null, this.maskManager.destroy();
    },
    mHelper: new Matrix()
  }, CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement, CVBaseElement.prototype.show = CVBaseElement.prototype.showElement, extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement), CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement, CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame, CVImageElement.prototype.createContent = function () {
    if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
      var t = createTag("canvas");
      t.width = this.assetData.w, t.height = this.assetData.h;
      var e,
        r,
        i = t.getContext("2d"),
        s = this.img.width,
        a = this.img.height,
        n = s / a,
        o = this.assetData.w / this.assetData.h,
        h = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
      o < n && "xMidYMid slice" === h || n < o && "xMidYMid slice" !== h ? e = (r = a) * o : r = (e = s) / o, i.drawImage(this.img, (s - e) / 2, (a - r) / 2, e, r, 0, 0, this.assetData.w, this.assetData.h), this.img = t;
    }
  }, CVImageElement.prototype.renderInnerContent = function (t) {
    this.canvasContext.drawImage(this.img, 0, 0);
  }, CVImageElement.prototype.destroy = function () {
    this.img = null;
  }, extendPrototype([CanvasRenderer, ICompElement, CVBaseElement], CVCompElement), CVCompElement.prototype.renderInnerContent = function () {
    var t,
      e = this.canvasContext;
    for (e.beginPath(), e.moveTo(0, 0), e.lineTo(this.data.w, 0), e.lineTo(this.data.w, this.data.h), e.lineTo(0, this.data.h), e.lineTo(0, 0), e.clip(), t = this.layers.length - 1; 0 <= t; t -= 1) (this.completeLayers || this.elements[t]) && this.elements[t].renderFrame();
  }, CVCompElement.prototype.destroy = function () {
    var t;
    for (t = this.layers.length - 1; 0 <= t; t -= 1) this.elements[t] && this.elements[t].destroy();
    this.layers = null, this.elements = null;
  }, CVMaskElement.prototype.renderFrame = function () {
    if (this.hasMasks) {
      var t,
        e,
        r,
        i,
        s = this.element.finalTransform.mat,
        a = this.element.canvasContext,
        n = this.masksProperties.length;
      for (a.beginPath(), t = 0; t < n; t++) if ("n" !== this.masksProperties[t].mode) {
        this.masksProperties[t].inv && (a.moveTo(0, 0), a.lineTo(this.element.globalData.compSize.w, 0), a.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h), a.lineTo(0, this.element.globalData.compSize.h), a.lineTo(0, 0)), i = this.viewData[t].v, e = s.applyToPointArray(i.v[0][0], i.v[0][1], 0), a.moveTo(e[0], e[1]);
        var o,
          h = i._length;
        for (o = 1; o < h; o++) r = s.applyToTriplePoints(i.o[o - 1], i.i[o], i.v[o]), a.bezierCurveTo(r[0], r[1], r[2], r[3], r[4], r[5]);
        r = s.applyToTriplePoints(i.o[o - 1], i.i[0], i.v[0]), a.bezierCurveTo(r[0], r[1], r[2], r[3], r[4], r[5]);
      }
      this.element.globalData.renderer.save(!0), a.clip();
    }
  }, CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty, CVMaskElement.prototype.destroy = function () {
    this.element = null;
  }, extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement), CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement, CVShapeElement.prototype.transformHelper = {
    opacity: 1,
    _opMdf: !1
  }, CVShapeElement.prototype.dashResetter = [], CVShapeElement.prototype.createContent = function () {
    this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, !0, []);
  }, CVShapeElement.prototype.createStyleElement = function (t, e) {
    var r = {
        data: t,
        type: t.ty,
        preTransforms: this.transformsManager.addTransformSequence(e),
        transforms: [],
        elements: [],
        closed: !0 === t.hd
      },
      i = {};
    if ("fl" == t.ty || "st" == t.ty ? (i.c = PropertyFactory.getProp(this, t.c, 1, 255, this), i.c.k || (r.co = "rgb(" + bm_floor(i.c.v[0]) + "," + bm_floor(i.c.v[1]) + "," + bm_floor(i.c.v[2]) + ")")) : "gf" !== t.ty && "gs" !== t.ty || (i.s = PropertyFactory.getProp(this, t.s, 1, null, this), i.e = PropertyFactory.getProp(this, t.e, 1, null, this), i.h = PropertyFactory.getProp(this, t.h || {
      k: 0
    }, 0, .01, this), i.a = PropertyFactory.getProp(this, t.a || {
      k: 0
    }, 0, degToRads, this), i.g = new GradientProperty(this, t.g, this)), i.o = PropertyFactory.getProp(this, t.o, 0, .01, this), "st" == t.ty || "gs" == t.ty) {
      if (r.lc = this.lcEnum[t.lc] || "round", r.lj = this.ljEnum[t.lj] || "round", 1 == t.lj && (r.ml = t.ml), i.w = PropertyFactory.getProp(this, t.w, 0, null, this), i.w.k || (r.wi = i.w.v), t.d) {
        var s = new DashProperty(this, t.d, "canvas", this);
        i.d = s, i.d.k || (r.da = i.d.dashArray, r["do"] = i.d.dashoffset[0]);
      }
    } else r.r = 2 === t.r ? "evenodd" : "nonzero";
    return this.stylesList.push(r), i.style = r, i;
  }, CVShapeElement.prototype.createGroupElement = function (t) {
    return {
      it: [],
      prevViewData: []
    };
  }, CVShapeElement.prototype.createTransformElement = function (t) {
    return {
      transform: {
        opacity: 1,
        _opMdf: !1,
        key: this.transformsManager.getNewKey(),
        op: PropertyFactory.getProp(this, t.o, 0, .01, this),
        mProps: TransformPropertyFactory.getTransformProperty(this, t, this)
      }
    };
  }, CVShapeElement.prototype.createShapeElement = function (t) {
    var e = new CVShapeData(this, t, this.stylesList, this.transformsManager);
    return this.shapes.push(e), this.addShapeToModifiers(e), e;
  }, CVShapeElement.prototype.reloadShapes = function () {
    this._isFirstFrame = !0;
    var t,
      e = this.itemsData.length;
    for (t = 0; t < e; t += 1) this.prevViewData[t] = this.itemsData[t];
    for (this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, !0, []), e = this.dynamicProperties.length, t = 0; t < e; t += 1) this.dynamicProperties[t].getValue();
    this.renderModifiers(), this.transformsManager.processSequences(this._isFirstFrame);
  }, CVShapeElement.prototype.addTransformToStyleList = function (t) {
    var e,
      r = this.stylesList.length;
    for (e = 0; e < r; e += 1) this.stylesList[e].closed || this.stylesList[e].transforms.push(t);
  }, CVShapeElement.prototype.removeTransformFromStyleList = function () {
    var t,
      e = this.stylesList.length;
    for (t = 0; t < e; t += 1) this.stylesList[t].closed || this.stylesList[t].transforms.pop();
  }, CVShapeElement.prototype.closeStyles = function (t) {
    var e,
      r = t.length;
    for (e = 0; e < r; e += 1) t[e].closed = !0;
  }, CVShapeElement.prototype.searchShapes = function (t, e, r, i, s) {
    var a,
      n,
      o,
      h,
      l,
      p,
      m = t.length - 1,
      f = [],
      c = [],
      d = [].concat(s);
    for (a = m; 0 <= a; a -= 1) {
      if ((h = this.searchProcessedElement(t[a])) ? e[a] = r[h - 1] : t[a]._shouldRender = i, "fl" == t[a].ty || "st" == t[a].ty || "gf" == t[a].ty || "gs" == t[a].ty) h ? e[a].style.closed = !1 : e[a] = this.createStyleElement(t[a], d), f.push(e[a].style);else if ("gr" == t[a].ty) {
        if (h) for (o = e[a].it.length, n = 0; n < o; n += 1) e[a].prevViewData[n] = e[a].it[n];else e[a] = this.createGroupElement(t[a]);
        this.searchShapes(t[a].it, e[a].it, e[a].prevViewData, i, d);
      } else "tr" == t[a].ty ? (h || (p = this.createTransformElement(t[a]), e[a] = p), d.push(e[a]), this.addTransformToStyleList(e[a])) : "sh" == t[a].ty || "rc" == t[a].ty || "el" == t[a].ty || "sr" == t[a].ty ? h || (e[a] = this.createShapeElement(t[a])) : "tm" == t[a].ty || "rd" == t[a].ty ? (h ? (l = e[a]).closed = !1 : ((l = ShapeModifiers.getModifier(t[a].ty)).init(this, t[a]), e[a] = l, this.shapeModifiers.push(l)), c.push(l)) : "rp" == t[a].ty && (h ? (l = e[a]).closed = !0 : (l = ShapeModifiers.getModifier(t[a].ty), (e[a] = l).init(this, t, a, e), this.shapeModifiers.push(l), i = !1), c.push(l));
      this.addProcessedElement(t[a], a + 1);
    }
    for (this.removeTransformFromStyleList(), this.closeStyles(f), m = c.length, a = 0; a < m; a += 1) c[a].closed = !0;
  }, CVShapeElement.prototype.renderInnerContent = function () {
    this.transformHelper.opacity = 1, this.transformHelper._opMdf = !1, this.renderModifiers(), this.transformsManager.processSequences(this._isFirstFrame), this.renderShape(this.transformHelper, this.shapesData, this.itemsData, !0);
  }, CVShapeElement.prototype.renderShapeTransform = function (t, e) {
    (t._opMdf || e.op._mdf || this._isFirstFrame) && (e.opacity = t.opacity, e.opacity *= e.op.v, e._opMdf = !0);
  }, CVShapeElement.prototype.drawLayer = function () {
    var t,
      e,
      r,
      i,
      s,
      a,
      n,
      o,
      h,
      l = this.stylesList.length,
      p = this.globalData.renderer,
      m = this.globalData.canvasContext;
    for (t = 0; t < l; t += 1) if (("st" !== (o = (h = this.stylesList[t]).type) && "gs" !== o || 0 !== h.wi) && h.data._shouldRender && 0 !== h.coOp && 0 !== this.globalData.currentGlobalAlpha) {
      for (p.save(), a = h.elements, "st" === o || "gs" === o ? (m.strokeStyle = "st" === o ? h.co : h.grd, m.lineWidth = h.wi, m.lineCap = h.lc, m.lineJoin = h.lj, m.miterLimit = h.ml || 0) : m.fillStyle = "fl" === o ? h.co : h.grd, p.ctxOpacity(h.coOp), "st" !== o && "gs" !== o && m.beginPath(), p.ctxTransform(h.preTransforms.finalTransform.props), r = a.length, e = 0; e < r; e += 1) {
        for ("st" !== o && "gs" !== o || (m.beginPath(), h.da && (m.setLineDash(h.da), m.lineDashOffset = h["do"])), s = (n = a[e].trNodes).length, i = 0; i < s; i += 1) "m" == n[i].t ? m.moveTo(n[i].p[0], n[i].p[1]) : "c" == n[i].t ? m.bezierCurveTo(n[i].pts[0], n[i].pts[1], n[i].pts[2], n[i].pts[3], n[i].pts[4], n[i].pts[5]) : m.closePath();
        "st" !== o && "gs" !== o || (m.stroke(), h.da && m.setLineDash(this.dashResetter));
      }
      "st" !== o && "gs" !== o && m.fill(h.r), p.restore();
    }
  }, CVShapeElement.prototype.renderShape = function (t, e, r, i) {
    var s, a;
    for (a = t, s = e.length - 1; 0 <= s; s -= 1) "tr" == e[s].ty ? (a = r[s].transform, this.renderShapeTransform(t, a)) : "sh" == e[s].ty || "el" == e[s].ty || "rc" == e[s].ty || "sr" == e[s].ty ? this.renderPath(e[s], r[s]) : "fl" == e[s].ty ? this.renderFill(e[s], r[s], a) : "st" == e[s].ty ? this.renderStroke(e[s], r[s], a) : "gf" == e[s].ty || "gs" == e[s].ty ? this.renderGradientFill(e[s], r[s], a) : "gr" == e[s].ty ? this.renderShape(a, e[s].it, r[s].it) : e[s].ty;
    i && this.drawLayer();
  }, CVShapeElement.prototype.renderStyledShape = function (t, e) {
    if (this._isFirstFrame || e._mdf || t.transforms._mdf) {
      var r,
        i,
        s,
        a = t.trNodes,
        n = e.paths,
        o = n._length;
      a.length = 0;
      var h = t.transforms.finalTransform;
      for (s = 0; s < o; s += 1) {
        var l = n.shapes[s];
        if (l && l.v) {
          for (i = l._length, r = 1; r < i; r += 1) 1 === r && a.push({
            t: "m",
            p: h.applyToPointArray(l.v[0][0], l.v[0][1], 0)
          }), a.push({
            t: "c",
            pts: h.applyToTriplePoints(l.o[r - 1], l.i[r], l.v[r])
          });
          1 === i && a.push({
            t: "m",
            p: h.applyToPointArray(l.v[0][0], l.v[0][1], 0)
          }), l.c && i && (a.push({
            t: "c",
            pts: h.applyToTriplePoints(l.o[r - 1], l.i[0], l.v[0])
          }), a.push({
            t: "z"
          }));
        }
      }
      t.trNodes = a;
    }
  }, CVShapeElement.prototype.renderPath = function (t, e) {
    if (!0 !== t.hd && t._shouldRender) {
      var r,
        i = e.styledShapes.length;
      for (r = 0; r < i; r += 1) this.renderStyledShape(e.styledShapes[r], e.sh);
    }
  }, CVShapeElement.prototype.renderFill = function (t, e, r) {
    var i = e.style;
    (e.c._mdf || this._isFirstFrame) && (i.co = "rgb(" + bm_floor(e.c.v[0]) + "," + bm_floor(e.c.v[1]) + "," + bm_floor(e.c.v[2]) + ")"), (e.o._mdf || r._opMdf || this._isFirstFrame) && (i.coOp = e.o.v * r.opacity);
  }, CVShapeElement.prototype.renderGradientFill = function (t, e, r) {
    var i = e.style;
    if (!i.grd || e.g._mdf || e.s._mdf || e.e._mdf || 1 !== t.t && (e.h._mdf || e.a._mdf)) {
      var s = this.globalData.canvasContext,
        a = e.s.v,
        n = e.e.v;
      if (1 === t.t) f = s.createLinearGradient(a[0], a[1], n[0], n[1]);else var o = Math.sqrt(Math.pow(a[0] - n[0], 2) + Math.pow(a[1] - n[1], 2)),
        h = Math.atan2(n[1] - a[1], n[0] - a[0]),
        l = o * (1 <= e.h.v ? .99 : e.h.v <= -1 ? -.99 : e.h.v),
        p = Math.cos(h + e.a.v) * l + a[0],
        m = Math.sin(h + e.a.v) * l + a[1],
        f = s.createRadialGradient(p, m, 0, a[0], a[1], o);
      var c,
        d = t.g.p,
        u = e.g.c,
        y = 1;
      for (c = 0; c < d; c += 1) e.g._hasOpacity && e.g._collapsable && (y = e.g.o[2 * c + 1]), f.addColorStop(u[4 * c] / 100, "rgba(" + u[4 * c + 1] + "," + u[4 * c + 2] + "," + u[4 * c + 3] + "," + y + ")");
      i.grd = f;
    }
    i.coOp = e.o.v * r.opacity;
  }, CVShapeElement.prototype.renderStroke = function (t, e, r) {
    var i = e.style,
      s = e.d;
    s && (s._mdf || this._isFirstFrame) && (i.da = s.dashArray, i["do"] = s.dashoffset[0]), (e.c._mdf || this._isFirstFrame) && (i.co = "rgb(" + bm_floor(e.c.v[0]) + "," + bm_floor(e.c.v[1]) + "," + bm_floor(e.c.v[2]) + ")"), (e.o._mdf || r._opMdf || this._isFirstFrame) && (i.coOp = e.o.v * r.opacity), (e.w._mdf || this._isFirstFrame) && (i.wi = e.w.v);
  }, CVShapeElement.prototype.destroy = function () {
    this.shapesData = null, this.globalData = null, this.canvasContext = null, this.stylesList.length = 0, this.itemsData.length = 0;
  }, extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement), CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement, CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame, CVSolidElement.prototype.renderInnerContent = function () {
    var t = this.canvasContext;
    t.fillStyle = this.data.sc, t.fillRect(0, 0, this.data.sw, this.data.sh);
  }, extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement), CVTextElement.prototype.tHelper = createTag("canvas").getContext("2d"), CVTextElement.prototype.buildNewText = function () {
    var t = this.textProperty.currentData;
    this.renderedLetters = createSizedArray(t.l ? t.l.length : 0);
    var e = !1;
    t.fc ? (e = !0, this.values.fill = this.buildColor(t.fc)) : this.values.fill = "rgba(0,0,0,0)", this.fill = e;
    var r = !1;
    t.sc && (r = !0, this.values.stroke = this.buildColor(t.sc), this.values.sWidth = t.sw);
    var i,
      s,
      a = this.globalData.fontManager.getFontByName(t.f),
      n = t.l,
      o = this.mHelper;
    this.stroke = r, this.values.fValue = t.finalSize + "px " + this.globalData.fontManager.getFontByName(t.f).fFamily, s = t.finalText.length;
    var h,
      l,
      p,
      m,
      f,
      c,
      d,
      u,
      y,
      g,
      v = this.data.singleShape,
      b = t.tr / 1e3 * t.finalSize,
      E = 0,
      x = 0,
      P = !0,
      S = 0;
    for (i = 0; i < s; i += 1) {
      for (l = (h = this.globalData.fontManager.getCharData(t.finalText[i], a.fStyle, this.globalData.fontManager.getFontByName(t.f).fFamily)) && h.data || {}, o.reset(), v && n[i].n && (E = -b, x += t.yOffset, x += P ? 1 : 0, P = !1), d = (f = l.shapes ? l.shapes[0].it : []).length, o.scale(t.finalSize / 100, t.finalSize / 100), v && this.applyTextPropertiesToMatrix(t, o, n[i].line, E, x), y = createSizedArray(d), c = 0; c < d; c += 1) {
        for (m = f[c].ks.k.i.length, u = f[c].ks.k, g = [], p = 1; p < m; p += 1) 1 == p && g.push(o.applyToX(u.v[0][0], u.v[0][1], 0), o.applyToY(u.v[0][0], u.v[0][1], 0)), g.push(o.applyToX(u.o[p - 1][0], u.o[p - 1][1], 0), o.applyToY(u.o[p - 1][0], u.o[p - 1][1], 0), o.applyToX(u.i[p][0], u.i[p][1], 0), o.applyToY(u.i[p][0], u.i[p][1], 0), o.applyToX(u.v[p][0], u.v[p][1], 0), o.applyToY(u.v[p][0], u.v[p][1], 0));
        g.push(o.applyToX(u.o[p - 1][0], u.o[p - 1][1], 0), o.applyToY(u.o[p - 1][0], u.o[p - 1][1], 0), o.applyToX(u.i[0][0], u.i[0][1], 0), o.applyToY(u.i[0][0], u.i[0][1], 0), o.applyToX(u.v[0][0], u.v[0][1], 0), o.applyToY(u.v[0][0], u.v[0][1], 0)), y[c] = g;
      }
      v && (E += n[i].l, E += b), this.textSpans[S] ? this.textSpans[S].elem = y : this.textSpans[S] = {
        elem: y
      }, S += 1;
    }
  }, CVTextElement.prototype.renderInnerContent = function () {
    var t,
      e,
      r,
      i,
      s,
      a,
      n = this.canvasContext;
    this.finalTransform.mat.props;
    n.font = this.values.fValue, n.lineCap = "butt", n.lineJoin = "miter", n.miterLimit = 4, this.data.singleShape || this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
    var o,
      h = this.textAnimator.renderedLetters,
      l = this.textProperty.currentData.l;
    e = l.length;
    var p,
      m,
      f = null,
      c = null,
      d = null;
    for (t = 0; t < e; t += 1) if (!l[t].n) {
      if ((o = h[t]) && (this.globalData.renderer.save(), this.globalData.renderer.ctxTransform(o.p), this.globalData.renderer.ctxOpacity(o.o)), this.fill) {
        for (o && o.fc ? f !== o.fc && (f = o.fc, n.fillStyle = o.fc) : f !== this.values.fill && (f = this.values.fill, n.fillStyle = this.values.fill), i = (p = this.textSpans[t].elem).length, this.globalData.canvasContext.beginPath(), r = 0; r < i; r += 1) for (a = (m = p[r]).length, this.globalData.canvasContext.moveTo(m[0], m[1]), s = 2; s < a; s += 6) this.globalData.canvasContext.bezierCurveTo(m[s], m[s + 1], m[s + 2], m[s + 3], m[s + 4], m[s + 5]);
        this.globalData.canvasContext.closePath(), this.globalData.canvasContext.fill();
      }
      if (this.stroke) {
        for (o && o.sw ? d !== o.sw && (d = o.sw, n.lineWidth = o.sw) : d !== this.values.sWidth && (d = this.values.sWidth, n.lineWidth = this.values.sWidth), o && o.sc ? c !== o.sc && (c = o.sc, n.strokeStyle = o.sc) : c !== this.values.stroke && (c = this.values.stroke, n.strokeStyle = this.values.stroke), i = (p = this.textSpans[t].elem).length, this.globalData.canvasContext.beginPath(), r = 0; r < i; r += 1) for (a = (m = p[r]).length, this.globalData.canvasContext.moveTo(m[0], m[1]), s = 2; s < a; s += 6) this.globalData.canvasContext.bezierCurveTo(m[s], m[s + 1], m[s + 2], m[s + 3], m[s + 4], m[s + 5]);
        this.globalData.canvasContext.closePath(), this.globalData.canvasContext.stroke();
      }
      o && this.globalData.renderer.restore();
    }
  }, CVEffects.prototype.renderFrame = function () {}, HBaseElement.prototype = {
    checkBlendMode: function checkBlendMode() {},
    initRendererElement: function initRendererElement() {
      this.baseElement = createTag(this.data.tg || "div"), this.data.hasMask ? (this.svgElement = createNS("svg"), this.layerElement = createNS("g"), this.maskedElement = this.layerElement, this.svgElement.appendChild(this.layerElement), this.baseElement.appendChild(this.svgElement)) : this.layerElement = this.baseElement, styleDiv(this.baseElement);
    },
    createContainerElements: function createContainerElements() {
      this.renderableEffectsManager = new CVEffects(this), this.transformedElement = this.baseElement, this.maskedElement = this.layerElement, this.data.ln && this.layerElement.setAttribute("id", this.data.ln), this.data.cl && this.layerElement.setAttribute("class", this.data.cl), 0 !== this.data.bm && this.setBlendMode();
    },
    renderElement: function renderElement() {
      this.finalTransform._matMdf && (this.transformedElement.style.transform = this.transformedElement.style.webkitTransform = this.finalTransform.mat.toCSS()), this.finalTransform._opMdf && (this.transformedElement.style.opacity = this.finalTransform.mProp.o.v);
    },
    renderFrame: function renderFrame() {
      this.data.hd || this.hidden || (this.renderTransform(), this.renderRenderable(), this.renderElement(), this.renderInnerContent(), this._isFirstFrame && (this._isFirstFrame = !1));
    },
    destroy: function destroy() {
      this.layerElement = null, this.transformedElement = null, this.matteElement && (this.matteElement = null), this.maskManager && (this.maskManager.destroy(), this.maskManager = null);
    },
    createRenderableComponents: function createRenderableComponents() {
      this.maskManager = new MaskElement(this.data, this, this.globalData);
    },
    addEffects: function addEffects() {},
    setMatte: function setMatte() {}
  }, HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement, HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy, HBaseElement.prototype.buildElementParenting = HybridRenderer.prototype.buildElementParenting, extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement), HSolidElement.prototype.createContent = function () {
    var t;
    this.data.hasMask ? ((t = createNS("rect")).setAttribute("width", this.data.sw), t.setAttribute("height", this.data.sh), t.setAttribute("fill", this.data.sc), this.svgElement.setAttribute("width", this.data.sw), this.svgElement.setAttribute("height", this.data.sh)) : ((t = createTag("div")).style.width = this.data.sw + "px", t.style.height = this.data.sh + "px", t.style.backgroundColor = this.data.sc), this.layerElement.appendChild(t);
  }, extendPrototype([HybridRenderer, ICompElement, HBaseElement], HCompElement), HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements, HCompElement.prototype.createContainerElements = function () {
    this._createBaseContainerElements(), this.data.hasMask ? (this.svgElement.setAttribute("width", this.data.w), this.svgElement.setAttribute("height", this.data.h), this.transformedElement = this.baseElement) : this.transformedElement = this.layerElement;
  }, HCompElement.prototype.addTo3dContainer = function (t, e) {
    for (var r, i = 0; i < e;) this.elements[i] && this.elements[i].getBaseElement && (r = this.elements[i].getBaseElement()), i += 1;
    r ? this.layerElement.insertBefore(t, r) : this.layerElement.appendChild(t);
  }, extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement), HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent, HShapeElement.prototype.createContent = function () {
    var t;
    if (this.baseElement.style.fontSize = 0, this.data.hasMask) this.layerElement.appendChild(this.shapesContainer), t = this.svgElement;else {
      t = createNS("svg");
      var e = this.comp.data ? this.comp.data : this.globalData.compSize;
      t.setAttribute("width", e.w), t.setAttribute("height", e.h), t.appendChild(this.shapesContainer), this.layerElement.appendChild(t);
    }
    this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], !0), this.filterUniqueShapes(), this.shapeCont = t;
  }, HShapeElement.prototype.getTransformedPoint = function (t, e) {
    var r,
      i = t.length;
    for (r = 0; r < i; r += 1) e = t[r].mProps.v.applyToPointArray(e[0], e[1], 0);
    return e;
  }, HShapeElement.prototype.calculateShapeBoundingBox = function (t, e) {
    var r,
      i,
      s,
      a,
      n,
      o = t.sh.v,
      h = t.transformers,
      l = o._length;
    if (!(l <= 1)) {
      for (r = 0; r < l - 1; r += 1) i = this.getTransformedPoint(h, o.v[r]), s = this.getTransformedPoint(h, o.o[r]), a = this.getTransformedPoint(h, o.i[r + 1]), n = this.getTransformedPoint(h, o.v[r + 1]), this.checkBounds(i, s, a, n, e);
      o.c && (i = this.getTransformedPoint(h, o.v[r]), s = this.getTransformedPoint(h, o.o[r]), a = this.getTransformedPoint(h, o.i[0]), n = this.getTransformedPoint(h, o.v[0]), this.checkBounds(i, s, a, n, e));
    }
  }, HShapeElement.prototype.checkBounds = function (t, e, r, i, s) {
    this.getBoundsOfCurve(t, e, r, i);
    var a = this.shapeBoundingBox;
    s.x = bm_min(a.left, s.x), s.xMax = bm_max(a.right, s.xMax), s.y = bm_min(a.top, s.y), s.yMax = bm_max(a.bottom, s.yMax);
  }, HShapeElement.prototype.shapeBoundingBox = {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  }, HShapeElement.prototype.tempBoundingBox = {
    x: 0,
    xMax: 0,
    y: 0,
    yMax: 0,
    width: 0,
    height: 0
  }, HShapeElement.prototype.getBoundsOfCurve = function (t, e, r, i) {
    for (var s, a, n, o, h, l, p, m = [[t[0], i[0]], [t[1], i[1]]], f = 0; f < 2; ++f) if (a = 6 * t[f] - 12 * e[f] + 6 * r[f], s = -3 * t[f] + 9 * e[f] - 9 * r[f] + 3 * i[f], n = 3 * e[f] - 3 * t[f], a |= 0, n |= 0, 0 !== (s |= 0)) (h = a * a - 4 * n * s) < 0 || (0 < (l = (-a + bm_sqrt(h)) / (2 * s)) && l < 1 && m[f].push(this.calculateF(l, t, e, r, i, f)), 0 < (p = (-a - bm_sqrt(h)) / (2 * s)) && p < 1 && m[f].push(this.calculateF(p, t, e, r, i, f)));else {
      if (0 === a) continue;
      0 < (o = -n / a) && o < 1 && m[f].push(this.calculateF(o, t, e, r, i, f));
    }
    this.shapeBoundingBox.left = bm_min.apply(null, m[0]), this.shapeBoundingBox.top = bm_min.apply(null, m[1]), this.shapeBoundingBox.right = bm_max.apply(null, m[0]), this.shapeBoundingBox.bottom = bm_max.apply(null, m[1]);
  }, HShapeElement.prototype.calculateF = function (t, e, r, i, s, a) {
    return bm_pow(1 - t, 3) * e[a] + 3 * bm_pow(1 - t, 2) * t * r[a] + 3 * (1 - t) * bm_pow(t, 2) * i[a] + bm_pow(t, 3) * s[a];
  }, HShapeElement.prototype.calculateBoundingBox = function (t, e) {
    var r,
      i = t.length;
    for (r = 0; r < i; r += 1) t[r] && t[r].sh ? this.calculateShapeBoundingBox(t[r], e) : t[r] && t[r].it && this.calculateBoundingBox(t[r].it, e);
  }, HShapeElement.prototype.currentBoxContains = function (t) {
    return this.currentBBox.x <= t.x && this.currentBBox.y <= t.y && this.currentBBox.width + this.currentBBox.x >= t.x + t.width && this.currentBBox.height + this.currentBBox.y >= t.y + t.height;
  }, HShapeElement.prototype.renderInnerContent = function () {
    if (this._renderShapeFrame(), !this.hidden && (this._isFirstFrame || this._mdf)) {
      var t = this.tempBoundingBox,
        e = 999999;
      if (t.x = e, t.xMax = -e, t.y = e, t.yMax = -e, this.calculateBoundingBox(this.itemsData, t), t.width = t.xMax < t.x ? 0 : t.xMax - t.x, t.height = t.yMax < t.y ? 0 : t.yMax - t.y, this.currentBoxContains(t)) return;
      var r = !1;
      this.currentBBox.w !== t.width && (this.currentBBox.w = t.width, this.shapeCont.setAttribute("width", t.width), r = !0), this.currentBBox.h !== t.height && (this.currentBBox.h = t.height, this.shapeCont.setAttribute("height", t.height), r = !0), (r || this.currentBBox.x !== t.x || this.currentBBox.y !== t.y) && (this.currentBBox.w = t.width, this.currentBBox.h = t.height, this.currentBBox.x = t.x, this.currentBBox.y = t.y, this.shapeCont.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h), this.shapeCont.style.transform = this.shapeCont.style.webkitTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)");
    }
  }, extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement), HTextElement.prototype.createContent = function () {
    if (this.isMasked = this.checkMasks(), this.isMasked) {
      this.renderType = "svg", this.compW = this.comp.data.w, this.compH = this.comp.data.h, this.svgElement.setAttribute("width", this.compW), this.svgElement.setAttribute("height", this.compH);
      var t = createNS("g");
      this.maskedElement.appendChild(t), this.innerElem = t;
    } else this.renderType = "html", this.innerElem = this.layerElement;
    this.checkParenting();
  }, HTextElement.prototype.buildNewText = function () {
    var t = this.textProperty.currentData;
    this.renderedLetters = createSizedArray(t.l ? t.l.length : 0);
    var e = this.innerElem.style;
    e.color = e.fill = t.fc ? this.buildColor(t.fc) : "rgba(0,0,0,0)", t.sc && (e.stroke = this.buildColor(t.sc), e.strokeWidth = t.sw + "px");
    var r,
      i,
      s = this.globalData.fontManager.getFontByName(t.f);
    if (!this.globalData.fontManager.chars) if (e.fontSize = t.finalSize + "px", e.lineHeight = t.finalSize + "px", s.fClass) this.innerElem.className = s.fClass;else {
      e.fontFamily = s.fFamily;
      var a = t.fWeight,
        n = t.fStyle;
      e.fontStyle = n, e.fontWeight = a;
    }
    var o,
      h,
      l,
      p = t.l;
    i = p.length;
    var m,
      f = this.mHelper,
      c = "",
      d = 0;
    for (r = 0; r < i; r += 1) {
      if (this.globalData.fontManager.chars ? (this.textPaths[d] ? o = this.textPaths[d] : ((o = createNS("path")).setAttribute("stroke-linecap", "butt"), o.setAttribute("stroke-linejoin", "round"), o.setAttribute("stroke-miterlimit", "4")), this.isMasked || (this.textSpans[d] ? l = (h = this.textSpans[d]).children[0] : ((h = createTag("div")).style.lineHeight = 0, (l = createNS("svg")).appendChild(o), styleDiv(h)))) : this.isMasked ? o = this.textPaths[d] ? this.textPaths[d] : createNS("text") : this.textSpans[d] ? (h = this.textSpans[d], o = this.textPaths[d]) : (styleDiv(h = createTag("span")), styleDiv(o = createTag("span")), h.appendChild(o)), this.globalData.fontManager.chars) {
        var u,
          y = this.globalData.fontManager.getCharData(t.finalText[r], s.fStyle, this.globalData.fontManager.getFontByName(t.f).fFamily);
        if (u = y ? y.data : null, f.reset(), u && u.shapes && (m = u.shapes[0].it, f.scale(t.finalSize / 100, t.finalSize / 100), c = this.createPathShape(f, m), o.setAttribute("d", c)), this.isMasked) this.innerElem.appendChild(o);else {
          if (this.innerElem.appendChild(h), u && u.shapes) {
            document.body.appendChild(l);
            var g = l.getBBox();
            l.setAttribute("width", g.width + 2), l.setAttribute("height", g.height + 2), l.setAttribute("viewBox", g.x - 1 + " " + (g.y - 1) + " " + (g.width + 2) + " " + (g.height + 2)), l.style.transform = l.style.webkitTransform = "translate(" + (g.x - 1) + "px," + (g.y - 1) + "px)", p[r].yOffset = g.y - 1;
          } else l.setAttribute("width", 1), l.setAttribute("height", 1);
          h.appendChild(l);
        }
      } else o.textContent = p[r].val, o.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve"), this.isMasked ? this.innerElem.appendChild(o) : (this.innerElem.appendChild(h), o.style.transform = o.style.webkitTransform = "translate3d(0," + -t.finalSize / 1.2 + "px,0)");
      this.isMasked ? this.textSpans[d] = o : this.textSpans[d] = h, this.textSpans[d].style.display = "block", this.textPaths[d] = o, d += 1;
    }
    for (; d < this.textSpans.length;) this.textSpans[d].style.display = "none", d += 1;
  }, HTextElement.prototype.renderInnerContent = function () {
    if (this.data.singleShape) {
      if (!this._isFirstFrame && !this.lettersChangedFlag) return;
      this.isMasked && this.finalTransform._matMdf && (this.svgElement.setAttribute("viewBox", -this.finalTransform.mProp.p.v[0] + " " + -this.finalTransform.mProp.p.v[1] + " " + this.compW + " " + this.compH), this.svgElement.style.transform = this.svgElement.style.webkitTransform = "translate(" + -this.finalTransform.mProp.p.v[0] + "px," + -this.finalTransform.mProp.p.v[1] + "px)");
    }
    if (this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag), this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
      var t,
        e,
        r,
        i,
        s,
        a = 0,
        n = this.textAnimator.renderedLetters,
        o = this.textProperty.currentData.l;
      for (e = o.length, t = 0; t < e; t += 1) o[t].n ? a += 1 : (i = this.textSpans[t], s = this.textPaths[t], r = n[a], a += 1, r._mdf.m && (this.isMasked ? i.setAttribute("transform", r.m) : i.style.transform = i.style.webkitTransform = r.m), i.style.opacity = r.o, r.sw && r._mdf.sw && s.setAttribute("stroke-width", r.sw), r.sc && r._mdf.sc && s.setAttribute("stroke", r.sc), r.fc && r._mdf.fc && (s.setAttribute("fill", r.fc), s.style.color = r.fc));
      if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
        var h = this.innerElem.getBBox();
        this.currentBBox.w !== h.width && (this.currentBBox.w = h.width, this.svgElement.setAttribute("width", h.width)), this.currentBBox.h !== h.height && (this.currentBBox.h = h.height, this.svgElement.setAttribute("height", h.height));
        this.currentBBox.w === h.width + 2 && this.currentBBox.h === h.height + 2 && this.currentBBox.x === h.x - 1 && this.currentBBox.y === h.y - 1 || (this.currentBBox.w = h.width + 2, this.currentBBox.h = h.height + 2, this.currentBBox.x = h.x - 1, this.currentBBox.y = h.y - 1, this.svgElement.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h), this.svgElement.style.transform = this.svgElement.style.webkitTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)");
      }
    }
  }, extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement), HImageElement.prototype.createContent = function () {
    var t = this.globalData.getAssetsPath(this.assetData),
      e = new Image();
    this.data.hasMask ? (this.imageElem = createNS("image"), this.imageElem.setAttribute("width", this.assetData.w + "px"), this.imageElem.setAttribute("height", this.assetData.h + "px"), this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", t), this.layerElement.appendChild(this.imageElem), this.baseElement.setAttribute("width", this.assetData.w), this.baseElement.setAttribute("height", this.assetData.h)) : this.layerElement.appendChild(e), e.src = t, this.data.ln && this.baseElement.setAttribute("id", this.data.ln);
  }, extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement), HCameraElement.prototype.setup = function () {
    var t,
      e,
      r = this.comp.threeDElements.length;
    for (t = 0; t < r; t += 1) "3d" === (e = this.comp.threeDElements[t]).type && (e.perspectiveElem.style.perspective = e.perspectiveElem.style.webkitPerspective = this.pe.v + "px", e.container.style.transformOrigin = e.container.style.mozTransformOrigin = e.container.style.webkitTransformOrigin = "0px 0px 0px", e.perspectiveElem.style.transform = e.perspectiveElem.style.webkitTransform = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)");
  }, HCameraElement.prototype.createElements = function () {}, HCameraElement.prototype.hide = function () {}, HCameraElement.prototype.renderFrame = function () {
    var t,
      e,
      r = this._isFirstFrame;
    if (this.hierarchy) for (e = this.hierarchy.length, t = 0; t < e; t += 1) r = this.hierarchy[t].finalTransform.mProp._mdf || r;
    if (r || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
      if (this.mat.reset(), this.hierarchy) for (t = e = this.hierarchy.length - 1; 0 <= t; t -= 1) {
        var i = this.hierarchy[t].finalTransform.mProp;
        this.mat.translate(-i.p.v[0], -i.p.v[1], i.p.v[2]), this.mat.rotateX(-i.or.v[0]).rotateY(-i.or.v[1]).rotateZ(i.or.v[2]), this.mat.rotateX(-i.rx.v).rotateY(-i.ry.v).rotateZ(i.rz.v), this.mat.scale(1 / i.s.v[0], 1 / i.s.v[1], 1 / i.s.v[2]), this.mat.translate(i.a.v[0], i.a.v[1], i.a.v[2]);
      }
      if (this.p ? this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]) : this.mat.translate(-this.px.v, -this.py.v, this.pz.v), this.a) {
        var s;
        s = this.p ? [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]] : [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
        var a = Math.sqrt(Math.pow(s[0], 2) + Math.pow(s[1], 2) + Math.pow(s[2], 2)),
          n = [s[0] / a, s[1] / a, s[2] / a],
          o = Math.sqrt(n[2] * n[2] + n[0] * n[0]),
          h = Math.atan2(n[1], o),
          l = Math.atan2(n[0], -n[2]);
        this.mat.rotateY(l).rotateX(-h);
      }
      this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v), this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]), this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0), this.mat.translate(0, 0, this.pe.v);
      var p = !this._prevMat.equals(this.mat);
      if ((p || this.pe._mdf) && this.comp.threeDElements) {
        var m;
        for (e = this.comp.threeDElements.length, t = 0; t < e; t += 1) "3d" === (m = this.comp.threeDElements[t]).type && (p && (m.container.style.transform = m.container.style.webkitTransform = this.mat.toCSS()), this.pe._mdf && (m.perspectiveElem.style.perspective = m.perspectiveElem.style.webkitPerspective = this.pe.v + "px"));
        this.mat.clone(this._prevMat);
      }
    }
    this._isFirstFrame = !1;
  }, HCameraElement.prototype.prepareFrame = function (t) {
    this.prepareProperties(t, !0);
  }, HCameraElement.prototype.destroy = function () {}, HCameraElement.prototype.getBaseElement = function () {
    return null;
  }, HEffects.prototype.renderFrame = function () {};
  var animationManager = function () {
      var t = {},
        s = [],
        i = 0,
        a = 0,
        n = 0,
        o = !0,
        h = !1;
      function r(t) {
        for (var e = 0, r = t.target; e < a;) s[e].animation === r && (s.splice(e, 1), e -= 1, a -= 1, r.isPaused || m()), e += 1;
      }
      function l(t, e) {
        if (!t) return null;
        for (var r = 0; r < a;) {
          if (s[r].elem == t && null !== s[r].elem) return s[r].animation;
          r += 1;
        }
        var i = new AnimationItem();
        return f(i, t), i.setData(t, e), i;
      }
      function p() {
        n += 1, d();
      }
      function m() {
        n -= 1;
      }
      function f(t, e) {
        t.addEventListener("destroy", r), t.addEventListener("_active", p), t.addEventListener("_idle", m), s.push({
          elem: e,
          animation: t
        }), a += 1;
      }
      function c(t) {
        var e,
          r = t - i;
        for (e = 0; e < a; e += 1) s[e].animation.advanceTime(r);
        i = t, n && !h ? window.requestAnimationFrame(c) : o = !0;
      }
      function e(t) {
        i = t, window.requestAnimationFrame(c);
      }
      function d() {
        !h && n && o && (window.requestAnimationFrame(e), o = !1);
      }
      return t.registerAnimation = l, t.loadAnimation = function (t) {
        var e = new AnimationItem();
        return f(e, null), e.setParams(t), e;
      }, t.setSpeed = function (t, e) {
        var r;
        for (r = 0; r < a; r += 1) s[r].animation.setSpeed(t, e);
      }, t.setDirection = function (t, e) {
        var r;
        for (r = 0; r < a; r += 1) s[r].animation.setDirection(t, e);
      }, t.play = function (t) {
        var e;
        for (e = 0; e < a; e += 1) s[e].animation.play(t);
      }, t.pause = function (t) {
        var e;
        for (e = 0; e < a; e += 1) s[e].animation.pause(t);
      }, t.stop = function (t) {
        var e;
        for (e = 0; e < a; e += 1) s[e].animation.stop(t);
      }, t.togglePause = function (t) {
        var e;
        for (e = 0; e < a; e += 1) s[e].animation.togglePause(t);
      }, t.searchAnimations = function (t, e, r) {
        var i,
          s = [].concat([].slice.call(document.getElementsByClassName("lottie")), [].slice.call(document.getElementsByClassName("bodymovin"))),
          a = s.length;
        for (i = 0; i < a; i += 1) r && s[i].setAttribute("data-bm-type", r), l(s[i], t);
        if (e && 0 === a) {
          r || (r = "svg");
          var n = document.getElementsByTagName("body")[0];
          n.innerHTML = "";
          var o = createTag("div");
          o.style.width = "100%", o.style.height = "100%", o.setAttribute("data-bm-type", r), n.appendChild(o), l(o, t);
        }
      }, t.resize = function () {
        var t;
        for (t = 0; t < a; t += 1) s[t].animation.resize();
      }, t.goToAndStop = function (t, e, r) {
        var i;
        for (i = 0; i < a; i += 1) s[i].animation.goToAndStop(t, e, r);
      }, t.destroy = function (t) {
        var e;
        for (e = a - 1; 0 <= e; e -= 1) s[e].animation.destroy(t);
      }, t.freeze = function () {
        h = !0;
      }, t.unfreeze = function () {
        h = !1, d();
      }, t.getRegisteredAnimations = function () {
        var t,
          e = s.length,
          r = [];
        for (t = 0; t < e; t += 1) r.push(s[t].animation);
        return r;
      }, t;
    }(),
    AnimationItem = function AnimationItem() {
      this._cbs = [], this.name = "", this.path = "", this.isLoaded = !1, this.currentFrame = 0, this.currentRawFrame = 0, this.totalFrames = 0, this.frameRate = 0, this.frameMult = 0, this.playSpeed = 1, this.playDirection = 1, this.playCount = 0, this.animationData = {}, this.assets = [], this.isPaused = !0, this.autoplay = !1, this.loop = !0, this.renderer = null, this.animationID = createElementID(), this.assetsPath = "", this.timeCompleted = 0, this.segmentPos = 0, this.subframeEnabled = subframeEnabled, this.segments = [], this._idle = !0, this._completedLoop = !1, this.projectInterface = ProjectInterface(), this.imagePreloader = new ImagePreloader();
    };
  extendPrototype([BaseEvent], AnimationItem), AnimationItem.prototype.setParams = function (t) {
    t.context && (this.context = t.context), (t.wrapper || t.container) && (this.wrapper = t.wrapper || t.container);
    var e = t.animType ? t.animType : t.renderer ? t.renderer : "svg";
    switch (e) {
      case "canvas":
        this.renderer = new CanvasRenderer(this, t.rendererSettings);
        break;
      case "svg":
        this.renderer = new SVGRenderer(this, t.rendererSettings);
        break;
      default:
        this.renderer = new HybridRenderer(this, t.rendererSettings);
    }
    this.renderer.setProjectInterface(this.projectInterface), this.animType = e, "" === t.loop || null === t.loop || (!1 === t.loop ? this.loop = !1 : !0 === t.loop ? this.loop = !0 : this.loop = parseInt(t.loop)), this.autoplay = !("autoplay" in t) || t.autoplay, this.name = t.name ? t.name : "", this.autoloadSegments = !t.hasOwnProperty("autoloadSegments") || t.autoloadSegments, this.assetsPath = t.assetsPath, t.animationData ? this.configAnimation(t.animationData) : t.path && (-1 !== t.path.lastIndexOf("\\") ? this.path = t.path.substr(0, t.path.lastIndexOf("\\") + 1) : this.path = t.path.substr(0, t.path.lastIndexOf("/") + 1), this.fileName = t.path.substr(t.path.lastIndexOf("/") + 1), this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(".json")), assetLoader.load(t.path, this.configAnimation.bind(this), function () {
      this.trigger("data_failed");
    }.bind(this)));
  }, AnimationItem.prototype.setData = function (t, e) {
    var r = {
        wrapper: t,
        animationData: e ? "object" == _typeof(e) ? e : JSON.parse(e) : null
      },
      i = t.attributes;
    r.path = i.getNamedItem("data-animation-path") ? i.getNamedItem("data-animation-path").value : i.getNamedItem("data-bm-path") ? i.getNamedItem("data-bm-path").value : i.getNamedItem("bm-path") ? i.getNamedItem("bm-path").value : "", r.animType = i.getNamedItem("data-anim-type") ? i.getNamedItem("data-anim-type").value : i.getNamedItem("data-bm-type") ? i.getNamedItem("data-bm-type").value : i.getNamedItem("bm-type") ? i.getNamedItem("bm-type").value : i.getNamedItem("data-bm-renderer") ? i.getNamedItem("data-bm-renderer").value : i.getNamedItem("bm-renderer") ? i.getNamedItem("bm-renderer").value : "canvas";
    var s = i.getNamedItem("data-anim-loop") ? i.getNamedItem("data-anim-loop").value : i.getNamedItem("data-bm-loop") ? i.getNamedItem("data-bm-loop").value : i.getNamedItem("bm-loop") ? i.getNamedItem("bm-loop").value : "";
    "" === s || (r.loop = "false" !== s && ("true" === s || parseInt(s)));
    var a = i.getNamedItem("data-anim-autoplay") ? i.getNamedItem("data-anim-autoplay").value : i.getNamedItem("data-bm-autoplay") ? i.getNamedItem("data-bm-autoplay").value : !i.getNamedItem("bm-autoplay") || i.getNamedItem("bm-autoplay").value;
    r.autoplay = "false" !== a, r.name = i.getNamedItem("data-name") ? i.getNamedItem("data-name").value : i.getNamedItem("data-bm-name") ? i.getNamedItem("data-bm-name").value : i.getNamedItem("bm-name") ? i.getNamedItem("bm-name").value : "", "false" === (i.getNamedItem("data-anim-prerender") ? i.getNamedItem("data-anim-prerender").value : i.getNamedItem("data-bm-prerender") ? i.getNamedItem("data-bm-prerender").value : i.getNamedItem("bm-prerender") ? i.getNamedItem("bm-prerender").value : "") && (r.prerender = !1), this.setParams(r);
  }, AnimationItem.prototype.includeLayers = function (t) {
    t.op > this.animationData.op && (this.animationData.op = t.op, this.totalFrames = Math.floor(t.op - this.animationData.ip));
    var e,
      r,
      i = this.animationData.layers,
      s = i.length,
      a = t.layers,
      n = a.length;
    for (r = 0; r < n; r += 1) for (e = 0; e < s;) {
      if (i[e].id == a[r].id) {
        i[e] = a[r];
        break;
      }
      e += 1;
    }
    if ((t.chars || t.fonts) && (this.renderer.globalData.fontManager.addChars(t.chars), this.renderer.globalData.fontManager.addFonts(t.fonts, this.renderer.globalData.defs)), t.assets) for (s = t.assets.length, e = 0; e < s; e += 1) this.animationData.assets.push(t.assets[e]);
    this.animationData.__complete = !1, dataManager.completeData(this.animationData, this.renderer.globalData.fontManager), this.renderer.includeLayers(t.layers), expressionsPlugin && expressionsPlugin.initExpressions(this), this.loadNextSegment();
  }, AnimationItem.prototype.loadNextSegment = function () {
    var t = this.animationData.segments;
    if (!t || 0 === t.length || !this.autoloadSegments) return this.trigger("data_ready"), void (this.timeCompleted = this.totalFrames);
    var e = t.shift();
    this.timeCompleted = e.time * this.frameRate;
    var r = this.path + this.fileName + "_" + this.segmentPos + ".json";
    this.segmentPos += 1, assetLoader.load(r, this.includeLayers.bind(this), function () {
      this.trigger("data_failed");
    }.bind(this));
  }, AnimationItem.prototype.loadSegments = function () {
    this.animationData.segments || (this.timeCompleted = this.totalFrames), this.loadNextSegment();
  }, AnimationItem.prototype.imagesLoaded = function () {
    this.trigger("loaded_images"), this.checkLoaded();
  }, AnimationItem.prototype.preloadImages = function () {
    this.imagePreloader.setAssetsPath(this.assetsPath), this.imagePreloader.setPath(this.path), this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
  }, AnimationItem.prototype.configAnimation = function (t) {
    if (this.renderer) try {
      this.animationData = t, this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip), this.renderer.configAnimation(t), t.assets || (t.assets = []), this.assets = this.animationData.assets, this.frameRate = this.animationData.fr, this.firstFrame = Math.round(this.animationData.ip), this.frameMult = this.animationData.fr / 1e3, this.renderer.searchExtraCompositions(t.assets), this.trigger("config_ready"), this.preloadImages(), this.loadSegments(), this.updaFrameModifier(), this.waitForFontsLoaded();
    } catch (t) {
      this.triggerConfigError(t);
    }
  }, AnimationItem.prototype.waitForFontsLoaded = function () {
    this.renderer && (this.renderer.globalData.fontManager.loaded() ? this.checkLoaded() : setTimeout(this.waitForFontsLoaded.bind(this), 20));
  }, AnimationItem.prototype.checkLoaded = function () {
    this.isLoaded || !this.renderer.globalData.fontManager.loaded() || !this.imagePreloader.loaded() && "canvas" === this.renderer.rendererType || (this.isLoaded = !0, dataManager.completeData(this.animationData, this.renderer.globalData.fontManager), expressionsPlugin && expressionsPlugin.initExpressions(this), this.renderer.initItems(), setTimeout(function () {
      this.trigger("DOMLoaded");
    }.bind(this), 0), this.gotoFrame(), this.autoplay && this.play());
  }, AnimationItem.prototype.resize = function () {
    this.renderer.updateContainerSize();
  }, AnimationItem.prototype.setSubframe = function (t) {
    this.subframeEnabled = !!t;
  }, AnimationItem.prototype.gotoFrame = function () {
    this.currentFrame = this.subframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame, this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted && (this.currentFrame = this.timeCompleted), this.trigger("enterFrame"), this.renderFrame();
  }, AnimationItem.prototype.renderFrame = function () {
    if (!1 !== this.isLoaded) try {
      this.renderer.renderFrame(this.currentFrame + this.firstFrame);
    } catch (t) {
      this.triggerRenderFrameError(t);
    }
  }, AnimationItem.prototype.play = function (t) {
    t && this.name != t || !0 === this.isPaused && (this.isPaused = !1, this._idle && (this._idle = !1, this.trigger("_active")));
  }, AnimationItem.prototype.pause = function (t) {
    t && this.name != t || !1 === this.isPaused && (this.isPaused = !0, this._idle = !0, this.trigger("_idle"));
  }, AnimationItem.prototype.togglePause = function (t) {
    t && this.name != t || (!0 === this.isPaused ? this.play() : this.pause());
  }, AnimationItem.prototype.stop = function (t) {
    t && this.name != t || (this.pause(), this.playCount = 0, this._completedLoop = !1, this.setCurrentRawFrameValue(0));
  }, AnimationItem.prototype.goToAndStop = function (t, e, r) {
    r && this.name != r || (e ? this.setCurrentRawFrameValue(t) : this.setCurrentRawFrameValue(t * this.frameModifier), this.pause());
  }, AnimationItem.prototype.goToAndPlay = function (t, e, r) {
    this.goToAndStop(t, e, r), this.play();
  }, AnimationItem.prototype.advanceTime = function (t) {
    if (!0 !== this.isPaused && !1 !== this.isLoaded) {
      var e = this.currentRawFrame + t * this.frameModifier,
        r = !1;
      e >= this.totalFrames - 1 && 0 < this.frameModifier ? this.loop && this.playCount !== this.loop ? e >= this.totalFrames ? (this.playCount += 1, this.checkSegments(e % this.totalFrames) || (this.setCurrentRawFrameValue(e % this.totalFrames), this._completedLoop = !0, this.trigger("loopComplete"))) : this.setCurrentRawFrameValue(e) : this.checkSegments(e > this.totalFrames ? e % this.totalFrames : 0) || (r = !0, e = this.totalFrames - 1) : e < 0 ? this.checkSegments(e % this.totalFrames) || (!this.loop || this.playCount-- <= 0 && !0 !== this.loop ? (r = !0, e = 0) : (this.setCurrentRawFrameValue(this.totalFrames + e % this.totalFrames), this._completedLoop ? this.trigger("loopComplete") : this._completedLoop = !0)) : this.setCurrentRawFrameValue(e), r && (this.setCurrentRawFrameValue(e), this.pause(), this.trigger("complete"));
    }
  }, AnimationItem.prototype.adjustSegment = function (t, e) {
    this.playCount = 0, t[1] < t[0] ? (0 < this.frameModifier && (this.playSpeed < 0 ? this.setSpeed(-this.playSpeed) : this.setDirection(-1)), this.timeCompleted = this.totalFrames = t[0] - t[1], this.firstFrame = t[1], this.setCurrentRawFrameValue(this.totalFrames - .001 - e)) : t[1] > t[0] && (this.frameModifier < 0 && (this.playSpeed < 0 ? this.setSpeed(-this.playSpeed) : this.setDirection(1)), this.timeCompleted = this.totalFrames = t[1] - t[0], this.firstFrame = t[0], this.setCurrentRawFrameValue(.001 + e)), this.trigger("segmentStart");
  }, AnimationItem.prototype.setSegment = function (t, e) {
    var r = -1;
    this.isPaused && (this.currentRawFrame + this.firstFrame < t ? r = t : this.currentRawFrame + this.firstFrame > e && (r = e - t)), this.firstFrame = t, this.timeCompleted = this.totalFrames = e - t, -1 !== r && this.goToAndStop(r, !0);
  }, AnimationItem.prototype.playSegments = function (t, e) {
    if (e && (this.segments.length = 0), "object" == _typeof(t[0])) {
      var r,
        i = t.length;
      for (r = 0; r < i; r += 1) this.segments.push(t[r]);
    } else this.segments.push(t);
    this.segments.length && e && this.adjustSegment(this.segments.shift(), 0), this.isPaused && this.play();
  }, AnimationItem.prototype.resetSegments = function (t) {
    this.segments.length = 0, this.segments.push([this.animationData.ip, this.animationData.op]), t && this.checkSegments(0);
  }, AnimationItem.prototype.checkSegments = function (t) {
    return !!this.segments.length && (this.adjustSegment(this.segments.shift(), t), !0);
  }, AnimationItem.prototype.destroy = function (t) {
    t && this.name != t || !this.renderer || (this.renderer.destroy(), this.imagePreloader.destroy(), this.trigger("destroy"), this._cbs = null, this.onEnterFrame = this.onLoopComplete = this.onComplete = this.onSegmentStart = this.onDestroy = null, this.renderer = null);
  }, AnimationItem.prototype.setCurrentRawFrameValue = function (t) {
    this.currentRawFrame = t, this.gotoFrame();
  }, AnimationItem.prototype.setSpeed = function (t) {
    this.playSpeed = t, this.updaFrameModifier();
  }, AnimationItem.prototype.setDirection = function (t) {
    this.playDirection = t < 0 ? -1 : 1, this.updaFrameModifier();
  }, AnimationItem.prototype.updaFrameModifier = function () {
    this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
  }, AnimationItem.prototype.getPath = function () {
    return this.path;
  }, AnimationItem.prototype.getAssetsPath = function (t) {
    var e = "";
    if (t.e) e = t.p;else if (this.assetsPath) {
      var r = t.p;
      -1 !== r.indexOf("images/") && (r = r.split("/")[1]), e = this.assetsPath + r;
    } else e = this.path, e += t.u ? t.u : "", e += t.p;
    return e;
  }, AnimationItem.prototype.getAssetData = function (t) {
    for (var e = 0, r = this.assets.length; e < r;) {
      if (t == this.assets[e].id) return this.assets[e];
      e += 1;
    }
  }, AnimationItem.prototype.hide = function () {
    this.renderer.hide();
  }, AnimationItem.prototype.show = function () {
    this.renderer.show();
  }, AnimationItem.prototype.getDuration = function (t) {
    return t ? this.totalFrames : this.totalFrames / this.frameRate;
  }, AnimationItem.prototype.trigger = function (t) {
    if (this._cbs && this._cbs[t]) switch (t) {
      case "enterFrame":
        this.triggerEvent(t, new BMEnterFrameEvent(t, this.currentFrame, this.totalFrames, this.frameModifier));
        break;
      case "loopComplete":
        this.triggerEvent(t, new BMCompleteLoopEvent(t, this.loop, this.playCount, this.frameMult));
        break;
      case "complete":
        this.triggerEvent(t, new BMCompleteEvent(t, this.frameMult));
        break;
      case "segmentStart":
        this.triggerEvent(t, new BMSegmentStartEvent(t, this.firstFrame, this.totalFrames));
        break;
      case "destroy":
        this.triggerEvent(t, new BMDestroyEvent(t, this));
        break;
      default:
        this.triggerEvent(t);
    }
    "enterFrame" === t && this.onEnterFrame && this.onEnterFrame.call(this, new BMEnterFrameEvent(t, this.currentFrame, this.totalFrames, this.frameMult)), "loopComplete" === t && this.onLoopComplete && this.onLoopComplete.call(this, new BMCompleteLoopEvent(t, this.loop, this.playCount, this.frameMult)), "complete" === t && this.onComplete && this.onComplete.call(this, new BMCompleteEvent(t, this.frameMult)), "segmentStart" === t && this.onSegmentStart && this.onSegmentStart.call(this, new BMSegmentStartEvent(t, this.firstFrame, this.totalFrames)), "destroy" === t && this.onDestroy && this.onDestroy.call(this, new BMDestroyEvent(t, this));
  }, AnimationItem.prototype.triggerRenderFrameError = function (t) {
    var e = new BMRenderFrameErrorEvent(t, this.currentFrame);
    this.triggerEvent("error", e), this.onError && this.onError.call(this, e);
  }, AnimationItem.prototype.triggerConfigError = function (t) {
    var e = new BMConfigErrorEvent(t, this.currentFrame);
    this.triggerEvent("error", e), this.onError && this.onError.call(this, e);
  };
  var Expressions = (BW = {}, BW.initExpressions = function (t) {
      var e = 0,
        r = [];
      function i() {
        var t,
          e = r.length;
        for (t = 0; t < e; t += 1) r[t].release();
        r.length = 0;
      }
      t.renderer.compInterface = CompExpressionInterface(t.renderer), t.renderer.globalData.projectInterface.registerComposition(t.renderer), t.renderer.globalData.pushExpression = function () {
        e += 1;
      }, t.renderer.globalData.popExpression = function () {
        0 == (e -= 1) && i();
      }, t.renderer.globalData.registerExpressionProperty = function (t) {
        -1 === r.indexOf(t) && r.push(t);
      };
    }, BW),
    BW;
  expressionsPlugin = Expressions;
  var ExpressionManager = function () {
      var ob = {},
        Math = BMMath,
        window = null,
        document = null;
      function $bm_isInstanceOfArray(t) {
        return t.constructor === Array || t.constructor === Float32Array;
      }
      function isNumerable(t, e) {
        return "number" === t || "boolean" === t || "string" === t || e instanceof Number;
      }
      function $bm_neg(t) {
        var e = _typeof(t);
        if ("number" === e || "boolean" === e || t instanceof Number) return -t;
        if ($bm_isInstanceOfArray(t)) {
          var r,
            i = t.length,
            s = [];
          for (r = 0; r < i; r += 1) s[r] = -t[r];
          return s;
        }
        return t.propType ? t.v : void 0;
      }
      var easeInBez = BezierFactory.getBezierEasing(.333, 0, .833, .833, "easeIn").get,
        easeOutBez = BezierFactory.getBezierEasing(.167, .167, .667, 1, "easeOut").get,
        easeInOutBez = BezierFactory.getBezierEasing(.33, 0, .667, 1, "easeInOut").get;
      function sum(t, e) {
        var r = _typeof(t),
          i = _typeof(e);
        if ("string" === r || "string" === i) return t + e;
        if (isNumerable(r, t) && isNumerable(i, e)) return t + e;
        if ($bm_isInstanceOfArray(t) && isNumerable(i, e)) return (t = t.slice(0))[0] = t[0] + e, t;
        if (isNumerable(r, t) && $bm_isInstanceOfArray(e)) return (e = e.slice(0))[0] = t + e[0], e;
        if ($bm_isInstanceOfArray(t) && $bm_isInstanceOfArray(e)) {
          for (var s = 0, a = t.length, n = e.length, o = []; s < a || s < n;) ("number" == typeof t[s] || t[s] instanceof Number) && ("number" == typeof e[s] || e[s] instanceof Number) ? o[s] = t[s] + e[s] : o[s] = void 0 === e[s] ? t[s] : t[s] || e[s], s += 1;
          return o;
        }
        return 0;
      }
      var add = sum;
      function sub(t, e) {
        var r = _typeof(t),
          i = _typeof(e);
        if (isNumerable(r, t) && isNumerable(i, e)) return "string" === r && (t = parseInt(t)), "string" === i && (e = parseInt(e)), t - e;
        if ($bm_isInstanceOfArray(t) && isNumerable(i, e)) return (t = t.slice(0))[0] = t[0] - e, t;
        if (isNumerable(r, t) && $bm_isInstanceOfArray(e)) return (e = e.slice(0))[0] = t - e[0], e;
        if ($bm_isInstanceOfArray(t) && $bm_isInstanceOfArray(e)) {
          for (var s = 0, a = t.length, n = e.length, o = []; s < a || s < n;) ("number" == typeof t[s] || t[s] instanceof Number) && ("number" == typeof e[s] || e[s] instanceof Number) ? o[s] = t[s] - e[s] : o[s] = void 0 === e[s] ? t[s] : t[s] || e[s], s += 1;
          return o;
        }
        return 0;
      }
      function mul(t, e) {
        var r,
          i,
          s,
          a = _typeof(t),
          n = _typeof(e);
        if (isNumerable(a, t) && isNumerable(n, e)) return t * e;
        if ($bm_isInstanceOfArray(t) && isNumerable(n, e)) {
          for (s = t.length, r = createTypedArray("float32", s), i = 0; i < s; i += 1) r[i] = t[i] * e;
          return r;
        }
        if (isNumerable(a, t) && $bm_isInstanceOfArray(e)) {
          for (s = e.length, r = createTypedArray("float32", s), i = 0; i < s; i += 1) r[i] = t * e[i];
          return r;
        }
        return 0;
      }
      function div(t, e) {
        var r,
          i,
          s,
          a = _typeof(t),
          n = _typeof(e);
        if (isNumerable(a, t) && isNumerable(n, e)) return t / e;
        if ($bm_isInstanceOfArray(t) && isNumerable(n, e)) {
          for (s = t.length, r = createTypedArray("float32", s), i = 0; i < s; i += 1) r[i] = t[i] / e;
          return r;
        }
        if (isNumerable(a, t) && $bm_isInstanceOfArray(e)) {
          for (s = e.length, r = createTypedArray("float32", s), i = 0; i < s; i += 1) r[i] = t / e[i];
          return r;
        }
        return 0;
      }
      function mod(t, e) {
        return "string" == typeof t && (t = parseInt(t)), "string" == typeof e && (e = parseInt(e)), t % e;
      }
      var $bm_sum = sum,
        $bm_sub = sub,
        $bm_mul = mul,
        $bm_div = div,
        $bm_mod = mod;
      function clamp(t, e, r) {
        if (r < e) {
          var i = r;
          r = e, e = i;
        }
        return Math.min(Math.max(t, e), r);
      }
      function radiansToDegrees(t) {
        return t / degToRads;
      }
      var radians_to_degrees = radiansToDegrees;
      function degreesToRadians(t) {
        return t * degToRads;
      }
      var degrees_to_radians = radiansToDegrees,
        helperLengthArray = [0, 0, 0, 0, 0, 0];
      function length(t, e) {
        if ("number" == typeof t || t instanceof Number) return e = e || 0, Math.abs(t - e);
        e || (e = helperLengthArray);
        var r,
          i = Math.min(t.length, e.length),
          s = 0;
        for (r = 0; r < i; r += 1) s += Math.pow(e[r] - t[r], 2);
        return Math.sqrt(s);
      }
      function normalize(t) {
        return div(t, length(t));
      }
      function rgbToHsl(t) {
        var e,
          r,
          i = t[0],
          s = t[1],
          a = t[2],
          n = Math.max(i, s, a),
          o = Math.min(i, s, a),
          h = (n + o) / 2;
        if (n == o) e = r = 0;else {
          var l = n - o;
          switch (r = .5 < h ? l / (2 - n - o) : l / (n + o), n) {
            case i:
              e = (s - a) / l + (s < a ? 6 : 0);
              break;
            case s:
              e = (a - i) / l + 2;
              break;
            case a:
              e = (i - s) / l + 4;
          }
          e /= 6;
        }
        return [e, r, h, t[3]];
      }
      function hue2rgb(t, e, r) {
        return r < 0 && (r += 1), 1 < r && (r -= 1), r < 1 / 6 ? t + 6 * (e - t) * r : r < .5 ? e : r < 2 / 3 ? t + (e - t) * (2 / 3 - r) * 6 : t;
      }
      function hslToRgb(t) {
        var e,
          r,
          i,
          s = t[0],
          a = t[1],
          n = t[2];
        if (0 === a) e = r = i = n;else {
          var o = n < .5 ? n * (1 + a) : n + a - n * a,
            h = 2 * n - o;
          e = hue2rgb(h, o, s + 1 / 3), r = hue2rgb(h, o, s), i = hue2rgb(h, o, s - 1 / 3);
        }
        return [e, r, i, t[3]];
      }
      function linear(t, e, r, i, s) {
        if (void 0 !== i && void 0 !== s || (i = e, s = r, e = 0, r = 1), r < e) {
          var a = r;
          r = e, e = a;
        }
        if (t <= e) return i;
        if (r <= t) return s;
        var n = r === e ? 0 : (t - e) / (r - e);
        if (!i.length) return i + (s - i) * n;
        var o,
          h = i.length,
          l = createTypedArray("float32", h);
        for (o = 0; o < h; o += 1) l[o] = i[o] + (s[o] - i[o]) * n;
        return l;
      }
      function random(t, e) {
        if (void 0 === e && (void 0 === t ? (t = 0, e = 1) : (e = t, t = void 0)), e.length) {
          var r,
            i = e.length;
          t || (t = createTypedArray("float32", i));
          var s = createTypedArray("float32", i),
            a = BMMath.random();
          for (r = 0; r < i; r += 1) s[r] = t[r] + a * (e[r] - t[r]);
          return s;
        }
        return void 0 === t && (t = 0), t + BMMath.random() * (e - t);
      }
      function createPath(t, e, r, i) {
        var s,
          a = t.length,
          n = shape_pool.newElement();
        n.setPathData(!!i, a);
        var o,
          h,
          l = [0, 0];
        for (s = 0; s < a; s += 1) o = e && e[s] ? e[s] : l, h = r && r[s] ? r[s] : l, n.setTripleAt(t[s][0], t[s][1], h[0] + t[s][0], h[1] + t[s][1], o[0] + t[s][0], o[1] + t[s][1], s, !0);
        return n;
      }
      function initiateExpression(elem, data, property) {
        var val = data.x,
          needsVelocity = /velocity(?![\w\d])/.test(val),
          _needsRandom = -1 !== val.indexOf("random"),
          elemType = elem.data.ty,
          transform,
          $bm_transform,
          content,
          effect,
          thisProperty = property;
        thisProperty.valueAtTime = thisProperty.getValueAtTime, Object.defineProperty(thisProperty, "value", {
          get: function get() {
            return thisProperty.v;
          }
        }), elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate, elem.comp.displayStartTime = 0;
        var inPoint = elem.data.ip / elem.comp.globalData.frameRate,
          outPoint = elem.data.op / elem.comp.globalData.frameRate,
          width = elem.data.sw ? elem.data.sw : 0,
          height = elem.data.sh ? elem.data.sh : 0,
          name = elem.data.nm,
          loopIn,
          loop_in,
          loopOut,
          loop_out,
          smooth,
          toWorld,
          fromWorld,
          fromComp,
          toComp,
          fromCompToSurface,
          position,
          rotation,
          anchorPoint,
          scale,
          thisLayer,
          thisComp,
          mask,
          valueAtTime,
          velocityAtTime,
          __expression_functions = [],
          scoped_bm_rt;
        if (data.xf) {
          var i,
            len = data.xf.length;
          for (i = 0; i < len; i += 1) __expression_functions[i] = eval("(function(){ return " + data.xf[i] + "}())");
        }
        var expression_function = eval("[function _expression_function(){" + val + ";scoped_bm_rt=$bm_rt}]")[0],
          numKeys = property.kf ? data.k.length : 0,
          active = !this.data || !0 !== this.data.hd,
          wiggle = function (t, e) {
            var r,
              i,
              s = this.pv.length ? this.pv.length : 1,
              a = createTypedArray("float32", s);
            var n = Math.floor(5 * time);
            for (i = r = 0; r < n;) {
              for (i = 0; i < s; i += 1) a[i] += -e + 2 * e * BMMath.random();
              r += 1;
            }
            var o = 5 * time,
              h = o - Math.floor(o),
              l = createTypedArray("float32", s);
            if (1 < s) {
              for (i = 0; i < s; i += 1) l[i] = this.pv[i] + a[i] + (-e + 2 * e * BMMath.random()) * h;
              return l;
            }
            return this.pv + a[0] + (-e + 2 * e * BMMath.random()) * h;
          }.bind(this);
        function loopInDuration(t, e) {
          return loopIn(t, e, !0);
        }
        function loopOutDuration(t, e) {
          return loopOut(t, e, !0);
        }
        thisProperty.loopIn && (loopIn = thisProperty.loopIn.bind(thisProperty), loop_in = loopIn), thisProperty.loopOut && (loopOut = thisProperty.loopOut.bind(thisProperty), loop_out = loopOut), thisProperty.smooth && (smooth = thisProperty.smooth.bind(thisProperty)), this.getValueAtTime && (valueAtTime = this.getValueAtTime.bind(this)), this.getVelocityAtTime && (velocityAtTime = this.getVelocityAtTime.bind(this));
        var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface),
          time,
          velocity,
          value,
          text,
          textIndex,
          textTotal,
          selectorValue;
        function lookAt(t, e) {
          var r = [e[0] - t[0], e[1] - t[1], e[2] - t[2]],
            i = Math.atan2(r[0], Math.sqrt(r[1] * r[1] + r[2] * r[2])) / degToRads;
          return [-Math.atan2(r[1], r[2]) / degToRads, i, 0];
        }
        function easeOut(t, e, r, i, s) {
          return applyEase(easeOutBez, t, e, r, i, s);
        }
        function easeIn(t, e, r, i, s) {
          return applyEase(easeInBez, t, e, r, i, s);
        }
        function ease(t, e, r, i, s) {
          return applyEase(easeInOutBez, t, e, r, i, s);
        }
        function applyEase(t, e, r, i, s, a) {
          void 0 === s ? (s = r, a = i) : e = (e - r) / (i - r);
          var n = t(e = 1 < e ? 1 : e < 0 ? 0 : e);
          if ($bm_isInstanceOfArray(s)) {
            var o,
              h = s.length,
              l = createTypedArray("float32", h);
            for (o = 0; o < h; o += 1) l[o] = (a[o] - s[o]) * n + s[o];
            return l;
          }
          return (a - s) * n + s;
        }
        function nearestKey(t) {
          var e,
            r,
            i,
            s = data.k.length;
          if (data.k.length && "number" != typeof data.k[0]) {
            if (r = -1, (t *= elem.comp.globalData.frameRate) < data.k[0].t) r = 1, i = data.k[0].t;else {
              for (e = 0; e < s - 1; e += 1) {
                if (t === data.k[e].t) {
                  r = e + 1, i = data.k[e].t;
                  break;
                }
                if (t > data.k[e].t && t < data.k[e + 1].t) {
                  i = t - data.k[e].t > data.k[e + 1].t - t ? (r = e + 2, data.k[e + 1].t) : (r = e + 1, data.k[e].t);
                  break;
                }
              }
              -1 === r && (r = e + 1, i = data.k[e].t);
            }
          } else i = r = 0;
          var a = {};
          return a.index = r, a.time = i / elem.comp.globalData.frameRate, a;
        }
        function key(t) {
          var e, r, i;
          if (!data.k.length || "number" == typeof data.k[0]) throw new Error("The property has no keyframe at index " + t);
          t -= 1, e = {
            time: data.k[t].t / elem.comp.globalData.frameRate,
            value: []
          };
          var s = data.k[t].hasOwnProperty("s") ? data.k[t].s : data.k[t - 1].e;
          for (i = s.length, r = 0; r < i; r += 1) e[r] = s[r], e.value[r] = s[r];
          return e;
        }
        function framesToTime(t, e) {
          return e || (e = elem.comp.globalData.frameRate), t / e;
        }
        function timeToFrames(t, e) {
          return t || 0 === t || (t = time), e || (e = elem.comp.globalData.frameRate), t * e;
        }
        function seedRandom(t) {
          BMMath.seedrandom(randSeed + t);
        }
        function sourceRectAtTime() {
          return elem.sourceRectAtTime();
        }
        function substring(t, e) {
          return "string" == typeof value ? void 0 === e ? value.substring(t) : value.substring(t, e) : "";
        }
        function substr(t, e) {
          return "string" == typeof value ? void 0 === e ? value.substr(t) : value.substr(t, e) : "";
        }
        var index = elem.data.ind,
          hasParent = !(!elem.hierarchy || !elem.hierarchy.length),
          parent,
          randSeed = Math.floor(1e6 * Math.random()),
          globalData = elem.globalData;
        function executeExpression(t) {
          return value = t, _needsRandom && seedRandom(randSeed), this.frameExpressionId === elem.globalData.frameId && "textSelector" !== this.propType ? value : ("textSelector" === this.propType && (textIndex = this.textIndex, textTotal = this.textTotal, selectorValue = this.selectorValue), thisLayer || (text = elem.layerInterface.text, thisLayer = elem.layerInterface, thisComp = elem.comp.compInterface, toWorld = thisLayer.toWorld.bind(thisLayer), fromWorld = thisLayer.fromWorld.bind(thisLayer), fromComp = thisLayer.fromComp.bind(thisLayer), toComp = thisLayer.toComp.bind(thisLayer), mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null, fromCompToSurface = fromComp), transform || (transform = elem.layerInterface("ADBE Transform Group"), ($bm_transform = transform) && (anchorPoint = transform.anchorPoint)), 4 !== elemType || content || (content = thisLayer("ADBE Root Vectors Group")), effect || (effect = thisLayer(4)), (hasParent = !(!elem.hierarchy || !elem.hierarchy.length)) && !parent && (parent = elem.hierarchy[0].layerInterface), time = this.comp.renderedFrame / this.comp.globalData.frameRate, needsVelocity && (velocity = velocityAtTime(time)), expression_function(), this.frameExpressionId = elem.globalData.frameId, "shape" === scoped_bm_rt.propType && (scoped_bm_rt = scoped_bm_rt.v), scoped_bm_rt);
        }
        return executeExpression;
      }
      return ob.initiateExpression = initiateExpression, ob;
    }(),
    expressionHelpers = {
      searchExpressions: function searchExpressions(t, e, r) {
        e.x && (r.k = !0, r.x = !0, r.initiateExpression = ExpressionManager.initiateExpression, r.effectsSequence.push(r.initiateExpression(t, e, r).bind(r)));
      },
      getSpeedAtTime: function getSpeedAtTime(t) {
        var e = this.getValueAtTime(t),
          r = this.getValueAtTime(t + -.01),
          i = 0;
        if (e.length) {
          var s;
          for (s = 0; s < e.length; s += 1) i += Math.pow(r[s] - e[s], 2);
          i = 100 * Math.sqrt(i);
        } else i = 0;
        return i;
      },
      getVelocityAtTime: function getVelocityAtTime(t) {
        if (void 0 !== this.vel) return this.vel;
        var e,
          r,
          i = this.getValueAtTime(t),
          s = this.getValueAtTime(t + -.001);
        if (i.length) for (e = createTypedArray("float32", i.length), r = 0; r < i.length; r += 1) e[r] = (s[r] - i[r]) / -.001;else e = (s - i) / -.001;
        return e;
      },
      getValueAtTime: function getValueAtTime(t) {
        return t *= this.elem.globalData.frameRate, (t -= this.offsetTime) !== this._cachingAtTime.lastFrame && (this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < t ? this._cachingAtTime.lastIndex : 0, this._cachingAtTime.value = this.interpolateValue(t, this._cachingAtTime), this._cachingAtTime.lastFrame = t), this._cachingAtTime.value;
      },
      getStaticValueAtTime: function getStaticValueAtTime() {
        return this.pv;
      },
      setGroupProperty: function setGroupProperty(t) {
        this.propertyGroup = t;
      }
    };
  !function () {
    function o(t, e, r) {
      if (!this.k || !this.keyframes) return this.pv;
      t = t ? t.toLowerCase() : "";
      var i,
        s,
        a,
        n,
        o,
        h = this.comp.renderedFrame,
        l = this.keyframes,
        p = l[l.length - 1].t;
      if (h <= p) return this.pv;
      if (r ? s = p - (i = e ? Math.abs(p - elem.comp.globalData.frameRate * e) : Math.max(0, p - this.elem.data.ip)) : ((!e || e > l.length - 1) && (e = l.length - 1), i = p - (s = l[l.length - 1 - e].t)), "pingpong" === t) {
        if (Math.floor((h - s) / i) % 2 != 0) return this.getValueAtTime((i - (h - s) % i + s) / this.comp.globalData.frameRate, 0);
      } else {
        if ("offset" === t) {
          var m = this.getValueAtTime(s / this.comp.globalData.frameRate, 0),
            f = this.getValueAtTime(p / this.comp.globalData.frameRate, 0),
            c = this.getValueAtTime(((h - s) % i + s) / this.comp.globalData.frameRate, 0),
            d = Math.floor((h - s) / i);
          if (this.pv.length) {
            for (n = (o = new Array(m.length)).length, a = 0; a < n; a += 1) o[a] = (f[a] - m[a]) * d + c[a];
            return o;
          }
          return (f - m) * d + c;
        }
        if ("continue" === t) {
          var u = this.getValueAtTime(p / this.comp.globalData.frameRate, 0),
            y = this.getValueAtTime((p - .001) / this.comp.globalData.frameRate, 0);
          if (this.pv.length) {
            for (n = (o = new Array(u.length)).length, a = 0; a < n; a += 1) o[a] = u[a] + (u[a] - y[a]) * ((h - p) / this.comp.globalData.frameRate) / 5e-4;
            return o;
          }
          return u + (h - p) / .001 * (u - y);
        }
      }
      return this.getValueAtTime(((h - s) % i + s) / this.comp.globalData.frameRate, 0);
    }
    function h(t, e, r) {
      if (!this.k) return this.pv;
      t = t ? t.toLowerCase() : "";
      var i,
        s,
        a,
        n,
        o,
        h = this.comp.renderedFrame,
        l = this.keyframes,
        p = l[0].t;
      if (p <= h) return this.pv;
      if (r ? s = p + (i = e ? Math.abs(elem.comp.globalData.frameRate * e) : Math.max(0, this.elem.data.op - p)) : ((!e || e > l.length - 1) && (e = l.length - 1), i = (s = l[e].t) - p), "pingpong" === t) {
        if (Math.floor((p - h) / i) % 2 == 0) return this.getValueAtTime(((p - h) % i + p) / this.comp.globalData.frameRate, 0);
      } else {
        if ("offset" === t) {
          var m = this.getValueAtTime(p / this.comp.globalData.frameRate, 0),
            f = this.getValueAtTime(s / this.comp.globalData.frameRate, 0),
            c = this.getValueAtTime((i - (p - h) % i + p) / this.comp.globalData.frameRate, 0),
            d = Math.floor((p - h) / i) + 1;
          if (this.pv.length) {
            for (n = (o = new Array(m.length)).length, a = 0; a < n; a += 1) o[a] = c[a] - (f[a] - m[a]) * d;
            return o;
          }
          return c - (f - m) * d;
        }
        if ("continue" === t) {
          var u = this.getValueAtTime(p / this.comp.globalData.frameRate, 0),
            y = this.getValueAtTime((p + .001) / this.comp.globalData.frameRate, 0);
          if (this.pv.length) {
            for (n = (o = new Array(u.length)).length, a = 0; a < n; a += 1) o[a] = u[a] + (u[a] - y[a]) * (p - h) / .001;
            return o;
          }
          return u + (u - y) * (p - h) / .001;
        }
      }
      return this.getValueAtTime((i - (p - h) % i + p) / this.comp.globalData.frameRate, 0);
    }
    function l(t, e) {
      if (!this.k) return this.pv;
      if (t = .5 * (t || .4), (e = Math.floor(e || 5)) <= 1) return this.pv;
      var r,
        i,
        s = this.comp.renderedFrame / this.comp.globalData.frameRate,
        a = s - t,
        n = 1 < e ? (s + t - a) / (e - 1) : 1,
        o = 0,
        h = 0;
      for (r = this.pv.length ? createTypedArray("float32", this.pv.length) : 0; o < e;) {
        if (i = this.getValueAtTime(a + o * n), this.pv.length) for (h = 0; h < this.pv.length; h += 1) r[h] += i[h];else r += i;
        o += 1;
      }
      if (this.pv.length) for (h = 0; h < this.pv.length; h += 1) r[h] /= e;else r /= e;
      return r;
    }
    var s = TransformPropertyFactory.getTransformProperty;
    TransformPropertyFactory.getTransformProperty = function (t, e, r) {
      var i = s(t, e, r);
      return i.dynamicProperties.length ? i.getValueAtTime = function (t) {
        console.warn("Transform at time not supported");
      }.bind(i) : i.getValueAtTime = function (t) {}.bind(i), i.setGroupProperty = expressionHelpers.setGroupProperty, i;
    };
    var p = PropertyFactory.getProp;
    PropertyFactory.getProp = function (t, e, r, i, s) {
      var a = p(t, e, r, i, s);
      a.kf ? a.getValueAtTime = expressionHelpers.getValueAtTime.bind(a) : a.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(a), a.setGroupProperty = expressionHelpers.setGroupProperty, a.loopOut = o, a.loopIn = h, a.smooth = l, a.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(a), a.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(a), a.numKeys = 1 === e.a ? e.k.length : 0, a.propertyIndex = e.ix;
      var n = 0;
      return 0 !== r && (n = createTypedArray("float32", 1 === e.a ? e.k[0].s.length : e.k.length)), a._cachingAtTime = {
        lastFrame: initialDefaultFrame,
        lastIndex: 0,
        value: n
      }, expressionHelpers.searchExpressions(t, e, a), a.k && s.addDynamicProperty(a), a;
    };
    var t = ShapePropertyFactory.getConstructorFunction(),
      e = ShapePropertyFactory.getKeyframedConstructorFunction();
    function r() {}
    r.prototype = {
      vertices: function vertices(t, e) {
        this.k && this.getValue();
        var r = this.v;
        void 0 !== e && (r = this.getValueAtTime(e, 0));
        var i,
          s = r._length,
          a = r[t],
          n = r.v,
          o = createSizedArray(s);
        for (i = 0; i < s; i += 1) o[i] = "i" === t || "o" === t ? [a[i][0] - n[i][0], a[i][1] - n[i][1]] : [a[i][0], a[i][1]];
        return o;
      },
      points: function points(t) {
        return this.vertices("v", t);
      },
      inTangents: function inTangents(t) {
        return this.vertices("i", t);
      },
      outTangents: function outTangents(t) {
        return this.vertices("o", t);
      },
      isClosed: function isClosed() {
        return this.v.c;
      },
      pointOnPath: function pointOnPath(t, e) {
        var r = this.v;
        void 0 !== e && (r = this.getValueAtTime(e, 0)), this._segmentsLength || (this._segmentsLength = bez.getSegmentsLength(r));
        for (var i, s = this._segmentsLength, a = s.lengths, n = s.totalLength * t, o = 0, h = a.length, l = 0; o < h;) {
          if (l + a[o].addedLength > n) {
            var p = o,
              m = r.c && o === h - 1 ? 0 : o + 1,
              f = (n - l) / a[o].addedLength;
            i = bez.getPointInSegment(r.v[p], r.v[m], r.o[p], r.i[m], f, a[o]);
            break;
          }
          l += a[o].addedLength, o += 1;
        }
        return i || (i = r.c ? [r.v[0][0], r.v[0][1]] : [r.v[r._length - 1][0], r.v[r._length - 1][1]]), i;
      },
      vectorOnPath: function vectorOnPath(t, e, r) {
        t = 1 == t ? this.v.c ? 0 : .999 : t;
        var i = this.pointOnPath(t, e),
          s = this.pointOnPath(t + .001, e),
          a = s[0] - i[0],
          n = s[1] - i[1],
          o = Math.sqrt(Math.pow(a, 2) + Math.pow(n, 2));
        return 0 === o ? [0, 0] : "tangent" === r ? [a / o, n / o] : [-n / o, a / o];
      },
      tangentOnPath: function tangentOnPath(t, e) {
        return this.vectorOnPath(t, e, "tangent");
      },
      normalOnPath: function normalOnPath(t, e) {
        return this.vectorOnPath(t, e, "normal");
      },
      setGroupProperty: expressionHelpers.setGroupProperty,
      getValueAtTime: expressionHelpers.getStaticValueAtTime
    }, extendPrototype([r], t), extendPrototype([r], e), e.prototype.getValueAtTime = function (t) {
      return this._cachingAtTime || (this._cachingAtTime = {
        shapeValue: shape_pool.clone(this.pv),
        lastIndex: 0,
        lastTime: initialDefaultFrame
      }), t *= this.elem.globalData.frameRate, (t -= this.offsetTime) !== this._cachingAtTime.lastTime && (this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < t ? this._caching.lastIndex : 0, this._cachingAtTime.lastTime = t, this.interpolateShape(t, this._cachingAtTime.shapeValue, this._cachingAtTime)), this._cachingAtTime.shapeValue;
    }, e.prototype.initiateExpression = ExpressionManager.initiateExpression;
    var n = ShapePropertyFactory.getShapeProp;
    ShapePropertyFactory.getShapeProp = function (t, e, r, i, s) {
      var a = n(t, e, r, i, s);
      return a.propertyIndex = e.ix, a.lock = !1, 3 === r ? expressionHelpers.searchExpressions(t, e.pt, a) : 4 === r && expressionHelpers.searchExpressions(t, e.ks, a), a.k && t.addDynamicProperty(a), a;
    };
  }(), TextProperty.prototype.getExpressionValue = function (t, e) {
    var r = this.calculateExpression(e);
    if (t.t === r) return t;
    var i = {};
    return this.copyData(i, t), i.t = r.toString(), i.__complete = !1, i;
  }, TextProperty.prototype.searchProperty = function () {
    var t = this.searchKeyframes(),
      e = this.searchExpressions();
    return this.kf = t || e, this.kf;
  }, TextProperty.prototype.searchExpressions = function () {
    if (this.data.d.x) return this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this), this.addEffect(this.getExpressionValue.bind(this)), !0;
  };
  var ShapeExpressionInterface = function () {
      function m(t, e, r) {
        var i,
          s = [],
          a = t ? t.length : 0;
        for (i = 0; i < a; i += 1) "gr" == t[i].ty ? s.push(n(t[i], e[i], r)) : "fl" == t[i].ty ? s.push(o(t[i], e[i], r)) : "st" == t[i].ty ? s.push(h(t[i], e[i], r)) : "tm" == t[i].ty ? s.push(l(t[i], e[i], r)) : "tr" == t[i].ty || ("el" == t[i].ty ? s.push(p(t[i], e[i], r)) : "sr" == t[i].ty ? s.push(f(t[i], e[i], r)) : "sh" == t[i].ty ? s.push(y(t[i], e[i], r)) : "rc" == t[i].ty ? s.push(c(t[i], e[i], r)) : "rd" == t[i].ty ? s.push(d(t[i], e[i], r)) : "rp" == t[i].ty && s.push(u(t[i], e[i], r)));
        return s;
      }
      function n(t, e, r) {
        var _i = function i(t) {
          switch (t) {
            case "ADBE Vectors Group":
            case "Contents":
            case 2:
              return _i.content;
            default:
              return _i.transform;
          }
        };
        _i.propertyGroup = function (t) {
          return 1 === t ? _i : r(t - 1);
        };
        var s,
          a,
          n,
          o,
          h,
          l = (s = t, a = e, n = _i.propertyGroup, (h = function h(t) {
            for (var e = 0, r = o.length; e < r;) {
              if (o[e]._name === t || o[e].mn === t || o[e].propertyIndex === t || o[e].ix === t || o[e].ind === t) return o[e];
              e += 1;
            }
            if ("number" == typeof t) return o[t - 1];
          }).propertyGroup = function (t) {
            return 1 === t ? h : n(t - 1);
          }, o = m(s.it, a.it, h.propertyGroup), h.numProperties = o.length, h.propertyIndex = s.cix, h._name = s.nm, h),
          p = function (e, t, r) {
            function i(t) {
              return 1 == t ? s : r(--t);
            }
            t.transform.mProps.o.setGroupProperty(i), t.transform.mProps.p.setGroupProperty(i), t.transform.mProps.a.setGroupProperty(i), t.transform.mProps.s.setGroupProperty(i), t.transform.mProps.r.setGroupProperty(i), t.transform.mProps.sk && (t.transform.mProps.sk.setGroupProperty(i), t.transform.mProps.sa.setGroupProperty(i));
            function s(t) {
              return e.a.ix === t || "Anchor Point" === t ? s.anchorPoint : e.o.ix === t || "Opacity" === t ? s.opacity : e.p.ix === t || "Position" === t ? s.position : e.r.ix === t || "Rotation" === t || "ADBE Vector Rotation" === t ? s.rotation : e.s.ix === t || "Scale" === t ? s.scale : e.sk && e.sk.ix === t || "Skew" === t ? s.skew : e.sa && e.sa.ix === t || "Skew Axis" === t ? s.skewAxis : void 0;
            }
            return t.transform.op.setGroupProperty(i), Object.defineProperties(s, {
              opacity: {
                get: ExpressionPropertyInterface(t.transform.mProps.o)
              },
              position: {
                get: ExpressionPropertyInterface(t.transform.mProps.p)
              },
              anchorPoint: {
                get: ExpressionPropertyInterface(t.transform.mProps.a)
              },
              scale: {
                get: ExpressionPropertyInterface(t.transform.mProps.s)
              },
              rotation: {
                get: ExpressionPropertyInterface(t.transform.mProps.r)
              },
              skew: {
                get: ExpressionPropertyInterface(t.transform.mProps.sk)
              },
              skewAxis: {
                get: ExpressionPropertyInterface(t.transform.mProps.sa)
              },
              _name: {
                value: e.nm
              }
            }), s.ty = "tr", s.mn = e.mn, s.propertyGroup = r, s;
          }(t.it[t.it.length - 1], e.it[e.it.length - 1], _i.propertyGroup);
        return _i.content = l, _i.transform = p, Object.defineProperty(_i, "_name", {
          get: function get() {
            return t.nm;
          }
        }), _i.numProperties = t.np, _i.propertyIndex = t.ix, _i.nm = t.nm, _i.mn = t.mn, _i;
      }
      function o(t, e, r) {
        function i(t) {
          return "Color" === t || "color" === t ? i.color : "Opacity" === t || "opacity" === t ? i.opacity : void 0;
        }
        return Object.defineProperties(i, {
          color: {
            get: ExpressionPropertyInterface(e.c)
          },
          opacity: {
            get: ExpressionPropertyInterface(e.o)
          },
          _name: {
            value: t.nm
          },
          mn: {
            value: t.mn
          }
        }), e.c.setGroupProperty(r), e.o.setGroupProperty(r), i;
      }
      function h(t, e, r) {
        function i(t) {
          return 1 === t ? ob : r(t - 1);
        }
        function s(t) {
          return 1 === t ? h : i(t - 1);
        }
        var a,
          n,
          o = t.d ? t.d.length : 0,
          h = {};
        for (a = 0; a < o; a += 1) n = a, Object.defineProperty(h, t.d[n].nm, {
          get: ExpressionPropertyInterface(e.d.dataProps[n].p)
        }), e.d.dataProps[a].p.setGroupProperty(s);
        function l(t) {
          return "Color" === t || "color" === t ? l.color : "Opacity" === t || "opacity" === t ? l.opacity : "Stroke Width" === t || "stroke width" === t ? l.strokeWidth : void 0;
        }
        return Object.defineProperties(l, {
          color: {
            get: ExpressionPropertyInterface(e.c)
          },
          opacity: {
            get: ExpressionPropertyInterface(e.o)
          },
          strokeWidth: {
            get: ExpressionPropertyInterface(e.w)
          },
          dash: {
            get: function get() {
              return h;
            }
          },
          _name: {
            value: t.nm
          },
          mn: {
            value: t.mn
          }
        }), e.c.setGroupProperty(i), e.o.setGroupProperty(i), e.w.setGroupProperty(i), l;
      }
      function l(e, t, r) {
        function i(t) {
          return 1 == t ? s : r(--t);
        }
        function s(t) {
          return t === e.e.ix || "End" === t || "end" === t ? s.end : t === e.s.ix ? s.start : t === e.o.ix ? s.offset : void 0;
        }
        return s.propertyIndex = e.ix, t.s.setGroupProperty(i), t.e.setGroupProperty(i), t.o.setGroupProperty(i), s.propertyIndex = e.ix, s.propertyGroup = r, Object.defineProperties(s, {
          start: {
            get: ExpressionPropertyInterface(t.s)
          },
          end: {
            get: ExpressionPropertyInterface(t.e)
          },
          offset: {
            get: ExpressionPropertyInterface(t.o)
          },
          _name: {
            value: e.nm
          }
        }), s.mn = e.mn, s;
      }
      function p(e, t, r) {
        function i(t) {
          return 1 == t ? a : r(--t);
        }
        a.propertyIndex = e.ix;
        var s = "tm" === t.sh.ty ? t.sh.prop : t.sh;
        function a(t) {
          return e.p.ix === t ? a.position : e.s.ix === t ? a.size : void 0;
        }
        return s.s.setGroupProperty(i), s.p.setGroupProperty(i), Object.defineProperties(a, {
          size: {
            get: ExpressionPropertyInterface(s.s)
          },
          position: {
            get: ExpressionPropertyInterface(s.p)
          },
          _name: {
            value: e.nm
          }
        }), a.mn = e.mn, a;
      }
      function f(e, t, r) {
        function i(t) {
          return 1 == t ? a : r(--t);
        }
        var s = "tm" === t.sh.ty ? t.sh.prop : t.sh;
        function a(t) {
          return e.p.ix === t ? a.position : e.r.ix === t ? a.rotation : e.pt.ix === t ? a.points : e.or.ix === t || "ADBE Vector Star Outer Radius" === t ? a.outerRadius : e.os.ix === t ? a.outerRoundness : !e.ir || e.ir.ix !== t && "ADBE Vector Star Inner Radius" !== t ? e.is && e.is.ix === t ? a.innerRoundness : void 0 : a.innerRadius;
        }
        return a.propertyIndex = e.ix, s.or.setGroupProperty(i), s.os.setGroupProperty(i), s.pt.setGroupProperty(i), s.p.setGroupProperty(i), s.r.setGroupProperty(i), e.ir && (s.ir.setGroupProperty(i), s.is.setGroupProperty(i)), Object.defineProperties(a, {
          position: {
            get: ExpressionPropertyInterface(s.p)
          },
          rotation: {
            get: ExpressionPropertyInterface(s.r)
          },
          points: {
            get: ExpressionPropertyInterface(s.pt)
          },
          outerRadius: {
            get: ExpressionPropertyInterface(s.or)
          },
          outerRoundness: {
            get: ExpressionPropertyInterface(s.os)
          },
          innerRadius: {
            get: ExpressionPropertyInterface(s.ir)
          },
          innerRoundness: {
            get: ExpressionPropertyInterface(s.is)
          },
          _name: {
            value: e.nm
          }
        }), a.mn = e.mn, a;
      }
      function c(e, t, r) {
        function i(t) {
          return 1 == t ? a : r(--t);
        }
        var s = "tm" === t.sh.ty ? t.sh.prop : t.sh;
        function a(t) {
          return e.p.ix === t ? a.position : e.r.ix === t ? a.roundness : e.s.ix === t || "Size" === t || "ADBE Vector Rect Size" === t ? a.size : void 0;
        }
        return a.propertyIndex = e.ix, s.p.setGroupProperty(i), s.s.setGroupProperty(i), s.r.setGroupProperty(i), Object.defineProperties(a, {
          position: {
            get: ExpressionPropertyInterface(s.p)
          },
          roundness: {
            get: ExpressionPropertyInterface(s.r)
          },
          size: {
            get: ExpressionPropertyInterface(s.s)
          },
          _name: {
            value: e.nm
          }
        }), a.mn = e.mn, a;
      }
      function d(e, t, r) {
        var i = t;
        function s(t) {
          if (e.r.ix === t || "Round Corners 1" === t) return s.radius;
        }
        return s.propertyIndex = e.ix, i.rd.setGroupProperty(function (t) {
          return 1 == t ? s : r(--t);
        }), Object.defineProperties(s, {
          radius: {
            get: ExpressionPropertyInterface(i.rd)
          },
          _name: {
            value: e.nm
          }
        }), s.mn = e.mn, s;
      }
      function u(e, t, r) {
        function i(t) {
          return 1 == t ? a : r(--t);
        }
        var s = t;
        function a(t) {
          return e.c.ix === t || "Copies" === t ? a.copies : e.o.ix === t || "Offset" === t ? a.offset : void 0;
        }
        return a.propertyIndex = e.ix, s.c.setGroupProperty(i), s.o.setGroupProperty(i), Object.defineProperties(a, {
          copies: {
            get: ExpressionPropertyInterface(s.c)
          },
          offset: {
            get: ExpressionPropertyInterface(s.o)
          },
          _name: {
            value: e.nm
          }
        }), a.mn = e.mn, a;
      }
      function y(t, e, r) {
        var i = e.sh;
        function s(t) {
          if ("Shape" === t || "shape" === t || "Path" === t || "path" === t || "ADBE Vector Shape" === t || 2 === t) return s.path;
        }
        return i.setGroupProperty(function (t) {
          return 1 == t ? s : r(--t);
        }), Object.defineProperties(s, {
          path: {
            get: function get() {
              return i.k && i.getValue(), i;
            }
          },
          shape: {
            get: function get() {
              return i.k && i.getValue(), i;
            }
          },
          _name: {
            value: t.nm
          },
          ix: {
            value: t.ix
          },
          propertyIndex: {
            value: t.ix
          },
          mn: {
            value: t.mn
          }
        }), s;
      }
      return function (t, e, r) {
        var i;
        function s(t) {
          if ("number" == typeof t) return i[t - 1];
          for (var e = 0, r = i.length; e < r;) {
            if (i[e]._name === t) return i[e];
            e += 1;
          }
        }
        return s.propertyGroup = r, i = m(t, e, s), s.numProperties = i.length, s;
      };
    }(),
    TextExpressionInterface = function TextExpressionInterface(e) {
      var r;
      function t() {}
      return Object.defineProperty(t, "sourceText", {
        get: function get() {
          e.textProperty.getValue();
          var t = e.textProperty.currentData.t;
          return void 0 !== t && (e.textProperty.currentData.t = void 0, (r = new String(t)).value = t || new String(t)), r;
        }
      }), t;
    },
    LayerExpressionInterface = function () {
      function s(t, e) {
        var r = new Matrix();
        if (r.reset(), this._elem.finalTransform.mProp.applyToMatrix(r), this._elem.hierarchy && this._elem.hierarchy.length) {
          var i,
            s = this._elem.hierarchy.length;
          for (i = 0; i < s; i += 1) this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(r);
          return r.applyToPointArray(t[0], t[1], t[2] || 0);
        }
        return r.applyToPointArray(t[0], t[1], t[2] || 0);
      }
      function a(t, e) {
        var r = new Matrix();
        if (r.reset(), this._elem.finalTransform.mProp.applyToMatrix(r), this._elem.hierarchy && this._elem.hierarchy.length) {
          var i,
            s = this._elem.hierarchy.length;
          for (i = 0; i < s; i += 1) this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(r);
          return r.inversePoint(t);
        }
        return r.inversePoint(t);
      }
      function n(t) {
        var e = new Matrix();
        if (e.reset(), this._elem.finalTransform.mProp.applyToMatrix(e), this._elem.hierarchy && this._elem.hierarchy.length) {
          var r,
            i = this._elem.hierarchy.length;
          for (r = 0; r < i; r += 1) this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(e);
          return e.inversePoint(t);
        }
        return e.inversePoint(t);
      }
      function o() {
        return [1, 1, 1, 1];
      }
      return function (e) {
        var r;
        function i(t) {
          switch (t) {
            case "ADBE Root Vectors Group":
            case "Contents":
            case 2:
              return i.shapeInterface;
            case 1:
            case 6:
            case "Transform":
            case "transform":
            case "ADBE Transform Group":
              return r;
            case 4:
            case "ADBE Effect Parade":
            case "effects":
            case "Effects":
              return i.effect;
          }
        }
        i.toWorld = s, i.fromWorld = a, i.toComp = s, i.fromComp = n, i.sampleImage = o, i.sourceRectAtTime = e.sourceRectAtTime.bind(e);
        var t = getDescriptor(r = TransformExpressionInterface((i._elem = e).finalTransform.mProp), "anchorPoint");
        return Object.defineProperties(i, {
          hasParent: {
            get: function get() {
              return e.hierarchy.length;
            }
          },
          parent: {
            get: function get() {
              return e.hierarchy[0].layerInterface;
            }
          },
          rotation: getDescriptor(r, "rotation"),
          scale: getDescriptor(r, "scale"),
          position: getDescriptor(r, "position"),
          opacity: getDescriptor(r, "opacity"),
          anchorPoint: t,
          anchor_point: t,
          transform: {
            get: function get() {
              return r;
            }
          },
          active: {
            get: function get() {
              return e.isInRange;
            }
          }
        }), i.startTime = e.data.st, i.index = e.data.ind, i.source = e.data.refId, i.height = 0 === e.data.ty ? e.data.h : 100, i.width = 0 === e.data.ty ? e.data.w : 100, i.inPoint = e.data.ip / e.comp.globalData.frameRate, i.outPoint = e.data.op / e.comp.globalData.frameRate, i._name = e.data.nm, i.registerMaskInterface = function (t) {
          i.mask = new MaskManagerInterface(t, e);
        }, i.registerEffectsInterface = function (t) {
          i.effect = t;
        }, i;
      };
    }(),
    CompExpressionInterface = function CompExpressionInterface(i) {
      function t(t) {
        for (var e = 0, r = i.layers.length; e < r;) {
          if (i.layers[e].nm === t || i.layers[e].ind === t) return i.elements[e].layerInterface;
          e += 1;
        }
        return null;
      }
      return Object.defineProperty(t, "_name", {
        value: i.data.nm
      }), (t.layer = t).pixelAspect = 1, t.height = i.data.h || i.globalData.compSize.h, t.width = i.data.w || i.globalData.compSize.w, t.pixelAspect = 1, t.frameDuration = 1 / i.globalData.frameRate, t.displayStartTime = 0, t.numLayers = i.layers.length, t;
    },
    TransformExpressionInterface = function TransformExpressionInterface(t) {
      function e(t) {
        switch (t) {
          case "scale":
          case "Scale":
          case "ADBE Scale":
          case 6:
            return e.scale;
          case "rotation":
          case "Rotation":
          case "ADBE Rotation":
          case "ADBE Rotate Z":
          case 10:
            return e.rotation;
          case "ADBE Rotate X":
            return e.xRotation;
          case "ADBE Rotate Y":
            return e.yRotation;
          case "position":
          case "Position":
          case "ADBE Position":
          case 2:
            return e.position;
          case "ADBE Position_0":
            return e.xPosition;
          case "ADBE Position_1":
            return e.yPosition;
          case "ADBE Position_2":
            return e.zPosition;
          case "anchorPoint":
          case "AnchorPoint":
          case "Anchor Point":
          case "ADBE AnchorPoint":
          case 1:
            return e.anchorPoint;
          case "opacity":
          case "Opacity":
          case 11:
            return e.opacity;
        }
      }
      if (Object.defineProperty(e, "rotation", {
        get: ExpressionPropertyInterface(t.r || t.rz)
      }), Object.defineProperty(e, "zRotation", {
        get: ExpressionPropertyInterface(t.rz || t.r)
      }), Object.defineProperty(e, "xRotation", {
        get: ExpressionPropertyInterface(t.rx)
      }), Object.defineProperty(e, "yRotation", {
        get: ExpressionPropertyInterface(t.ry)
      }), Object.defineProperty(e, "scale", {
        get: ExpressionPropertyInterface(t.s)
      }), t.p) var r = ExpressionPropertyInterface(t.p);
      return Object.defineProperty(e, "position", {
        get: function get() {
          return t.p ? r() : [t.px.v, t.py.v, t.pz ? t.pz.v : 0];
        }
      }), Object.defineProperty(e, "xPosition", {
        get: ExpressionPropertyInterface(t.px)
      }), Object.defineProperty(e, "yPosition", {
        get: ExpressionPropertyInterface(t.py)
      }), Object.defineProperty(e, "zPosition", {
        get: ExpressionPropertyInterface(t.pz)
      }), Object.defineProperty(e, "anchorPoint", {
        get: ExpressionPropertyInterface(t.a)
      }), Object.defineProperty(e, "opacity", {
        get: ExpressionPropertyInterface(t.o)
      }), Object.defineProperty(e, "skew", {
        get: ExpressionPropertyInterface(t.sk)
      }), Object.defineProperty(e, "skewAxis", {
        get: ExpressionPropertyInterface(t.sa)
      }), Object.defineProperty(e, "orientation", {
        get: ExpressionPropertyInterface(t.or)
      }), e;
    },
    ProjectInterface = function () {
      function e(t) {
        this.compositions.push(t);
      }
      return function () {
        function t(t) {
          for (var e = 0, r = this.compositions.length; e < r;) {
            if (this.compositions[e].data && this.compositions[e].data.nm === t) return this.compositions[e].prepareFrame && this.compositions[e].data.xt && this.compositions[e].prepareFrame(this.currentFrame), this.compositions[e].compInterface;
            e += 1;
          }
        }
        return t.compositions = [], t.currentFrame = 0, t.registerComposition = e, t;
      };
    }(),
    EffectsExpressionInterface = function () {
      function l(s, t, e, r) {
        var i,
          a = [],
          n = s.ef.length;
        for (i = 0; i < n; i += 1) 5 === s.ef[i].ty ? a.push(l(s.ef[i], t.effectElements[i], t.effectElements[i].propertyGroup, r)) : a.push(p(t.effectElements[i], s.ef[i].ty, r, o));
        function o(t) {
          return 1 === t ? h : e(t - 1);
        }
        var h = function h(t) {
          for (var e = s.ef, r = 0, i = e.length; r < i;) {
            if (t === e[r].nm || t === e[r].mn || t === e[r].ix) return 5 === e[r].ty ? a[r] : a[r]();
            r += 1;
          }
          return a[0]();
        };
        return h.propertyGroup = o, "ADBE Color Control" === s.mn && Object.defineProperty(h, "color", {
          get: function get() {
            return a[0]();
          }
        }), Object.defineProperty(h, "numProperties", {
          get: function get() {
            return s.np;
          }
        }), h.active = h.enabled = 0 !== s.en, h;
      }
      function p(t, e, r, i) {
        var s = ExpressionPropertyInterface(t.p);
        return t.p.setGroupProperty && t.p.setGroupProperty(i), function () {
          return 10 === e ? r.comp.compInterface(t.p.v) : s();
        };
      }
      return {
        createEffectsInterface: function createEffectsInterface(s, t) {
          if (s.effectsManager) {
            var e,
              a = [],
              r = s.data.ef,
              i = s.effectsManager.effectElements.length;
            for (e = 0; e < i; e += 1) a.push(l(r[e], s.effectsManager.effectElements[e], t, s));
            return function (t) {
              for (var e = s.data.ef || [], r = 0, i = e.length; r < i;) {
                if (t === e[r].nm || t === e[r].mn || t === e[r].ix) return a[r];
                r += 1;
              }
            };
          }
        }
      };
    }(),
    MaskManagerInterface = function () {
      function a(t, e) {
        this._mask = t, this._data = e;
      }
      Object.defineProperty(a.prototype, "maskPath", {
        get: function get() {
          return this._mask.prop.k && this._mask.prop.getValue(), this._mask.prop;
        }
      }), Object.defineProperty(a.prototype, "maskOpacity", {
        get: function get() {
          return this._mask.op.k && this._mask.op.getValue(), 100 * this._mask.op.v;
        }
      });
      return function (e, t) {
        var r,
          i = createSizedArray(e.viewData.length),
          s = e.viewData.length;
        for (r = 0; r < s; r += 1) i[r] = new a(e.viewData[r], e.masksProperties[r]);
        return function (t) {
          for (r = 0; r < s;) {
            if (e.masksProperties[r].nm === t) return i[r];
            r += 1;
          }
        };
      };
    }(),
    ExpressionPropertyInterface = function () {
      var s = {
          pv: 0,
          v: 0,
          mult: 1
        },
        n = {
          pv: [0, 0, 0],
          v: [0, 0, 0],
          mult: 1
        };
      function o(i, s, a) {
        Object.defineProperty(i, "velocity", {
          get: function get() {
            return s.getVelocityAtTime(s.comp.currentFrame);
          }
        }), i.numKeys = s.keyframes ? s.keyframes.length : 0, i.key = function (t) {
          if (i.numKeys) {
            var e = "";
            e = "s" in s.keyframes[t - 1] ? s.keyframes[t - 1].s : "e" in s.keyframes[t - 2] ? s.keyframes[t - 2].e : s.keyframes[t - 2].s;
            var r = "unidimensional" === a ? new Number(e) : Object.assign({}, e);
            return r.time = s.keyframes[t - 1].t / s.elem.comp.globalData.frameRate, r;
          }
          return 0;
        }, i.valueAtTime = s.getValueAtTime, i.speedAtTime = s.getSpeedAtTime, i.velocityAtTime = s.getVelocityAtTime, i.propertyGroup = s.propertyGroup;
      }
      function e() {
        return s;
      }
      return function (t) {
        return t ? "unidimensional" === t.propType ? function (t) {
          t && "pv" in t || (t = s);
          var e = 1 / t.mult,
            r = t.pv * e,
            i = new Number(r);
          return i.value = r, o(i, t, "unidimensional"), function () {
            return t.k && t.getValue(), r = t.v * e, i.value !== r && ((i = new Number(r)).value = r, o(i, t, "unidimensional")), i;
          };
        }(t) : function (e) {
          e && "pv" in e || (e = n);
          var r = 1 / e.mult,
            i = e.pv.length,
            s = createTypedArray("float32", i),
            a = createTypedArray("float32", i);
          return s.value = a, o(s, e, "multidimensional"), function () {
            e.k && e.getValue();
            for (var t = 0; t < i; t += 1) s[t] = a[t] = e.v[t] * r;
            return s;
          };
        }(t) : e;
      };
    }(),
    j5,
    k5;
  function SliderEffect(t, e, r) {
    this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);
  }
  function AngleEffect(t, e, r) {
    this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);
  }
  function ColorEffect(t, e, r) {
    this.p = PropertyFactory.getProp(e, t.v, 1, 0, r);
  }
  function PointEffect(t, e, r) {
    this.p = PropertyFactory.getProp(e, t.v, 1, 0, r);
  }
  function LayerIndexEffect(t, e, r) {
    this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);
  }
  function MaskIndexEffect(t, e, r) {
    this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);
  }
  function CheckboxEffect(t, e, r) {
    this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);
  }
  function NoValueEffect() {
    this.p = {};
  }
  function EffectsManager() {}
  function EffectsManager(t, e) {
    var r = t.ef || [];
    this.effectElements = [];
    var i,
      s,
      a = r.length;
    for (i = 0; i < a; i++) s = new GroupEffect(r[i], e), this.effectElements.push(s);
  }
  function GroupEffect(t, e) {
    this.init(t, e);
  }
  j5 = function () {
    function r(t, e) {
      return this.textIndex = t + 1, this.textTotal = e, this.v = this.getValue() * this.mult, this.v;
    }
    return function (t, e) {
      this.pv = 1, this.comp = t.comp, this.elem = t, this.mult = .01, this.propType = "textSelector", this.textTotal = e.totalChars, this.selectorValue = 100, this.lastValue = [1, 1, 1], this.k = !0, this.x = !0, this.getValue = ExpressionManager.initiateExpression.bind(this)(t, e, this), this.getMult = r, this.getVelocityAtTime = expressionHelpers.getVelocityAtTime, this.kf ? this.getValueAtTime = expressionHelpers.getValueAtTime.bind(this) : this.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(this), this.setGroupProperty = expressionHelpers.setGroupProperty;
    };
  }(), k5 = TextSelectorProp.getTextSelectorProp, TextSelectorProp.getTextSelectorProp = function (t, e, r) {
    return 1 === e.t ? new j5(t, e, r) : k5(t, e, r);
  }, extendPrototype([DynamicPropertyContainer], GroupEffect), GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties, GroupEffect.prototype.init = function (t, e) {
    this.data = t, this.effectElements = [], this.initDynamicPropertyContainer(e);
    var r,
      i,
      s = this.data.ef.length,
      a = this.data.ef;
    for (r = 0; r < s; r += 1) {
      switch (i = null, a[r].ty) {
        case 0:
          i = new SliderEffect(a[r], e, this);
          break;
        case 1:
          i = new AngleEffect(a[r], e, this);
          break;
        case 2:
          i = new ColorEffect(a[r], e, this);
          break;
        case 3:
          i = new PointEffect(a[r], e, this);
          break;
        case 4:
        case 7:
          i = new CheckboxEffect(a[r], e, this);
          break;
        case 10:
          i = new LayerIndexEffect(a[r], e, this);
          break;
        case 11:
          i = new MaskIndexEffect(a[r], e, this);
          break;
        case 5:
          i = new EffectsManager(a[r], e, this);
          break;
        default:
          i = new NoValueEffect(a[r], e, this);
      }
      i && this.effectElements.push(i);
    }
  };
  var lottiejs = {},
    _isFrozen = !1;
  function setLocationHref(t) {
    locationHref = t;
  }
  function searchAnimations() {
    !0 === standalone ? animationManager.searchAnimations(animationData, standalone, renderer) : animationManager.searchAnimations();
  }
  function setSubframeRendering(t) {
    subframeEnabled = t;
  }
  function loadAnimation(t) {
    return !0 === standalone && (t.animationData = JSON.parse(animationData)), animationManager.loadAnimation(t);
  }
  function setQuality(t) {
    if ("string" == typeof t) switch (t) {
      case "high":
        defaultCurveSegments = 200;
        break;
      case "medium":
        defaultCurveSegments = 50;
        break;
      case "low":
        defaultCurveSegments = 10;
    } else !isNaN(t) && 1 < t && (defaultCurveSegments = t);
    roundValues(!(50 <= defaultCurveSegments));
  }
  function inBrowser() {
    return "undefined" != typeof navigator;
  }
  function installPlugin(t, e) {
    "expressions" === t && (expressionsPlugin = e);
  }
  function getFactory(t) {
    switch (t) {
      case "propertyFactory":
        return PropertyFactory;
      case "shapePropertyFactory":
        return ShapePropertyFactory;
      case "matrix":
        return Matrix;
    }
  }
  function checkReady() {
    "complete" === document.readyState && (clearInterval(readyStateCheckInterval), searchAnimations());
  }
  function getQueryVariable(t) {
    for (var e = queryString.split("&"), r = 0; r < e.length; r++) {
      var i = e[r].split("=");
      if (decodeURIComponent(i[0]) == t) return decodeURIComponent(i[1]);
    }
  }
  lottiejs.play = animationManager.play, lottiejs.pause = animationManager.pause, lottiejs.setLocationHref = setLocationHref, lottiejs.togglePause = animationManager.togglePause, lottiejs.setSpeed = animationManager.setSpeed, lottiejs.setDirection = animationManager.setDirection, lottiejs.stop = animationManager.stop, lottiejs.searchAnimations = searchAnimations, lottiejs.registerAnimation = animationManager.registerAnimation, lottiejs.loadAnimation = loadAnimation, lottiejs.setSubframeRendering = setSubframeRendering, lottiejs.resize = animationManager.resize, lottiejs.goToAndStop = animationManager.goToAndStop, lottiejs.destroy = animationManager.destroy, lottiejs.setQuality = setQuality, lottiejs.inBrowser = inBrowser, lottiejs.installPlugin = installPlugin, lottiejs.freeze = animationManager.freeze, lottiejs.unfreeze = animationManager.unfreeze, lottiejs.getRegisteredAnimations = animationManager.getRegisteredAnimations, lottiejs.__getFactory = getFactory, lottiejs.version = "5.5.9";
  var standalone = "__[STANDALONE]__",
    animationData = "__[ANIMATIONDATA]__",
    renderer = "";
  if (standalone) {
    var scripts = document.getElementsByTagName("script"),
      index = scripts.length - 1,
      myScript = scripts[index] || {
        src: ""
      },
      queryString = myScript.src.replace(/^[^\?]+\??/, "");
    renderer = getQueryVariable("renderer");
  }
  var readyStateCheckInterval = setInterval(checkReady, 100);
  return lottiejs;
}, "function" == typeof define && define.amd ? define(function () {
  return b(a);
}) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = b(a) : (a.lottie = b(a), a.bodymovin = a.lottie));

},{}],5:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function r(n, t) {
  for (var i = 0; i < t.length; i++) {
    var r = t[i];
    r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(n, r.key, r);
  }
}
function Jt(n, t, i) {
  t && r(n.prototype, t), i && r(n, i), Object.defineProperty(n, "prototype", {
    writable: !1
  });
}
/*!
 * Splide.js
 * Version  : 4.1.4
 * License  : MIT
 * Copyright: 2022 Naotoshi Fujita
 */
var n, t;
n = void 0, t = function t() {
  "use strict";

  var v = "(prefers-reduced-motion: reduce)",
    G = 4,
    rn = 5,
    r = {
      CREATED: 1,
      MOUNTED: 2,
      IDLE: 3,
      MOVING: G,
      SCROLLING: rn,
      DRAGGING: 6,
      DESTROYED: 7
    };
  function D(n) {
    n.length = 0;
  }
  function o(n, t, i) {
    return Array.prototype.slice.call(n, t, i);
  }
  function R(n) {
    return n.bind.apply(n, [null].concat(o(arguments, 1)));
  }
  function on() {}
  var p = setTimeout;
  function h(n) {
    return requestAnimationFrame(n);
  }
  function u(n, t) {
    return _typeof(t) === n;
  }
  function un(n) {
    return !c(n) && u("object", n);
  }
  var e = Array.isArray,
    x = R(u, "function"),
    C = R(u, "string"),
    en = R(u, "undefined");
  function c(n) {
    return null === n;
  }
  function m(n) {
    try {
      return n instanceof (n.ownerDocument.defaultView || window).HTMLElement;
    } catch (n) {
      return !1;
    }
  }
  function y(n) {
    return e(n) ? n : [n];
  }
  function g(n, t) {
    y(n).forEach(t);
  }
  function b(n, t) {
    return -1 < n.indexOf(t);
  }
  function k(n, t) {
    return n.push.apply(n, y(t)), n;
  }
  function A(t, n, i) {
    t && g(n, function (n) {
      n && t.classList[i ? "add" : "remove"](n);
    });
  }
  function M(n, t) {
    A(n, C(t) ? t.split(" ") : t, !0);
  }
  function L(n, t) {
    g(t, n.appendChild.bind(n));
  }
  function O(n, i) {
    g(n, function (n) {
      var t = (i || n).parentNode;
      t && t.insertBefore(n, i);
    });
  }
  function cn(n, t) {
    return m(n) && (n.msMatchesSelector || n.matches).call(n, t);
  }
  function S(n, t) {
    n = n ? o(n.children) : [];
    return t ? n.filter(function (n) {
      return cn(n, t);
    }) : n;
  }
  function fn(n, t) {
    return t ? S(n, t)[0] : n.firstElementChild;
  }
  var E = Object.keys;
  function w(t, i, n) {
    t && (n ? E(t).reverse() : E(t)).forEach(function (n) {
      "__proto__" !== n && i(t[n], n);
    });
  }
  function an(r) {
    return o(arguments, 1).forEach(function (i) {
      w(i, function (n, t) {
        r[t] = i[t];
      });
    }), r;
  }
  function d(i) {
    return o(arguments, 1).forEach(function (n) {
      w(n, function (n, t) {
        e(n) ? i[t] = n.slice() : un(n) ? i[t] = d({}, un(i[t]) ? i[t] : {}, n) : i[t] = n;
      });
    }), i;
  }
  function sn(t, n) {
    g(n || E(t), function (n) {
      delete t[n];
    });
  }
  function P(n, i) {
    g(n, function (t) {
      g(i, function (n) {
        t && t.removeAttribute(n);
      });
    });
  }
  function I(i, t, r) {
    un(t) ? w(t, function (n, t) {
      I(i, t, n);
    }) : g(i, function (n) {
      c(r) || "" === r ? P(n, t) : n.setAttribute(t, String(r));
    });
  }
  function j(n, t, i) {
    n = document.createElement(n);
    return t && (C(t) ? M : I)(n, t), i && L(i, n), n;
  }
  function _(n, t, i) {
    if (en(i)) return getComputedStyle(n)[t];
    c(i) || (n.style[t] = "" + i);
  }
  function ln(n, t) {
    _(n, "display", t);
  }
  function dn(n) {
    n.setActive && n.setActive() || n.focus({
      preventScroll: !0
    });
  }
  function z(n, t) {
    return n.getAttribute(t);
  }
  function vn(n, t) {
    return n && n.classList.contains(t);
  }
  function N(n) {
    return n.getBoundingClientRect();
  }
  function T(n) {
    g(n, function (n) {
      n && n.parentNode && n.parentNode.removeChild(n);
    });
  }
  function hn(n) {
    return fn(new DOMParser().parseFromString(n, "text/html").body);
  }
  function F(n, t) {
    n.preventDefault(), t && (n.stopPropagation(), n.stopImmediatePropagation());
  }
  function pn(n, t) {
    return n && n.querySelector(t);
  }
  function gn(n, t) {
    return t ? o(n.querySelectorAll(t)) : [];
  }
  function X(n, t) {
    A(n, t, !1);
  }
  function mn(n) {
    return n.timeStamp;
  }
  function W(n) {
    return C(n) ? n : n ? n + "px" : "";
  }
  var yn = "splide",
    f = "data-" + yn;
  function bn(n, t) {
    if (!n) throw new Error("[" + yn + "] " + (t || ""));
  }
  var Y = Math.min,
    wn = Math.max,
    xn = Math.floor,
    kn = Math.ceil,
    U = Math.abs;
  function Sn(n, t, i) {
    return U(n - t) < i;
  }
  function En(n, t, i, r) {
    var o = Y(t, i),
      t = wn(t, i);
    return r ? o < n && n < t : o <= n && n <= t;
  }
  function q(n, t, i) {
    var r = Y(t, i),
      t = wn(t, i);
    return Y(wn(r, n), t);
  }
  function Ln(n) {
    return (0 < n) - (n < 0);
  }
  function On(t, n) {
    return g(n, function (n) {
      t = t.replace("%s", "" + n);
    }), t;
  }
  function An(n) {
    return n < 10 ? "0" + n : "" + n;
  }
  var _n = {};
  function zn() {
    var c = [];
    function i(n, i, r) {
      g(n, function (t) {
        t && g(i, function (n) {
          n.split(" ").forEach(function (n) {
            n = n.split(".");
            r(t, n[0], n[1]);
          });
        });
      });
    }
    return {
      bind: function bind(n, t, u, e) {
        i(n, t, function (n, t, i) {
          var r = "addEventListener" in n,
            o = r ? n.removeEventListener.bind(n, t, u, e) : n.removeListener.bind(n, u);
          r ? n.addEventListener(t, u, e) : n.addListener(u), c.push([n, t, i, u, o]);
        });
      },
      unbind: function unbind(n, t, o) {
        i(n, t, function (t, i, r) {
          c = c.filter(function (n) {
            return !!(n[0] !== t || n[1] !== i || n[2] !== r || o && n[3] !== o) || (n[4](), !1);
          });
        });
      },
      dispatch: function dispatch(n, t, i) {
        var r;
        return "function" == typeof CustomEvent ? r = new CustomEvent(t, {
          bubbles: !0,
          detail: i
        }) : (r = document.createEvent("CustomEvent")).initCustomEvent(t, !0, !1, i), n.dispatchEvent(r), r;
      },
      destroy: function destroy() {
        c.forEach(function (n) {
          n[4]();
        }), D(c);
      }
    };
  }
  var B = "mounted",
    H = "move",
    Dn = "moved",
    Mn = "click",
    Pn = "active",
    In = "inactive",
    Rn = "visible",
    Cn = "hidden",
    J = "refresh",
    K = "updated",
    jn = "resize",
    Nn = "resized",
    Tn = "scroll",
    V = "scrolled",
    a = "destroy",
    Gn = "navigation:mounted",
    Fn = "autoplay:play",
    Xn = "autoplay:pause",
    Wn = "lazyload:loaded",
    Yn = "sk",
    Un = "sh";
  function Q(n) {
    var i = n ? n.event.bus : document.createDocumentFragment(),
      r = zn();
    return n && n.event.on(a, r.destroy), an(r, {
      bus: i,
      on: function on(n, t) {
        r.bind(i, y(n).join(" "), function (n) {
          t.apply(t, e(n.detail) ? n.detail : []);
        });
      },
      off: R(r.unbind, i),
      emit: function emit(n) {
        r.dispatch(i, n, o(arguments, 1));
      }
    });
  }
  function qn(t, n, i, r) {
    var o,
      u,
      e = Date.now,
      c = 0,
      f = !0,
      a = 0;
    function s() {
      if (!f) {
        if (c = t ? Y((e() - o) / t, 1) : 1, i && i(c), 1 <= c && (n(), o = e(), r && ++a >= r)) return l();
        u = h(s);
      }
    }
    function l() {
      f = !0;
    }
    function d() {
      u && cancelAnimationFrame(u), f = !(u = c = 0);
    }
    return {
      start: function start(n) {
        n || d(), o = e() - (n ? c * t : 0), f = !1, u = h(s);
      },
      rewind: function rewind() {
        o = e(), c = 0, i && i(c);
      },
      pause: l,
      cancel: d,
      set: function set(n) {
        t = n;
      },
      isPaused: function isPaused() {
        return f;
      }
    };
  }
  function s(n) {
    var t = n;
    return {
      set: function set(n) {
        t = n;
      },
      is: function is(n) {
        return b(y(n), t);
      }
    };
  }
  var n = "Arrow",
    Bn = n + "Left",
    Hn = n + "Right",
    t = n + "Up",
    n = n + "Down",
    Jn = "ttb",
    l = {
      width: ["height"],
      left: ["top", "right"],
      right: ["bottom", "left"],
      x: ["y"],
      X: ["Y"],
      Y: ["X"],
      ArrowLeft: [t, Hn],
      ArrowRight: [n, Bn]
    };
  var Z = "role",
    $ = "tabindex",
    i = "aria-",
    Kn = i + "controls",
    Vn = i + "current",
    Qn = i + "selected",
    nn = i + "label",
    Zn = i + "labelledby",
    $n = i + "hidden",
    nt = i + "orientation",
    tt = i + "roledescription",
    it = i + "live",
    rt = i + "busy",
    ot = i + "atomic",
    ut = [Z, $, "disabled", Kn, Vn, nn, Zn, $n, nt, tt],
    i = yn + "__",
    et = yn,
    ct = i + "track",
    ft = i + "list",
    at = i + "slide",
    st = at + "--clone",
    lt = at + "__container",
    dt = i + "arrows",
    vt = i + "arrow",
    ht = vt + "--prev",
    pt = vt + "--next",
    gt = i + "pagination",
    mt = gt + "__page",
    yt = i + "progress" + "__bar",
    bt = i + "toggle",
    wt = i + "sr",
    tn = "is-active",
    xt = "is-prev",
    kt = "is-next",
    St = "is-visible",
    Et = "is-loading",
    Lt = "is-focus-in",
    Ot = "is-overflow",
    At = [tn, St, xt, kt, Et, Lt, Ot];
  var _t = "touchstart mousedown",
    zt = "touchmove mousemove",
    Dt = "touchend touchcancel mouseup click";
  var Mt = "slide",
    Pt = "loop",
    It = "fade";
  function Rt(o, r, t, u) {
    var e,
      n = Q(o),
      i = n.on,
      c = n.emit,
      f = n.bind,
      a = o.Components,
      s = o.root,
      l = o.options,
      d = l.isNavigation,
      v = l.updateOnMove,
      h = l.i18n,
      p = l.pagination,
      g = l.slideFocus,
      m = a.Direction.resolve,
      y = z(u, "style"),
      b = z(u, nn),
      w = -1 < t,
      x = fn(u, "." + lt);
    function k() {
      var n = o.splides.map(function (n) {
        n = n.splide.Components.Slides.getAt(r);
        return n ? n.slide.id : "";
      }).join(" ");
      I(u, nn, On(h.slideX, (w ? t : r) + 1)), I(u, Kn, n), I(u, Z, g ? "button" : ""), g && P(u, tt);
    }
    function S() {
      e || E();
    }
    function E() {
      var n, t, i;
      e || (n = o.index, (i = L()) !== vn(u, tn) && (A(u, tn, i), I(u, Vn, d && i || ""), c(i ? Pn : In, O)), i = function () {
        if (o.is(It)) return L();
        var n = N(a.Elements.track),
          t = N(u),
          i = m("left", !0),
          r = m("right", !0);
        return xn(n[i]) <= kn(t[i]) && xn(t[r]) <= kn(n[r]);
      }(), t = !i && (!L() || w), o.state.is([G, rn]) || I(u, $n, t || ""), I(gn(u, l.focusableNodes || ""), $, t ? -1 : ""), g && I(u, $, t ? -1 : 0), i !== vn(u, St) && (A(u, St, i), c(i ? Rn : Cn, O)), i || document.activeElement !== u || (t = a.Slides.getAt(o.index)) && dn(t.slide), A(u, xt, r === n - 1), A(u, kt, r === n + 1));
    }
    function L() {
      var n = o.index;
      return n === r || l.cloneStatus && n === t;
    }
    var O = {
      index: r,
      slideIndex: t,
      slide: u,
      container: x,
      isClone: w,
      mount: function mount() {
        w || (u.id = s.id + "-slide" + An(r + 1), I(u, Z, p ? "tabpanel" : "group"), I(u, tt, h.slide), I(u, nn, b || On(h.slideLabel, [r + 1, o.length]))), f(u, "click", R(c, Mn, O)), f(u, "keydown", R(c, Yn, O)), i([Dn, Un, V], E), i(Gn, k), v && i(H, S);
      },
      destroy: function destroy() {
        e = !0, n.destroy(), X(u, At), P(u, ut), I(u, "style", y), I(u, nn, b || "");
      },
      update: E,
      style: function style(n, t, i) {
        _(i && x || u, n, t);
      },
      isWithin: function isWithin(n, t) {
        return n = U(n - r), (n = w || !l.rewind && !o.is(Pt) ? n : Y(n, o.length - n)) <= t;
      }
    };
    return O;
  }
  var Ct = f + "-interval";
  var jt = {
    passive: !1,
    capture: !0
  };
  var Nt = {
    Spacebar: " ",
    Right: Hn,
    Left: Bn,
    Up: t,
    Down: n
  };
  function Tt(n) {
    return n = C(n) ? n : n.key, Nt[n] || n;
  }
  var Gt = "keydown";
  var Ft = f + "-lazy",
    Xt = Ft + "-srcset",
    Wt = "[" + Ft + "], [" + Xt + "]";
  var Yt = [" ", "Enter"];
  var Ut = Object.freeze({
      __proto__: null,
      Media: function Media(r, n, o) {
        var u = r.state,
          t = o.breakpoints || {},
          e = o.reducedMotion || {},
          i = zn(),
          c = [];
        function f(n) {
          n && i.destroy();
        }
        function a(n, t) {
          t = matchMedia(t);
          i.bind(t, "change", s), c.push([n, t]);
        }
        function s() {
          var n = u.is(7),
            t = o.direction,
            i = c.reduce(function (n, t) {
              return d(n, t[1].matches ? t[0] : {});
            }, {});
          sn(o), l(i), o.destroy ? r.destroy("completely" === o.destroy) : n ? (f(!0), r.mount()) : t !== o.direction && r.refresh();
        }
        function l(n, t, i) {
          d(o, n), t && d(Object.getPrototypeOf(o), n), !i && u.is(1) || r.emit(K, o);
        }
        return {
          setup: function setup() {
            var i = "min" === o.mediaQuery;
            E(t).sort(function (n, t) {
              return i ? +n - +t : +t - +n;
            }).forEach(function (n) {
              a(t[n], "(" + (i ? "min" : "max") + "-width:" + n + "px)");
            }), a(e, v), s();
          },
          destroy: f,
          reduce: function reduce(n) {
            matchMedia(v).matches && (n ? d(o, e) : sn(o, E(e)));
          },
          set: l
        };
      },
      Direction: function Direction(n, t, o) {
        return {
          resolve: function resolve(n, t, i) {
            var r = "rtl" !== (i = i || o.direction) || t ? i === Jn ? 0 : -1 : 1;
            return l[n] && l[n][r] || n.replace(/width|left|right/i, function (n, t) {
              n = l[n.toLowerCase()][r] || n;
              return 0 < t ? n.charAt(0).toUpperCase() + n.slice(1) : n;
            });
          },
          orient: function orient(n) {
            return n * ("rtl" === o.direction ? 1 : -1);
          }
        };
      },
      Elements: function Elements(n, t, i) {
        var r,
          o,
          u,
          e = Q(n),
          c = e.on,
          f = e.bind,
          a = n.root,
          s = i.i18n,
          l = {},
          d = [],
          v = [],
          h = [];
        function p() {
          r = y("." + ct), o = fn(r, "." + ft), bn(r && o, "A track/list element is missing."), k(d, S(o, "." + at + ":not(." + st + ")")), w({
            arrows: dt,
            pagination: gt,
            prev: ht,
            next: pt,
            bar: yt,
            toggle: bt
          }, function (n, t) {
            l[t] = y("." + n);
          }), an(l, {
            root: a,
            track: r,
            list: o,
            slides: d
          });
          var n = a.id || function (n) {
              return "" + n + An(_n[n] = (_n[n] || 0) + 1);
            }(yn),
            t = i.role;
          a.id = n, r.id = r.id || n + "-track", o.id = o.id || n + "-list", !z(a, Z) && "SECTION" !== a.tagName && t && I(a, Z, t), I(a, tt, s.carousel), I(o, Z, "presentation"), m();
        }
        function g(n) {
          var t = ut.concat("style");
          D(d), X(a, v), X(r, h), P([r, o], t), P(a, n ? t : ["style", tt]);
        }
        function m() {
          X(a, v), X(r, h), v = b(et), h = b(ct), M(a, v), M(r, h), I(a, nn, i.label), I(a, Zn, i.labelledby);
        }
        function y(n) {
          n = pn(a, n);
          return n && function (n, t) {
            if (x(n.closest)) return n.closest(t);
            for (var i = n; i && 1 === i.nodeType && !cn(i, t);) i = i.parentElement;
            return i;
          }(n, "." + et) === a ? n : void 0;
        }
        function b(n) {
          return [n + "--" + i.type, n + "--" + i.direction, i.drag && n + "--draggable", i.isNavigation && n + "--nav", n === et && tn];
        }
        return an(l, {
          setup: p,
          mount: function mount() {
            c(J, g), c(J, p), c(K, m), f(document, _t + " keydown", function (n) {
              u = "keydown" === n.type;
            }, {
              capture: !0
            }), f(a, "focusin", function () {
              A(a, Lt, !!u);
            });
          },
          destroy: g
        });
      },
      Slides: function Slides(r, o, u) {
        var n = Q(r),
          t = n.on,
          e = n.emit,
          c = n.bind,
          f = (n = o.Elements).slides,
          a = n.list,
          s = [];
        function i() {
          f.forEach(function (n, t) {
            d(n, t, -1);
          });
        }
        function l() {
          h(function (n) {
            n.destroy();
          }), D(s);
        }
        function d(n, t, i) {
          t = Rt(r, t, i, n);
          t.mount(), s.push(t), s.sort(function (n, t) {
            return n.index - t.index;
          });
        }
        function v(n) {
          return n ? p(function (n) {
            return !n.isClone;
          }) : s;
        }
        function h(n, t) {
          v(t).forEach(n);
        }
        function p(t) {
          return s.filter(x(t) ? t : function (n) {
            return C(t) ? cn(n.slide, t) : b(y(t), n.index);
          });
        }
        return {
          mount: function mount() {
            i(), t(J, l), t(J, i);
          },
          destroy: l,
          update: function update() {
            h(function (n) {
              n.update();
            });
          },
          register: d,
          get: v,
          getIn: function getIn(n) {
            var t = o.Controller,
              i = t.toIndex(n),
              r = t.hasFocus() ? 1 : u.perPage;
            return p(function (n) {
              return En(n.index, i, i + r - 1);
            });
          },
          getAt: function getAt(n) {
            return p(n)[0];
          },
          add: function add(n, o) {
            g(n, function (n) {
              var t, i, r;
              m(n = C(n) ? hn(n) : n) && ((t = f[o]) ? O(n, t) : L(a, n), M(n, u.classes.slide), t = n, i = R(e, jn), t = gn(t, "img"), (r = t.length) ? t.forEach(function (n) {
                c(n, "load error", function () {
                  --r || i();
                });
              }) : i());
            }), e(J);
          },
          remove: function remove(n) {
            T(p(n).map(function (n) {
              return n.slide;
            })), e(J);
          },
          forEach: h,
          filter: p,
          style: function style(t, i, r) {
            h(function (n) {
              n.style(t, i, r);
            });
          },
          getLength: function getLength(n) {
            return (n ? f : s).length;
          },
          isEnough: function isEnough() {
            return s.length > u.perPage;
          }
        };
      },
      Layout: function Layout(t, n, i) {
        var r,
          o,
          u,
          e = (a = Q(t)).on,
          c = a.bind,
          f = a.emit,
          a = n.Slides,
          s = n.Direction.resolve,
          l = (n = n.Elements).root,
          d = n.track,
          v = n.list,
          h = a.getAt,
          p = a.style;
        function g() {
          r = i.direction === Jn, _(l, "maxWidth", W(i.width)), _(d, s("paddingLeft"), y(!1)), _(d, s("paddingRight"), y(!0)), m(!0);
        }
        function m(n) {
          var t = N(l);
          !n && o.width === t.width && o.height === t.height || (_(d, "height", function () {
            var n = "";
            r && (bn(n = b(), "height or heightRatio is missing."), n = "calc(" + n + " - " + y(!1) + " - " + y(!0) + ")");
            return n;
          }()), p(s("marginRight"), W(i.gap)), p("width", i.autoWidth ? null : W(i.fixedWidth) || (r ? "" : w())), p("height", W(i.fixedHeight) || (r ? i.autoHeight ? null : w() : b()), !0), o = t, f(Nn), u !== (u = O()) && (A(l, Ot, u), f("overflow", u)));
        }
        function y(n) {
          var t = i.padding,
            n = s(n ? "right" : "left");
          return t && W(t[n] || (un(t) ? 0 : t)) || "0px";
        }
        function b() {
          return W(i.height || N(v).width * i.heightRatio);
        }
        function w() {
          var n = W(i.gap);
          return "calc((100%" + (n && " + " + n) + ")/" + (i.perPage || 1) + (n && " - " + n) + ")";
        }
        function x() {
          return N(v)[s("width")];
        }
        function k(n, t) {
          n = h(n || 0);
          return n ? N(n.slide)[s("width")] + (t ? 0 : L()) : 0;
        }
        function S(n, t) {
          var i,
            n = h(n);
          return n ? (n = N(n.slide)[s("right")], i = N(v)[s("left")], U(n - i) + (t ? 0 : L())) : 0;
        }
        function E(n) {
          return S(t.length - 1) - S(0) + k(0, n);
        }
        function L() {
          var n = h(0);
          return n && parseFloat(_(n.slide, s("marginRight"))) || 0;
        }
        function O() {
          return t.is(It) || E(!0) > x();
        }
        return {
          mount: function mount() {
            var n, t, i;
            g(), c(window, "resize load", (n = R(f, jn), i = qn(t || 0, n, null, 1), function () {
              i.isPaused() && i.start();
            })), e([K, J], g), e(jn, m);
          },
          resize: m,
          listSize: x,
          slideSize: k,
          sliderSize: E,
          totalSize: S,
          getPadding: function getPadding(n) {
            return parseFloat(_(d, s("padding" + (n ? "Right" : "Left")))) || 0;
          },
          isOverflow: O
        };
      },
      Clones: function Clones(c, i, f) {
        var t,
          r = Q(c),
          n = r.on,
          a = i.Elements,
          s = i.Slides,
          o = i.Direction.resolve,
          l = [];
        function u() {
          if (n(J, d), n([K, jn], v), t = h()) {
            var o = t,
              u = s.get().slice(),
              e = u.length;
            if (e) {
              for (; u.length < o;) k(u, u);
              k(u.slice(-o), u.slice(0, o)).forEach(function (n, t) {
                var i = t < o,
                  r = function (n, t) {
                    n = n.cloneNode(!0);
                    return M(n, f.classes.clone), n.id = c.root.id + "-clone" + An(t + 1), n;
                  }(n.slide, t);
                i ? O(r, u[0].slide) : L(a.list, r), k(l, r), s.register(r, t - o + (i ? 0 : e), n.index);
              });
            }
            i.Layout.resize(!0);
          }
        }
        function d() {
          e(), u();
        }
        function e() {
          T(l), D(l), r.destroy();
        }
        function v() {
          var n = h();
          t !== n && (t < n || !n) && r.emit(J);
        }
        function h() {
          var n,
            t = f.clones;
          return c.is(Pt) ? en(t) && (t = (n = f[o("fixedWidth")] && i.Layout.slideSize(0)) && kn(N(a.track)[o("width")] / n) || f[o("autoWidth")] && c.length || 2 * f.perPage) : t = 0, t;
        }
        return {
          mount: u,
          destroy: e
        };
      },
      Move: function Move(r, c, o) {
        var e,
          n = Q(r),
          t = n.on,
          f = n.emit,
          a = r.state.set,
          u = (n = c.Layout).slideSize,
          i = n.getPadding,
          s = n.totalSize,
          l = n.listSize,
          d = n.sliderSize,
          v = (n = c.Direction).resolve,
          h = n.orient,
          p = (n = c.Elements).list,
          g = n.track;
        function m() {
          c.Controller.isBusy() || (c.Scroll.cancel(), y(r.index), c.Slides.update());
        }
        function y(n) {
          b(S(n, !0));
        }
        function b(n, t) {
          r.is(It) || (t = t ? n : function (n) {
            {
              var t, i;
              r.is(Pt) && (t = k(n), i = t > c.Controller.getEnd(), (t < 0 || i) && (n = w(n, i)));
            }
            return n;
          }(n), _(p, "transform", "translate" + v("X") + "(" + t + "px)"), n !== t && f(Un));
        }
        function w(n, t) {
          var i = n - L(t),
            r = d();
          return n -= h(r * (kn(U(i) / r) || 1)) * (t ? 1 : -1);
        }
        function x() {
          b(E(), !0), e.cancel();
        }
        function k(n) {
          for (var t = c.Slides.get(), i = 0, r = 1 / 0, o = 0; o < t.length; o++) {
            var u = t[o].index,
              e = U(S(u, !0) - n);
            if (!(e <= r)) break;
            r = e, i = u;
          }
          return i;
        }
        function S(n, t) {
          var i = h(s(n - 1) - (n = n, "center" === (i = o.focus) ? (l() - u(n, !0)) / 2 : +i * u(n) || 0));
          return t ? (n = i, n = o.trimSpace && r.is(Mt) ? q(n, 0, h(d(!0) - l())) : n) : i;
        }
        function E() {
          var n = v("left");
          return N(p)[n] - N(g)[n] + h(i(!1));
        }
        function L(n) {
          return S(n ? c.Controller.getEnd() : 0, !!o.trimSpace);
        }
        return {
          mount: function mount() {
            e = c.Transition, t([B, Nn, K, J], m);
          },
          move: function move(n, t, i, r) {
            var o, u;
            n !== t && (o = i < n, u = h(w(E(), o)), o ? 0 <= u : u <= p[v("scrollWidth")] - N(g)[v("width")]) && (x(), b(w(E(), i < n), !0)), a(G), f(H, t, i, n), e.start(t, function () {
              a(3), f(Dn, t, i, n), r && r();
            });
          },
          jump: y,
          translate: b,
          shift: w,
          cancel: x,
          toIndex: k,
          toPosition: S,
          getPosition: E,
          getLimit: L,
          exceededLimit: function exceededLimit(n, t) {
            t = en(t) ? E() : t;
            var i = !0 !== n && h(t) < h(L(!1)),
              n = !1 !== n && h(t) > h(L(!0));
            return i || n;
          },
          reposition: m
        };
      },
      Controller: function Controller(o, u, e) {
        var c,
          f,
          a,
          s,
          n = Q(o),
          t = n.on,
          i = n.emit,
          l = u.Move,
          d = l.getPosition,
          r = l.getLimit,
          v = l.toPosition,
          h = (n = u.Slides).isEnough,
          p = n.getLength,
          g = e.omitEnd,
          m = o.is(Pt),
          y = o.is(Mt),
          b = R(L, !1),
          w = R(L, !0),
          x = e.start || 0,
          k = x;
        function S() {
          f = p(!0), a = e.perMove, s = e.perPage, c = _();
          var n = q(x, 0, g ? c : f - 1);
          n !== x && (x = n, l.reposition());
        }
        function E() {
          c !== _() && i("ei");
        }
        function L(n, t) {
          var i = a || (P() ? 1 : s),
            i = O(x + i * (n ? -1 : 1), x, !(a || P()));
          return -1 === i && y && !Sn(d(), r(!n), 1) ? n ? 0 : c : t ? i : A(i);
        }
        function O(n, t, i) {
          var r;
          return h() || P() ? ((r = function (n) {
            if (y && "move" === e.trimSpace && n !== x) for (var t = d(); t === v(n, !0) && En(n, 0, o.length - 1, !e.rewind);) n < x ? --n : ++n;
            return n;
          }(n)) !== n && (t = n, n = r, i = !1), n < 0 || c < n ? n = a || !En(0, n, t, !0) && !En(c, t, n, !0) ? m ? i ? n < 0 ? -(f % s || s) : f : n : e.rewind ? n < 0 ? c : 0 : -1 : z(D(n)) : i && n !== t && (n = z(D(t) + (n < t ? -1 : 1)))) : n = -1, n;
        }
        function A(n) {
          return m ? (n + f) % f || 0 : n;
        }
        function _() {
          for (var n = f - (P() || m && a ? 1 : s); g && 0 < n--;) if (v(f - 1, !0) !== v(n, !0)) {
            n++;
            break;
          }
          return q(n, 0, f - 1);
        }
        function z(n) {
          return q(P() ? n : s * n, 0, c);
        }
        function D(n) {
          return P() ? Y(n, c) : xn((c <= n ? f - 1 : n) / s);
        }
        function M(n) {
          n !== x && (k = x, x = n);
        }
        function P() {
          return !en(e.focus) || e.isNavigation;
        }
        function I() {
          return o.state.is([G, rn]) && !!e.waitForTransition;
        }
        return {
          mount: function mount() {
            S(), t([K, J, "ei"], S), t(Nn, E);
          },
          go: function go(n, t, i) {
            var r;
            I() || -1 < (r = A(n = function (n) {
              var t = x;
              {
                var i, r;
                C(n) ? (r = n.match(/([+\-<>])(\d+)?/) || [], i = r[1], r = r[2], "+" === i || "-" === i ? t = O(x + +("" + i + (+r || 1)), x) : ">" === i ? t = r ? z(+r) : b(!0) : "<" === i && (t = w(!0))) : t = m ? n : q(n, 0, c);
              }
              return t;
            }(n))) && (t || r !== x) && (M(r), l.move(n, r, k, i));
          },
          scroll: function scroll(n, t, i, r) {
            u.Scroll.scroll(n, t, i, function () {
              var n = A(l.toIndex(d()));
              M(g ? Y(n, c) : n), r && r();
            });
          },
          getNext: b,
          getPrev: w,
          getAdjacent: L,
          getEnd: _,
          setIndex: M,
          getIndex: function getIndex(n) {
            return n ? k : x;
          },
          toIndex: z,
          toPage: D,
          toDest: function toDest(n) {
            return n = l.toIndex(n), y ? q(n, 0, c) : n;
          },
          hasFocus: P,
          isBusy: I
        };
      },
      Arrows: function Arrows(o, n, t) {
        var i,
          r,
          u = Q(o),
          e = u.on,
          c = u.bind,
          f = u.emit,
          a = t.classes,
          s = t.i18n,
          l = n.Elements,
          d = n.Controller,
          v = l.arrows,
          h = l.track,
          p = v,
          g = l.prev,
          m = l.next,
          y = {};
        function b() {
          var n = t.arrows;
          !n || g && m || (p = v || j("div", a.arrows), g = S(!0), m = S(!1), i = !0, L(p, [g, m]), v || O(p, h)), g && m && (an(y, {
            prev: g,
            next: m
          }), ln(p, n ? "" : "none"), M(p, r = dt + "--" + t.direction), n && (e([B, Dn, J, V, "ei"], E), c(m, "click", R(k, ">")), c(g, "click", R(k, "<")), E(), I([g, m], Kn, h.id), f("arrows:mounted", g, m))), e(K, w);
        }
        function w() {
          x(), b();
        }
        function x() {
          u.destroy(), X(p, r), i ? (T(v ? [g, m] : p), g = m = null) : P([g, m], ut);
        }
        function k(n) {
          d.go(n, !0);
        }
        function S(n) {
          return hn('<button class="' + a.arrow + " " + (n ? a.prev : a.next) + '" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="' + (t.arrowPath || "m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z") + '" />');
        }
        function E() {
          var n, t, i, r;
          g && m && (r = o.index, n = d.getPrev(), t = d.getNext(), i = -1 < n && r < n ? s.last : s.prev, r = -1 < t && t < r ? s.first : s.next, g.disabled = n < 0, m.disabled = t < 0, I(g, nn, i), I(m, nn, r), f("arrows:updated", g, m, n, t));
        }
        return {
          arrows: y,
          mount: b,
          destroy: x,
          update: E
        };
      },
      Autoplay: function Autoplay(n, t, i) {
        var r,
          o,
          u = Q(n),
          e = u.on,
          c = u.bind,
          f = u.emit,
          a = qn(i.interval, n.go.bind(n, ">"), function (n) {
            var t = l.bar;
            t && _(t, "width", 100 * n + "%"), f("autoplay:playing", n);
          }),
          s = a.isPaused,
          l = t.Elements,
          d = (u = t.Elements).root,
          v = u.toggle,
          h = i.autoplay,
          p = "pause" === h;
        function g() {
          s() && t.Slides.isEnough() && (a.start(!i.resetProgress), o = r = p = !1, b(), f(Fn));
        }
        function m(n) {
          p = !!(n = void 0 === n ? !0 : n), b(), s() || (a.pause(), f(Xn));
        }
        function y() {
          p || (r || o ? m(!1) : g());
        }
        function b() {
          v && (A(v, tn, !p), I(v, nn, i.i18n[p ? "play" : "pause"]));
        }
        function w(n) {
          n = t.Slides.getAt(n);
          a.set(n && +z(n.slide, Ct) || i.interval);
        }
        return {
          mount: function mount() {
            h && (i.pauseOnHover && c(d, "mouseenter mouseleave", function (n) {
              r = "mouseenter" === n.type, y();
            }), i.pauseOnFocus && c(d, "focusin focusout", function (n) {
              o = "focusin" === n.type, y();
            }), v && c(v, "click", function () {
              p ? g() : m(!0);
            }), e([H, Tn, J], a.rewind), e(H, w), v && I(v, Kn, l.track.id), p || g(), b());
          },
          destroy: a.cancel,
          play: g,
          pause: m,
          isPaused: s
        };
      },
      Cover: function Cover(n, t, i) {
        var r = Q(n).on;
        function o(i) {
          t.Slides.forEach(function (n) {
            var t = fn(n.container || n.slide, "img");
            t && t.src && u(i, t, n);
          });
        }
        function u(n, t, i) {
          i.style("background", n ? 'center/cover no-repeat url("' + t.src + '")' : "", !0), ln(t, n ? "none" : "");
        }
        return {
          mount: function mount() {
            i.cover && (r(Wn, R(u, !0)), r([B, K, J], R(o, !0)));
          },
          destroy: R(o, !1)
        };
      },
      Scroll: function Scroll(n, c, u) {
        var f,
          a,
          t = Q(n),
          i = t.on,
          s = t.emit,
          l = n.state.set,
          d = c.Move,
          v = d.getPosition,
          e = d.getLimit,
          h = d.exceededLimit,
          p = d.translate,
          g = n.is(Mt),
          m = 1;
        function y(n, t, i, r, o) {
          var u,
            e = v(),
            i = (x(), !i || g && h() || (i = c.Layout.sliderSize(), u = Ln(n) * i * xn(U(n) / i) || 0, n = d.toPosition(c.Controller.toDest(n % i)) + u), Sn(e, n, 1));
          m = 1, t = i ? 0 : t || wn(U(n - e) / 1.5, 800), a = r, f = qn(t, b, R(w, e, n, o), 1), l(rn), s(Tn), f.start();
        }
        function b() {
          l(3), a && a(), s(V);
        }
        function w(n, t, i, r) {
          var o = v(),
            r = (n + (t - n) * (t = r, (n = u.easingFunc) ? n(t) : 1 - Math.pow(1 - t, 4)) - o) * m;
          p(o + r), g && !i && h() && (m *= .6, U(r) < 10 && y(e(h(!0)), 600, !1, a, !0));
        }
        function x() {
          f && f.cancel();
        }
        function r() {
          f && !f.isPaused() && (x(), b());
        }
        return {
          mount: function mount() {
            i(H, x), i([K, J], r);
          },
          destroy: x,
          scroll: y,
          cancel: r
        };
      },
      Drag: function Drag(e, o, c) {
        var f,
          t,
          u,
          a,
          s,
          l,
          d,
          v,
          n = Q(e),
          i = n.on,
          h = n.emit,
          p = n.bind,
          g = n.unbind,
          m = e.state,
          y = o.Move,
          b = o.Scroll,
          w = o.Controller,
          x = o.Elements.track,
          k = o.Media.reduce,
          r = (n = o.Direction).resolve,
          S = n.orient,
          E = y.getPosition,
          L = y.exceededLimit,
          O = !1;
        function j() {
          var n = c.drag;
          C(!n), a = "free" === n;
        }
        function N(n) {
          var t, i, r;
          l = !1, d || (t = R(n), i = n.target, r = c.noDrag, cn(i, "." + mt + ", ." + vt) || r && cn(i, r) || !t && n.button || (w.isBusy() ? F(n, !0) : (v = t ? x : window, s = m.is([G, rn]), u = null, p(v, zt, A, jt), p(v, Dt, _, jt), y.cancel(), b.cancel(), z(n))));
        }
        function A(n) {
          var t, i, r, o, u;
          m.is(6) || (m.set(6), h("drag")), n.cancelable && (s ? (y.translate(f + D(n) / (O && e.is(Mt) ? 5 : 1)), u = 200 < M(n), t = O !== (O = L()), (u || t) && z(n), l = !0, h("dragging"), F(n)) : U(D(u = n)) > U(D(u, !0)) && (t = n, i = c.dragMinThreshold, r = un(i), o = r && i.mouse || 0, r = (r ? i.touch : +i) || 10, s = U(D(t)) > (R(t) ? r : o), F(n)));
        }
        function _(n) {
          var t, i, r;
          m.is(6) && (m.set(3), h("dragged")), s && (i = function (n) {
            return E() + Ln(n) * Y(U(n) * (c.flickPower || 600), a ? 1 / 0 : o.Layout.listSize() * (c.flickMaxPages || 1));
          }(t = function (n) {
            if (e.is(Pt) || !O) {
              var t = M(n);
              if (t && t < 200) return D(n) / t;
            }
            return 0;
          }(t = n)), r = c.rewind && c.rewindByDrag, k(!1), a ? w.scroll(i, 0, c.snap) : e.is(It) ? w.go(S(Ln(t)) < 0 ? r ? "<" : "-" : r ? ">" : "+") : e.is(Mt) && O && r ? w.go(L(!0) ? ">" : "<") : w.go(w.toDest(i), !0), k(!0), F(n)), g(v, zt, A), g(v, Dt, _), s = !1;
        }
        function T(n) {
          !d && l && F(n, !0);
        }
        function z(n) {
          u = t, t = n, f = E();
        }
        function D(n, t) {
          return I(n, t) - I(P(n), t);
        }
        function M(n) {
          return mn(n) - mn(P(n));
        }
        function P(n) {
          return t === n && u || t;
        }
        function I(n, t) {
          return (R(n) ? n.changedTouches[0] : n)["page" + r(t ? "Y" : "X")];
        }
        function R(n) {
          return "undefined" != typeof TouchEvent && n instanceof TouchEvent;
        }
        function C(n) {
          d = n;
        }
        return {
          mount: function mount() {
            p(x, zt, on, jt), p(x, Dt, on, jt), p(x, _t, N, jt), p(x, "click", T, {
              capture: !0
            }), p(x, "dragstart", F), i([B, K], j);
          },
          disable: C,
          isDragging: function isDragging() {
            return s;
          }
        };
      },
      Keyboard: function Keyboard(t, n, i) {
        var r,
          o,
          u = Q(t),
          e = u.on,
          c = u.bind,
          f = u.unbind,
          a = t.root,
          s = n.Direction.resolve;
        function l() {
          var n = i.keyboard;
          n && (r = "global" === n ? window : a, c(r, Gt, h));
        }
        function d() {
          f(r, Gt);
        }
        function v() {
          var n = o;
          o = !0, p(function () {
            o = n;
          });
        }
        function h(n) {
          o || ((n = Tt(n)) === s(Bn) ? t.go("<") : n === s(Hn) && t.go(">"));
        }
        return {
          mount: function mount() {
            l(), e(K, d), e(K, l), e(H, v);
          },
          destroy: d,
          disable: function disable(n) {
            o = n;
          }
        };
      },
      LazyLoad: function LazyLoad(i, n, o) {
        var t = Q(i),
          r = t.on,
          u = t.off,
          e = t.bind,
          c = t.emit,
          f = "sequential" === o.lazyLoad,
          a = [Dn, V],
          s = [];
        function l() {
          D(s), n.Slides.forEach(function (r) {
            gn(r.slide, Wt).forEach(function (n) {
              var t = z(n, Ft),
                i = z(n, Xt);
              t === n.src && i === n.srcset || (t = o.classes.spinner, t = fn(i = n.parentElement, "." + t) || j("span", t, i), s.push([n, r, t]), n.src || ln(n, "none"));
            });
          }), (f ? p : (u(a), r(a, d), d))();
        }
        function d() {
          (s = s.filter(function (n) {
            var t = o.perPage * ((o.preloadPages || 1) + 1) - 1;
            return !n[1].isWithin(i.index, t) || v(n);
          })).length || u(a);
        }
        function v(n) {
          var t = n[0];
          M(n[1].slide, Et), e(t, "load error", R(h, n)), I(t, "src", z(t, Ft)), I(t, "srcset", z(t, Xt)), P(t, Ft), P(t, Xt);
        }
        function h(n, t) {
          var i = n[0],
            r = n[1];
          X(r.slide, Et), "error" !== t.type && (T(n[2]), ln(i, ""), c(Wn, i, r), c(jn)), f && p();
        }
        function p() {
          s.length && v(s.shift());
        }
        return {
          mount: function mount() {
            o.lazyLoad && (l(), r(J, l));
          },
          destroy: R(D, s),
          check: d
        };
      },
      Pagination: function Pagination(l, n, d) {
        var v,
          h,
          t = Q(l),
          p = t.on,
          g = t.emit,
          m = t.bind,
          y = n.Slides,
          b = n.Elements,
          w = n.Controller,
          x = w.hasFocus,
          r = w.getIndex,
          e = w.go,
          c = n.Direction.resolve,
          k = b.pagination,
          S = [];
        function E() {
          v && (T(k ? o(v.children) : v), X(v, h), D(S), v = null), t.destroy();
        }
        function L(n) {
          e(">" + n, !0);
        }
        function O(n, t) {
          var i = S.length,
            r = Tt(t),
            o = A(),
            u = -1,
            o = (r === c(Hn, !1, o) ? u = ++n % i : r === c(Bn, !1, o) ? u = (--n + i) % i : "Home" === r ? u = 0 : "End" === r && (u = i - 1), S[u]);
          o && (dn(o.button), e(">" + u), F(t, !0));
        }
        function A() {
          return d.paginationDirection || d.direction;
        }
        function _(n) {
          return S[w.toPage(n)];
        }
        function z() {
          var n,
            t = _(r(!0)),
            i = _(r());
          t && (X(n = t.button, tn), P(n, Qn), I(n, $, -1)), i && (M(n = i.button, tn), I(n, Qn, !0), I(n, $, "")), g("pagination:updated", {
            list: v,
            items: S
          }, t, i);
        }
        return {
          items: S,
          mount: function n() {
            E(), p([K, J, "ei"], n);
            var t = d.pagination;
            if (k && ln(k, t ? "" : "none"), t) {
              p([H, Tn, V], z);
              var t = l.length,
                i = d.classes,
                r = d.i18n,
                o = d.perPage,
                u = x() ? w.getEnd() + 1 : kn(t / o);
              M(v = k || j("ul", i.pagination, b.track.parentElement), h = gt + "--" + A()), I(v, Z, "tablist"), I(v, nn, r.select), I(v, nt, A() === Jn ? "vertical" : "");
              for (var e = 0; e < u; e++) {
                var c = j("li", null, v),
                  f = j("button", {
                    "class": i.page,
                    type: "button"
                  }, c),
                  a = y.getIn(e).map(function (n) {
                    return n.slide.id;
                  }),
                  s = !x() && 1 < o ? r.pageX : r.slideX;
                m(f, "click", R(L, e)), d.paginationKeyboard && m(f, "keydown", R(O, e)), I(c, Z, "presentation"), I(f, Z, "tab"), I(f, Kn, a.join(" ")), I(f, nn, On(s, e + 1)), I(f, $, -1), S.push({
                  li: c,
                  button: f,
                  page: e
                });
              }
              z(), g("pagination:mounted", {
                list: v,
                items: S
              }, _(l.index));
            }
          },
          destroy: E,
          getAt: _,
          update: z
        };
      },
      Sync: function Sync(i, n, t) {
        var r = t.isNavigation,
          o = t.slideFocus,
          u = [];
        function e() {
          var n, t;
          i.splides.forEach(function (n) {
            n.isParent || (f(i, n.splide), f(n.splide, i));
          }), r && (n = Q(i), (t = n.on)(Mn, s), t(Yn, l), t([B, K], a), u.push(n), n.emit(Gn, i.splides));
        }
        function c() {
          u.forEach(function (n) {
            n.destroy();
          }), D(u);
        }
        function f(n, r) {
          n = Q(n);
          n.on(H, function (n, t, i) {
            r.go(r.is(Pt) ? i : n);
          }), u.push(n);
        }
        function a() {
          I(n.Elements.list, nt, t.direction === Jn ? "vertical" : "");
        }
        function s(n) {
          i.go(n.index);
        }
        function l(n, t) {
          b(Yt, Tt(t)) && (s(n), F(t));
        }
        return {
          setup: R(n.Media.set, {
            slideFocus: en(o) ? r : o
          }, !0),
          mount: e,
          destroy: c,
          remount: function remount() {
            c(), e();
          }
        };
      },
      Wheel: function Wheel(e, c, f) {
        var n = Q(e).bind,
          a = 0;
        function t(n) {
          var t, i, r, o, u;
          n.cancelable && (t = (u = n.deltaY) < 0, i = mn(n), r = f.wheelMinThreshold || 0, o = f.wheelSleep || 0, U(u) > r && o < i - a && (e.go(t ? "<" : ">"), a = i), u = t, f.releaseWheel && !e.state.is(G) && -1 === c.Controller.getAdjacent(u) || F(n));
        }
        return {
          mount: function mount() {
            f.wheel && n(c.Elements.track, "wheel", t, jt);
          }
        };
      },
      Live: function Live(n, t, i) {
        var r = Q(n).on,
          o = t.Elements.track,
          u = i.live && !i.isNavigation,
          e = j("span", wt),
          c = qn(90, R(f, !1));
        function f(n) {
          I(o, rt, n), n ? (L(o, e), c.start()) : (T(e), c.cancel());
        }
        function a(n) {
          u && I(o, it, n ? "off" : "polite");
        }
        return {
          mount: function mount() {
            u && (a(!t.Autoplay.isPaused()), I(o, ot, !0), e.textContent = "…", r(Fn, R(a, !0)), r(Xn, R(a, !1)), r([Dn, V], R(f, !0)));
          },
          disable: a,
          destroy: function destroy() {
            P(o, [it, ot, rt]), T(e);
          }
        };
      }
    }),
    qt = {
      type: "slide",
      role: "region",
      speed: 400,
      perPage: 1,
      cloneStatus: !0,
      arrows: !0,
      pagination: !0,
      paginationKeyboard: !0,
      interval: 5e3,
      pauseOnHover: !0,
      pauseOnFocus: !0,
      resetProgress: !0,
      easing: "cubic-bezier(0.25, 1, 0.5, 1)",
      drag: !0,
      direction: "ltr",
      trimSpace: !0,
      focusableNodes: "a, button, textarea, input, select, iframe",
      live: !0,
      classes: {
        slide: at,
        clone: st,
        arrows: dt,
        arrow: vt,
        prev: ht,
        next: pt,
        pagination: gt,
        page: mt,
        spinner: i + "spinner"
      },
      i18n: {
        prev: "Previous slide",
        next: "Next slide",
        first: "Go to first slide",
        last: "Go to last slide",
        slideX: "Go to slide %s",
        pageX: "Go to page %s",
        play: "Start autoplay",
        pause: "Pause autoplay",
        carousel: "carousel",
        slide: "slide",
        select: "Select a slide to show",
        slideLabel: "%s of %s"
      },
      reducedMotion: {
        speed: 0,
        rewindSpeed: 0,
        autoplay: "pause"
      }
    };
  function Bt(n, t, i) {
    var r = t.Slides;
    function o() {
      r.forEach(function (n) {
        n.style("transform", "translateX(-" + 100 * n.index + "%)");
      });
    }
    return {
      mount: function mount() {
        Q(n).on([B, J], o);
      },
      start: function start(n, t) {
        r.style("transition", "opacity " + i.speed + "ms " + i.easing), p(t);
      },
      cancel: on
    };
  }
  function Ht(u, n, e) {
    var c,
      f = n.Move,
      a = n.Controller,
      s = n.Scroll,
      t = n.Elements.list,
      l = R(_, t, "transition");
    function i() {
      l(""), s.cancel();
    }
    return {
      mount: function mount() {
        Q(u).bind(t, "transitionend", function (n) {
          n.target === t && c && (i(), c());
        });
      },
      start: function start(n, t) {
        var i = f.toPosition(n, !0),
          r = f.getPosition(),
          o = function (n) {
            var t = e.rewindSpeed;
            if (u.is(Mt) && t) {
              var i = a.getIndex(!0),
                r = a.getEnd();
              if (0 === i && r <= n || r <= i && 0 === n) return t;
            }
            return e.speed;
          }(n);
        1 <= U(i - r) && 1 <= o ? e.useScroll ? s.scroll(i, o, !1, t) : (l("transform " + o + "ms " + e.easing), f.translate(i, !0), c = t) : (f.jump(n), t());
      },
      cancel: i
    };
  }
  t = function () {
    function i(n, t) {
      this.event = Q(), this.Components = {}, this.state = s(1), this.splides = [], this.n = {}, this.t = {};
      n = C(n) ? pn(document, n) : n;
      bn(n, n + " is invalid."), t = d({
        label: z(this.root = n, nn) || "",
        labelledby: z(n, Zn) || ""
      }, qt, i.defaults, t || {});
      try {
        d(t, JSON.parse(z(n, f)));
      } catch (n) {
        bn(!1, "Invalid JSON");
      }
      this.n = Object.create(d({}, t));
    }
    var n = i.prototype;
    return n.mount = function (n, t) {
      var i = this,
        r = this.state,
        o = this.Components;
      return bn(r.is([1, 7]), "Already mounted!"), r.set(1), this.i = o, this.r = t || this.r || (this.is(It) ? Bt : Ht), this.t = n || this.t, w(an({}, Ut, this.t, {
        Transition: this.r
      }), function (n, t) {
        n = n(i, o, i.n);
        (o[t] = n).setup && n.setup();
      }), w(o, function (n) {
        n.mount && n.mount();
      }), this.emit(B), M(this.root, "is-initialized"), r.set(3), this.emit("ready"), this;
    }, n.sync = function (n) {
      return this.splides.push({
        splide: n
      }), n.splides.push({
        splide: this,
        isParent: !0
      }), this.state.is(3) && (this.i.Sync.remount(), n.Components.Sync.remount()), this;
    }, n.go = function (n) {
      return this.i.Controller.go(n), this;
    }, n.on = function (n, t) {
      return this.event.on(n, t), this;
    }, n.off = function (n) {
      return this.event.off(n), this;
    }, n.emit = function (n) {
      var t;
      return (t = this.event).emit.apply(t, [n].concat(o(arguments, 1))), this;
    }, n.add = function (n, t) {
      return this.i.Slides.add(n, t), this;
    }, n.remove = function (n) {
      return this.i.Slides.remove(n), this;
    }, n.is = function (n) {
      return this.n.type === n;
    }, n.refresh = function () {
      return this.emit(J), this;
    }, n.destroy = function (t) {
      void 0 === t && (t = !0);
      var n = this.event,
        i = this.state;
      return i.is(1) ? Q(this).on("ready", this.destroy.bind(this, t)) : (w(this.i, function (n) {
        n.destroy && n.destroy(t);
      }, !0), n.emit(a), n.destroy(), t && D(this.splides), i.set(7)), this;
    }, Jt(i, [{
      key: "options",
      get: function get() {
        return this.n;
      },
      set: function set(n) {
        this.i.Media.set(n, !0, !0);
      }
    }, {
      key: "length",
      get: function get() {
        return this.i.Slides.getLength(!0);
      }
    }, {
      key: "index",
      get: function get() {
        return this.i.Controller.getIndex();
      }
    }]), i;
  }();
  return t.defaults = {}, t.STATES = r, t;
}, "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (n = "undefined" != typeof globalThis ? globalThis : n || self).Splide = t();

},{}],6:[function(require,module,exports){
"use strict";

var _utils = require("./modules/general/utils");
var _pageManager = require("./page-manager");
var _pageElements = require("./page-elements");
var _pageEvents = require("./page-events");
var _pageGlobal = require("./page-global");
var _manualPopup = _interopRequireDefault(require("./modules/manual-order/manual-popup"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
window.$ = window.jQuery = require('jquery');

// Utils

// Pages

// Initialization
(0, _utils.onContentLoaded)(function () {
  (0, _pageManager.initPage)();
  (0, _pageElements.initPageElements)();
  (0, _pageEvents.initPageEvents)();
});

// Manual Order

(0, _utils.onContentLoaded)(function () {
  window.deleteManualOrder = _pageGlobal.deleteManualOrder;
  window.addManualOrder = function () {
    new _manualPopup["default"]();
  };
  window.editManualOrder = function (orderID) {
    new _manualPopup["default"](orderID);
  };
});

},{"./modules/general/utils":33,"./modules/manual-order/manual-popup":36,"./page-elements":46,"./page-events":47,"./page-global":48,"./page-manager":49,"jquery":1}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = require("../general/utils");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var AskModal = exports["default"] = /*#__PURE__*/function () {
  function AskModal() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, AskModal);
    this.heading = settings.heading || 'Are You Sure You Want To Exit?';
    this.subheading = settings.subheading || 'You will lose all unsaved progress.';
    this.exitText = settings.exitText || 'Exit';
    this.submitText = settings.submitText || 'Keep';
    this.cancelCallback = this.destroy;
    this.submitCallback = settings.submitCallback;
    this.msg = settings.msg;
  }
  return _createClass(AskModal, [{
    key: "renderHTML",
    get: function get() {
      return "\n      <div data-evt=\"closeAskModal\"></div>\n      <div>\n        <h4>".concat(this.heading, "</h4>\n        <p>").concat(this.subheading, "</p>\n        <div>\n          <button>").concat(this.exitText, "</button>\n          <button>").concat(this.submitText, "</button>\n        </div>\n      </div>\n    ");
    }
  }, {
    key: "create",
    value: function create() {
      var _this = this;
      var modal = (0, _utils.createElem)('div', {
        className: 'ask-modal',
        innerHTML: this.renderHTML
      });
      var buttons = _toConsumableArray(modal.querySelectorAll('button'));
      var closeEvt = _toConsumableArray(modal.querySelectorAll('[data-evt="closeAskModal"]'));
      buttons[0].onclick = function () {
        _this.cancelCallback();
      };
      buttons[1].onclick = function () {
        var submitArr = (0, _utils.toArray)(_this.submitCallback);
        var _iterator = _createForOfIteratorHelper(submitArr),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var fn = _step.value;
            if (typeof fn === 'function') {
              fn();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        _this.destroy();
      };
      var _iterator2 = _createForOfIteratorHelper(closeEvt),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var evt = _step2.value;
          evt.onclick = function () {
            _this.destroy();
          };
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return modal;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      (0, _utils.unlockScroll)();
      var modal = document.querySelector('.ask-modal');
      if (modal) {
        modal.remove();
      }
    }
  }, {
    key: "show",
    value: function show() {
      (0, _utils.lockScroll)();
      var elem = this.create();
      document.body.appendChild(elem);
      document.addEventListener('keydown', function (e) {
        var isEnter = e.key === 'Enter' || e.keyCode === 13;
        var modal = document.querySelector('.ask-modal');
        if (isEnter && modal) {
          var modalIsVisible = window.getComputedStyle(modal).getPropertyValue('display') !== 'none';
          if (modalIsVisible) {
            e.preventDefault();
            var buttons = _toConsumableArray(modal.querySelectorAll('button'));
            buttons[1].click();
          }
        }
      });
    }
  }]);
}();

},{"../general/utils":33}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ContentSearch = exports["default"] = /*#__PURE__*/function () {
  function ContentSearch(input) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, ContentSearch);
    this.input = input;
    this.holder = input.parentNode.closest('[data-content-search]');
    this.drop = this.holder.querySelector('.search-drop');
    this.container = this.holder.querySelector('.search-drop__container');
    this.list = this.holder.querySelector('.search-drop__list');
    this.ajaxCall = settings.ajaxCall || null;
    this.renderMethod = settings.renderMethod || null;
    this.timeout = null;
  }

  /**
   * Methods
   */
  return _createClass(ContentSearch, [{
    key: "showDrop",
    value: function showDrop() {
      var _this = this;
      this.drop.style.display = 'block';
      setTimeout(function () {
        _this.container.style.opacity = 1;
        _this.container.style.transform = 'translateY(0)';
      }, 5);
    }
  }, {
    key: "hideDrop",
    value: function hideDrop() {
      var _this2 = this;
      this.container.style.opacity = 0;
      this.container.style.transform = 'translateY(12px)';
      (0, _utils.removeClasses)(this.drop, _constants.__EMPTY, _constants.__FILLED, _constants.__LOADING);
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
      setTimeout(function () {
        _this2.drop.style.display = 'none';
      }, (0, _utils.getTransitionTime)(this.container));
    }
  }, {
    key: "emptyResolve",
    value: function emptyResolve() {
      (0, _utils.removeClasses)(this.drop, _constants.__FILLED, _constants.__LOADING);
      (0, _utils.addClasses)(this.drop, _constants.__EMPTY);
      this.clearResults();
    }
  }, {
    key: "filledResolve",
    value: function filledResolve() {
      (0, _utils.removeClasses)(this.drop, _constants.__EMPTY, _constants.__LOADING);
      (0, _utils.addClasses)(this.drop, _constants.__FILLED);
    }
  }, {
    key: "appendResultsHTML",
    value: function appendResultsHTML(html) {
      this.list.innerHTML = html;
    }
  }, {
    key: "clearResults",
    value: function clearResults() {
      this.list.innerHTML = '';
    }

    /**
     * Fetch
     */
  }, {
    key: "fetchData",
    value: function fetchData() {
      var _this3 = this;
      var data = this.ajaxCall();
      if (data) {
        var resultHTML = this.renderMethod(data);
        if (resultHTML) {
          this.timeout = setTimeout(function () {
            _this3.appendResultsHTML(resultHTML);
            _this3.filledResolve();
          }, 1500);
        }
      } else {
        this.timeout = setTimeout(function () {
          _this3.emptyResolve();
        }, 1000);
      }
    }

    /**
     * Attach Events
     */
  }, {
    key: "attachToggleDropVisibility",
    value: function attachToggleDropVisibility() {
      var _this4 = this;
      this.input.addEventListener('focus', function () {
        _this4.showDrop();
      });
      this.input.addEventListener('blur', function () {
        _this4.hideDrop();
      });
      document.addEventListener('click', function (e) {
        if (!e.target.closest('[data-content-search]')) {
          _this4.hideDrop();
        }
      });
    }
  }, {
    key: "attachInputEvents",
    value: function attachInputEvents() {
      var _this5 = this;
      this.input.addEventListener('input', function () {
        _this5.clearResults();
        var val = _this5.input.value;
        if (!val.length) {
          (0, _utils.removeClasses)(_this5.drop, _constants.__EMPTY, _constants.__FILLED, _constants.__LOADING);
          clearTimeout(_this5.timeout);
        } else {
          (0, _utils.addClasses)(_this5.drop, _constants.__LOADING);
          (0, _utils.removeClasses)(_this5.drop, _constants.__EMPTY, _constants.__FILLED);
          if (_this5.timeout) {
            clearTimeout(_this5.timeout);
          }
          _this5.fetchData();
        }
      });
    }
  }, {
    key: "_initial_state",
    value: function _initial_state() {
      this.drop.style.display = 'none';
      this.container.style.opacity = 0;
      this.container.style.transform = 'translateY(12px)';
    }
  }, {
    key: "init",
    value: function init() {
      this._initial_state();
      this.attachToggleDropVisibility();
      this.attachInputEvents();
    }
  }]);
}();

},{"../general/constants":28,"../general/utils":33}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
* Swiper component for customer relationship management interface.
* Allows navigation through cards representing different entities or data points.
*
* @class
* @param {Object} settings - Configuration settings for the swiper component.
* @param {HTMLElement} initialCard - The initial card to be displayed on swiper load.
*/
var CrmSwiper = exports["default"] = /*#__PURE__*/function () {
  function CrmSwiper(settings, initialCard) {
    _classCallCheck(this, CrmSwiper);
    this.settings = {
      startEvents: settings.startEvents || ['mousedown', 'touchstart', 'click'],
      endEvents: settings.endEvents || ['mouseup', 'touchend'],
      moveEvents: settings.moveEvents || ['mousemove', 'touchmove'],
      maxPrevCards: settings.maxPrevCards || 50,
      maxNextCards: settings.maxNextCards || 50,
      loadMoreAmount: settings.loadMoreAmount || 50,
      autoLoad: settings.autoLoad || false
    };
    this.initialized = false;
    this.opened = false;
    this.initialCard = initialCard || document.querySelectorAll('#grid_view .whale-card')[0];
    this.anchorCard = null;
    this.anchorCardIndex = undefined;
    this.activeCard = null;
    this.lastActive = undefined;
    this.nextCards = [];
    this.prevCards = [];
    this.storage = [];
    this.cardClass = 'whale-card';
    this.swiperClass = 'swiper__card';
    this.stashClass = '--stash';
    this.highlightClass = '--highlight';
    this.emptyClass = '--empty';
    this.keyEvents = ['ArrowLeft', 'ArrowRight', 'Escape'];
    this.modal = document.querySelector('.swiper');
    this.holder = document.querySelector('.swiper__cards');
    this.stash = document.querySelector('.swiper__stash');
    this.grid = document.querySelector('.tb-grid');
    this.evtNextArr = _toConsumableArray(document.querySelectorAll('[data-swiper-evt="nextCard"]'));
    this.evtPrevArr = _toConsumableArray(document.querySelectorAll('[data-swiper-evt="prevCard"]'));
    this.evtClose = _toConsumableArray(document.querySelectorAll('[data-swiper-evt="close"]'));
    this.evtLoadMore = _toConsumableArray(document.querySelectorAll('[data-swiper-evt="loadMore"]'));
  }

  /**
   * Settings basic methods
   * 
   * @anchor {HTMLElement}
   * @cards {Array}
   * @initialCard {HTMLElement}
   * @index {Number}
   */
  return _createClass(CrmSwiper, [{
    key: "getGridCards",
    get: function get() {
      if (this.grid) {
        return _toConsumableArray(this.grid.querySelectorAll('.whale-card'));
      }
    }
  }, {
    key: "getAllSwiperCards",
    get: function get() {
      if (this.holder) {
        return _toConsumableArray(this.holder.querySelectorAll('.whale-card'));
      }
    }
  }, {
    key: "getLastActive",
    get: function get() {
      return this.holder.querySelectorAll('.swiper__card').length ? _toConsumableArray(this.holder.querySelectorAll('.swiper__card')).at(-1) : _toConsumableArray(this.stash.querySelectorAll('.swiper__card')).at(-1);
    }
  }, {
    key: "addCardsToSwiper",
    value: function addCardsToSwiper(cardsArr) {
      var _this = this;
      if (Array.isArray(cardsArr)) {
        var _iterator = _createForOfIteratorHelper(cardsArr),
          _step;
        try {
          var _loop = function _loop() {
            var card = _step.value;
            if (card) {
              card.classList.add(_this.swiperClass);
              card.classList.add(_this.stashClass);
              _this.holder.appendChild(card);
              setTimeout(function () {
                card.classList.remove(_this.stashClass);
              }, 1);
            } else {
              throw new Error('JS : Add Cards To Swiper Error');
            }
          };
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }
  }, {
    key: "addCardsToStash",
    value: function addCardsToStash(cardsArr) {
      if (Array.isArray(cardsArr)) {
        var _iterator2 = _createForOfIteratorHelper(cardsArr),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var card = _step2.value;
            if (card) {
              card.classList.add(this.swiperClass);
              card.classList.add(this.stashClass);
              this.stash.appendChild(card);
            } else {
              throw new Error('JS : Add Cards To Stash Error');
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }
  }, {
    key: "setAnchor",
    value: function setAnchor(index) {
      this.anchorCard = this.getGridCards[index] || undefined;
    }
  }, {
    key: "findCardIndexInGrid",
    value: function findCardIndexInGrid(card) {
      return this.getGridCards.indexOf(card);
    }

    /**
     * Initial setup
     * Set anchor
     * Add cards to stash
     * Add cards to swiper 
     * 
     * Open {@link CrmSwiper#open}
     * Attach events {@link CrmSwiper#attachEvents}
     */
  }, {
    key: "initialSetup",
    value: function initialSetup() {
      if (this.initialCard) {
        this.setAnchor(this.findCardIndexInGrid(this.initialCard) + this.settings.maxNextCards + 1);
        var next = this.initialCard.nextElementSibling;
        var prev = this.initialCard.previousElementSibling;
        while (next && this.nextCards.length < this.settings.maxNextCards) {
          this.nextCards = [].concat(_toConsumableArray(this.nextCards), [next]);
          next = next.nextElementSibling;
        }
        this.nextCards = [this.initialCard].concat(_toConsumableArray(this.nextCards));
        while (prev && this.prevCards.length < this.settings.maxPrevCards) {
          this.prevCards = [].concat(_toConsumableArray(this.prevCards), [prev]);
          prev = prev.previousElementSibling;
        }
        try {
          this.addCardsToStash(this.prevCards.reverse());
          this.addCardsToSwiper(this.nextCards.reverse());
          this.open();
          this.attachEvents();
        } catch (err) {
          throw new Error("JS Initial Swiper Setup Error: ".concat(err.message));
        }
      }
    }

    /**
     * Class methods
     * Initializes swiper
     * 
     * @initial {HTMLElement}
     */
  }, {
    key: "init",
    value: function init() {
      if (this.modal && this.getGridCards.length && this.initialCard) {
        this.initialized = true;
        this.initialSetup();
      }
    }
  }, {
    key: "next",
    value: function next() {
      var _this2 = this;
      var card = _toConsumableArray(this.holder.querySelectorAll('.whale-card')).at(-1);
      if (!card) return;
      this.nextCards = this.nextCards.filter(function (c) {
        return c !== card;
      });
      this.prevCards = [].concat(_toConsumableArray(this.prevCards), [card]);
      card.classList.add(this.stashClass);
      this.checkCardsAvailability();
      setTimeout(function () {
        _this2.stash.appendChild(card);
      }, (0, _utils.getTransitionTime)(card));
    }
  }, {
    key: "prev",
    value: function prev() {
      var _this3 = this;
      var card = _toConsumableArray(this.stash.querySelectorAll('.whale-card')).at(-1);
      if (!card) return;
      this.prevCards = this.prevCards.filter(function (c) {
        return c !== card;
      });
      this.nextCards = [].concat(_toConsumableArray(this.nextCards), [card]);
      this.holder.appendChild(card);
      this.checkCardsAvailability();
      setTimeout(function () {
        card.classList.remove(_this3.stashClass);
      }, 1);
    }
  }, {
    key: "open",
    value: function open() {
      var _this4 = this;
      if (this.initialized) {
        this.opened = true;
        this.modal.style.display = 'block';
        setTimeout(function () {
          _this4.modal.classList.add(_constants.IS_VISIBLE);
        }, 1);
      }
    }
  }, {
    key: "close",
    value: function close() {
      var _this5 = this;
      if (this.initialized) {
        this.opened = false;
        this.modal.classList.remove(_constants.IS_VISIBLE);
        this.modal.classList.remove(this.emptyClass);
        this.destroy();
        setTimeout(function () {
          _this5.modal.style.display = 'none';
        }, (0, _utils.getTransitionTime)(this.modal));
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.returnCards();
      this.highlightLast();
      this.initialized = false;
      this.nextCards = [];
      this.prevCards = [];
      this.initialCard = null;
      this.anchorCard = undefined;
      this.anchorCardIndex = undefined;
    }
  }, {
    key: "returnCards",
    value: function returnCards() {
      this.lastActive = this.getLastActive;
      var cards = [].concat(_toConsumableArray(this.prevCards), _toConsumableArray(this.nextCards.reverse()));
      if (!cards.length) return;
      if (this.anchorCard !== undefined) {
        var _iterator3 = _createForOfIteratorHelper(cards),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var card = _step3.value;
            card.classList.remove(this.swiperClass, this.stashClass);
            this.grid.insertBefore(card, this.anchorCard);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      } else {
        var _iterator4 = _createForOfIteratorHelper(cards),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _card = _step4.value;
            _card.classList.remove(this.swiperClass, this.stashClass);
            this.grid.appendChild(_card);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }
  }, {
    key: "highlightLast",
    value: function highlightLast() {
      var _this6 = this;
      if (!this.lastActive) return;
      var distance = this.lastActive.getBoundingClientRect().top + window.scrollY;
      this.lastActive.classList.add(this.highlightClass);
      this.grid.classList.add(this.highlightClass);
      window.scrollTo({
        top: distance - 200
      });
      setTimeout(function () {
        _this6.lastActive.classList.remove(_this6.highlightClass);
        _this6.grid.classList.remove(_this6.highlightClass);
      }, (0, _utils.getTransitionTime)(this.lastActive) * 4.9);
    }
  }, {
    key: "checkCardsAvailability",
    value: function checkCardsAvailability() {
      var _this7 = this;
      var cards = _toConsumableArray(this.holder.querySelectorAll('.whale-card'));
      if (cards.length == 1) {
        setTimeout(function () {
          _this7.close();
        }, 500);
      }
    }
  }, {
    key: "cardsAvailabilityResolve",
    value: function cardsAvailabilityResolve() {
      return;
      var hasMoreCards = this.nextCards.length > 0;
      if (!hasMoreCards) {
        this.modal.classList.add(this.emptyClass);
      } else {
        this.modal.classList.remove(this.emptyClass);
      }
      return hasMoreCards;
    }
  }, {
    key: "loadMore",
    value: function loadMore() {
      if (!this.anchorCard) return;
      this.initialCard = this.anchorCard;
      this.setAnchor(this.findCardIndexInGrid(this.initialCard) + this.settings.maxNextCards + 1);
      var next = this.initialCard.nextElementSibling;
      while (next && this.nextCards.length < this.settings.maxNextCards) {
        this.nextCards = [].concat(_toConsumableArray(this.nextCards), [next]);
      }
      this.nextCards = [this.initialCard].concat(_toConsumableArray(this.nextCards));
      try {
        this.addCardsToSwiper(this.nextCards.reverse());
      } catch (err) {
        throw new Error("JS Load More Swiper Setup Error: ".concat(err.message));
      }
    }

    /**
     * Attach events
     * 
     * @start {mousedown, touchstart, click}
     * @end {mouseup, touchend}
     * @move {mousedown, touchstart, click}
     * @click {data-evt="nextCard"}
     * @keydown {ArrowRight}
     * @keydown {ArrowLeft}
     * @keydown {Escape}
     */
  }, {
    key: "attachEvents",
    value: function attachEvents() {
      var _this8 = this;
      var _iterator5 = _createForOfIteratorHelper(this.evtNextArr),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var element = _step5.value;
          element.onclick = function () {
            _this8.next();
          };
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      var _iterator6 = _createForOfIteratorHelper(this.evtPrevArr),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _element = _step6.value;
          _element.onclick = function () {
            _this8.prev();
          };
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      var _iterator7 = _createForOfIteratorHelper(this.evtClose),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _element2 = _step7.value;
          _element2.onclick = function () {
            _this8.close();
          };
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      var _iterator8 = _createForOfIteratorHelper(this.evtLoadMore),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _element3 = _step8.value;
          _element3.onclick = function () {
            _this8.loadMore();
          };
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      document.addEventListener('keydown', function (e) {
        if (e.key === 'ArrowRight') {
          _this8.evtNextArr[0].click();
        }
        if (e.key === 'ArrowLeft') {
          _this8.evtPrevArr[0].click();
        }
        if (e.key === 'Escape') {
          e.preventDefault();
          _this8.close();
        }
      });
    }
  }]);
}();

},{"../general/constants":28,"../general/utils":33}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = require("../../modules/general/utils");
var _constants = require("../../modules/general/constants");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var LockPin = exports["default"] = /*#__PURE__*/function () {
  function LockPin() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, LockPin);
    this.code = settings.code || 1234;
    this.callback = settings.callback || undefined;
    this.maxLength = this.code.toString().length;
    this.unlockTime = settings.unlockTime || 600;
    this.allowClose = settings.allowClose || false;
    this.currentPin = [];
    this.isLocked = false;

    // Handlers storage for removing event listeners later
    this.buttonHandlers = new Map();
    this.closeHandler = null;
    this.submitHandler = null;
    this.keydownHandler = null;
  }

  /**
   * Utils
   */
  return _createClass(LockPin, [{
    key: "renderHTML",
    value: function renderHTML() {
      var html = "\n    <div class=\"pin-lock\">\n      <div class=\"pin-lock__wrapper\">\n        <div class=\"pin-lock__holder\">\n          <div class=\"pin-lock__title-group\">\n            <h3>Enter PIN Code</h3>\n            <span>This page is locked with pin.</span>\n          </div>\n          <div data-pin-output class=\"pin-lock__output\">\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n          <div class=\"pin-lock__btn-grid\">\n            <button>1</button>\n            <button>2</button>\n            <button>3</button>\n            <button>4</button>\n            <button>5</button>\n            <button>6</button>\n            <button>7</button>\n            <button>8</button>\n            <button>9</button>\n            <button data-pin-evt=\"close\">Close</button>\n            <button>0</button>\n            <button data-pin-evt=\"submit\">Enter</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    ";
      return html;
    }
  }, {
    key: "appendScreen",
    value: function appendScreen() {
      document.body.insertAdjacentHTML('beforeend', this.renderHTML());
    }
  }, {
    key: "setElements",
    value: function setElements() {
      this.holder = document.querySelector('.pin-lock');
      this.btnArr = _toConsumableArray(this.holder.querySelectorAll('button'));
      this.output = this.holder.querySelector('[data-pin-output]');
      this.outputSpanArr = _toConsumableArray(this.output.querySelectorAll('span'));
      this.evtClose = this.holder.querySelector('[data-pin-evt="close"]');
      this.evtSubmit = this.holder.querySelector('[data-pin-evt="submit"]');
      this.btnArrFiltered = this.btnArr.filter(function (btn) {
        return !btn.dataset.pinEvt;
      });
    }

    /**
     * Methods
     */
  }, {
    key: "unlock",
    value: function unlock() {
      var _this = this;
      (0, _utils.unlockScroll)();
      this.output.classList.remove(_constants.__FALSE);
      this.output.classList.add(_constants.__TRUE);
      setTimeout(function () {
        _this.holder.classList.add(_constants.__FADE);
        setTimeout(function () {
          _this.destroy();
        }, (0, _utils.getTransitionTime)(_this.holder));
      }, this.unlockTime);
      if (this.callback !== undefined) {
        this.callback();
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.currentPin = [];
      this.update();
      this.isLocked = false;
      (0, _utils.removeClasses)(this.output, _constants.__FALSE, _constants.__TRUE);
    }
  }, {
    key: "update",
    value: function update() {
      var pin = this.currentPin;
      var length = pin.length;
      if (length === 0) {
        this.outputSpanArr.forEach(function (span) {
          span.innerHTML = '';
        });
      } else if (length <= this.maxLength) {
        this.outputSpanArr.forEach(function (span, i) {
          if (i < length) {
            span.innerHTML = pin[i];
          } else {
            span.innerHTML = '';
          }
        });
      }
      if (length === this.maxLength) {
        this.submit();
      }
    }
  }, {
    key: "submit",
    value: function submit() {
      var _this2 = this;
      if (this.currentPin.length > 0) {
        this.isLocked = true;
        if (this.currentPin.join('') == this.code) {
          this.unlock();
        } else {
          this.output.classList.add(_constants.__FALSE);
          setTimeout(function () {
            _this2.reset();
          }, 700);
        }
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      // Remove event listeners
      this.removeEventListeners();

      // Remove the holder from the DOM
      if (this.holder) {
        this.holder.remove();
      }
    }

    /**
     * Attach Events
     */
  }, {
    key: "attachButtonClick",
    value: function attachButtonClick() {
      var _this3 = this;
      var _iterator = _createForOfIteratorHelper(this.btnArrFiltered),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var btn = _step.value;
          var handler = function handler(e) {
            if (!_this3.isLocked) {
              var num = Number(e.target.innerHTML);
              _this3.currentPin.push(num);
              _this3.update();
            }
          };
          btn.addEventListener('click', handler);
          this.buttonHandlers.set(btn, handler);
        }

        // Close button handler
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (this.evtClose) {
        this.closeHandler = function () {
          if (!_this3.isLocked) {
            _this3.destroy();
            (0, _utils.unlockScroll)();
          }
        };
        this.evtClose.addEventListener('click', this.closeHandler);
      }

      // Submit button handler
      if (this.evtSubmit) {
        this.submitHandler = function () {
          if (!_this3.isLocked) {
            _this3.submit();
          }
        };
        this.evtSubmit.addEventListener('click', this.submitHandler);
      }
    }
  }, {
    key: "attachDocEvents",
    value: function attachDocEvents() {
      var _this4 = this;
      this.keydownHandler = function (e) {
        if (_this4.holder) {
          if (!_this4.isLocked) {
            // e.preventDefault(); // Be cautious with preventDefault
            var key = e.key;
            if (key === 'Escape' && _this4.allowClose) {
              _this4.destroy();
              (0, _utils.unlockScroll)();
              return;
            }
            if (key === 'Backspace') {
              if (_this4.currentPin.length > 0) {
                _this4.currentPin.pop();
                _this4.update();
              }
            } else if (key === 'Enter') {
              _this4.submit();
            } else if (key >= '0' && key <= '9') {
              if (_this4.currentPin.length < _this4.maxLength) {
                _this4.currentPin.push(Number(key));
                _this4.update();
              }
            }
          }
        }
      };
      document.addEventListener('keydown', this.keydownHandler);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      // Remove button click handlers
      var _iterator2 = _createForOfIteratorHelper(this.buttonHandlers),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = _slicedToArray(_step2.value, 2),
            btn = _step2$value[0],
            handler = _step2$value[1];
          btn.removeEventListener('click', handler);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      this.buttonHandlers.clear();

      // Remove close and submit handlers
      if (this.evtClose && this.closeHandler) {
        this.evtClose.removeEventListener('click', this.closeHandler);
        this.closeHandler = null;
      }
      if (this.evtSubmit && this.submitHandler) {
        this.evtSubmit.removeEventListener('click', this.submitHandler);
        this.submitHandler = null;
      }

      // Remove document keydown handler
      if (this.keydownHandler) {
        document.removeEventListener('keydown', this.keydownHandler);
        this.keydownHandler = null;
      }
    }
  }, {
    key: "push",
    value: function push() {
      (0, _utils.lockScroll)();
      this.appendScreen();
      this.setElements();
      this.attachButtonClick();
      this.attachDocEvents();
    }
  }]);
}();

},{"../../modules/general/constants":28,"../../modules/general/utils":33}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = require("../general/utils");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PageMsg = exports["default"] = /*#__PURE__*/function () {
  function PageMsg() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, PageMsg);
    this.heading = settings.heading || 'Something went wrong';
    this.msg = settings.msg || 'Undefined message';
    this.timeout = settings.timeout || 5000;
    this.keep = settings.keep || false;
    this.callback = settings.callback || null;
    this.hideCallback = settings.hideCallback || null;
    this.type = settings.type || '';
    this.id = settings.id || null;
    this.zIndex = settings.zIndex || null;
    this.msgElem = null;
    this.closeBtn = null;
    this.init();
  }
  return _createClass(PageMsg, [{
    key: "hide",
    value: function hide() {
      var _this = this;
      this.msgElem.style.transform = 'translateY(calc(100% + 20px))';
      this.msgElem.style.opacity = 0;
      setTimeout(function () {
        _this.msgElem.remove();
      }, this.getTransitionTime(this.msgElem));
      if (this.hideCallback) {
        this.hideCallback();
      }
    }
  }, {
    key: "getTransitionTime",
    value: function getTransitionTime(element) {
      // Предполагаем, что эта функция определена где-то в глобальной области видимости
      return (0, _utils.getTransitionTime)(element);
    }
  }, {
    key: "init",
    value: function init() {
      var _this2 = this;
      var html = "\n      <h4>".concat(this.heading, "</h4>\n      <p>").concat(this.msg, "</p>\n    ");
      this.msgElem = (0, _utils.createElem)('div', {
        className: "page-msg ".concat(this.type),
        innerHTML: html,
        style: {
          'transform': 'translateY(calc(100% + 20px))',
          'opacity': 0
        }
      });
      this.closeBtn = (0, _utils.createElem)('button', {});
      this.closeBtn.onclick = function () {
        return _this2.hide();
      };
      this.msgElem.prepend(this.closeBtn);
      document.body.appendChild(this.msgElem);
      setTimeout(function () {
        _this2.msgElem.style.transform = 'translateY(0)';
        _this2.msgElem.style.opacity = 1;
      }, 10);
      if (!this.keep) {
        setTimeout(function () {
          if (document.body.contains(_this2.msgElem)) {
            _this2.hide();
          }
        }, this.timeout);
      }
      if (this.callback) {
        this.callback();
      }
      if (this.zIndex) {
        this.msgElem.style.zIndex = this.zIndex;
      }
    }
  }]);
}();

},{"../general/utils":33}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = require("../../modules/general/utils");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PopupBackdrop = exports["default"] = /*#__PURE__*/function () {
  function PopupBackdrop() {
    var _this = this;
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, PopupBackdrop);
    this.el = (0, _utils.createElem)('div', {
      className: 'page-backdrop'
    });
    this.callback = settings.callback || null;
    this.instant = settings.instant || false;
    this.zIndex = settings.zIndex;
    this.show();
    this.el.addEventListener('click', function (e) {
      if (e.target === _this.el) {
        _this.hide();
      }
      if (_this.callback) {
        _this.callback();
      }
    });
  }
  return _createClass(PopupBackdrop, [{
    key: "show",
    value: function show() {
      var _this2 = this;
      if (this.instant) {
        this.el.classList.add('--instant');
      }
      if (this.zIndex) {
        this.el.style.zIndex = this.zIndex;
      }
      document.body.appendChild(this.el);
      this.el.style.display = 'block';
      setTimeout(function () {
        _this2.el.style.opacity = '1';
      }, 1);
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this3 = this;
      this.el.style.opacity = '0';
      setTimeout(function () {
        _this3.el.style.display = 'none';
        _this3.el.remove();
      }, (0, _utils.getTransitionTime)(this.el));
    }
  }]);
}();

},{"../../modules/general/utils":33}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAddModal = initAddModal;
var _pageMsg = _interopRequireDefault(require("../dynamic/page-msg"));
var _popupBackdrop = _interopRequireDefault(require("../dynamic/popup-backdrop"));
var _constants = require("../general/constants");
var _utils = require("../general/utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var AddModal = /*#__PURE__*/function () {
  function AddModal() {
    _classCallCheck(this, AddModal);
    this.rootEl = document.querySelector('.add-popup');
    if (!this.rootEl) return;
    this.heading = this.rootEl.querySelector('[data-add-heading]');
    this.form = this.rootEl.querySelector('form');
    this.active = false;
    this.whaleId = undefined;
    this.whaleName = undefined;
    window.addModal = this;
    this.init();
  }
  return _createClass(AddModal, [{
    key: "getWhaleId",
    get: function get() {
      return this.whaleId;
    }
  }, {
    key: "getWhaleName",
    get: function get() {
      return this.whaleName;
    }
  }, {
    key: "submitVisit",
    value: function submitVisit() {
      var id = this.getWhaleId;
      var whaleName = this.getWhaleName;
      var frm_data = $('#addVisit').serialize();
      if (id !== undefined) {
        $.ajax({
          url: '/admin/json/whale-visit?type=1&id=' + id,
          type: 'POST',
          data: frm_data,
          success: function success(data) {
            var r = $.parseJSON(data);
            if (!r.error) {
              new _pageMsg["default"]({
                type: 'success',
                heading: "Success!",
                msg: "New visit for <b>".concat(whaleName, "</b> added.")
              });
            } else {
              new _pageMsg["default"]({
                type: 'error',
                heading: "Error!",
                msg: r.msg
              });
            }
          }
        });
      }
    }
  }, {
    key: "submitAppointment",
    value: function submitAppointment() {
      var id = this.getWhaleId;
      var whaleName = this.getWhaleName;
      var frm_data = $('#addAppointment').serialize();
      if (id !== undefined) {
        $.ajax({
          url: '/admin/json/whale-visit?type=2&id=' + id,
          type: 'POST',
          data: frm_data,
          success: function success(data) {
            var r = $.parseJSON(data);
            if (!r.error) {
              new _pageMsg["default"]({
                type: 'success',
                heading: "Success!",
                msg: "New appointment for <b>".concat(whaleName, "</b> added.")
              });
            } else {
              new _pageMsg["default"]({
                type: 'error',
                heading: "Error!",
                msg: r.msg
              });
            }
          }
        });
      }
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;
      if (!this.active) {
        window.backdrop = new _popupBackdrop["default"]({
          callback: function callback() {
            _this.close();
          }
        });
        this.rootEl.classList.add(_constants.__VISIBLE);
        this.active = true;
      }
    }
  }, {
    key: "close",
    value: function close() {
      if (this.active) {
        this.rootEl.classList.remove(_constants.__VISIBLE);
        this.active = false;
        var backdrop = window.backdrop;
        if (backdrop) backdrop.hide();
      }
    }
  }, {
    key: "setup",
    value: function setup(card, type) {
      var _this2 = this;
      if (!card) return;
      var name = card.querySelector('.whale-card__name').textContent;
      var id = type == 'visit' ? 'addVisit' : 'addAppointment';
      var whaleId = card.dataset.id.replace(/\D/g, '');
      this.whaleId = whaleId;
      this.whaleName = name;
      this.heading.innerHTML = "\n    New ".concat(type, ":\n    <span>").concat(name, "</span>\n    ");
      this.form.id = id;
      this.form.onsubmit = function (e) {
        e.preventDefault();
        _this2.close();
        if (type == 'visit') {
          _this2.submitVisit();
        } else {
          _this2.submitAppointment();
        }
      };
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this3 = this;
      // Add visit
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (target.closest('[data-add-evt="addVisit"]')) {
          var card = target.closest('.whale-card');
          if (!card) throw new Error('Whale Card not found');
          _this3.open();
          _this3.setup(card, 'visit');
        }
      });

      // Add appointment
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (target.closest('[data-add-evt="addAppointment"]')) {
          var card = target.closest('.whale-card');
          if (!card) throw new Error('Whale Card not found');
          _this3.open();
          _this3.setup(card, 'appointment');
        }
      });

      // Close
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (target.closest('[data-add-evt="cancel"]')) {
          e.preventDefault();
          _this3.close();
        }
      });
    }
  }, {
    key: "init",
    value: function init() {
      if (this.rootEl) {
        this.bindEvents();
      }
    }
  }]);
}();
function initAddModal() {
  new AddModal();
}

},{"../dynamic/page-msg":11,"../dynamic/popup-backdrop":12,"../general/constants":28,"../general/utils":33}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initEditModal = initEditModal;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var EditModal = /*#__PURE__*/function () {
  function EditModal() {
    _classCallCheck(this, EditModal);
    _defineProperty(this, "initFn", {
      bindToggle: function bindToggle() {
        var _this = this;
        var closeEvt = document.querySelectorAll('[data-evt="closeEditModal"]');
        var openEvt = document.querySelectorAll('[data-evt="openEditModal"]');
        closeEvt.forEach(function (btn) {
          btn.onclick = function () {
            _this.close();
          };
        });
        openEvt.forEach(function (btn) {
          btn.onclick = function () {
            _this.open();
          };
        });
        document.addEventListener('keydown', function (e) {
          if (e.key === 'Escape' || e.keyCode === 27) {
            var modal = document.querySelector('.edit-modal');
            if (modal) {
              modal.classList.remove(_constants.IS_VISIBLE);
              setTimeout(function () {
                modal.style.display = 'none';
              }, (0, _utils.getTransitionTime)(modal));
            }
          }
        });
      }
    });
    this.init();
  }
  return _createClass(EditModal, [{
    key: "init",
    value: function init() {
      var _this2 = this;
      if (document.querySelector('.edit-modal')) {
        Object.values(this.initFn).forEach(function (fn) {
          if (typeof fn === 'function') {
            try {
              fn.call(_this2);
            } catch (err) {
              console.log("edit modal init fn err : ".concat(err.message));
            }
          }
        });
      }
    }
  }, {
    key: "open",
    value: function open() {
      (0, _utils.lockScroll)();
      var modal = document.querySelector('.edit-modal');
      if (modal) {
        modal.style.display = 'block';
        setTimeout(function () {
          modal.classList.add(_constants.IS_VISIBLE);
        }, 1);
      }
    }
  }, {
    key: "close",
    value: function close() {
      (0, _utils.unlockScroll)();
      var modal = document.querySelector('.edit-modal');
      if (modal) {
        modal.classList.remove(_constants.IS_VISIBLE);
        setTimeout(function () {
          modal.style.display = 'none';
        }, (0, _utils.getTransitionTime)(modal));
      }
    }
  }]);
}();
function initEditModal() {
  new EditModal();
}

},{"../general/constants":28,"../general/utils":33}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initFingerModal = initFingerModal;
var _utils = require("../general/utils");
var _popupBackdrop = _interopRequireDefault(require("../dynamic/popup-backdrop"));
var _constants = require("../general/constants");
var _pageMsg = _interopRequireDefault(require("../dynamic/page-msg"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var FingerModal = /*#__PURE__*/function () {
  function FingerModal() {
    _classCallCheck(this, FingerModal);
    this.rootEl = document.querySelector('.finger-modal');
    if (!this.rootEl) return;
    this.inputArr = _toConsumableArray(this.rootEl.querySelectorAll('input.finger-input'));
    this.fingerPathArr = _toConsumableArray(this.rootEl.querySelectorAll('.finger-path'));
    this.modalWhaleName = this.rootEl.querySelector('[data-finger-whale]');
    this.whaleToSave = undefined;
    window.fingerModal = this;
    this.init();
  }

  // Methods
  return _createClass(FingerModal, [{
    key: "findRelativeInput",
    value: function findRelativeInput(path) {
      var valid = path ? path.id ? true : false : false;
      if (!valid) throw new Error('class FingerModal. findRelativeInput : path not found');
      var fingerCode = path.id.replace(/\D/g, '');
      var input = this.inputArr.find(function (input) {
        return input.dataset.fingerInput == fingerCode;
      });
      return input || this.inputArr[0];
    }
  }, {
    key: "findRelativePath",
    value: function findRelativePath(input) {
      var valid = input && input.dataset.fingerInput;
      if (!valid) throw new Error('class FingerModal. findRelativePath : input not found or invalid');
      var fingerCode = input.dataset.fingerInput;
      var path = this.fingerPathArr.find(function (path) {
        return path.id.replace(/\D/g, '') === fingerCode;
      });
      return path || null;
    }
  }, {
    key: "setupModal",
    value: function setupModal(whale) {
      if (!whale) return;
      this.whaleToSave = whale;
      var name = whale.name;
      var fingers = whale.fingers;
      if (this.modalWhaleName) {
        this.modalWhaleName.textContent = name;
      }
      for (var finger in fingers) {
        var key = finger;
        var value = fingers[key];
        var input = document.querySelector("input[data-finger-input=\"".concat(key, "\"]"));
        if (input) {
          input.value = value || '';
        }
      }
      this.observeValues();
    }
  }, {
    key: "save",
    value: function save() {
      if (!this.whaleToSave) return;
      var fingers = {};
      var _iterator = _createForOfIteratorHelper(this.inputArr),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var input = _step.value;
          var key = input.dataset.fingerInput;
          var value = input.value;
          fingers[key] = value;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.whaleToSave.fingers = fingers;
      $.ajax({
        url: '/admin/json/save-whale-fingers',
        type: 'POST',
        data: {
          id: this.whaleToSave.id,
          fingers: fingers
        },
        success: function success(data) {
          console.log('fingers were saved');
        }
      });
      this.hide();
    }

    // Visibility
  }, {
    key: "fetchWhale",
    value: function () {
      var _fetchWhale = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(whaleId) {
        var response, data;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              console.log("fetching whales ".concat(whaleId, " finger data"));
              _context.next = 4;
              return fetch("/admin/json/whale-fingers/".concat(whaleId));
            case 4:
              response = _context.sent;
              if (response.ok) {
                _context.next = 7;
                break;
              }
              throw new Error('Network response was not ok');
            case 7:
              _context.next = 9;
              return response.json();
            case 9:
              data = _context.sent;
              if (!data.error) {
                _context.next = 12;
                break;
              }
              throw new Error('Error fetching whale data');
            case 12:
              return _context.abrupt("return", data.whale_data);
            case 15:
              _context.prev = 15;
              _context.t0 = _context["catch"](0);
              console.error('There was a problem with the fetch operation:', _context.t0);
            case 18:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 15]]);
      }));
      function fetchWhale(_x) {
        return _fetchWhale.apply(this, arguments);
      }
      return fetchWhale;
    }()
  }, {
    key: "show",
    value: function () {
      var _show = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(whaleId) {
        var _this = this;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              (0, _utils.lockScroll)();
              this.rootEl.style.display = 'block';
              this.rootEl.classList.add(_constants.__LOADING);
              window.FingerBackdrop = new _popupBackdrop["default"]({
                callback: function callback() {
                  _this.hide();
                }
              });
              setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                var whale;
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      _this.rootEl.classList.add(_constants.__VISIBLE);
                      _context2.prev = 1;
                      _context2.next = 4;
                      return _this.fetchWhale(whaleId);
                    case 4:
                      whale = _context2.sent;
                      if (whale) {
                        _context2.next = 8;
                        break;
                      }
                      new _pageMsg["default"]({
                        type: 'error',
                        heading: 'No Whale',
                        msg: 'Whale ID not found'
                      });
                      throw new Error('Whale not found');
                    case 8:
                      _this.setupModal(whale);
                      _this.rootEl.classList.remove(_constants.__LOADING);
                      _context2.next = 16;
                      break;
                    case 12:
                      _context2.prev = 12;
                      _context2.t0 = _context2["catch"](1);
                      console.error('Fetch data failed', _context2.t0);
                      _this.hide();
                    case 16:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2, null, [[1, 12]]);
              })), 5);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function show(_x2) {
        return _show.apply(this, arguments);
      }
      return show;
    }()
  }, {
    key: "hide",
    value: function hide() {
      var _this2 = this;
      (0, _utils.unlockScroll)();
      this.rootEl.classList.remove(_constants.__VISIBLE);
      if (window.FingerBackdrop) {
        window.FingerBackdrop.hide(true);
      }
      setTimeout(function () {
        _this2.rootEl.style.display = 'none';
        _this2.whaleToSave = undefined;
      }, (0, _utils.getTransitionTime)(this.rootEl));
    }

    // Observation
  }, {
    key: "observeValues",
    value: function observeValues() {
      var _iterator2 = _createForOfIteratorHelper(this.inputArr),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var input = _step2.value;
          var path = this.findRelativePath(input);
          var value = input.value;
          if (path) {
            if (value) {
              path.classList.add('force');
            } else {
              path.classList.remove('force');
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    // Bind Events
  }, {
    key: "bindFingerClick",
    value: function bindFingerClick() {
      var _this3 = this;
      var _iterator3 = _createForOfIteratorHelper(this.fingerPathArr),
        _step3;
      try {
        var _loop = function _loop() {
          var path = _step3.value;
          path.addEventListener('click', function () {
            var input = _this3.findRelativeInput(path);
            if (input) {
              input.focus();
            }
          });
        };
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "bindInputEvents",
    value: function bindInputEvents() {
      var _this4 = this;
      var validateValue = function validateValue(value) {
        var num = parseFloat(value);
        return /^(\d+(\.5?)?)?$/.test(value) && num <= 25;
      };
      var _iterator4 = _createForOfIteratorHelper(this.inputArr),
        _step4;
      try {
        var _loop2 = function _loop2() {
          var input = _step4.value;
          input.addEventListener('input', function () {
            // Resrtict Numeric Value
            var value = input.value;
            if (!validateValue(value)) {
              input.value = value.slice(0, -1);
            }

            // Observe value
            _this4.observeValues();
          });
        };
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }

    // Init
  }, {
    key: "setInputPlaceholder",
    value: function setInputPlaceholder() {
      this.inputArr.forEach(function (input) {
        input.placeholder = 'Unset';
      });
    }
  }, {
    key: "init",
    value: function init() {
      this.bindFingerClick();
      this.bindInputEvents();
      this.setInputPlaceholder();
    }
  }]);
}();
function initFingerModal() {
  new FingerModal();
}

},{"../dynamic/page-msg":11,"../dynamic/popup-backdrop":12,"../general/constants":28,"../general/utils":33}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initGTip = initGTip;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var GTip = /*#__PURE__*/function () {
  function GTip() {
    _classCallCheck(this, GTip);
    this.card = null;
    this.query = undefined;
    this.elem = document.querySelector('.g-tip');
    this.input = document.querySelector('.g-tip__input');
    if (this.elem && this.input) {
      this.extendElem();
      this.bindEvents();
    }
  }
  return _createClass(GTip, [{
    key: "extendElem",
    value: function extendElem() {
      var _this = this;
      this.elem.setupLinks = function () {
        if (_this.card) {
          var linksToHide = ['Contract', 'Sportrac'];
          var links = _toConsumableArray(_this.elem.querySelectorAll('a'));
          var attr = _this.card.dataset.showContract;
          links.forEach(function (link) {
            link.style.display = 'block';
          });
          if (!attr) {
            links.forEach(function (link) {
              if (linksToHide.includes(link.textContent)) {
                link.style.display = 'none';
              }
            });
          }
        }
      };
      this.elem.open = function () {
        if (_this.card) {
          var anchor = _this.card.querySelector('.ext-search');
          if (anchor) {
            var rect = anchor.getBoundingClientRect();
            var box = _this.elem;
            box.style.display = 'block';
            var left = rect.left > box.offsetWidth / 2 ? rect.left - box.offsetWidth / 2 + anchor.offsetWidth / 2 : rect.left;
            var top = window.innerHeight - rect.bottom < box.offsetHeight + 20 ? window.scrollY + rect.top - box.offsetHeight - 10 : window.scrollY + rect.top + anchor.offsetHeight + 10;
            if (left < 0) {
              left = 0;
            } else if (left + box.offsetWidth > window.innerWidth) {
              left = window.innerWidth - box.offsetWidth;
            }
            box.style.left = "".concat(left, "px");
            box.style.top = "".concat(top, "px");
          }
        }
      };
      this.elem.reset = function () {
        var box = _this.elem;
        box.style.display = 'none';
        if (_this.card) {
          _this.card = null;
          _this.query = undefined;
        }
      };
      this.elem.submit = function () {
        var query = "".concat(_this.query);
        var url = "https://www.google.com/search?q=".concat(encodeURIComponent(query));
        window.open(url, '_blank');
      };
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this2 = this;
      var btnArr = _toConsumableArray(document.querySelectorAll('[data-evt="openGoogleTip"]'));
      btnArr.forEach(function (btn) {
        btn.onclick = function (e) {
          _this2.card = e.target.closest('.whale-card');
          _this2.elem.setupLinks();
          _this2.elem.open();
        };
      });
      var queries = _toConsumableArray(document.querySelectorAll('.g-tip__queries a'));
      queries.forEach(function (query) {
        query.onclick = function (e) {
          if (_this2.card) {
            var name = _this2.card.querySelector('.whale-card__name');
            if (name) {
              _this2.query = "".concat(name.textContent, " ").concat(query.textContent);
              _this2.elem.submit();
            }
          }
        };
      });
      if (this.input) {
        this.input.onkeydown = function (e) {
          if (e.key === 'Enter') {
            e.preventDefault();
            if (_this2.card) {
              var name = _this2.card.querySelector('.whale-card__name');
              if (name) {
                _this2.query = "".concat(name.textContent, " ").concat(_this2.input.value);
                _this2.elem.submit();
              }
            }
          }
        };
      }
      var submitInputArr = _toConsumableArray(document.querySelectorAll('[data-evt="submitGoogleTip"]'));
      submitInputArr.forEach(function (btn) {
        btn.onclick = function () {
          if (_this2.card) {
            var name = _this2.card.querySelector('.whale-card__name');
            if (name) {
              _this2.query = "".concat(name.textContent, " ").concat(_this2.input.value);
              _this2.elem.submit();
            }
          }
        };
      });
      window.onscroll = function () {
        _this2.elem.reset();
      };
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (!target.classList.contains('ext-search') && !target.closest('.g-tip')) {
          _this2.elem.reset();
        }
      });
    }
  }]);
}();
function initGTip() {
  new GTip();
}

},{}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initOrderNotes = initOrderNotes;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var OrderNotes = /*#__PURE__*/function () {
  function OrderNotes() {
    _classCallCheck(this, OrderNotes);
    this.init();
  }
  return _createClass(OrderNotes, [{
    key: "init",
    value: function init() {
      this.attachEvents();
    }
  }, {
    key: "appendNote",
    value: function appendNote(parent, author, text) {
      var date = new Date(Date.now()).toLocaleString();
      var html = "\n      <div class=\"am-item-note\">\n        <div>\n          <span>".concat(author, "</span>: ").concat(text, "\n        </div>\n        <div>").concat(date, "</div>\n      </div>\n    ");
      parent.insertAdjacentHTML('beforeend', html);
    }
  }, {
    key: "attachEvents",
    value: function attachEvents() {
      var _this = this;
      var submitButtons = _toConsumableArray(document.querySelectorAll('[data-am-evt="submitNote"]')),
        inputs = _toConsumableArray(document.querySelectorAll('.am-note-input'));
      submitButtons.forEach(function (btn) {
        btn.onclick = function (e) {
          e.preventDefault();
          var parent = btn.closest('.am-item__note-wrap');
          if (parent !== null) {
            var input = parent.querySelector('.am-note-input'),
              val = input.value.trim();
            if (val.length !== 0) {
              _this.appendNote(parent, 'Author Name', val); // Замените 'Author Name' на актуальное имя автора
              input.value = '';
            } else {
              input.focus();
            }
          }
        };
      });
      inputs.forEach(function (input) {
        input.onkeydown = function (e) {
          if (e.key === 'Enter') {
            e.preventDefault();
            var val = input.value.trim();
            if (val.length !== 0) {
              var parent = input.closest('.am-item__note-wrap');
              _this.appendNote(parent, 'Author Name', val); // Замените 'Author Name' на актуальное имя автора
              input.value = '';
            }
          }
        };
      });
    }
  }]);
}();
function initOrderNotes() {
  new OrderNotes();
}

},{}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initOrdersModal = initOrdersModal;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
var _popupBackdrop = _interopRequireDefault(require("../dynamic/popup-backdrop"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var OrdersModal = /*#__PURE__*/function () {
  function OrdersModal() {
    _classCallCheck(this, OrdersModal);
    this.rootEl = document.querySelector('.orders-modal');
    if (!this.rootEl) return;
    window.ordersModal = this;
    this.list = document.querySelector('#orders_modal_list');
  }

  // Methods
  return _createClass(OrdersModal, [{
    key: "close",
    value: function close() {
      var _this = this;
      (0, _utils.unlockScroll)();
      this.rootEl.classList.remove(_constants.__VISIBLE);
      if (window.orderModalBackdrop) {
        window.orderModalBackdrop.hide();
      }
      setTimeout(function () {
        _this.rootEl.style.display = 'none';
      }, (0, _utils.getTransitionTime)(this.rootEl));
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;
      (0, _utils.lockScroll)();
      this.rootEl.style.display = 'block';
      window.orderModalBackdrop = new _popupBackdrop["default"]({
        callback: function callback() {
          _this2.close();
        }
      });
      setTimeout(function () {
        _this2.rootEl.classList.add(_constants.__VISIBLE);
      }, 5);
    }
  }]);
}();
function initOrdersModal() {
  new OrdersModal();
}

},{"../dynamic/popup-backdrop":12,"../general/constants":28,"../general/utils":33}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPageMenu = initPageMenu;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
var _popupBackdrop = _interopRequireDefault(require("../dynamic/popup-backdrop"));
var _eventBus = _interopRequireDefault(require("../../event-bus"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PageMenu = /*#__PURE__*/function () {
  function PageMenu() {
    _classCallCheck(this, PageMenu);
    this.rootEl = document.querySelector('.am-header__page-nav');
    if (this.rootEl !== null) {
      this.evtToggle = _toConsumableArray(document.querySelectorAll('[data-am-evt="togglePageNav"]'));
      this.popupInstance = null;
      window.pageMenu = this; // Добавляем ссылку на экземпляр в глобальный объект
      this.attachEvents();
      this.bindGlobalEvents();
    }
  }
  return _createClass(PageMenu, [{
    key: "hide",
    value: function hide() {
      this.rootEl.classList.remove(_constants.IS_VISIBLE);
    }
  }, {
    key: "show",
    value: function show() {
      this.rootEl.classList.add(_constants.IS_VISIBLE);
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;
      var eventBus = _eventBus["default"].getInstance();
      eventBus.emit(_constants.EVENTS.PAGE_SEARCH.CLOSE);
      eventBus.emit(_constants.EVENTS.PAGE_SIDEBAR.CLOSE);
      (0, _utils.lockScroll)();
      this.show();
      this.popupInstance = new _popupBackdrop["default"]({
        zIndex: 10,
        callback: function callback() {
          _this.close();
        }
      });
    }
  }, {
    key: "close",
    value: function close() {
      (0, _utils.unlockScroll)();
      this.hide();
      if (this.popupInstance) {
        this.popupInstance.hide();
        this.popupInstance = null;
      }
    }
  }, {
    key: "attachEvents",
    value: function attachEvents() {
      var _this2 = this;
      this.evtToggle.forEach(function (el) {
        el.onclick = function () {
          if (_this2.rootEl.classList.contains(_constants.IS_VISIBLE)) {
            _this2.close();
          } else {
            _this2.open();
          }
        };
      });
    }
  }, {
    key: "bindGlobalEvents",
    value: function bindGlobalEvents() {
      var _this3 = this;
      var eventBus = _eventBus["default"].getInstance();
      this._closeHandler = function () {
        _this3.close();
      };
      eventBus.on(_constants.EVENTS.PAGE_MENU.CLOSE, this._closeHandler);
    }
  }]);
}();
function initPageMenu() {
  new PageMenu();
}

},{"../../event-bus":2,"../dynamic/popup-backdrop":12,"../general/constants":28,"../general/utils":33}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPageSearch = initPageSearch;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
var _popupBackdrop = _interopRequireDefault(require("../dynamic/popup-backdrop"));
var _eventBus = _interopRequireDefault(require("../../event-bus"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PageSearch = /*#__PURE__*/function () {
  function PageSearch() {
    _classCallCheck(this, PageSearch);
    this.rootEl = document.querySelector('.am-header__mob-search');
    if (this.rootEl !== null) {
      this.evtToggle = _toConsumableArray(document.querySelectorAll('[data-am-evt="toggleSearch"]'));
      this.popupInstance = null;
      window.pageSearch = this;
      this.attachEvents();
      this.bindGlobalEvents();
    }
  }
  return _createClass(PageSearch, [{
    key: "hide",
    value: function hide() {
      this.rootEl.classList.remove(_constants.IS_VISIBLE);
    }
  }, {
    key: "show",
    value: function show() {
      this.rootEl.classList.add(_constants.IS_VISIBLE);
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;
      var eventBus = _eventBus["default"].getInstance();
      eventBus.emit(_constants.EVENTS.PAGE_MENU.CLOSE);
      eventBus.emit(_constants.EVENTS.PAGE_SIDEBAR.CLOSE);
      (0, _utils.lockScroll)();
      this.show();
      this.popupInstance = new _popupBackdrop["default"]({
        zIndex: 9,
        callback: function callback() {
          _this.close();
        }
      });
    }
  }, {
    key: "close",
    value: function close() {
      (0, _utils.unlockScroll)();
      this.hide();
      if (this.popupInstance) {
        this.popupInstance.hide();
        this.popupInstance = null;
      }
    }
  }, {
    key: "attachEvents",
    value: function attachEvents() {
      var _this2 = this;
      this.evtToggle.forEach(function (el) {
        el.onclick = function () {
          if (_this2.rootEl.classList.contains(_constants.IS_VISIBLE)) {
            _this2.close();
          } else {
            _this2.open();
          }
        };
      });
    }
  }, {
    key: "bindGlobalEvents",
    value: function bindGlobalEvents() {
      var _this3 = this;
      var eventBus = _eventBus["default"].getInstance();
      this._closeHandler = function () {
        _this3.close();
      };
      eventBus.on(_constants.EVENTS.PAGE_SEARCH.CLOSE, this._closeHandler);
    }
  }]);
}();
function initPageSearch() {
  new PageSearch();
}

},{"../../event-bus":2,"../dynamic/popup-backdrop":12,"../general/constants":28,"../general/utils":33}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPageSidebar = initPageSidebar;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
var _popupBackdrop = _interopRequireDefault(require("../dynamic/popup-backdrop"));
var _eventBus = _interopRequireDefault(require("../../event-bus"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PageSidebar = /*#__PURE__*/function () {
  function PageSidebar() {
    _classCallCheck(this, PageSidebar);
    this.rootEl = document.querySelector('.am-sidebar');
    if (this.rootEl !== null) {
      this.evtToggle = _toConsumableArray(document.querySelectorAll('[data-am-evt="toggleSidebar"]'));
      this.popupInstance = null;
      window.pageSidebar = this; // Добавляем ссылку на экземпляр в глобальный объект
      this.attachEvents();
    }
  }
  return _createClass(PageSidebar, [{
    key: "hide",
    value: function hide() {
      this.rootEl.classList.remove(_constants.IS_VISIBLE);
    }
  }, {
    key: "show",
    value: function show() {
      this.rootEl.classList.add(_constants.IS_VISIBLE);
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;
      var eventBus = _eventBus["default"].getInstance();
      eventBus.emit(_constants.EVENTS.PAGE_SEARCH.CLOSE);
      eventBus.emit(_constants.EVENTS.PAGE_MENU.CLOSE);
      var amHeader = document.querySelector('.am-header');
      (0, _utils.lockScroll)();
      this.show();
      amHeader.style.transform = 'translateY(-100%)';
      this.popupInstance = new _popupBackdrop["default"]({
        zIndex: 11,
        callback: function callback() {
          _this.close();
        }
      });
    }
  }, {
    key: "close",
    value: function close() {
      var amHeader = document.querySelector('.am-header');
      (0, _utils.unlockScroll)();
      this.hide();
      amHeader.style.transform = 'translateY(0%)';
      if (this.popupInstance) {
        this.popupInstance.hide();
        this.popupInstance = null;
      }
    }
  }, {
    key: "attachEvents",
    value: function attachEvents() {
      var _this2 = this;
      this.evtToggle.forEach(function (el) {
        el.onclick = function () {
          if (_this2.rootEl.classList.contains(_constants.IS_VISIBLE)) {
            _this2.close();
          } else {
            _this2.open();
          }
        };
      });
    }
  }, {
    key: "bindGlobalEvents",
    value: function bindGlobalEvents() {
      var _this3 = this;
      var eventBus = _eventBus["default"].getInstance();
      this._closeHandler = function () {
        _this3.close();
      };
      eventBus.on(_constants.EVENTS.PAGE_SIDEBAR.CLOSE, this._closeHandler);
    }
  }]);
}();
function initPageSidebar() {
  new PageSidebar();
}

},{"../../event-bus":2,"../dynamic/popup-backdrop":12,"../general/constants":28,"../general/utils":33}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPageTips = initPageTips;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PageTip = /*#__PURE__*/function () {
  function PageTip() {
    _classCallCheck(this, PageTip);
    this.tipElem = null;
    this.handleHover();
  }
  return _createClass(PageTip, [{
    key: "handleHover",
    value: function handleHover() {
      var _this = this;
      document.querySelectorAll('[data-tip]').forEach(function (elem) {
        elem.addEventListener('mouseenter', function (e) {
          _this.createTip();
          _this.tipElem.textContent = elem.dataset.tip;
          _this.setTipPosition(elem);
        });
        elem.addEventListener('mouseleave', function (e) {
          _this.destroyTip();
        });
      });
    }
  }, {
    key: "createTip",
    value: function createTip(elem) {
      if (!this.tipElem) {
        this.tipElem = document.createElement('div');
        this.tipElem.classList.add('page-tip');
        document.body.append(this.tipElem);
      }
    }
  }, {
    key: "setTipPosition",
    value: function setTipPosition(elem) {
      var _elem$getBoundingClie = elem.getBoundingClientRect(),
        left = _elem$getBoundingClie.left,
        top = _elem$getBoundingClie.top,
        width = _elem$getBoundingClie.width,
        height = _elem$getBoundingClie.height;
      var tipWidth = this.tipElem.getBoundingClientRect().width;
      var tipHeight = this.tipElem.getBoundingClientRect().height;
      var elemHeight = elem.offsetHeight;
      var elemWidth = elem.offsetWidth;
      var topPosition = top - tipHeight - 14;
      var leftPosition = left + elemWidth / 2 - tipWidth / 2;
      if (topPosition < 100) {
        topPosition = top + elemHeight + 14;
        this.tipElem.classList.add('--top');
      }
      if (leftPosition < 0) {
        leftPosition = left;
        this.tipElem.classList.add('--left');
      }
      this.tipElem.style.top = "".concat(topPosition, "px");
      this.tipElem.style.left = "".concat(leftPosition, "px");

      // let tipLeft = left + width / 2 - tipWidth / 2
      // if (tipLeft + tipWidth > window.innerWidth) {
      //   tipLeft = window.innerWidth - tipWidth
      // }
      // if (tipLeft < 0) {
      //   tipLeft = 0
      // }

      // let tipTop = top - tipHeight - 10
      // if (tipTop < 0) {
      //   tipTop = top + height + 10
      // }

      // this.tipElem.style.left = `${tipLeft}px`
      // this.tipElem.style.top = `${tipTop}px`
    }
  }, {
    key: "destroyTip",
    value: function destroyTip() {
      if (this.tipElem) {
        this.tipElem.remove();
        this.tipElem = null;
      }
    }
  }]);
}();
function initPageTips() {
  new PageTip();
}

},{}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPsSelect = initPsSelect;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PsSelect = /*#__PURE__*/function () {
  function PsSelect() {
    _classCallCheck(this, PsSelect);
    this.init();
  }
  return _createClass(PsSelect, [{
    key: "init",
    value: function init() {
      this.attachPs();
      this.bindClickPs();
    }

    // Events
  }, {
    key: "getArr",
    value: function getArr() {
      return _toConsumableArray(document.querySelectorAll('.ps'));
    }
  }, {
    key: "getOpenedElements",
    value: function getOpenedElements() {
      return _toConsumableArray(document.querySelectorAll('.ps.--active'));
    }
    // Methods
  }, {
    key: "attachPs",
    value: function attachPs() {
      var _this = this;
      var _iterator = _createForOfIteratorHelper(this.getArr()),
        _step;
      try {
        var _loop = function _loop() {
            var ps = _step.value;
            var drop = ps.querySelector('.ps-drop');
            var scroller = drop.querySelector('.ps-drop__scroller');
            var current = ps.querySelector('[data-ps-current]');
            var inputArr = _toConsumableArray(ps.querySelectorAll('input'));
            var isMultiple = ps.hasAttribute('data-ps-multiple');
            var multipleSelected = ps.querySelector('[data-ps-selected]');
            if (ps.initialized) {
              return {
                v: void 0
              };
            }
            if (!drop) {
              console.warn('PS SELECT: Drop not found');
              return {
                v: void 0
              };
            }
            if (!scroller) {
              console.warn('PS SELECT: Scroller not found');
              return {
                v: void 0
              };
            }
            ps.initialized = true;
            ps.open = function () {
              var openedArr = _this.getOpenedElements();
              var _iterator2 = _createForOfIteratorHelper(openedArr),
                _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var opened = _step2.value;
                  opened.close();
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
              ps.opened = true;
              ps.classList.add('--active');
            };
            ps.close = function () {
              ps.opened = false;
              ps.classList.remove('--active');
            };
            ps.update = function () {
              if (isMultiple && multipleSelected) {
                var text = _toConsumableArray(ps.querySelectorAll('input:checked')).map(function (input) {
                  if (input.dataset.name) {
                    return input.dataset.name.trim();
                  }
                  var label = input.closest('label');
                  if (!label) return null;
                  var span = label.querySelector('span');
                  return span ? span.textContent.trim() : null;
                }).filter(function (item) {
                  return item && item.trim();
                }).join(', ');
                multipleSelected.textContent = text || 'Empty';
              }
              if (inputArr.length && current) {
                var _iterator3 = _createForOfIteratorHelper(inputArr),
                  _step3;
                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var input = _step3.value;
                    if (input.checked) {
                      var label = input.closest('label');
                      var caption = label.querySelector('.ps-caption');
                      var counter = label.querySelector('.ps-counter');
                      var _text = '';
                      if (caption) {
                        _text = caption.textContent;
                      }
                      if (counter) {
                        _text += " \u2014 ".concat(counter.textContent);
                      }
                      current.textContent = _text;
                      break;
                    }
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }
              }
            };
            inputArr.forEach(function (input) {
              input.addEventListener('change', function () {
                ps.update();
              });
            });
            ps.update();
          },
          _ret;
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _ret = _loop();
          if (_ret) return _ret.v;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    // Attach / Bind
  }, {
    key: "bindClickPs",
    value: function bindClickPs() {
      var _this2 = this;
      var _iterator4 = _createForOfIteratorHelper(this.getArr()),
        _step4;
      try {
        var _loop2 = function _loop2() {
          var ps = _step4.value;
          var btn = ps.querySelector('.ps-btn');
          btn.addEventListener('click', function () {
            if (ps.opened) {
              ps.close();
              return;
            } else {
              ps.open();
            }
          });
        };
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      document.addEventListener('click', function (e) {
        var t = e.target;
        if (t.closest('.ps') === null) {
          var _iterator5 = _createForOfIteratorHelper(_this2.getArr()),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var ps = _step5.value;
              if (ps.opened) {
                ps.close();
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
      });
    }
  }]);
}();
function initPsSelect() {
  new PsSelect();
}

},{}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSwapModal = initSwapModal;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SwapModal = /*#__PURE__*/function () {
  function SwapModal() {
    var _this = this;
    _classCallCheck(this, SwapModal);
    _defineProperty(this, "initFn", {
      initialState: function initialState() {
        var _document$querySelect;
        (_document$querySelect = document.querySelectorAll('[data-store-nav]')[0]) === null || _document$querySelect === void 0 || _document$querySelect.click();
        _this.close();
      },
      bindEvents: function bindEvents() {
        var close = _toConsumableArray(document.querySelectorAll('[data-evt="closeSwapModal"]'));
        var open = _toConsumableArray(document.querySelectorAll('[data-evt="addSaksCustomer"]'));
        var storeNavBtnArr = _toConsumableArray(document.querySelectorAll('[data-store-nav]'));
        var stores = _toConsumableArray(document.querySelectorAll('[data-store-id]'));
        var addBtnArr = _toConsumableArray(document.querySelectorAll('[data-evt="addStoreCustomer"]'));
        var inputs = _toConsumableArray(_this.elem.querySelectorAll('input'));

        // Close modal
        var _iterator = _createForOfIteratorHelper(close),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var elem = _step.value;
            elem.onclick = function () {
              _this.close();
            };
          }

          // Open modal
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var _iterator2 = _createForOfIteratorHelper(open),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _elem = _step2.value;
            _elem.onclick = function () {
              _this.open();
            };
          }

          // Store switch
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        var _iterator3 = _createForOfIteratorHelper(storeNavBtnArr),
          _step3;
        try {
          var _loop = function _loop() {
            var btn = _step3.value;
            btn.onclick = function () {
              var storeId = btn.getAttribute('data-store-nav');
              if (!storeId) throw new Error('No store id found');
              var matchStore = stores.find(function (store) {
                return store.getAttribute('data-store-id') == storeId;
              });
              if (!matchStore) throw new Error('No store found');
              _this.activeStore = matchStore;
              var matching = storeNavBtnArr.filter(function (btn) {
                return btn.getAttribute('data-store-nav') == storeId;
              });
              storeNavBtnArr.forEach(function (btn) {
                return btn.classList.remove(_constants.IS_ACTIVE);
              });
              matching.forEach(function (btn) {
                return btn.classList.add(_constants.IS_ACTIVE);
              });
              var _iterator6 = _createForOfIteratorHelper(stores),
                _step6;
              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var store = _step6.value;
                  store.style.display = 'none';
                  if (store == matchStore) store.style.display = 'block';
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
            };
          };
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            _loop();
          }

          // Add customer
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        var _iterator4 = _createForOfIteratorHelper(addBtnArr),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var btn = _step4.value;
            btn.onclick = function () {
              _this.appendNewCustomer();
            };
          }

          // Input keydown
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        var _iterator5 = _createForOfIteratorHelper(inputs),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var input = _step5.value;
            input.onkeydown = function (e) {
              if (e.key === 'Enter') {
                _this.appendNewCustomer();
              }
            };
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    });
    this.newYorkMask = /new\s*york|nyc|yor/i;
    this.miamiMask = /miami|mia|iam/i;
    this.atlantaMask = /atlanta|atl|atlant(?!.*?(flag|flagship|ship))/i;
    this.flagshipMask = /flagship|flag/i;
    this.initialized = false;
    this.activeStore = undefined;
    this.elem = null;
    this.init();
  }
  return _createClass(SwapModal, [{
    key: "init",
    value: function init() {
      this.renderDOM();
      if (!this.elem) return;
      try {
        this.initFn.bindEvents.call(this);
        this.initFn.initialState.call(this);
      } catch (err) {
        throw new Error("SwapModal initialization error: ".concat(err.message));
      } finally {
        this.initialized = true;
      }
    }
  }, {
    key: "renderDOM",
    value: function renderDOM() {
      this.elem = document.querySelector('.swap-modal');
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;
      var input = this.elem.querySelectorAll('input')[0];
      (0, _utils.lockScroll)();
      this.elem.style.display = 'block';
      if (input) input.focus();
      setTimeout(function () {
        _this2.elem.classList.remove(_constants.IS_HIDDEN);
      }, 1);
    }
  }, {
    key: "close",
    value: function close() {
      var _this3 = this;
      (0, _utils.unlockScroll)();
      this.elem.classList.add(_constants.IS_HIDDEN);
      setTimeout(function () {
        _this3.elem.style.display = 'none';
      }, (0, _utils.getTransitionTime)(this.elem));
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.elem.style.display === 'none') {
        this.open();
      } else {
        this.close();
      }
    }
  }, {
    key: "renderCustomerHTML",
    value: function renderCustomerHTML(name, number, instagram, email) {
      return "\n      <tr>\n        <td data-td=\"added_by\">".concat((0, _utils.getAdminUserName)(), "</td>\n        <td data-td=\"name\">").concat(name, "</td>\n        <td data-td=\"number\">").concat(number, "</td>\n        <td>\n          <a class=\"tb-social-btn instagram\">\n            <div>").concat(instagram, "</div>\n          </a>\n        </td>\n        <td data-td=\"email\">").concat(email, "</td>\n        <td data-td=\"visit_date\">").concat(new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      }), "</td>\n      </tr>\n    ");
    }
  }, {
    key: "clear",
    value: function clear() {
      _toConsumableArray(this.elem.querySelectorAll('input')).forEach(function (input) {
        return input.value = '';
      });
    }
  }, {
    key: "getCustomerFromInputs",
    value: function getCustomerFromInputs() {
      var customer = {};
      var inputs = _toConsumableArray(this.elem.querySelectorAll('input'));
      var _iterator7 = _createForOfIteratorHelper(inputs),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var input = _step7.value;
          var id = input.id;
          var val = input.value;
          customer[id] = val || 'Empty';
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return customer;
    }
  }, {
    key: "appendNewCustomer",
    value: function appendNewCustomer() {
      var customer = this.getCustomerFromInputs();
      if (!customer.full_name) throw new Error('Full name is required');
      var html = this.renderCustomerHTML(customer.full_name, customer.number, customer.instagram, customer.email);
      var store = this.activeStore;
      if (!store) throw new Error('No store selected');
      try {
        (0, _utils.appendNewCustomer)(store.querySelector('tbody'), html);
      } catch (err) {
        throw new Error("appendNewCustomer error: ".concat(err.message));
      } finally {
        this.clear();
        this.close();
      }
    }
  }]);
}();
function initSwapModal() {
  new SwapModal();
}

},{"../general/constants":28,"../general/utils":33}],25:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initToolbar = initToolbar;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
var _lottie = _interopRequireDefault(require("../../lib/lottie"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ToolBar = /*#__PURE__*/function () {
  function ToolBar(rootEl) {
    _classCallCheck(this, ToolBar);
    this.rootEl = rootEl;
    if (!this.rootEl) return;
    this.opened = false;
    this.locked = false;
    this.celebrating = false;
    this.wrapper = document.querySelector('.toolbar__wrapper');
    this.container = document.querySelector('.toolbar__container');
    this.menu = document.querySelector('.toolbar-menu');
    this.menuWrapper = document.querySelector('.toolbar-menu__wrapper');
    this.menuArr = _toConsumableArray(document.querySelectorAll('.toolbar-content'));
    this.menuSort = document.querySelector('#toolbarSort');
    this.menuFilter = document.querySelector('#toolbarFilter');
    this.menuPoints = document.querySelector('#toolbarPoints');
    this.menuScore = document.querySelector('#toolbarScore');
    this.inputArr = this.rootEl.querySelectorAll('input');
    this.evtToggleSort = _toConsumableArray(document.querySelectorAll('[data-evt="toggleSortMenu"]'));
    this.evtToggleFilter = _toConsumableArray(document.querySelectorAll('[data-evt="toggleFilterMenu"]'));
    this.evtTogglePoints = _toConsumableArray(document.querySelectorAll('[data-evt="togglePoints"]'));
    this.evtReset = _toConsumableArray(document.querySelectorAll('[data-evt="resetToolbarForm"]'));
    this.init();
  }

  /**
   * Methods
   */
  return _createClass(ToolBar, [{
    key: "observeSortState",
    value: function observeSortState() {
      if (this.menuSort && this.evtToggleSort.length) {
        var inputs = this.menuSort.querySelectorAll('input:checked');
        if (inputs.length) {
          this.evtToggleSort.forEach(function (btn) {
            return btn.classList.add(_constants.IS_ACTIVE);
          });
        } else {
          this.evtToggleSort.forEach(function (btn) {
            return btn.classList.remove(_constants.IS_ACTIVE);
          });
        }
      }
    }
  }, {
    key: "observeFilterState",
    value: function observeFilterState() {
      if (this.menuFilter && this.evtToggleFilter.length) {
        var inputs = this.menuFilter.querySelectorAll('input:checked');
        if (inputs.length) {
          this.evtToggleFilter.forEach(function (btn) {
            return btn.classList.add(_constants.IS_ACTIVE);
          });
        } else {
          this.evtToggleFilter.forEach(function (btn) {
            return btn.classList.remove(_constants.IS_ACTIVE);
          });
        }
      }
    }
  }, {
    key: "observeInputsCheckedState",
    value: function observeInputsCheckedState() {
      this.observeSortState();
      this.observeFilterState();
    }
  }, {
    key: "toggleLocked",
    value: function toggleLocked(condition, elem) {
      var _this = this;
      if (condition && elem) {
        this.locked = condition;
        setTimeout(function () {
          _this.locked = !condition;
        }, (0, _utils.getTransitionTime)(elem));
      }
    }
  }, {
    key: "hideMenuArr",
    value: function hideMenuArr() {
      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var except = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      this.menuArr.forEach(function (el) {
        if (el !== except) {
          el.style.display = 'none';
        }
      });
    }
  }, {
    key: "show",
    value: function show() {
      var _this2 = this;
      var menu = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.menuArr[0];
      if (menu == this.menuScore) {
        this.celebrating = true;
        setTimeout(function () {
          _this2.celebrating = false;
        }, 50);
      }
      if (!this.locked) {
        if (!this.opened && menu) {
          this.hideMenuArr(0);
          setTimeout(function () {
            _this2.opened = true;
            menu.style.display = 'block';
            setTimeout(function () {
              var height = menu.querySelector('.toolbar-form').offsetHeight;
              menu.querySelector('.toolbar-form').scrollTop = 0;
              _this2.menu.style.height = "".concat(height + 4, "px");
              _this2.rootEl.classList.add(_constants.IS_ACTIVE);
              _this2.toggleLocked(true, _this2.menu);
            }, 5);
          }, 5);
        }
        if (this.opened) {
          var visibleMenu = this.menuArr.find(function (el) {
            return el.style.display === 'block';
          });
          if (visibleMenu) {
            if (visibleMenu !== menu) {
              this.hideMenuArr();
              setTimeout(function () {
                _this2.observeInputsCheckedState();
                menu.style.display = 'block';
                menu.querySelector('.toolbar-form').scrollTop = 0;
                var height = menu.offsetHeight;
                _this2.menu.style.height = "".concat(height + 4, "px");
                _this2.toggleLocked(true, _this2.menu);
              }, 2);
            } else {
              this.hide();
            }
          }
        }
      }
    }
  }, {
    key: "hide",
    value: function hide() {
      if (!this.locked) {
        if (this.opened) {
          this.observeInputsCheckedState();
          this.opened = false;
          this.menu.style.height = '0px';
          this.rootEl.classList.remove(_constants.IS_ACTIVE);
          this.toggleLocked(false, this.menu);
          this.hideMenuArr((0, _utils.getTransitionTime)(this.menu));
        }
      }
    }

    /**
     * Bind Events
     */
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this3 = this;
      // Sorting
      var _iterator = _createForOfIteratorHelper(this.evtToggleSort),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var btn = _step.value;
          if (this.menuSort) {
            btn.addEventListener('click', function () {
              _this3.show(_this3.menuSort);
              _this3.observeInputsCheckedState();
            });
          }
        }

        // Filters
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _iterator2 = _createForOfIteratorHelper(this.evtToggleFilter),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _btn = _step2.value;
          if (this.menuFilter) {
            _btn.addEventListener('click', function () {
              _this3.show(_this3.menuFilter);
              _this3.observeInputsCheckedState();
            });
          }
        }

        // Points
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var _iterator3 = _createForOfIteratorHelper(this.evtTogglePoints),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _btn2 = _step3.value;
          if (this.menuPoints) {
            _btn2.addEventListener('click', function () {
              _this3.show(_this3.menuPoints);
              _this3.observeInputsCheckedState();
            });
          }
        }

        // Reset
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var _iterator4 = _createForOfIteratorHelper(this.evtReset),
        _step4;
      try {
        var _loop = function _loop() {
          var btn = _step4.value;
          btn.addEventListener('click', function () {
            var parent = btn.parentNode.closest('.toolbar-form');
            if (parent) {
              var inputArr = parent.querySelectorAll('input');
              var _iterator6 = _createForOfIteratorHelper(inputArr),
                _step6;
              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var input = _step6.value;
                  input.checked = false;
                  input.dispatchEvent(new Event('change'));
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
            }
          });
        };
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          _loop();
        }

        // Input changes
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      var _iterator5 = _createForOfIteratorHelper(this.inputArr),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var input = _step5.value;
          input.addEventListener('change', function (e) {
            _this3.observeInputsCheckedState();
          });
        }

        // Document Events
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (!target.closest('.toolbar') && !_this3.celebrating) {
          _this3.hide();
        }
      });
    }

    // Scores/ Celebration/ Congratulation
  }, {
    key: "pushConfetti",
    value: function pushConfetti() {
      if (!window.tsParticles) {
        console.warn('tsParticles not found');
        return;
      }
      var delayPattern = [1000, 350, 750, 750];
      var particleCount = 50;
      var colors = ["#65a6ff", "#15ddbf"];
      var spread = 75;
      var velocity = 0.2;
      var startVelocity = 35;
      var decay = 0.9;
      var duration = delayPattern.reduce(function (total, delay) {
        return total + delay;
      }, 0);
      function shootConfetti() {
        confetti({
          particleCount: particleCount,
          angle: -25,
          spread: spread,
          origin: {
            x: 0.1,
            y: 0
          },
          colors: colors,
          velocity: velocity,
          startVelocity: startVelocity,
          decay: decay
        });
        confetti({
          particleCount: particleCount,
          angle: -155,
          spread: spread,
          origin: {
            x: 0.9,
            y: 0
          },
          colors: colors,
          velocity: velocity,
          startVelocity: startVelocity,
          decay: decay
        });
      }
      function go() {
        var index = 0;
        function frame() {
          if (index < delayPattern.length) {
            shootConfetti();
            setTimeout(function () {
              index++;
              requestAnimationFrame(frame);
            }, delayPattern[index]);
          }
        }
        frame();
      }
      go();
    }
  }, {
    key: "showScore",
    value: function showScore() {
      this.show(this.menuScore);
      this.pushConfetti();
    }

    /**
     * Initialize
     */
  }, {
    key: "renderPTSLottie",
    value: function renderPTSLottie() {
      var lottieContainers = _toConsumableArray(document.querySelectorAll('[data-lottie="diamondSpin"]'));
      lottieContainers.forEach(function (container) {
        var animation = _lottie["default"].loadAnimation({
          container: container,
          path: 'https://gist.githubusercontent.com/steinway1/4de3da6a3a8364ede5c3e5fff52c5113/raw/94ab2c03988700c56cffeb4f5fc06ce2e605120f/spin-diamond.json',
          autoplay: true,
          renderer: 'svg',
          loop: true
        });
      });
    }
  }, {
    key: "init",
    value: function init() {
      if (this.rootEl) {
        this.bindEvents();
        this.renderPTSLottie();
      }
    }
  }]);
}();
function initToolbar() {
  var rootEl = document.querySelector('.toolbar');
  new ToolBar(rootEl);
}

},{"../../lib/lottie":4,"../general/constants":28,"../general/utils":33}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initWhaleCards = initWhaleCards;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var WhaleCards = /*#__PURE__*/function () {
  function WhaleCards() {
    var _this = this;
    _classCallCheck(this, WhaleCards);
    _defineProperty(this, "initFn", {
      setInitialStats: function setInitialStats() {
        _this.updateNotesCount();
      },
      attachNotes: function attachNotes() {
        var cls = '--notes_visible';

        // Mouseover Avatar
        document.addEventListener('mouseover', function (e) {
          var target = e.target;
          if (target.closest('.whale-card__avatar') && !target.closest('.whale-more-wrap')) {
            var card = target.closest('.whale-card');
            if (card && !card.classList.contains(cls)) {
              card.classList.add(cls);
            }
          }
        });

        // Mouseout Avatar
        document.addEventListener('mouseout', function (e) {
          var target = e.target;
          if (target.closest('.whale-card__avatar')) {
            var card = target.closest('.whale-card');
            if (card && card.classList.contains(cls)) {
              card.classList.remove(cls);
            }
          }
        });

        // Input Focus
        document.querySelectorAll('.whale-card').forEach(function (card) {
          var input = card.querySelector('.am-note-input');
          if (input) {
            input.addEventListener('focus', function () {
              if (!card.classList.contains(cls)) {
                card.classList.add(cls);
              }
            });
          }
        });

        // Button Click
        document.addEventListener('click', function (e) {
          var target = e.target;
          if (target.dataset.evt === 'toggleWhaleNotes' || target.closest('[data-evt="toggleWhaleNotes"]')) {
            var btn = target.closest('[data-evt="toggleWhaleNotes"]') || target;
            var card = target.closest('.whale-card');
            if (card) {
              card.classList.toggle(cls);
            }
          }
        });
      },
      attachNoteSubmit: function attachNoteSubmit() {
        var inputs = _toConsumableArray(document.querySelectorAll('.am-note-input'));
        var buttons = _toConsumableArray(document.querySelectorAll('[data-whale-evt="submitNote"]'));
        inputs.forEach(function (input) {
          input.submit = function () {
            var val = input.value.trim();
            if (val) {
              var _input$closest;
              var holder = (_input$closest = input.closest('.whale-card__notes')) === null || _input$closest === void 0 ? void 0 : _input$closest.querySelector('.whale-card__notes-scroll');
              if (holder) {
                input.value = '';
                _this.appendNote(holder, 'Zahir', val);
                holder.scrollTop = holder.scrollHeight;
              }
            }
          };
          input.onkeydown = function (e) {
            if (e.key === 'Enter' || e.keyCode === 13) {
              e.preventDefault();
              input.submit();
            }
          };
        });
        buttons.forEach(function (btn) {
          btn.onclick = function () {
            var _btn$closest;
            var input = (_btn$closest = btn.closest('.whale-card')) === null || _btn$closest === void 0 ? void 0 : _btn$closest.querySelector('.am-note-input');
            if (input) {
              input.submit();
            }
          };
        });
      },
      attachContractSearch: function attachContractSearch() {
        return; // Функция отключена, как и в оригинале
        var evtArr = _toConsumableArray(document.querySelectorAll('[data-evt="contractGoogleSearch"]'));
        var googleContract = function googleContract(name) {
          var query = "".concat(name, " contract");
          var url = "https://www.google.com/search?q=".concat(encodeURIComponent(query));
          window.open(url, '_blank');
        };
        evtArr.forEach(function (btn) {
          btn.onclick = function () {
            var card = btn.closest('.whale-card');
            if (card) {
              var _card$querySelector;
              var name = (_card$querySelector = card.querySelector('.whale-card__name')) === null || _card$querySelector === void 0 ? void 0 : _card$querySelector.textContent;
              if (name) {
                googleContract(name);
              }
            }
          };
        });
      }
    });
    this.init();
  }
  return _createClass(WhaleCards, [{
    key: "init",
    value: function init() {
      var _this2 = this;
      var main = document.querySelector('.main_whales');
      if (main) {
        this.updateRadioQuiz();
        Object.values(this.initFn).forEach(function (fn) {
          if (typeof fn === 'function') {
            try {
              fn.call(_this2);
            } catch (err) {
              console.log("whales cards init fn err : ".concat(err.message));
            }
          }
        });
      }
    }
  }, {
    key: "updateNotesCount",
    value: function updateNotesCount() {
      var cards = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _toConsumableArray(document.querySelectorAll('.whale-card'));
      cards = Array.isArray(cards) ? cards : [cards];
      cards.forEach(function (card) {
        var noteCount = card.querySelector('.whale-notes-count');
        var notes = card.querySelectorAll('.whale-card__note');
        if (noteCount) {
          var count = notes.length || 0;
          noteCount.innerHTML = count;
        }
      });
    }
  }, {
    key: "appendNote",
    value: function appendNote(parent, author, text) {
      var date = new Date(Date.now()).toLocaleString();
      var html = "\n      <div class=\"whale-card__note\">\n        <div class=\"whale-card__note-date\">".concat(date, "</div>\n        <div class=\"whale-card__note-text\">\n          <span class=\"whale-card__note-author\">").concat(author, "</span>: ").concat(text, "\n        </div>\n      </div>\n    ");
      parent.insertAdjacentHTML('beforeend', html);
    }
  }, {
    key: "updateRadioQuiz",
    value: function updateRadioQuiz() {
      var inputs = _toConsumableArray(document.querySelectorAll('#grid_view input[type="radio"]'));
      var _iterator = _createForOfIteratorHelper(inputs),
        _step;
      try {
        var _loop = function _loop() {
          var input = _step.value;
          if (input.checked) {
            input.checked = !input.checked;
            setTimeout(function () {
              input.checked = !input.checked;
            }, 1);
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
}();
function initWhaleCards() {
  new WhaleCards();
}

},{}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AjaxGetCustomer = AjaxGetCustomer;
exports.AjaxGetCustomersArray = AjaxGetCustomersArray;
exports.AjaxGetItem = AjaxGetItem;
exports.AjaxGetItemsArray = AjaxGetItemsArray;
exports.submitOrderData = submitOrderData;
var _utils = require("./utils");
function AjaxGetCustomer(id) {
  return new Promise(function (resolve, reject) {
    $.ajax({
      url: '/admin/ajax/get-customer/' + id,
      method: 'GET',
      // HTTP method
      dataType: 'json',
      // Expected data type of the response
      success: function success(data) {
        if (!data.error) {
          resolve(data.item);
        } else {
          (0, _utils.showMessage)('error', 'Error', data.msg);
          resolve([]);
        }
      },
      error: function error(xhr, status, _error) {
        console.error('Error occurred:', _error);
        reject(_error); // Reject the promise if an error occurs
      }
    });
  });
}
function AjaxGetCustomersArray(query) {
  return new Promise(function (resolve, reject) {
    $.ajax({
      url: '/admin/ajax/search-customers',
      method: 'GET',
      // HTTP method
      data: {
        query: query
      },
      // Data sent to the server
      dataType: 'json',
      // Expected data type of the response
      success: function success(data) {
        if (!data.error) {
          resolve(data.customers);
        } else {
          (0, _utils.showMessage)('error', 'Error', data.msg);
          resolve([]);
        }
      },
      error: function error(xhr, status, _error2) {
        console.error('Error occurred:', _error2);
        reject(_error2); // Reject the promise if an error occurs
      }
    });
  });
}
function AjaxGetItemsArray(query) {
  return new Promise(function (resolve, reject) {
    $.ajax({
      url: '/admin/ajax/search-product',
      method: 'GET',
      // HTTP method
      data: {
        query: query
      },
      // Data sent to the server
      dataType: 'json',
      // Expected data type of the response
      success: function success(data) {
        if (!data.error) {
          resolve(data.items);
        } else {
          (0, _utils.showMessage)('error', 'Error', data.msg);
          resolve([]);
        }
      },
      error: function error(xhr, status, _error3) {
        console.error('Error occurred:', _error3);
        reject(_error3); // Reject the promise if an error occurs
      }
    });
  });
}
function AjaxGetItem(id) {
  return new Promise(function (resolve, reject) {
    $.ajax({
      url: '/admin/ajax/get-item/' + id,
      method: 'GET',
      // HTTP method
      dataType: 'json',
      // Expected data type of the response
      success: function success(data) {
        if (!data.error) {
          resolve(data.item);
        } else {
          (0, _utils.showMessage)('error', 'Error', data.msg);
          resolve([]);
        }
      },
      error: function error(xhr, status, _error4) {
        console.error('Error occurred:', _error4);
        reject(_error4); // Reject the promise if an error occurs
      }
    });
  });
}
function submitOrderData(data) {
  return new Promise(function (resolve, reject) {
    $.ajax({
      url: '/admin/ajax/submit-order',
      method: 'POST',
      data: data,
      dataType: 'json',
      success: function success(data) {
        resolve(data);
      },
      error: function error(xhr, status, _error5) {
        console.error('Error occurred:', _error5);
        reject(_error5); // Reject the promise if an error occurs
      }
    });
  });
}

},{"./utils":33}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__VISIBLE = exports.__TRUE = exports.__STASH = exports.__SEALED = exports.__REVEALED = exports.__MOVING = exports.__LOADING = exports.__HOVERED = exports.__HIDDEN = exports.__FOCUSED = exports.__FILLED = exports.__FALSE = exports.__FADE = exports.__EMPTY = exports.__EDIT = exports.__BLANK = exports.__BACK = exports.__ADDED = exports.__ACTIVE = exports.IS_VISIBLE = exports.IS_HIDDEN = exports.IS_ACTIVE = exports.EVENTS = void 0;
var IS_VISIBLE = exports.IS_VISIBLE = 'is-visible';
var IS_ACTIVE = exports.IS_ACTIVE = 'is-active';
var IS_HIDDEN = exports.IS_HIDDEN = 'is-hidden';
var __BACK = exports.__BACK = '--back';
var __MOVING = exports.__MOVING = '--moving';
var __STASH = exports.__STASH = '--stash';
var __FILLED = exports.__FILLED = '--filled';
var __FOCUSED = exports.__FOCUSED = '--focused';
var __HOVERED = exports.__HOVERED = '--hovered';
var __BLANK = exports.__BLANK = '--blank';
var __ADDED = exports.__ADDED = '--added';
var __LOADING = exports.__LOADING = '--loading';
var __EMPTY = exports.__EMPTY = '--empty';
var __TRUE = exports.__TRUE = '--true';
var __FALSE = exports.__FALSE = '--false';
var __FADE = exports.__FADE = '--fade';
var __VISIBLE = exports.__VISIBLE = '--visible';
var __ACTIVE = exports.__ACTIVE = '--active';
var __HIDDEN = exports.__HIDDEN = '--hidden';
var __SEALED = exports.__SEALED = '--sealed';
var __REVEALED = exports.__REVEALED = '--revealed';
var __EDIT = exports.__EDIT = '--edit';
var EVENTS = exports.EVENTS = {
  PAGE_MENU: {
    OPEN: 'pageMenu:open',
    CLOSE: 'pageMenu:close'
  },
  PAGE_SEARCH: {
    OPEN: 'pageSearch:open',
    CLOSE: 'pageSearch:close'
  },
  PAGE_SIDEBAR: {
    OPEN: 'pageSidebar:open',
    CLOSE: 'pageSidebar:close'
  }
};

},{}],29:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindUnlockDataLockedInput = bindUnlockDataLockedInput;
var _utils = require("./utils");
function bindUnlockDataLockedInput() {
  document.addEventListener('click', function (e) {
    var target = e.target;
    if (target.hasAttribute('data-locked-input')) {
      (0, _utils.unlockDataLockedInput)(target);
    }
  });
}

},{"./utils":33}],30:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fakeAjaxGetCustomer = fakeAjaxGetCustomer;
exports.fakeAjaxGetCustomers = fakeAjaxGetCustomers;
exports.fakeAjaxGetItem = fakeAjaxGetItem;
exports.fakeAjaxGetItemsArray = fakeAjaxGetItemsArray;
exports.fakeAjaxGetOrder = fakeAjaxGetOrder;
exports.fakeAjaxGetPtwData = fakeAjaxGetPtwData;
exports.fakeFetchPost = fakeFetchPost;
exports.fakeFetchRemoveOrder = fakeFetchRemoveOrder;
exports.fakeFetchSuccess = fakeFetchSuccess;
var _fakeData = require("./fake-data");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function fakeAjaxGetPtwData(itemID) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var data = (0, _fakeData.getFakePtwData)(itemID);
      // const data = false
      resolve(data);
    }, 500);
  });
}
function fakeFetchSuccess() {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var fakeResponse = {
        ok: true,
        statusText: 'OK',
        json: function () {
          var _json = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", {});
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function json() {
            return _json.apply(this, arguments);
          }
          return json;
        }()
      };
      resolve(fakeResponse);
    }, 1000);
  });
}
function fakeAjaxGetOrder(id) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var data = (0, _fakeData.getFakeManulOrder)(id);
      // const data = false
      resolve(data);
    }, 1500);
  });
}
function fakeAjaxGetCustomer(id) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var data = (0, _fakeData.getFakeCustomer)(id);
      // const data = false
      resolve(data);
    }, 1500);
  });
}
function fakeAjaxGetCustomers(query) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var data = (0, _fakeData.getFakeCustomersArr)(query);
      // const data = false
      resolve(data);
    }, 1500);
  });
}
function fakeAjaxGetItemsArray(query) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var data = (0, _fakeData.getFakeItemsArr)();
      // const data = []
      resolve(data);
    }, 2000);
  });
}
function fakeAjaxGetItem(id) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var data = (0, _fakeData.getFakeItem)();
      // const data = false
      resolve(data);
    }, 1500);
  });
}
function fakeFetchPost(url, options) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var fakeResponse = {
        ok: true,
        statusText: 'OK',
        json: function () {
          var _json2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", {});
                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function json() {
            return _json2.apply(this, arguments);
          }
          return json;
        }()
      };
      resolve(fakeResponse);
    }, 1500);
  });
}
function fakeFetchRemoveOrder(url, options) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      var fakeResponse = {
        ok: true,
        statusText: 'OK',
        json: function () {
          var _json3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  return _context3.abrupt("return", {});
                case 1:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          function json() {
            return _json3.apply(this, arguments);
          }
          return json;
        }()
      };
      resolve(fakeResponse);
    }, 2500);
  });
}

},{"./fake-data":31}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFakeCustomer = getFakeCustomer;
exports.getFakeCustomersArr = getFakeCustomersArr;
exports.getFakeItem = getFakeItem;
exports.getFakeItemsArr = getFakeItemsArr;
exports.getFakeManulOrder = getFakeManulOrder;
exports.getFakePtwData = getFakePtwData;
function getFakePtwData(itemID) {
  return {
    sku: '1234567890',
    price: '$24,500',
    imgSrc: "",
    colorOptions: [{
      active: true,
      value: "Yellow"
    }, {
      active: false,
      value: "White"
    }, {
      active: false,
      value: "Rose"
    }, {
      active: false,
      value: "Green"
    }, {
      active: false,
      value: "Blue"
    }],
    category: 'Watches'
  };
}
function getFakeItem() {
  return {
    title: 'Jesus Of Nazareth Diamond Pendant 14k Solid Gold 9.25ctw',
    img_src: 'https://www.icebox.com/unsafe/400x0/icebox-jewelry.s3.amazonaws.com/products/4d230c2794eea92434c287905a3da1ef.jpg',
    id: 23721,
    price: "32,590.50",
    salePrice: "14,590.50",
    options: [{
      "name": "Color",
      "type": "goldColor",
      "hidden": false,
      "set": [{
        "color": "Yellow",
        "active": true,
        "caption": "Yellow",
        "class": "Yellow"
      }]
    }, {
      "name": "Diamonds",
      "type": "diamonds_quality",
      "default_value": "VS",
      "set": [{
        "value": "VS",
        "caption": "VS",
        "active": true
      }]
    }, {
      "id": "97",
      "name": "Length",
      "type": "dropdown",
      "selected_value": "8.5",
      "show_inches": true,
      "set": [{
        "value": "6.5",
        "caption": "6.5"
      }, {
        "value": "7",
        "caption": "7"
      }, {
        "value": "7.5",
        "caption": "7.5"
      }, {
        "value": "8",
        "caption": "8"
      }, {
        "value": "8.5",
        "caption": "8.5",
        "active": true
      }],
      "chuncks": false
    }]
  };
}
function getFakeItemsArr() {
  return [{
    title: 'Jesus Of Nazareth Diamond Pendant 14k Solid Gold 9.25ctw',
    img_src: 'https://www.icebox.com/unsafe/400x0/icebox-jewelry.s3.amazonaws.com/products/4d230c2794eea92434c287905a3da1ef.jpg',
    id: 23721,
    price: "32,590.50"
  }, {
    title: '0.55ctw Double Halo Round Solitaire Miracle - Diamond Engagement Ring - All Natural',
    img_src: 'https://www.icebox.com/unsafe/400x0/icebox-jewelry.s3.amazonaws.com/products/24847fddc2e5b43a51764b6266009e7a.jpg',
    id: 23721,
    price: "990"
  }, {
    title: "Double Baguette Square Halo Diamond Engagement Ring 14k Solid Gold - All Natural - 1.10ctw",
    img_src: "https://www.icebox.com/unsafe/400x0/icebox-jewelry.s3.amazonaws.com/products/e662310abce6eff77ed5f31c8519662d.jpg",
    id: 23721,
    price: "1,690.75"
  }, {
    title: "Goat Head Diamond Pendant 14k Solid Gold 1.25ctw",
    img_src: "https://www.icebox.com/unsafe/400x0/icebox-jewelry.s3.amazonaws.com/products/7998fbdc0f99db2654ff77aa1c21fa81.jpg",
    id: 23721,
    price: "1,690.75"
  }, {
    title: "Gypsy Set Diamond Cluster Band Ring 14k Solid Gold 0.33ctw",
    img_src: "https://www.icebox.com/unsafe/400x0/icebox-jewelry.s3.amazonaws.com/products/6466b54ad54d1daf8a549aca989417bc.jpg",
    id: 23721,
    price: "1,690.75"
  }, {
    title: "Graduated Border Scattered Gypset Set Diamond Band 14k Solid Gold 0.75ctw",
    img_src: "https://www.icebox.com/unsafe/400x0/icebox-jewelry.s3.amazonaws.com/products/419cc1fd99d75e6b92dd2d9ed59302cc.jpg",
    id: 23721,
    price: "1,690.75"
  }];
}
function getFakeCustomersArr() {
  return [{
    id: 2052,
    last_name: "Smith",
    email: "8n0X0@example.com",
    phone: "404-555-1212",
    img_src: "https://www.icebox.com/unsafe/300x300/icebox-jewelry.s3.amazonaws.com/whales/8064aee9ea24ccd862f9a6b29b743f8f.png"
  }, {
    id: 2053,
    first_name: "John",
    last_name: "Green",
    email: "johngreeen01@gmail.com"
  }, {
    id: 2054,
    first_name: "John",
    last_name: "Doe"
  }, {
    id: 2052,
    first_name: "Andrew",
    last_name: "Smith",
    email: "8n0X0@example.com",
    phone: "404-555-1212"
  }, {
    id: 2053,
    first_name: "John",
    last_name: "Green",
    email: "johngreeen01@gmail.com",
    phone: "250-014-0022"
  }, {
    id: 2054,
    first_name: "John",
    last_name: "Doe",
    email: "johndoe01@gmail.com",
    phone: "250-014-0022"
  }, {
    id: 2052,
    first_name: "Andrew",
    last_name: "Smith",
    email: "8n0X0@example.com",
    phone: "404-555-1212"
  }, {
    id: 2053,
    first_name: "John",
    last_name: "Green",
    email: "johngreeen01@gmail.com",
    phone: "250-014-0022"
  }, {
    id: 2054,
    first_name: "John",
    last_name: "Doe",
    email: "johndoe01@gmail.com",
    phone: "250-014-0022"
  }];
}
function getFakeCustomer(id) {
  return getFakeCustomersArr()[0];
}
function getFakeManulOrder(id) {
  var customer = getFakeCustomer(id);
  var item = getFakeItem(id);
  return {
    customer: customer,
    item: item,
    other_details: {
      "sale_store": "flagship",
      "order_date": "01/29/2025",
      "edge_sync": "no",
      "gift_wrap": "yes",
      "picked_up_today": "no",
      "paid_in_full": "no",
      "tracking": "555",
      "today_payment": "251",
      "balance": "500",
      "paid_method": ["paid_zelle", "paid_paypal", "paid_check"]
    }
  };
}

},{}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachDatePickers = attachDatePickers;
exports.bindFingerSizeInput = bindFingerSizeInput;
exports.bindToggleCustomerRows = bindToggleCustomerRows;
exports.initLottieElements = initLottieElements;
exports.updateInputsAllowOnlyDecimals = updateInputsAllowOnlyDecimals;
var _utils = require("./utils");
var _lottie = _interopRequireDefault(require("../../lib/lottie"));
var _airDatepicker = _interopRequireDefault(require("../../lib/air-datepicker"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function updateInputsAllowOnlyDecimals() {
  var onlyDecimalsInputs = document.querySelectorAll('input[data-allow-decimals]');
  var _iterator = _createForOfIteratorHelper(onlyDecimalsInputs),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var input = _step.value;
      (0, _utils.inputAllowOnlyDecimals)(input);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function initLottieElements() {
  var lottieContainers = _toConsumableArray(document.querySelectorAll('[data-lottie="score"]'));
  lottieContainers.forEach(function (container) {
    var animation = _lottie["default"].loadAnimation({
      container: container,
      path: 'https://gist.githubusercontent.com/steinway1/e4c3c198b9f2fc369dd72a38f3c22c73/raw/5c7af07965df5f07684b619936285a7e64b57069/toolbar-score.json',
      autoplay: true,
      renderer: 'svg',
      loop: true
    });
  });
}
function attachDatePickers() {
  var arr = _toConsumableArray(document.querySelectorAll('[data-datepicker]'));
  var _iterator2 = _createForOfIteratorHelper(arr),
    _step2;
  try {
    var _loop = function _loop() {
      var input = _step2.value;
      var options = {
        autoClose: false,
        timepicker: true,
        onSelect: function onSelect(_ref) {
          var date = _ref.date;
          var datePart = date.toLocaleDateString('en-US', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
          });
          var timePart = date.toLocaleTimeString('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
          });
          timePart = timePart.replace('am', 'AM').replace('pm', 'PM');
          input.value = "".concat(datePart, " ").concat(timePart);
        }
      };

      // Если есть атрибут data-date-today, устанавливаем текущую дату
      if (input.hasAttribute('data-date-today')) {
        options.date = new Date(); // Устанавливаем текущую дату как выбранную

        // Форматируем дату сразу для input.value
        var today = new Date();
        var datePart = today.toLocaleDateString('en-US', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });
        var timePart = today.toLocaleTimeString('en-US', {
          hour: '2-digit',
          minute: '2-digit',
          hour12: true
        });
        timePart = timePart.replace('am', 'AM').replace('pm', 'PM');
        input.value = "".concat(datePart);
      }
      new _airDatepicker["default"](input, options);
    };
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
function bindToggleCustomerRows() {
  var arr = _toConsumableArray(document.querySelectorAll(['[data-evt="toggleCustomerRow"]']));
  var _iterator3 = _createForOfIteratorHelper(arr),
    _step3;
  try {
    var _loop2 = function _loop2() {
      var elem = _step3.value;
      elem.addEventListener('click', function () {
        var row = elem.closest('.limit-form__row');
        var text = elem.dataset.text || 'More Details';
        if (row) {
          if (row.classList.contains('--collapsed')) {
            row.classList.remove('--collapsed');
            elem.textContent = 'Hide';
          } else {
            row.classList.add('--collapsed');
            elem.textContent = text;
          }
        }
      });
    };
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}
function bindFingerSizeInput() {
  var arr = _toConsumableArray(document.querySelectorAll('[data-finger-input]'));
  var validateValue = function validateValue(value) {
    var num = parseFloat(value);
    return /^(\d+(\.5?)?)?$/.test(value) && num <= 25;
  };
  var _iterator4 = _createForOfIteratorHelper(arr),
    _step4;
  try {
    var _loop3 = function _loop3() {
      var input = _step4.value;
      input.addEventListener('input', function () {
        // Resrtict Numeric Value
        var value = input.value;
        if (!validateValue(value)) {
          input.value = value.slice(0, -1);
        }
      });
    };
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      _loop3();
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
}

},{"../../lib/air-datepicker":3,"../../lib/lottie":4,"./utils":33}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addClasses = addClasses;
exports.allowInputDigits = allowInputDigits;
exports.allowInputSum = allowInputSum;
exports.createElem = createElem;
exports.delay = delay;
exports.formatAsCurrency = formatAsCurrency;
exports.getAdminUserName = getAdminUserName;
exports.getTransitionTime = getTransitionTime;
exports.inputAllowOnlyDecimals = inputAllowOnlyDecimals;
exports.lockScroll = lockScroll;
exports.onContentLoaded = onContentLoaded;
exports.pageBackdropOff = pageBackdropOff;
exports.pageBackdropOn = pageBackdropOn;
exports.removeClasses = removeClasses;
exports.showMessage = showMessage;
exports.toArray = toArray;
exports.unlockDataLockedInput = unlockDataLockedInput;
exports.unlockScroll = unlockScroll;
var _lockPin = _interopRequireDefault(require("../dynamic/lock-pin"));
var _pageMsg = _interopRequireDefault(require("../dynamic/page-msg"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function createElem(tagName, options) {
  var className = options.className,
    id = options.id,
    innerHTML = options.innerHTML,
    style = options.style,
    attributes = options.attributes,
    toAppend = options.toAppend;
  var elem = document.createElement(tagName);
  if (className) elem.className = className;
  if (id) elem.id = id;
  if (innerHTML) elem.innerHTML = innerHTML;
  if (style) {
    for (var key in options.style) {
      elem.style[key] = options.style[key];
    }
  }
  if (attributes) {
    for (var _key in options.attributes) {
      elem.setAttribute(_key, options.attributes[_key]);
    }
  }
  if (toAppend) {
    var _iterator = _createForOfIteratorHelper(toArray(toAppend)),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var child = _step.value;
        elem.appendChild(child);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return elem;
}
function getTransitionTime(el) {
  return parseFloat(window.getComputedStyle(el).transitionDuration) * 1000;
}
function inputAllowOnlyDecimals(input) {
  input.addEventListener('input', function () {
    input.value = input.value.replace(/[^0-9.]/g, '');
  });
}
function lockScroll() {
  setTimeout(function () {
    if (!document.body.hasAttribute("ib-scroll-lock")) {
      var o = window.pageYOffset || document.documentElement.scrollTop;
      document.body.setAttribute("ib-scroll-lock", o), document.body.style.overflow = "hidden", document.body.style.position = "fixed", document.body.style.top = "-" + o + "px", document.body.style.left = "0", document.body.style.width = "100%";
    }
  }, 1);
}
function unlockScroll() {
  if (document.body.hasAttribute("ib-scroll-lock")) {
    var o = document.body.getAttribute("ib-scroll-lock");
    document.body.removeAttribute("ib-scroll-lock"), document.body.style.overflow = "", document.body.style.position = "", document.body.style.top = "", document.body.style.left = "", document.body.style.width = "", window.scroll(0, o);
  }
}
function toArray(value) {
  return Array.isArray(value) ? value : [value];
}
function delay(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
}
function removeClasses(target) {
  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {
    classes[_key2 - 1] = arguments[_key2];
  }
  for (var _i = 0, _classes = classes; _i < _classes.length; _i++) {
    var cls = _classes[_i];
    target.classList.remove(cls);
  }
}
function addClasses(target) {
  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
    classes[_key3 - 1] = arguments[_key3];
  }
  for (var _i2 = 0, _classes2 = classes; _i2 < _classes2.length; _i2++) {
    var cls = _classes2[_i2];
    target.classList.add(cls);
  }
}
function getAdminUserName() {
  return 'Zahir';
}
function allowInputDigits(input) {
  input.addEventListener('input', function (e) {
    e.target.value = e.target.value.replace(/\D/g, '');
  });
}
function formatAsCurrency(string) {
  string = typeof string === 'string' ? string : string.toString();
  var number = parseFloat(string.replace(/,/g, ''));
  var parts = number.toFixed(2).split('.');
  var digits = parts[0];
  var decimal = parts[1];
  var integer = digits.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  return "".concat(integer, ".").concat(decimal);
}
function allowInputSum(input) {
  input.addEventListener('input', function (e) {
    e.target.value = e.target.value.replace(/[^0-9.,]/g, '').replace(/,/g, '.');
    if (/^0+/.test(e.target.value)) {
      e.target.value = e.target.value.replace(/^0+/, '');
    }
  });
  input.addEventListener('keydown', function (e) {
    var alreadyContainsDotOrComma = e.target.value.includes('.') || e.target.value.includes(',');
    if (alreadyContainsDotOrComma && (e.key === '.' || e.key === ',')) {
      e.preventDefault();
    }
  });
}
function onContentLoaded(callback) {
  if (document.readyState !== 'loading') {
    callback();
  } else {
    document.addEventListener('DOMContentLoaded', callback);
  }
}
function pageBackdropOn() {
  var pageBackdrop = document.querySelector('.am-backdrop');
  pageBackdrop.style.display = 'block';
  setTimeout(function () {
    pageBackdrop.style.opacity = '1';
  }, 1);
}
function pageBackdropOff() {
  var pageBackdrop = document.querySelector('.am-backdrop');
  pageBackdrop.style.opacity = '0';
  setTimeout(function () {
    pageBackdrop.style.display = 'none';
  }, getTransitionTime(pageBackdrop));
}
function unlockDataLockedInput(input) {
  var callback = function callback() {
    input.removeAttribute('data-locked-input');
    input.disabled = false;
    input.classList.remove('--disabled');
  };
  var pin = new _lockPin["default"]({
    code: 3256,
    callback: callback
  });
  pin.push();
}
function showMessage(type, heading, msg) {
  var pageMsg = new _pageMsg["default"]({
    type: type,
    heading: heading,
    msg: msg
  });
  pageMsg.show();
}

},{"../dynamic/lock-pin":10,"../dynamic/page-msg":11}],34:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ajax = require("../general/ajax");
var _fakeAjax = require("../general/fake-ajax");
var _pageMsg = _interopRequireDefault(require("../dynamic/page-msg"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ManualOrderCustomerSearch = exports["default"] = /*#__PURE__*/function () {
  /**
   * @param {HTMLElement} container — Root element contains input & list container
   * @returns
   */
  function ManualOrderCustomerSearch(container, formInstance) {
    _classCallCheck(this, ManualOrderCustomerSearch);
    this.container = container;
    this.input = document.querySelector('#customerSearchInput');
    this.resultsList = this.container.querySelector('.m-popup__search-list');
    this.msgElement = this.container.querySelector('.m-popup__msg');
    this.formInstance = formInstance;
    if (!this.resultsList || !this.input) {
      console.warn('ERR: MPS001. Results list or input not found');
      return;
    }
    this.selectedCustomer = null;
    this.searchDelay = 1000;
    this.searchTimeout = null;
    this.init();
  }
  return _createClass(ManualOrderCustomerSearch, [{
    key: "init",
    value: function init() {
      this.bindEvents();
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this = this;
      this.input.addEventListener('focus', function () {
        if (_this.formInstance) {
          _this.formInstance.clearMsg();
        }
      });
      this.input.addEventListener('input', function (e) {
        if (_this.searchTimeout) {
          clearTimeout(_this.searchTimeout);
        }
        if (_this.formInstance) {
          _this.formInstance.clearMsg();
        }
        var val = e.target.value.trim();
        _this.resultsList.classList.add('--o-loading');
        _this.resultsList.classList.remove('--filled');
        _this.resultsList.classList.remove('--empty');
        if (!val) {
          _this.resultsList.classList.remove('--o-loading');
          _this.clearResults();
          return;
        }
        _this.searchTimeout = setTimeout(function () {
          _this.performSearch(val);
        }, _this.searchDelay);
      });
    }
  }, {
    key: "performSearch",
    value: function () {
      var _performSearch = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(query) {
        var results;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.disable();
              this.toggleCheckboxVisibiltiy(false);
              _context.prev = 2;
              _context.next = 5;
              return (0, _ajax.AjaxGetCustomersArray)(query);
            case 5:
              results = _context.sent;
              // const results = await fakeAjaxGetCustomers(query)
              this.toggleCheckboxVisibiltiy(true);
              if (!(Array.isArray(results) && !results.length)) {
                _context.next = 10;
                break;
              }
              this.showEmptyResult();
              return _context.abrupt("return");
            case 10:
              if (results) {
                _context.next = 14;
                break;
              }
              this.formInstance.showMsg('error', 'Something went wrong...');
              this.clearResults();
              return _context.abrupt("return");
            case 14:
              this.renderResults(results);
              this.resultsList.classList.add('--filled');
              _context.next = 21;
              break;
            case 18:
              _context.prev = 18;
              _context.t0 = _context["catch"](2);
              console.warn('ERR: MPS003. Search error', _context.t0);
            case 21:
              _context.prev = 21;
              this.enable();
              this.formInstance.clearMsg();
              this.resultsList.classList.remove('--o-loading');
              return _context.finish(21);
            case 26:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[2, 18, 21, 26]]);
      }));
      function performSearch(_x) {
        return _performSearch.apply(this, arguments);
      }
      return performSearch;
    }()
  }, {
    key: "renderResults",
    value: function renderResults(customers) {
      this.resultsList.innerHTML = customers.map(function (customer) {
        return "\n      <div data-evt=\"setupManualCustomer\" data-id=\"".concat(customer.id, "\" class=\"m-popup__list-item --customer\">\n      <div class=\"am_flex8 --def\">\n        ").concat(customer.img_src ? "<img src=\"".concat(customer.img_src, "\" alt=\"\">") : '', "\n        <div>\n          <h6>").concat(customer.first_name ? "".concat(customer.first_name, " ") : '').concat(customer.last_name ? "".concat(customer.last_name) : '', "</h6>\n          <div class=\"am_flex8\">\n            ").concat(customer.first_name ? "<span>First Name: ".concat(customer.first_name, "</span>") : '', "\n            ").concat(customer.last_name ? "<span>Last Name: ".concat(customer.last_name, "</span>") : '', "\n            ").concat(customer.email ? "<span>Email: ".concat(customer.email, "</span>") : '', "\n            ").concat(customer.phone ? "<span>Phone: ".concat(customer.phone, "</span>") : '', "\n          </div>\n        </div>\n      </div>\n      </div>\n    ");
      }).join('');
    }
  }, {
    key: "clearResults",
    value: function clearResults() {
      this.resultsList.innerHTML = '';
      this.resultsList.className = 'm-popup__search-list';
    }
  }, {
    key: "disable",
    value: function disable() {
      this.input.disabled = true;
      this.container.classList.add('--disabled');
    }
  }, {
    key: "enable",
    value: function enable() {
      this.input.disabled = false;
      this.container.classList.remove('--disabled');
    }
  }, {
    key: "showEmptyResult",
    value: function showEmptyResult() {
      this.resultsList.className = 'm-popup__search-list --empty';
    }
  }, {
    key: "reset",
    value: function reset() {
      this.clearResults();
      this.input.value = '';
    }
  }, {
    key: "fullReset",
    value: function fullReset() {
      this.formInstance.resetSelectedCustomer();
      this.reset();
      clearTimeout(this.searchTimeout);
      this.clearResults();
    }
  }, {
    key: "toggleCheckboxVisibiltiy",
    value: function toggleCheckboxVisibiltiy(cond) {
      var elem = document.querySelector('input[value="addCustomerManually"]');
      if (elem) {
        var label = elem.parentElement;
        if (cond) {
          label.style.display = 'flex';
          return;
        }
        label.style.display = 'none';
      }
    }
  }]);
}();

},{"../dynamic/page-msg":11,"../general/ajax":27,"../general/fake-ajax":30}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _validator = _interopRequireDefault(require("./validator"));
var _productSearch = _interopRequireDefault(require("./product-search"));
var _customerSearch = _interopRequireDefault(require("./customer-search"));
var _fakeAjax = require("../general/fake-ajax");
var _pageMsg = _interopRequireDefault(require("../dynamic/page-msg"));
var _lockPin = _interopRequireDefault(require("../dynamic/lock-pin"));
var _ajax = require("../general/ajax");
var _utils = require("../general/utils");
var _initFn = require("../general/init-fn");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ManualOrderForm = exports["default"] = /*#__PURE__*/function () {
  function ManualOrderForm(rootEl, popupInstance, orderID) {
    _classCallCheck(this, ManualOrderForm);
    this.rootEl = rootEl;
    if (!this.rootEl) {
      return;
    }
    this._onDocumentClick = this._onDocumentClick.bind(this);
    this.popupInstance = popupInstance;
    this.form = document.querySelector('#addManulOrderForm');
    this.selectedItem = null;
    this.selectedItemElem = null;
    this.selectedCustomer = null;
    this.selectedCustomerElem = null;
    this.otherDetails = null;
    this.orderID = orderID;
    this.setFromOrder = false;
    this.contentItem = document.querySelector('#contentItem');
    this.contentCustomer = document.querySelector('#contentCustomer');
    this.customerInputArr = _toConsumableArray(document.querySelectorAll('[data-customer-input]'));
    this.customerInputFirstName = document.querySelector('#customerFirstName');
    this.customerInputId = document.querySelector('#customer_id_input');
    this.customerInputLastName = document.querySelector('#customerLastName');
    this.customerInputEmail = document.querySelector('#customerEmail');
    this.customerInputPhone = document.querySelector('#customerPhone');
    this.customerPhotoWrap = document.querySelector('.m-popup__custom-pic-wrap');
    this.customerPhotoElem = document.querySelector('[data-customer-photo]');
    this.selectPickedToday = document.querySelector('#pickedUpToday');
    this.balanceElem = document.querySelector('[data-other-balance]');
    this.steps = _toConsumableArray(this.rootEl.querySelectorAll('.m-popup__step'));
    this.searchProductContainer = document.querySelector('#searchListItems');
    this.searchCustomerContainer = document.querySelector('#searchListCustomers');
    this.selectedItemContainer = document.querySelector('#selectedItemContainer');
    this.msgEl = this.rootEl.querySelector('.m-popup__msg');
    this.init();
  }
  return _createClass(ManualOrderForm, [{
    key: "init",
    value: function init() {
      if (!this.searchProductContainer) {
        console.warn('ERR: MPS02. Search product container not found');
      }
      this.productSearch = new _productSearch["default"](this.searchProductContainer, this);
      this.customerSearch = new _customerSearch["default"](this.searchCustomerContainer, this);
      this.setupInitialSteps();
      this.goStep(1);
      this.bindBalanceToggle();
      if (this.orderID) {
        this.setupFromOrder(this.orderID);
      }
    }

    // setup from Order
  }, {
    key: "setupFromOrder",
    value: function () {
      var _setupFromOrder = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(orderID) {
        var order;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.disable();

              /**
              * @CHOU Setup here
              * Need to setup function to fetch order's details
              * if they open this form by clicking "Edit Order" button
              * const order = await fakeAjaxGetOrder(orderID)
              */
              _context.next = 3;
              return (0, _fakeAjax.fakeAjaxGetOrder)(orderID);
            case 3:
              order = _context.sent;
              if (!(!order || Object.keys(order).length === 0)) {
                _context.next = 8;
                break;
              }
              new _pageMsg["default"]({
                heading: 'Invalid Order',
                msg: 'The order you are trying to edit was not found or this order is not manually created'
              });
              this.popupInstance.close();
              return _context.abrupt("return");
            case 8:
              this.setFromOrder = true;
              this.fillFormFromOrder(order);
              this.enable();
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function setupFromOrder(_x) {
        return _setupFromOrder.apply(this, arguments);
      }
      return setupFromOrder;
    }()
  }, {
    key: "fillFormFromOrder",
    value: function fillFormFromOrder(order) {
      var _this = this;
      var customer = order.customer,
        item = order.item,
        other_details = order.other_details;
      this.selectedCustomer = customer;
      this.selectedItem = item;
      var sections = [{
        key: 'customer',
        value: customer,
        handler: this.fillCustomerInputs.bind(this)
      }, {
        key: 'item',
        value: item,
        handler: this.renderManualItem.bind(this)
      }, {
        key: 'other_details',
        value: other_details,
        handler: this.fillOtherDetails.bind(this)
      }];
      var sectionHandler = function sectionHandler(section) {
        var key = section.key,
          value = section.value,
          handler = section.handler;
        if (!value) {
          new _pageMsg["default"]({
            heading: 'Something went wrong',
            msg: "".concat(key, " not found")
          });
          _this.popupInstance.close();
          return;
        }
        handler(value);
      };
      sections.forEach(sectionHandler);
    }

    // Bind Initial events
  }, {
    key: "bindBalanceToggle",
    value: function bindBalanceToggle() {
      var _this2 = this;
      this.selectPickedToday.onchange = function () {
        var enable = _this2.selectPickedToday.value === 'no' ? true : false;
        _this2.balanceElem.classList.toggle('hidden', !enable);
      };
    }

    // Utils
  }, {
    key: "disable",
    value: function disable() {
      // this.rootEl.querySelectorAll('input').forEach(input => {
      //   if (!input.dataset.lockedInput) {
      //     input.disabled = true
      //   }
      // })
      this.rootEl.classList.add('--o-loading');
      this.rootEl.classList.add('--disabled');
    }
  }, {
    key: "enable",
    value: function enable() {
      this.rootEl.querySelectorAll('input').forEach(function (input) {
        if (input.hasAttribute('data-locked-input')) {
          return;
        }
        // input.disabled = false
      });
      this.rootEl.classList.remove('--o-loading');
      this.rootEl.classList.remove('--disabled');
    }
  }, {
    key: "resetSelectedItem",
    value: function resetSelectedItem() {
      this.contentItem.classList.remove('--show-selected');
      this.productSearch.reset();
      this.selectedItemContainer.innerHTML = '';
      this.selectedItem = null;
      this.selectedItemElem = null;
    }
  }, {
    key: "resetSelectedCustomer",
    value: function resetSelectedCustomer() {
      var container = document.querySelector('#selectedCustomerInputs');
      if (container) {
        var inputArr = _toConsumableArray(container.querySelectorAll('input'));
        inputArr.forEach(function (input) {
          input.value = '';
        });
      }
      if (this.customerPhotoElem) {
        this.customerPhotoElem.src = '';
        this.customerPhotoWrap.classList.remove('--filled');
      }
      if (this.customerSearch) {
        this.customerSearch.reset();
      }
    }
  }, {
    key: "resetOtherDetails",
    value: function resetOtherDetails() {
      var otherDetails = this.rootEl.querySelector('#otherDetails');
      if (otherDetails) {
        var textInputArr = _toConsumableArray(otherDetails.querySelectorAll('input[type="text"]'));
        textInputArr.forEach(function (input) {
          input.value = '';
        });
        var selectArr = _toConsumableArray(otherDetails.querySelectorAll('select'));
        selectArr.forEach(function (select) {
          select.value = '';
        });
      }
    }
  }, {
    key: "fullReset",
    value: function fullReset() {
      this.enable();
      this.resetSelectedItem();
      this.resetOtherDetails();
      this.resetSelectedCustomer();
      this.goStep(1);
      this.clearMsg();
    }

    // General Methods
  }, {
    key: "showMsg",
    value: function showMsg(type) {
      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Something went wrong...';
      this.rootEl.classList.add('--show-msg');
      this.rootEl.classList.add("--".concat(type));
      this.msgEl.textContent = msg;
    }
  }, {
    key: "clearMsg",
    value: function clearMsg() {
      this.rootEl.classList.remove('--show-msg');
      this.rootEl.classList.remove('--error');
      this.rootEl.classList.remove('--success');
    }

    // Events
  }, {
    key: "_bindDocumentClick",
    value: function _bindDocumentClick() {
      document.addEventListener('click', this._onDocumentClick);
    }
  }, {
    key: "_unbindDocumentClick",
    value: function _unbindDocumentClick() {
      document.removeEventListener('click', this._onDocumentClick);
    }
  }, {
    key: "_onDocumentClick",
    value: function _onDocumentClick(e) {
      /** General Events */
      if (e.target.closest('[data-manual-close]')) {
        this.popupInstance.close();
      }
      if (e.target.closest('.m-popup__input-row')) {
        this.clearMsg();
      }

      /** Items */
      if (e.target.closest('[data-evt="resetManualItem"]')) {
        this.resetSelectedItem();
      }
      if (e.target.closest('[data-evt="setupManualItem"]')) {
        var id = e.target.closest('[data-id]').getAttribute('data-id');
        if (!id) {
          console.warn('ERR: MOF03. Item ID not found');
          new _pageMsg["default"]({
            type: 'error',
            heading: 'Invalid Item',
            msg: 'ERR: MOF03. Item ID not found. Reference data-id attribute'
          });
          return;
        }
        this.setupManualItem(id);
      }

      /** Customer */
      if (e.target.closest('[data-evt="resetManualCustomer"]')) {
        this.resetSelectedCustomer();
      }
      if (e.target.closest('[data-evt="setupManualCustomer"]')) {
        var _id = e.target.closest('[data-id]').getAttribute('data-id');
        if (!_id) {
          console.warn('ERR: MOF07. Customer ID not found');
          new _pageMsg["default"]({
            type: 'error',
            heading: 'Invalid Customer',
            msg: 'ERR: MOF07. Customer ID not found. Reference data-id attribute'
          });
          return;
        }
        this.setupManualCustomer(_id);
      }

      /** Step Switch */
      if (e.target.closest('[data-next-step]')) {
        this.clearMsg();
        this.go();
      }
      if (e.target.closest('[data-prev-step]')) {
        this.clearMsg();
        this.goStep(this.currentStep - 1);
      }

      /** Remove Sale */
      if (e.target.closest('[data-evt="removeManualSale"]')) {
        var callback = function callback() {
          var inputArr = e.target.parentNode.querySelectorAll('input');
          var hiddenInput = inputArr[0];
          var saleInput = inputArr[1];
          hiddenInput.hidden = !hiddenInput.hidden;
          saleInput.hidden = !saleInput.hidden;
          if (hiddenInput.hidden) {
            e.target.textContent = 'Edit Price';
          } else {
            e.target.textContent = 'Set Regular Price';
          }
        };
        var pin = new _lockPin["default"]({
          code: 9999,
          callback: callback
        });
        pin.push();
      }

      /** Delete Item */
      if (e.target.closest('[data-evt="deleteManualItem"]')) {
        var item = e.target.closest('.m-popup__list-item');
        if (item) {
          var grid = item.nextElementSibling;
          if (grid) {
            grid.remove();
            item.remove();
          }
        }
      }
    }

    // Select item methods
  }, {
    key: "setupManualItem",
    value: function () {
      var _setupManualItem = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id) {
        var item;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.disable();
              _context2.prev = 1;
              _context2.next = 4;
              return (0, _ajax.AjaxGetItem)(id);
            case 4:
              item = _context2.sent;
              if (item) {
                _context2.next = 8;
                break;
              }
              this.showMsg('error', 'Item not found');
              return _context2.abrupt("return");
            case 8:
              this.selectedItem = item;
              this.renderManualItem(item);
              this.productSearch.reset();
              _context2.next = 16;
              break;
            case 13:
              _context2.prev = 13;
              _context2.t0 = _context2["catch"](1);
              console.error('ERR: MOF04. Fetch item failed', _context2.t0);
            case 16:
              _context2.prev = 16;
              this.enable();
              return _context2.finish(16);
            case 19:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[1, 13, 16, 19]]);
      }));
      function setupManualItem(_x2) {
        return _setupManualItem.apply(this, arguments);
      }
      return setupManualItem;
    }()
  }, {
    key: "renderManualItem",
    value: function renderManualItem(item) {
      this.contentItem.classList.add('--show-selected');
      // Create main element of selected item
      var createPriceElem = function createPriceElem() {
        var html = '';
        if (item.salePrice) {
          html = "\n            <input type=\"text\" data-locked-input data-allow-decimals name=\"price[]\" data-old-price class=\"m-popup__input --bold --disabled --auto\" value=\"".concat(item.price, "\" hidden>\n            <input type=\"text\" data-sale-price data-allow-decimals name=\"sale_price[]\" class=\"m-popup__input --bold --disabled --auto\" value=\"").concat(item.salePrice, "\">\n            <div class=\"button ghost-btn --auto --red\" data-evt=\"removeManualSale\">Edit Price</div>\n            ");
        } else {
          html = "\n            <input type=\"text\" data-locked-input data-allow-decimals name=\"price[]\" class=\"m-popup__input --bold --disabled --auto\" value=\"".concat(item.price, "\">\n            ");
        }
        return html;
      };
      var elem = (0, _utils.createElem)('div', {
        className: 'm-popup__list-item --selected',
        innerHTML: "\n        <div class=\"m-popup__list-item-remove\" data-evt=\"deleteManualItem\"></div>\n        <input type=\"hidden\" name=\"products[]\" value=\"".concat(item.id, "\"/>\n        <img src=\"").concat(item.img_src, "\" alt=\"\">\n        <div class=\"m-popup__list-item-col\">\n          <input type=\"text\" name=\"item_title\" class=\"m-popup__input --bold\" value=\"").concat(item.title, "\">\n          <div class=\"am_flex8 m-popup__list-item-price\">\n            ").concat(createPriceElem(), "\n          </div>\n        </div>\n      ")
      });

      // Create reset button
      var resetButton = (0, _utils.createElem)('div', {
        className: 'blank-btn --red',
        attributes: {
          'data-evt': 'resetManualItem'
        },
        innerHTML: 'Delete item'
      });

      // Function for creating dropdown (select) for each option
      var createSelectFields = function createSelectFields() {
        var options = item.options;
        if (!options || !options.length) return null;
        var gridElement = document.createElement('div');
        gridElement.classList.add('m-popop__manual-options-grid');
        var selectElementsHTML = options.map(function (option) {
          // Определяем содержимое для тега select
          var selectContent;
          if (option.set.length === 1) {
            // Если только один элемент - выбираем его по умолчанию
            var singleOption = option.set[0];
            selectContent = "<option value=\"".concat(singleOption.caption, "\" selected>").concat(singleOption.caption, "</option>");
          } else {
            // Для нескольких элементов добавляем заглушку
            selectContent = "\n            <option value=\"\" selected disabled>".concat(option.name, "</option>\n            ").concat(option.set.map(function (select) {
              return "<option value=\"".concat(select.caption, "\">").concat(select.caption, "</option>");
            }).join(''), "\n          ");
          }
          return "\n          <div class=\"m-popup__input-row\">\n            <div class=\"m-popup__input-wrap\">\n              <div class=\"am-select-wrap\">\n                <select class=\"am-select\" name=\"".concat(option.input_name, "\" required>\n                  ").concat(selectContent, "\n                </select>\n              </div>\n            </div>\n          </div>\n        ");
        }).join('');
        gridElement.innerHTML = selectElementsHTML;
        return gridElement;
      };
      var selectFields = createSelectFields();

      // Add elements to container
      this.selectedItemElem = elem;
      this.selectedItemContainer.appendChild(elem);
      if (selectFields) {
        this.selectedItemContainer.appendChild(selectFields);
      }
      (0, _initFn.updateInputsAllowOnlyDecimals)();
      // this.selectedItemContainer.appendChild(resetButton)
    }

    // Select customer methods
  }, {
    key: "setupManualCustomer",
    value: function () {
      var _setupManualCustomer = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id) {
        var customer;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              this.disable();
              _context3.prev = 1;
              _context3.next = 4;
              return (0, _ajax.AjaxGetCustomer)(id);
            case 4:
              customer = _context3.sent;
              if (customer) {
                _context3.next = 8;
                break;
              }
              this.showMsg('error', 'Customer not found');
              return _context3.abrupt("return");
            case 8:
              this.selectedCustomer = customer;
              this.fillCustomerInputs(customer);
              this.customerSearch.reset();
              _context3.next = 16;
              break;
            case 13:
              _context3.prev = 13;
              _context3.t0 = _context3["catch"](1);
              console.error('ERR: MOF12. Fetch customer failed', _context3.t0);
            case 16:
              _context3.prev = 16;
              this.enable();
              return _context3.finish(16);
            case 19:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[1, 13, 16, 19]]);
      }));
      function setupManualCustomer(_x3) {
        return _setupManualCustomer.apply(this, arguments);
      }
      return setupManualCustomer;
    }()
  }, {
    key: "fillCustomerInputs",
    value: function fillCustomerInputs(customer) {
      var customer_id = customer.customer_id,
        first_name = customer.first_name,
        last_name = customer.last_name,
        email = customer.email,
        phone = customer.phone,
        img_src = customer.img_src;
      var resetButton = (0, _utils.createElem)('div', {
        className: 'blank-btn',
        attributes: {
          'data-evt': 'resetManualCustomer'
        },
        innerHTML: 'Reset customer'
      });
      var warnMsg = function warnMsg(msg) {
        new _pageMsg["default"]({
          type: 'error',
          heading: 'Warning',
          msg: msg
        });
      };
      if (customer_id) this.customerInputId.value = customer_id;
      if (first_name) this.customerInputFirstName.value = first_name;
      if (last_name) this.customerInputLastName.value = last_name;
      if (email && !this.customerInputEmail.disabled) this.customerInputEmail.value = email;
      if (phone) this.customerInputPhone.value = phone;
      if (this.customerPhotoWrap) {
        this.customerPhotoWrap.classList.remove('--filled');
        if (img_src && this.customerPhotoElem) {
          this.customerPhotoElem.src = img_src;
          this.customerPhotoWrap.classList.add('--filled');
        }
      }
    }

    // Other Details
  }, {
    key: "fillOtherDetails",
    value: function fillOtherDetails(details) {
      var _this3 = this;
      var handleFormElement = function handleFormElement(name, value) {
        var element = _this3.form.querySelector("[name=\"".concat(name, "\"]"));
        if (element) {
          var tagName = element.tagName.toLowerCase();
          if (Array.isArray(value)) {
            if (tagName === 'input' && element.type === 'checkbox') {
              var _iterator = _createForOfIteratorHelper(value),
                _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var val = _step.value;
                  var elem = _this3.form.querySelector("[name=\"".concat(name, "\"][value=\"").concat(val, "\"]"));
                  elem.checked = true;
                  elem.dispatchEvent(new Event('change', {
                    bubbles: true
                  }));
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
            }
          } else {
            if (tagName === 'input') {
              element.value = value;
            } else if (tagName === 'select') {
              element.value = value;
              element.dispatchEvent(new Event('change', {
                bubbles: true
              }));
            }
          }
        }
      };
      for (var value in details) {
        handleFormElement(value, details[value]);
      }
    }

    // Switch steps
  }, {
    key: "setupInitialSteps",
    value: function setupInitialSteps() {
      var steps = _toConsumableArray(this.rootEl.querySelectorAll('[data-step]'));
      var bar = this.rootEl.querySelector('.m-popup__progress-bar span');
      var title = this.rootEl.querySelector('.m-popup__progress-title');
      var nextStepBtn = this.rootEl.querySelector('[data-next-step]');
      var prevStepBtn = this.rootEl.querySelector('[data-prev-step]') || this.rootEl.querySelector('[data-manual-close]');
      if (!steps || !title || !bar) return;
      this.steps = steps;
      this.progressTitle = title;
      this.progressBar = bar;
      this.currentStep = 1;
      this.stepTitles = ['Step 1. Client info.', 'Step 2. Item details.', 'Step 3. Other details.'];
      if (nextStepBtn && prevStepBtn) {
        this.nextStepBtn = nextStepBtn;
        this.prevStepBtn = prevStepBtn;
      }
    }
  }, {
    key: "goStep",
    value: function goStep() {
      var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      if (step < 1) {
        new _pageMsg["default"]({
          msg: "ERR: MOF88. Step can't be less than 1"
        });
        step = 1;
      }
      if (step > this.steps.length) {
        new _pageMsg["default"]({
          msg: "ERR: MOF89. Step can't be more than " + this.steps.length
        });
        step = this.steps.length;
      }
      this.currentStep = step;
      var container = this.steps[step - 1];
      var isLastStep = this.currentStep === this.steps.length;
      var isFirstStep = this.currentStep === 1;
      this.progressTitle.textContent = this.stepTitles[step - 1];
      this.progressBar.style.width = "".concat(step / this.steps.length * 100, "%");
      this.steps.forEach(function (elem) {
        if (elem === container) {
          elem.style.display = 'block';
        } else {
          elem.style.display = 'none';
        }
      });
      if (this.nextStepBtn) {
        var text = step === this.steps.length ? 'Finish' : 'Next Step';
        this.nextStepBtn.textContent = text;

        // this.nextStepBtn.toggleAttribute('data-next-step', !isLastStep);
        // this.nextStepBtn.toggleAttribute('data-manual-submit', isLastStep);
      }
      if (this.prevStepBtn) {
        var _text = step === 1 ? 'Close' : 'Previous Step';
        this.prevStepBtn.textContent = _text;
        this.prevStepBtn.toggleAttribute('data-prev-step', !isFirstStep);
        this.prevStepBtn.toggleAttribute('data-manual-close', isFirstStep);
      }
    }
  }, {
    key: "go",
    value: function go() {
      var contentType = this.currentStep === 1 ? 'customer' : this.currentStep === 2 ? 'item' : 'other';
      //alert(contentType)
      var validator = new _validator["default"](contentType, this.steps[this.currentStep - 1]);
      var validate = validator.run();
      if (!validate.result) {
        this.showMsg('error', validate.msg);
        return;
      }
      if (this.currentStep === this.steps.length) {
        this.submit();
      } else {
        this.goStep(this.currentStep + 1);
      }
    }

    // Close & Submit
  }, {
    key: "getFormData",
    value: function getFormData() {
      var formData = new FormData(this.form);
      var config = {
        ignore: ['itemSearch', 'customerSearch'],
        arrays: ['paid_method']
      };
      var result = Object.fromEntries(config.arrays.map(function (key) {
        return [key, formData.getAll(key)];
      }).filter(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          _ = _ref2[0],
          values = _ref2[1];
        return values.length > 0;
      }));
      var cleanEntries = Array.from(formData).filter(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 1),
          key = _ref4[0];
        return ![].concat(_toConsumableArray(config.ignore), _toConsumableArray(config.arrays)).includes(key);
      });
      return _objectSpread(_objectSpread({}, Object.fromEntries(cleanEntries)), result);
    }
  }, {
    key: "submit",
    value: function () {
      var _submit = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var data, response;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              data = this.getFormData();
              this.disable();
              if (!(!data || Object.keys(data).length === 0)) {
                _context4.next = 6;
                break;
              }
              this.enable();
              this.showMsg('error', 'ERR: MOF99. Form data is empty');
              return _context4.abrupt("return");
            case 6:
              response = null;
              _context4.prev = 7;
              if (this.setFromOrder) {
                _context4.next = 14;
                break;
              }
              _context4.next = 11;
              return (0, _ajax.submitOrderData)(data);
            case 11:
              response = _context4.sent;
              _context4.next = 17;
              break;
            case 14:
              _context4.next = 16;
              return (0, _ajax.submitSaveOrderData)(data);
            case 16:
              response = _context4.sent;
            case 17:
              if (!response.error) {
                _context4.next = 19;
                break;
              }
              throw new Error("".concat(response.msg));
            case 19:
              this.popupInstance.close();
              this.fullReset();
              _context4.next = 26;
              break;
            case 23:
              _context4.prev = 23;
              _context4.t0 = _context4["catch"](7);
              this.showMsg('error', "Something went wrong: ".concat(_context4.t0.message));
            case 26:
              _context4.prev = 26;
              this.enable();
              if (response && response.order_link) {
                window.location.href = response.order_link;
              } else {
                this.showMsg('error', 'Order link is unavailable.');
                window.location.reload();
              }
              return _context4.finish(26);
            case 30:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[7, 23, 26, 30]]);
      }));
      function submit() {
        return _submit.apply(this, arguments);
      }
      return submit;
    }()
  }]);
}();

},{"../dynamic/lock-pin":10,"../dynamic/page-msg":11,"../general/ajax":27,"../general/fake-ajax":30,"../general/init-fn":32,"../general/utils":33,"./customer-search":34,"./product-search":37,"./validator":38}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _manualForm = _interopRequireDefault(require("./manual-form"));
var _utils = require("../general/utils");
var _constants = require("../general/constants");
var _popupBackdrop = _interopRequireDefault(require("../dynamic/popup-backdrop"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ManualOrderPopup = exports["default"] = /*#__PURE__*/function () {
  function ManualOrderPopup() {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    _classCallCheck(this, ManualOrderPopup);
    this.rootEl = document.querySelector('#addManulOrderPopup');
    if (!this.rootEl) return;
    this.orderID = id;
    this.handler = this.rootEl.querySelector('.m-popup__handler');
    this.opened = false;
    this.formInstance = null;
    this.init();
  }
  return _createClass(ManualOrderPopup, [{
    key: "init",
    value: function init() {
      this.formInstance = new _manualForm["default"](this.rootEl, this, this.orderID);
      this.bindEvents();
      this.bindDragEvents();
      this.show();
    }
  }, {
    key: "getInstance",
    get: function get() {
      return this.rootEl;
    }

    // Methods
  }, {
    key: "reset",
    value: function reset() {
      return;
    }
  }, {
    key: "show",
    value: function () {
      var _show = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this = this;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!this.opened) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              (0, _utils.lockScroll)();
              this.opened = true;
              this.rootEl.style.display = 'block';
              this.formInstance._bindDocumentClick();
              _context.next = 8;
              return (0, _utils.delay)(1);
            case 8:
              this.rootEl.classList.add(_constants.__VISIBLE);
              window.MPopupBackdrop = new _popupBackdrop["default"]({
                callback: function callback() {
                  _this.close();
                }
              });
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function show() {
        return _show.apply(this, arguments);
      }
      return show;
    }()
  }, {
    key: "close",
    value: function () {
      var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (this.opened) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              (0, _utils.unlockScroll)();
              this.opened = false;
              this.rootEl.classList.remove(_constants.__VISIBLE);
              this.rootEl.classList.add(_constants.__HIDDEN);
              this.formInstance._unbindDocumentClick();
              if (window.MPopupBackdrop) {
                window.MPopupBackdrop.hide(true);
                delete window.MPopupBackdrop;
              }
              if (window.manualOrderPopup) {
                delete window.manualOrderPopup;
              }
              _context2.next = 11;
              return (0, _utils.delay)((0, _utils.getTransitionTime)(this.rootEl));
            case 11:
              this.rootEl.removeAttribute('style');
              this.rootEl.classList.remove(_constants.__HIDDEN);
              this.formInstance.fullReset();
            case 14:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }() // Events
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this2 = this;
      document.addEventListener('click', function (e) {
        var target = e.target;

        // Close
        if (target.closest('[data-m-popup="close"]')) {
          _this2.hide();
        }

        // Submit
        if (target.closest('[data-m-popup="submit"]')) {
          _this2.submit();
        }
      });
    }
  }, {
    key: "bindDragEvents",
    value: function bindDragEvents() {
      var _this3 = this;
      if (window.innerWidth < 992) {
        var handler = this.handler;
        var container = this.rootEl;
        var startY = 0;
        var currentY = 0;
        // let containerHeight = container.offsetHeight
        var isDragging = false;
        container.addEventListener('touchstart', function (e) {
          startY = e.touches[0].clientY;
          isDragging = true;
          container.style.transition = 'none';
        });
        container.addEventListener('touchmove', function (e) {
          if (!isDragging) return;
          currentY = e.touches[0].clientY;
          var diffY = currentY - startY;
          if (diffY > 0) {
            container.style.transform = "translateY(".concat(diffY, "px)");
          }
        });
        container.addEventListener('touchend', function (e) {
          if (!isDragging) return;
          isDragging = false;
          var diffY = currentY - startY;
          var hideOffset = container.offsetHeight * 0.5;
          container.style.transition = 'all .3s cubic-bezier(.39, .575, .565, 1)';
          if (diffY > hideOffset) {
            _this3.rootEl.close();
          } else {
            container.style.transform = "translateY(0%)";
          }
        });
      }
    }
  }]);
}();

},{"../dynamic/popup-backdrop":12,"../general/constants":28,"../general/utils":33,"./manual-form":35}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ajax = require("../general/ajax");
var _fakeAjax = require("../general/fake-ajax");
var _pageMsg = _interopRequireDefault(require("../dynamic/page-msg"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ManualOrderProductSearch = exports["default"] = /*#__PURE__*/function () {
  /**
   * @param {HTMLElement} container — Root element contains input & list container
   * @returns
   */
  function ManualOrderProductSearch(container, formInstance) {
    _classCallCheck(this, ManualOrderProductSearch);
    this.container = container;
    this.input = document.querySelector('#itemSearchInput');
    this.resultsList = this.container.querySelector('.m-popup__search-list');
    this.msgElement = this.container.querySelector('.m-popup__msg');
    this.formInstance = formInstance;
    if (!this.resultsList || !this.input) {
      console.warn('ERR: MPS01. Results list or input not found');
      return;
    }
    this.selectedItem = null;
    this.searchDelay = 1000;
    this.searchTimeout = null;
    this.init();
  }
  return _createClass(ManualOrderProductSearch, [{
    key: "init",
    value: function init() {
      this.bindEvents();
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this = this;
      this.input.addEventListener('focus', function () {
        if (_this.formInstance) {
          _this.formInstance.clearMsg();
        }
      });
      this.input.addEventListener('input', function (e) {
        if (_this.searchTimeout) {
          clearTimeout(_this.searchTimeout);
        }
        if (_this.formInstance) {
          _this.formInstance.clearMsg();
        }
        var val = e.target.value.trim();
        _this.resultsList.classList.add('--o-loading');
        _this.resultsList.classList.remove('--filled');
        _this.resultsList.classList.remove('--empty');
        if (!val) {
          _this.resultsList.classList.remove('--o-loading');
          _this.clearResults();
          return;
        }
        _this.searchTimeout = setTimeout(function () {
          _this.performSearch(val);
        }, _this.searchDelay);
      });
    }
  }, {
    key: "performSearch",
    value: function () {
      var _performSearch = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(query) {
        var results;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.disable();
              _context.prev = 1;
              _context.next = 4;
              return (0, _ajax.AjaxGetItemsArray)(query);
            case 4:
              results = _context.sent;
              if (!(Array.isArray(results) && !results.length)) {
                _context.next = 8;
                break;
              }
              this.showEmptyResult();
              return _context.abrupt("return");
            case 8:
              if (results) {
                _context.next = 12;
                break;
              }
              this.formInstance.showMsg('error', 'Something went wrong...');
              this.clearResults();
              return _context.abrupt("return");
            case 12:
              this.renderResults(results);
              this.resultsList.classList.add('--filled');
              _context.next = 19;
              break;
            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](1);
              console.warn('ERR: MPS03. Search error', _context.t0);
            case 19:
              _context.prev = 19;
              this.enable();
              this.formInstance.clearMsg();
              this.resultsList.classList.remove('--o-loading');
              return _context.finish(19);
            case 24:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[1, 16, 19, 24]]);
      }));
      function performSearch(_x) {
        return _performSearch.apply(this, arguments);
      }
      return performSearch;
    }()
  }, {
    key: "renderResults",
    value: function renderResults(items) {
      this.resultsList.innerHTML = items.map(function (item) {
        return "\n      <div data-evt=\"setupManualItem\" data-id=\"".concat(item.id, "\" class=\"m-popup__list-item\">\n        <img src=\"").concat(item.img_src, "\" alt=\"\">\n        <h6>").concat(item.title, "</h6>\n      </div>\n    ");
      }).join('');
    }
  }, {
    key: "clearResults",
    value: function clearResults() {
      this.resultsList.innerHTML = '';
      this.resultsList.className = 'm-popup__search-list';
    }
  }, {
    key: "disable",
    value: function disable() {
      this.input.disabled = true;
      this.container.classList.add('--disabled');
    }
  }, {
    key: "enable",
    value: function enable() {
      this.input.disabled = false;
      this.container.classList.remove('--disabled');
    }
  }, {
    key: "showEmptyResult",
    value: function showEmptyResult() {
      this.resultsList.className = 'm-popup__search-list --empty';
    }
  }, {
    key: "reset",
    value: function reset() {
      this.clearResults();
      this.input.value = '';
    }
  }]);
}();

},{"../dynamic/page-msg":11,"../general/ajax":27,"../general/fake-ajax":30}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ItemValidator = /*#__PURE__*/function () {
  function ItemValidator(contentElem) {
    _classCallCheck(this, ItemValidator);
    this.contentElem = contentElem;
  }
  return _createClass(ItemValidator, [{
    key: "validate",
    value: function validate() {
      var itemTitleInput = this.contentElem.querySelector('input[name="item_title"]');
      var selectArr = _toConsumableArray(this.contentElem.querySelectorAll('select[required]'));
      if (itemTitleInput) {
        if (!itemTitleInput.value) {
          return {
            result: false,
            msg: 'Item title is required.'
          };
        }
      } else {
        return {
          result: false,
          msg: 'No item. Please use search field to find an item.'
        };
      }
      if (selectArr && selectArr.length) {
        if (selectArr.every(function (select) {
          return !select.value;
        })) {
          return {
            result: false,
            msg: 'Select product options...'
          };
        }
        var firstNotSelected = selectArr.find(function (select) {
          return !select.value;
        });
        if (firstNotSelected) {
          return {
            result: false,
            msg: "Select option: ".concat(firstNotSelected.getAttribute('name'))
          };
        }
      }
      return {
        result: true,
        msg: ''
      };
    }
  }]);
}();
var CustomerValidator = /*#__PURE__*/function () {
  function CustomerValidator(contentElem) {
    _classCallCheck(this, CustomerValidator);
    this.contentElem = contentElem;
  }
  return _createClass(CustomerValidator, [{
    key: "_validateEmail",
    value: function _validateEmail(emailString) {
      var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailPattern.test(emailString);
    }
  }, {
    key: "validate",
    value: function validate() {
      var customerInputArr = _toConsumableArray(this.contentElem.querySelectorAll('input[required][data-customer-input]'));
      var emailInput = this.contentElem.querySelector('input[name="email"][required][data-customer-input]');
      if (!customerInputArr || !customerInputArr.length) {
        return {
          result: false,
          msg: 'Something went wrong. ERR CODE: VMO79'
        };
      }
      if (customerInputArr.every(function (input) {
        return !input.value;
      })) {
        return {
          result: false,
          msg: 'Enter customer details or use search field to find a customer.'
        };
      }
      var firstNotFilled = customerInputArr.find(function (input) {
        return !input.value;
      });
      if (firstNotFilled) {
        return {
          result: false,
          msg: "Enter customer ".concat(firstNotFilled.getAttribute('placeholder'), ".")
        };
      }
      if (emailInput) {
        if (!this._validateEmail(emailInput.value)) {
          return {
            result: false,
            msg: 'Enter a valid email address.'
          };
        }
      }
      return {
        result: true,
        msg: ''
      };
    }
  }]);
}();
var OtherDetailsValidator = /*#__PURE__*/function () {
  function OtherDetailsValidator(contentElem) {
    _classCallCheck(this, OtherDetailsValidator);
    this.contentElem = contentElem;
  }
  return _createClass(OtherDetailsValidator, [{
    key: "validate",
    value: function validate() {
      var requiredSelectArr = _toConsumableArray(this.contentElem.querySelectorAll('select[required]'));
      var requiredInputArr = _toConsumableArray(this.contentElem.querySelectorAll('input[required]'));
      var dateInput = this.contentElem.querySelector('input[name="order_date"][required]');
      if (requiredSelectArr.every(function (select) {
        return !select.value;
      }) && requiredInputArr.every(function (input) {
        return !input.value;
      })) {
        return {
          result: false,
          msg: 'Enter order details.'
        };
      }
      if (dateInput && !dateInput.value) {
        return {
          result: false,
          msg: 'Order date is not filled.'
        };
      }
      var firstNotSelected = requiredSelectArr.find(function (select) {
        return !select.value;
      });
      if (firstNotSelected) {
        return {
          result: false,
          msg: "Select option: ".concat(firstNotSelected.getAttribute('name'))
        };
      }
      var firstNotFilled = requiredInputArr.find(function (input) {
        return !input.value;
      });
      if (firstNotFilled) {
        return {
          result: false,
          msg: "Enter ".concat(firstNotFilled.getAttribute('placeholder'))
        };
      }
      return {
        result: true,
        msg: ''
      };
    }
  }]);
}();
var ManualOrderValidator = exports["default"] = /*#__PURE__*/function () {
  function ManualOrderValidator(contentType, contentElem) {
    _classCallCheck(this, ManualOrderValidator);
    this.validatorStrategy = this.getValidatorStrategy(contentType, contentElem);
  }
  return _createClass(ManualOrderValidator, [{
    key: "getValidatorStrategy",
    value: function getValidatorStrategy(contentType, contentElem) {
      var strategies = {
        item: new ItemValidator(contentElem),
        customer: new CustomerValidator(contentElem),
        other: new OtherDetailsValidator(contentElem)
      };
      return strategies[contentType] || null;
    }
  }, {
    key: "run",
    value: function run() {
      if (!this.validatorStrategy) {
        return {
          result: false,
          msg: 'ERR: VMO76. Invalid content type'
        };
      }
      return this.validatorStrategy.validate();
    }
  }]);
}();

},{}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _jquery = _interopRequireDefault(require("jquery"));
var _utils = require("../general/utils");
var _askModal = _interopRequireDefault(require("../dynamic/ask-modal"));
var _lockPin = _interopRequireDefault(require("../dynamic/lock-pin"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _readOnlyError(r) { throw new TypeError('"' + r + '" is read-only'); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var FinanceList = exports["default"] = /*#__PURE__*/function () {
  function FinanceList(rootEl) {
    _classCallCheck(this, FinanceList);
    _defineProperty(this, "bindEvents", {
      documentEvents: function documentEvents() {
        var _this = this;
        document.addEventListener('click', function (e) {
          var application_id = (0, _jquery["default"])(e.target).attr('data-id');

          // Remove Submit
          if (e.target.closest('[data-evt="remove_fin_item"]')) {
            var submit = e.target.closest('.fin-item');
            if (submit !== null) {
              var remove = function remove() {
                _this.deleteSubmit(submit);
              };
              var ask = new _askModal["default"]({
                heading: 'Delete This Application?',
                subheading: 'This application will be permanently deleted',
                exitText: 'Back',
                submitText: 'Delete',
                submitCallback: [remove]
              });
              ask.show();
            }
          }

          // Edit modal
          if (e.target.closest('[data-evt="edit_fin_item"]')) {
            alert('Open Edit Modal');
          }
        });
      },
      temp: function temp() {
        return;
        var modal = document.querySelector('.edit-modal');
        var backdrop = document.querySelector('.edit-modal__backdrop');
        var container = document.querySelector('.edit-modal__container');
        if (modal) {
          modal.style.display = 'block';
          backdrop.style.opacity = 1;
          container.style.transform = 'translateX(0)';
        }
      }
    });
    this.rootEl = rootEl;
    if (!this.rootEl) return;
    this.submitToRemove = null;
    this.init();
  }
  return _createClass(FinanceList, [{
    key: "init",
    value: function init() {
      if (document.querySelector('.main_fin_list') !== null) {
        for (var _i = 0, _Object$values = Object.values(this.bindEvents); _i < _Object$values.length; _i++) {
          var elem = _Object$values[_i];
          if (elem !== undefined && typeof elem === 'function') {
            try {
              elem.call(this);
            } catch (err) {
              console.log("FinanceList init fn err: ".concat(err.message));
            }
          }
        }
        this.lockPIN();
      }
    }
  }, {
    key: "lockPIN",
    value: function lockPIN() {
      var lockPIN = new _lockPin["default"]({
        code: 3256
      });
      lockPIN.push();
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (target.closest('.fin-item__details') && target.hasAttribute('data-locked')) {
          var callback = function callback() {
            target.removeAttribute('data-locked');
          };
          var pin = new _lockPin["default"]({
            code: 3256,
            callback: callback
          });
          pin.push();
        }
      });
    }
  }, {
    key: "deleteSubmit",
    value: function deleteSubmit(submit) {
      if (submit) {
        var currentHeight = submit.offsetHeight;
        submit.style.height = "".concat(currentHeight, "px");
        submit.style.pointerEvents = 'none';
        setTimeout(function () {
          submit.style.opacity = 0;
          submit.style.transform = 'translateY(-12px)';
          submit.style.height = "0px";
          setTimeout(function () {
            submit.remove();
          }, (0, _utils.getTransitionTime)(submit));
        }, 5);
      }
    }
  }]);
}();

},{"../dynamic/ask-modal":7,"../dynamic/lock-pin":10,"../general/utils":33,"jquery":1}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var GoldPrice = exports["default"] = /*#__PURE__*/function () {
  function GoldPrice(rootEl) {
    _classCallCheck(this, GoldPrice);
    this.rootEl = rootEl;
    if (!this.rootEl) return;
    this.table = this.rootEl.querySelector('[data-tb="gold_prices"]');
    this.init();
  }
  return _createClass(GoldPrice, [{
    key: "updateChanges",
    value: function updateChanges() {
      if (this.table) {
        var rows = _toConsumableArray(this.table.querySelectorAll('[data-row]'));
        rows.forEach(function (row, index, arr) {
          var priceEl = row.querySelector('[data-price]');
          var prevPriceEl = arr[index + 1] ? arr[index + 1].querySelector('[data-price]') : null;
          var changeEl = row.querySelector('[data-change]');
          if (priceEl && changeEl && prevPriceEl) {
            var price = Number(priceEl.innerHTML.replace(/[^0-9.]/g, ''));
            var prevPrice = Number(prevPriceEl.innerHTML.replace(/[^0-9.]/g, ''));
            var change = (price - prevPrice).toFixed(2);
            var percentChange = (change / prevPrice * 100).toFixed(2);
            var sign = change > 0 ? '+' : '-';
            var resultHTML = "".concat(sign, " ").concat(percentChange.replace(/\+|-/g, ''), "% / ").concat(sign, " $").concat(change.replace(/\+|-/g, ''));
            changeEl.innerHTML = resultHTML;
            if (change < 0) {
              changeEl.classList.add('--negative');
              priceEl.classList.add('--negative');
            } else {
              priceEl.classList.add('--positive');
            }
          } else {
            changeEl.classList.add('--na');
          }
        });
      }
    }
  }, {
    key: "init",
    value: function init() {
      this.updateChanges();
    }
  }]);
}();

},{}],41:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _jquery = _interopRequireDefault(require("jquery"));
var _splide = _interopRequireDefault(require("../../lib/splide"));
var _popupBackdrop = _interopRequireDefault(require("../dynamic/popup-backdrop"));
var _pageMsg = _interopRequireDefault(require("../dynamic/page-msg"));
var _utils = require("../general/utils");
var _fakeAjax = require("../general/fake-ajax");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }
function _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
var _PTW_brand = /*#__PURE__*/new WeakSet();
var _onDocumentClick = /*#__PURE__*/new WeakMap();
var PTW = /*#__PURE__*/function () {
  function PTW(itemID) {
    var _this = this;
    _classCallCheck(this, PTW);
    _classPrivateMethodInitSpec(this, _PTW_brand);
    _defineProperty(this, "availableCategoryOptions", ['Pendants', 'Earrings', 'Bracelets', 'Necklaces', 'Gold Chains', 'Rings', 'Accessories', 'Watches', 'Watch Market', 'Travel Cases']);
    _classPrivateFieldInitSpec(this, _onDocumentClick, function (e) {
      var target = e.target;
      if (target.closest('[data-close-ptw]')) {
        _this.destroy();
      }
      if (target.closest('[data-submit-ptw]')) {
        _this.submit();
      }
    });
    this.itemID = itemID;
    if (!this.itemID) {
      throw new Error('No Item ID provided or item ID is invalid');
    }
    this.backdropInstance = null;
    this.loadingClass = '--o-loading';
    this.disabledClass = '--disabled';
    this.popupElem = null;
    this.item = null;
    this.create();
  }
  return _createClass(PTW, [{
    key: "create",
    value: function create() {
      (0, _utils.lockScroll)();
      _assertClassBrand(_PTW_brand, this, _createPopup).call(this);
      _assertClassBrand(_PTW_brand, this, _bindDocumentEvents).call(this);
      this.setup();
    }
  }, {
    key: "setup",
    value: function () {
      var _setup = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var item;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.AjaxGetPtwData(this.itemID);
            case 2:
              item = _context.sent;
              if (!item.error) {
                _context.next = 7;
                break;
              }
              this.destroy();
              new _pageMsg["default"]({
                heading: 'Something went wrong',
                msg: item.msg,
                type: 'error'
              });
              return _context.abrupt("return");
            case 7:
              this.item = item;
              _assertClassBrand(_PTW_brand, this, _renderFromItem).call(this);
              this.enable();
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function setup() {
        return _setup.apply(this, arguments);
      }
      return setup;
    }()
  }, {
    key: "submit",
    value: function () {
      var _submit = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var formData, response;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.disable();
              formData = this.getFormData();
              if (!(!formData || Object.keys(formData).length === 0)) {
                _context2.next = 6;
                break;
              }
              this.enable();
              new _pageMsg["default"]({
                heading: 'Something went wrong',
                msg: 'Form data is empty or invalid',
                type: 'error'
              });
              return _context2.abrupt("return");
            case 6:
              _context2.next = 8;
              return this.submitPtw(formData);
            case 8:
              response = _context2.sent;
              if (!response.error) {
                _context2.next = 13;
                break;
              }
              this.enable();
              new _pageMsg["default"]({
                heading: 'Something went wrong',
                msg: response.msg,
                type: 'error'
              });
              return _context2.abrupt("return");
            case 13:
              (0, _jquery["default"])('#ptw_link_' + this.itemID).remove();
              (0, _jquery["default"])('#item_link_' + this.itemID).attr('href', response.product_url);
              (0, _jquery["default"])('#item_link_' + this.itemID).show();
              this.enable();
              this.destroy();
              new _pageMsg["default"]({
                heading: 'Success',
                msg: 'Item added successfully!',
                type: 'success'
              });
            case 19:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function submit() {
        return _submit.apply(this, arguments);
      }
      return submit;
    }() // Methods
  }, {
    key: "disable",
    value: function disable() {
      this.popupElem.classList.add(this.disabledClass);
      this.popupElem.classList.add(this.loadingClass);
    }
  }, {
    key: "enable",
    value: function enable() {
      this.popupElem.classList.remove(this.disabledClass);
      this.popupElem.classList.remove(this.loadingClass);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      (0, _utils.unlockScroll)();
      if (this.popupElem) {
        this.popupElem.remove();
      }
      if (this.backdropInstance) {
        this.backdropInstance.hide();
      }
      _assertClassBrand(_PTW_brand, this, _unbindDocumentEvents).call(this);
    }
  }, {
    key: "getFormData",
    value: function getFormData() {
      var form = this.popupElem.querySelector('#ptwForm');
      if (!form) {
        new _pageMsg["default"]({
          heading: 'Something went wrong',
          msg: 'Form element not found',
          type: 'error'
        });
        return;
      }
      var formData = new FormData(form);
      var results = Object.fromEntries(formData);
      return results;
    }
  }, {
    key: "AjaxGetPtwData",
    value: function AjaxGetPtwData(itemID) {
      return new Promise(function (resolve, reject) {
        _jquery["default"].ajax({
          url: '/admin/ajax/push-to-website-prepare',
          type: 'POST',
          data: {
            id: itemID
          },
          success: function success(data) {
            return resolve(data);
          },
          error: function error(xhr, status, _error) {
            return reject(_error);
          }
        });
      });
    }
  }, {
    key: "submitPtw",
    value: function submitPtw(formData) {
      return new Promise(function (resolve, reject) {
        _jquery["default"].ajax({
          url: '/admin/ajax/push-to-website-save',
          type: 'POST',
          data: formData,
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr, status, _error2) {
            reject(_error2);
          }
        });
      });
    }
  }]);
}();
function _renderFromItem() {
  var _this$item = this.item,
    error = _this$item.error,
    colorOptions = _this$item.colorOptions,
    category = _this$item.category,
    price = _this$item.price,
    sku = _this$item.sku,
    imgSrc = _this$item.imgSrc;
  var optionsHTML = '';
  var imgElem = this.popupElem.querySelector('[data-ptw-image]');
  var optionsGrid = this.popupElem.querySelector('[data-ptw-options]');
  var renderMethods = [_assertClassBrand(_PTW_brand, this, _renderSkuOption).call(this, sku), _assertClassBrand(_PTW_brand, this, _renderPriceOption).call(this, price), _assertClassBrand(_PTW_brand, this, _renderCategoryOption).call(this, category), _assertClassBrand(_PTW_brand, this, _renderColorOptions).call(this, colorOptions)];
  if (imgSrc) {
    imgElem.src = imgSrc;
  } else {
    this.popupElem.classList.add('--no-image');
  }
  for (var _i = 0, _renderMethods = renderMethods; _i < _renderMethods.length; _i++) {
    var method = _renderMethods[_i];
    optionsHTML += method;
  }
  optionsGrid.innerHTML = optionsHTML;
}
function _createPopup() {
  this.popupElem = (0, _utils.createElem)('div', {
    className: "m-popup --ptw --visible",
    id: 'ptwPopup',
    style: {
      display: 'block'
    }
  });
  this.disable();
  this.popupElem.innerHTML = _assertClassBrand(_PTW_brand, this, _renderPopupInnerHTML).call(this);
  document.body.appendChild(this.popupElem);
  this.backdropInstance = new _popupBackdrop["default"]({
    instant: true,
    callback: this.destroy.bind(this)
  });
}
function _renderPopupInnerHTML() {
  return "\n      <div class=\"m-popup__title\">\n        <h3>PTW</h3>\n      </div>\n      <div class=\"m-popup__main\">\n        <form id=\"ptwForm\" methods=\"POST\" action=\"\">\n          <div class=\"m-popup__wrapper\">\n            <div class=\"m-popup__main\">\n              <div class=\"m-popup__input-grid\">\n                <picture class=\"m-popup__lg-pic\">\n                  <img data-ptw-image src=\"\" alt=\"\">\n                </picture>\n                <div data-ptw-options class=\"m-popop__manual-options-grid\"></div>\n              </div>\n              <div class=\"m-popup__btn-group\">\n                <div data-close-ptw class=\"m-popup__btn is-dim\">Close</div>\n                <div data-submit-ptw class=\"m-popup__btn\">Submit</div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    ";
}
function _bindDocumentEvents() {
  document.addEventListener('click', _classPrivateFieldGet(_onDocumentClick, this));
}
function _unbindDocumentEvents() {
  document.removeEventListener('click', _classPrivateFieldGet(_onDocumentClick, this));
}
// Render methods
function _renderCategoryOption(category) {
  category = category ? category : 'Select...';
  return "\n      <div class=\"m-popup__input-row\">\n        <label class=\"m-popup__label\" for=\"ptwCategory\">Category</label>\n        <div class=\"am-select-wrap\">\n          <select name=\"ptwCategory\" id=\"ptwCategory\" class=\"am-select\">\n            <option value=\"".concat(category, "\" selected>").concat(category, "</option>\n            ").concat(this.availableCategoryOptions.map(function (option) {
    if (option === category) return '';
    return "<option value=\"".concat(option, "\">").concat(option, "</option>");
  }).join(''), "\n          </select>\n        </div>\n      </div>\n    ");
}
function _renderSkuOption(sku) {
  return "\n      <div class=\"m-popup__input-row\">\n        <label class=\"m-popup__label\" for=\"ptwSku\">Internal Item Number</label>\n        <input id=\"ptwSku\" class=\"m-popup__input\" type=\"text\" name=\"ptwSku\" placeholder=\"Internal Item Number\"\n          value=\"".concat(sku, "\" autocomplete=\"off\" required=\"\">\n      </div>\n    ");
}
function _renderPriceOption(price) {
  price = price ? price : '$100';
  return "\n      <div class=\"m-popup__input-row\">\n        <label class=\"m-popup__label\" for=\"ptwPrice\">Price</label>\n        <input id=\"ptwPrice\" class=\"m-popup__input\" type=\"text\" name=\"ptwPrice\" placeholder=\"Price\"\n          value=\"".concat(price, "\" autocomplete=\"off\" required=\"\">\n      </div>\n    ");
}
function _renderColorOptions(colorOptions) {
  if (!colorOptions) {
    throw new Error('No color options provided');
  }
  var colorOptionsHTML = colorOptions.map(function (option) {
    var isActive = option.active ? 'selected' : '';
    return "<option value=\"".concat(option.value, "\" ").concat(isActive, ">").concat(option.value, "</option>");
  }).join('');
  return "\n      <div class=\"m-popup__input-row\">\n        <label class=\"m-popup__label\" for=\"ptwColor\">Color</label>\n        <div class=\"am-select-wrap\">\n          <select name=\"ptwColor\" id=\"ptwColor\" class=\"am-select\">\n            ".concat(colorOptionsHTML, "\n          </select>\n        </div>\n      </div>\n    ");
}
var _Inventory_brand = /*#__PURE__*/new WeakSet();
var _onDocumentClick2 = /*#__PURE__*/new WeakMap();
var Inventory = exports["default"] = /*#__PURE__*/function () {
  function Inventory(rootEl) {
    _classCallCheck(this, Inventory);
    _classPrivateMethodInitSpec(this, _Inventory_brand);
    _defineProperty(this, "splideOptions", {
      type: 'loop',
      rewind: true,
      pagination: false,
      arrows: true
    });
    _classPrivateFieldInitSpec(this, _onDocumentClick2, function (e) {
      var target = e.target;
      if (target.closest('[data-new-ptw]')) {
        var id = target.dataset.newPtw;
        new PTW(id);
      }
    });
    this.rootEl = rootEl;
    if (!this.rootEl) return;
    _assertClassBrand(_Inventory_brand, this, _init).call(this);
    window.Inventory = this;
  }
  return _createClass(Inventory, [{
    key: "initSplide",
    value: function initSplide() {
      var splideArr = _toConsumableArray(document.querySelectorAll('.i-card__media-splide'));
      var _iterator = _createForOfIteratorHelper(splideArr),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var splide = _step.value;
          var slider = new _splide["default"](splide, Inventory.splideOptions);
          slider.mount();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
}();
function _init() {
  this.initSplide();
  _assertClassBrand(_Inventory_brand, this, _bindDocumentEvents2).call(this);
}
function _bindDocumentEvents2() {
  document.addEventListener('click', _classPrivateFieldGet(_onDocumentClick2, this));
}
function _unbindDocumentEvents2() {
  document.removeEventListener('click', _classPrivateFieldGet(_onDocumentClick2, this));
}

},{"../../lib/splide":5,"../dynamic/page-msg":11,"../dynamic/popup-backdrop":12,"../general/fake-ajax":30,"../general/utils":33,"jquery":1}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _jquery = _interopRequireDefault(require("jquery"));
var _utils = require("../general/utils");
var _contentSearch = _interopRequireDefault(require("../../modules/dynamic/content-search"));
var _constants = require("../general/constants");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PosPage = exports["default"] = /*#__PURE__*/function () {
  function PosPage(rootEl) {
    _classCallCheck(this, PosPage);
    this.rootEl = rootEl;
    if (!this.rootEl) return;
    this.main = this.rootEl;
    this.details = this.main.querySelector('[data-pos="details"]');
    this.billTo = this.main.querySelector('#bill_to');
    this.billFrom = this.main.querySelector('#bill_from');
    this.items = this.main.querySelector('[data-pos="items"]');
    this.data = {};
  }
  return _createClass(PosPage, [{
    key: "init",
    value: function init() {
      if (this.main) {
        // Attach events
        this.attachDocumentClick();
        this.attachRemovableElements();
        this.attachAddElements();
        this.attachToggleBlankInput();
        this.attachEditableElements();
        this.attachAllowElements();
        this.attachChangeCurrency();
        this.attachChangeBillFrom();
        this.attachSave();

        // Input
        this.setupListSearchEvent();
        this.setupCustomerSearchEvent();

        // Attach calculations
        this.attachItemInputChange();

        // Starters
        this.updateCurrency();
        this.updateBillFrom();
        this.updateValues();
      }
    }
  }, {
    key: "setupListSearchEvent",
    value: function setupListSearchEvent() {
      var input = document.querySelector('[data-search="pos-list"]');
      if (input) {
        var fakeObj = {
          0: {
            invoice_number: '54025',
            billTo: {
              company: "Swisswatches.com"
            },
            date: '8 May, 2024',
            dueDate: '24 May, 2024',
            totalItems: '3',
            balanceDue: '$24,250.00'
          },
          1: {
            invoice_number: '54025',
            billTo: {
              company: "Swisswatches.com"
            },
            date: '8 May, 2024',
            dueDate: '24 May, 2024',
            totalItems: '3',
            balanceDue: '$24,250.00'
          }
        };
        var fakeAjax = function fakeAjax() {
          return fakeObj;
        };
        var renderMethod = function renderMethod(data) {
          var obj = data,
            html = '';
          if (obj) {
            for (var key in obj) {
              if (obj.hasOwnProperty(key)) {
                var item = obj[key];
                html += "\n              <div class=\"search-item\">\n                <div class=\"search-item__wrapper\">\n                  <div class=\"search-item__row\">\n                    <div class=\"typo_up\">#".concat(item.invoice_number, "</div>\n                    <div class=\"typo_up\">To: ").concat(item.billTo.company, "</div>\n                  </div>\n                  <div class=\"search-item__row\">\n                    <div class=\"typo_xs\">\n                      <span>Date</span>: ").concat(item.date, "\n                    </div>\n                    <div class=\"typo_xs\">\n                      <span>Due Date:</span>\n                      ").concat(item.dueDate, "\n                    </div>\n                    <div class=\"typo_xs\">").concat(item.totalItems, " Items Total</div>\n                  </div>\n                  <div class=\"typo_bold\">Balance Due:\n                    <span>").concat(item.balanceDue, "</span>\n                  </div>\n               </div>\n             </div>\n              ");
              }
            }
          }
          return html;
        };
        var POSListSearch = new _contentSearch["default"](input, {
          ajaxCall: fakeAjax,
          renderMethod: renderMethod
        });
        POSListSearch.init();
      }
    }
  }, {
    key: "setupCustomerSearchEvent",
    value: function setupCustomerSearchEvent() {
      var input = document.querySelector('[data-search="pos-customer"]');
      if (input) {
        var fakeObj = {
          0: {
            full_name: "Andrew Brownie",
            address: {
              address_1: {
                label: "Address 1",
                value: "123 Main Street"
              },
              address_2: {
                label: "Address 2",
                value: "Suite 100"
              },
              city: {
                label: "City",
                value: "San Diego"
              },
              zip_code: {
                label: "Zip Code",
                value: "92101"
              },
              country: {
                label: "Country",
                value: "USA"
              }
            }
          }
        };
        var fakeAjax = function fakeAjax() {
          return fakeObj;
        };
        var renderMethod = function renderMethod(data) {
          var obj = data,
            html = '';
          var renderDetails = function renderDetails(customer_address_obj) {
            var html = "";
            for (var key in customer_address_obj) {
              if (customer_address_obj.hasOwnProperty(key)) {
                var address = customer_address_obj[key];
                html += "\n                <div class=\"typo_xs\">\n                  <span>".concat(address.label, "</span>: ").concat(address.value, "\n                </div>\n              ");
              }
            }
            return html;
          };
          if (obj) {
            for (var key in obj) {
              if (obj.hasOwnProperty(key)) {
                var customer = obj[key];
                html += "\n              <div class=\"search-item\">\n                <div class=\"search-item__wrapper\">\n                  <div class=\"search-item__row\">\n                    <div class=\"typo_up\">".concat(customer.full_name, "</div>\n                  </div>\n                  <div class=\"search-item__row\">\n                    ").concat(renderDetails(customer.address), "\n                  </div>\n               </div>\n             </div>\n              ");
              }
            }
          }
          return html;
        };
        var POSCustomerSearch = new _contentSearch["default"](input, {
          ajaxCall: fakeAjax,
          renderMethod: renderMethod
        });
        POSCustomerSearch.init();
      }
    }
  }, {
    key: "getNotesValue",
    get: function get() {
      var value = null;
      var notes = this.main.querySelector('[data-pos-input="notes"]');
      if (notes) {
        value = notes.value;
      }
      return value;
    }
  }, {
    key: "getTermsValue",
    get: function get() {
      var value = null;
      var terms = this.main.querySelector('[data-pos-input="terms"]');
      if (terms) {
        value = terms.value;
      }
      return value;
    }
  }, {
    key: "getItemsAsObj",
    get: function get() {
      var items = _toConsumableArray(this.main.querySelectorAll('[data-pos-item]'));
      var obj = Object.create(null);
      items.forEach(function (item, index) {
        var nameInput = item.querySelector('[data-pos-input="item_name"]');
        var qtyInput = item.querySelector('[data-pos-input="item_qty"]');
        var rateInput = item.querySelector('[data-pos-input="item_rate"]');
        var amountInput = item.querySelector('[data-pos-input="item_amount"]');
        if (nameInput && qtyInput && rateInput && amountInput) {
          obj[index + 1] = {
            name: nameInput.textContent || 'Name is not found',
            qty: qtyInput.value || 0,
            rate: rateInput.value || 0,
            amount: amountInput.value.replace(/[^0-9.]/g, '')
          };
        } else {
          console.warn("".concat(item, " - Item has no data-pos-input=\"item_name\" or data-pos-input=\"item_qty\" or data-pos-input=\"item_rate\" or data-pos-input=\"item_amount\""));
        }
      });
      return obj;
    }
  }, {
    key: "getAllItemsAmount",
    get: function get() {
      var value;
      var items = _toConsumableArray(this.main.querySelectorAll('[data-pos-item]'));
      var _iterator = _createForOfIteratorHelper(items),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          var amount = item.querySelector('[data-item-amount]');
          if (amount) {
            value = (value || 0) + Number(amount.value.replace(/[^0-9.]/g, ''));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return value;
    }
  }, {
    key: "dueValue",
    get: function get() {
      var value;
      value = this.getAllItemsAmount;
      return value;
    }
  }, {
    key: "getActiveCurrencyText",
    get: function get() {
      var select = this.main.querySelector('[data-pos-select="currency"]');
      var text = select.options[select.selectedIndex].innerHTML;
      var hasBrackets = text.includes('(') && text.includes(')');
      if (hasBrackets) {
        text = text.substring(text.indexOf('(') + 1, text.indexOf(')'));
      }
      return text;
    }
  }, {
    key: "getActiveCurrencyValue",
    get: function get() {
      var select = this.main.querySelector('[data-pos-select="currency"]');
      return select.options[select.selectedIndex].value;
    }
  }, {
    key: "getCurrency",
    get: function get() {
      var obj = Object.create(null);
      obj.text = this.getActiveCurrencyText;
      obj.value = this.getActiveCurrencyValue;
      return obj;
    }
  }, {
    key: "getTaxValue",
    get: function get() {
      var input = this.main.querySelector('[data-tax]');
      if (input) {
        return Number(input.value);
      } else {
        return undefined;
      }
    }
  }, {
    key: "getDiscountValue",
    get: function get() {
      var input = this.main.querySelector('[data-discount]');
      if (input) {
        return Number(input.value);
      } else {
        return undefined;
      }
    }
  }, {
    key: "getShippingValue",
    get: function get() {
      var input = this.main.querySelector('[data-shipping]');
      if (input) {
        return Number(input.value);
      } else {
        return undefined;
      }
    }
  }, {
    key: "getSubtotalValue",
    get: function get() {
      return this.getAllItemsAmount;
    }
  }, {
    key: "getAmountPaid",
    get: function get() {
      var input = this.main.querySelector('[data-paid-amount]');
      if (input) {
        return Number(input.value);
      }
    }
  }, {
    key: "getTotalValue",
    get: function get() {
      var value = 0 + this.getSubtotalValue,
        taxValue = 0,
        discountValue = 0,
        shippingValue = 0;
      if (this.getTaxValue) {
        taxValue = this.getSubtotalValue * this.getTaxValue / 100;
      }
      if (this.getDiscountValue) {
        discountValue = value * (this.getDiscountValue / 100);
      }
      if (this.getShippingValue) {
        shippingValue = this.getShippingValue;
      }
      value = value + taxValue - discountValue + shippingValue;
      return value;
    }
  }, {
    key: "getDueValue",
    get: function get() {
      return this.getTotalValue - this.getAmountPaid;
    }
  }, {
    key: "getBillTo",
    get: function get() {
      if (!this.billTo) return undefined;
      var obj = Object.create(null);
      var inputs = _toConsumableArray(this.billTo.querySelectorAll('input:not([data-title])'));
      var _iterator2 = _createForOfIteratorHelper(inputs),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var input = _step2.value;
          var val = input.value;
          if (val.length) {
            var inputName = input.getAttribute('name');
            obj[inputName] = val;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return obj;
    }
  }, {
    key: "getDetails",
    get: function get() {
      if (!this.details) return undefined;
      var obj = Object.create(null);
      var detailsArr = _toConsumableArray(this.details.querySelectorAll('.pos-doc__details-box:not([data-prevent])'));
      detailsArr.forEach(function (details, index) {
        var inputs = _toConsumableArray(details.querySelectorAll('input:not([data-title])'));
        if (inputs.length > 1) {
          obj[index] = {
            title: inputs[0].value,
            value: inputs[1].value
          };
        }
      });
      return obj;
    }
  }, {
    key: "getBillFrom",
    get: function get() {
      var select = document.querySelector('[data-pos-select="bill_from"]');
      if (!select) console.warn('No data-pos-select="bill_from"');
      var store;
      var value = select.options[select.selectedIndex].value;
      switch (value) {
        case 'icebox':
          store = 'Icebox';
          break;
        case 'swisswatches':
          store = 'Swisswatches';
          break;
      }
      return store;
    }
  }, {
    key: "getInvoiceNumber",
    get: function get() {
      var input = this.main.querySelector('[data-pos-input="invoice_number"]');
      if (input) {
        return input.value;
      }
      return undefined;
    }

    /**
     * Change Invoice From
     */
  }, {
    key: "toggleSwisswatches",
    value: function toggleSwisswatches() {
      this.main.classList.add('--swisswatches');
      this.changeInvoiceFrom('swisswatches');
    }
  }, {
    key: "toggleIcebox",
    value: function toggleIcebox() {
      this.main.classList.remove('--swisswatches');
      this.changeInvoiceFrom('icebox');
    }
  }, {
    key: "changeInvoiceFrom",
    value: function changeInvoiceFrom() {
      var store = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'icebox';
      store = store.toLowerCase();
      var holder = this.main.querySelector('#bill_from');
      if (holder) {
        _toConsumableArray(holder.querySelectorAll('*')).forEach(function (el) {
          return el.remove();
        });
        switch (store) {
          case 'swisswatches':
            holder.insertAdjacentHTML('beforeend', this.renderBillFromHTML('swisswatches'));
            break;
          case 'icebox':
            holder.insertAdjacentHTML('beforeend', this.renderBillFromHTML('icebox'));
            break;
          default:
            holder.insertAdjacentHTML('beforeend', this.renderBillFromHTML('icebox'));
            break;
        }
      }
    }

    /**
     * Calculation Methods
     */
  }, {
    key: "updateValues",
    value: function updateValues() {
      this.updateItemsPrice();
      this.updateSubtotal();
      this.updateTotal();
      this.updateDue();
    }
  }, {
    key: "updateItemsPrice",
    value: function updateItemsPrice(item) {
      var itemsArr = item ? (0, _utils.toArray)(item) : _toConsumableArray(this.main.querySelectorAll('[data-pos-item]'));
      var _iterator3 = _createForOfIteratorHelper(itemsArr),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _item = _step3.value;
          var qty = _item.querySelector('[data-item-qty]'),
            rate = _item.querySelector('[data-item-rate]'),
            amount = _item.querySelector('[data-item-amount]');
          if (qty && rate && amount) {
            if (qty.value && rate.value) {
              var totalAmount = parseInt(qty.value) * parseFloat(rate.value);
              if (totalAmount > 0) {
                amount.value = "".concat(this.getActiveCurrencyText, " ").concat((0, _utils.formatAsCurrency)(totalAmount));
              } else {
                amount.value = "".concat(this.getActiveCurrencyText, " 0.00");
              }
            } else {
              amount.value = "".concat(this.getActiveCurrencyText, " 0.00");
            }
          } else {
            console.warn("".concat(_item, " - Item has no data-item-qty or data-item-rate or data-item-amount"));
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      this.updateSubtotal();
    }
  }, {
    key: "updateSubtotal",
    value: function updateSubtotal() {
      var subtotalArr = _toConsumableArray(this.main.querySelectorAll('[data-subtotal]'));
      var _iterator4 = _createForOfIteratorHelper(subtotalArr),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var elem = _step4.value;
          elem.textContent = "".concat((0, _utils.formatAsCurrency)(this.getSubtotalValue));
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "updateTotal",
    value: function updateTotal() {
      var totalArr = _toConsumableArray(this.main.querySelectorAll('[data-total]'));
      var _iterator5 = _createForOfIteratorHelper(totalArr),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var elem = _step5.value;
          if (elem.tagName === 'INPUT') {
            elem.value = "".concat(this.getActiveCurrencyText, " ").concat((0, _utils.formatAsCurrency)(this.getTotalValue));
          } else {
            elem.textContent = "".concat((0, _utils.formatAsCurrency)(this.getTotalValue));
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "updateDue",
    value: function updateDue() {
      var totalArr = _toConsumableArray(this.main.querySelectorAll('[data-due]'));
      var _iterator6 = _createForOfIteratorHelper(totalArr),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var elem = _step6.value;
          if (elem.tagName === 'INPUT') {
            elem.value = "".concat(this.getActiveCurrencyText, " ").concat((0, _utils.formatAsCurrency)(this.getDueValue));
          } else {
            elem.textContent = "".concat((0, _utils.formatAsCurrency)(this.getDueValue));
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }

    /**
     * Utils
     */
  }, {
    key: "updateCurrency",
    value: function updateCurrency(select) {
      select = select ? select : this.main.querySelector('[data-pos-select="currency"]');
      var currency = select.value;
      var text = select.options[select.selectedIndex].innerHTML;
      var hasBrackets = text.includes('(') && text.includes(')');
      if (hasBrackets) {
        text = text.substring(text.indexOf('(') + 1, text.indexOf(')'));
      }
      var currencyArr = _toConsumableArray(this.main.querySelectorAll('[data-currency]'));
      var _iterator7 = _createForOfIteratorHelper(currencyArr),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var elem = _step7.value;
          if (elem.tagName === 'INPUT') {
            if (elem.value && elem.value.trim() !== '') {
              var valueWords = elem.value.trim().split(' ');
              var value = valueWords[1];
              elem.value = "".concat(text, " ").concat(value);
            }
          } else {
            elem.textContent = text;
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      this.data.currency = {
        text: text,
        value: currency
      };
    }
  }, {
    key: "updateBillFrom",
    value: function updateBillFrom(select) {
      select = select ? select : this.main.querySelector('[data-pos-select="bill_from"]');
      var store = select.value;
      switch (store) {
        case 'swisswatches':
          this.toggleSwisswatches();
          break;
        case 'icebox':
          this.toggleIcebox();
          break;
        default:
          this.toggleIcebox();
          break;
      }
    }
  }, {
    key: "createDetailsBox",
    value: function createDetailsBox() {
      var elem = (0, _utils.createElem)('div', {
        className: 'pos-doc__details-box',
        attributes: {
          'data-removable': true
        },
        innerHTML: "\n      <div class=\"pos-input-group --blank\">\n        <input type=\"text\" class=\"pos-input --dim\" value=\"Title\">\n      </div>\n      <div class=\"pos-input-group\">\n        <input type=\"text\" class=\"pos-input --md\">\n      </div>\n      "
      });
      this.extendRemovableEl(elem);
      // this.extendToggleBlankInput(elem.querySelector('input.--md'))
      return elem;
    }
  }, {
    key: "createBillSmLine",
    value: function createBillSmLine() {
      var elem = (0, _utils.createElem)('div', {
        className: 'pos-input-group',
        attributes: {
          'data-removable': true
        },
        innerHTML: "\n      <input data-input-toggle type=\"text\" class=\"pos-input --sm\" value=\"\" placeholder=\"Line\">\n      "
      });
      this.extendRemovableEl(elem);
      this.extendToggleBlankInput(elem.querySelector('input'));
      return elem;
    }
  }, {
    key: "createItemLine",
    value: function createItemLine() {
      var elem = (0, _utils.createElem)('div', {
        className: 'pos-doc-item',
        attributes: {
          'data-removable': true,
          'data-pos-item': true
        },
        innerHTML: "\n      <div class=\"pos-doc-item__title\">\n      <h5 data-pos-input=\"item_name\" class=\"pos-doc-title\" contenteditable spellcheck=\"false\"></h5>\n    </div>\n    <div class=\"pos-doc-item__details\">\n      <div>\n        <div class=\"pos-input-group\">\n          <input data-pos-input=\"item_qty\" data-item-qty data-allow=\"digits\" type=\"text\" class=\"pos-input\" value=\"\" placeholder=\"\">\n        </div>\n      </div>\n      <div>\n        <div class=\"pos-input-group\">\n          <div data-currency class=\"pos-input-spot\">".concat(this.getActiveCurrencyText, "</div>\n          <input data-pos-input=\"item_rate\" data-item-rate data-allow=\"sum\" type=\"text\" class=\"pos-input\" value=\"\" placeholder=\"0.00\">\n        </div>\n      </div>\n      <div>\n        <div class=\"pos-input-group --blank\" data-locked>\n          <input data-pos-input=\"item_amount\" data-item-amount data-currency type=\"text\" class=\"pos-input\" value=\"").concat(this.getActiveCurrencyText, " 0.00\" placeholder=\"\">\n        </div>\n      </div>\n    </div>\n      ")
      });
      this.extendRemovableEl(elem);
      var editableEls = _toConsumableArray(elem.querySelectorAll('[contenteditable]'));
      var allowEls = _toConsumableArray(elem.querySelectorAll('[data-allow]'));
      var inputEls = _toConsumableArray(elem.querySelectorAll('input'));
      var _iterator8 = _createForOfIteratorHelper(editableEls),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var editableEl = _step8.value;
          this.extendEditableEl(editableEl);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      var _iterator9 = _createForOfIteratorHelper(allowEls),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var allowEl = _step9.value;
          this.extendAllowEl(allowEl);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      var _iterator10 = _createForOfIteratorHelper(inputEls),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var inputEl = _step10.value;
          this.extendUpdateInput(inputEl);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      return elem;
    }
  }, {
    key: "createShippingLine",
    value: function createShippingLine() {
      var span = (0, _utils.createElem)('span', {
        innerHTML: 'Shipping'
      });
      var inputGroup = (0, _utils.createElem)('div', {
        className: 'pos-input-group',
        innerHTML: "\n      <div data-currency class=\"pos-input-spot\">".concat(this.getActiveCurrencyText, "</div>\n      <input data-shipping data-allow=\"sum\" type=\"text\" class=\"pos-input\" value=\"\" placeholder=\"\">\n      ")
      });
      var allowEls = _toConsumableArray(inputGroup.querySelectorAll('[data-allow]'));
      var inputEls = _toConsumableArray(inputGroup.querySelectorAll('input'));
      var _iterator11 = _createForOfIteratorHelper(allowEls),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var allowEl = _step11.value;
          this.extendAllowEl(allowEl);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      var _iterator12 = _createForOfIteratorHelper(inputEls),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var inputEl = _step12.value;
          this.extendUpdateInput(inputEl);
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      return [span, inputGroup];
    }
  }, {
    key: "createTaxLine",
    value: function createTaxLine() {
      var _this = this;
      var span = (0, _utils.createElem)('span', {
        innerHTML: 'Tax'
      });
      var inputGroup = (0, _utils.createElem)('div', {
        className: 'pos-input-group',
        innerHTML: "\n      <div class=\"pos-input-spot\">%</div>\n      <input data-tax type=\"text\" class=\"pos-input\" value=\"8.9\" placeholder=\"\">\n      "
      });
      var allowEls = _toConsumableArray(inputGroup.querySelectorAll('[data-allow]'));
      var inputEls = _toConsumableArray(inputGroup.querySelectorAll('input'));
      allowEls.forEach(function (allowEl) {
        return _this.extendAllowEl(allowEl);
      });
      inputEls.forEach(function (inputEl) {
        return _this.extendUpdateInput(inputEl);
      });
      return [span, inputGroup];
    }
  }, {
    key: "createDiscountLine",
    value: function createDiscountLine() {
      var _this2 = this;
      var span = (0, _utils.createElem)('span', {
        innerHTML: 'Discount'
      });
      var inputGroup = (0, _utils.createElem)('div', {
        className: 'pos-input-group',
        innerHTML: "\n      <div class=\"pos-input-spot\">%</div>\n      <input data-discount type=\"text\" class=\"pos-input\" value=\"\" placeholder=\"\">\n      "
      });
      var allowEls = _toConsumableArray(inputGroup.querySelectorAll('[data-allow]'));
      var inputEls = _toConsumableArray(inputGroup.querySelectorAll('input'));
      allowEls.forEach(function (allowEl) {
        return _this2.extendAllowEl(allowEl);
      });
      inputEls.forEach(function (inputEl) {
        return _this2.extendUpdateInput(inputEl);
      });
      return [span, inputGroup];
    }
  }, {
    key: "renderBillFromHTML",
    value: function renderBillFromHTML() {
      var store = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'icebox';
      store = store.toLowerCase();
      var html;
      switch (store) {
        case 'swisswatches':
          html = "\n        <div class=\"pos-input-group --blank\">\n          <input data-title type=\"text\" class=\"pos-input\" value=\"Bill From:\">\n        </div>\n        <div class=\"pos-input-group --blank\">\n          <input type=\"text\" class=\"pos-input --lg\" value=\"SwissWatches.com\">\n        </div>\n        <div class=\"pos-input-group --blank\">\n          <input type=\"text\" class=\"pos-input --sm\" value=\"3255 Peachtree Road NE Ste 3\">\n        </div>\n        <div class=\"pos-input-group --blank\">\n          <input type=\"text\" class=\"pos-input --sm\" value=\"Atlanta, GA 30305\">\n        </div>\n        <div class=\"pos-input-group --blank\">\n          <input type=\"text\" class=\"pos-input --sm\" value=\"404-842-0266\">\n        </div>\n       ";
          break;
        case 'icebox':
          html = "\n        <div class=\"pos-input-group --blank\">\n          <input data-title type=\"text\" class=\"pos-input\" value=\"Bill From:\">\n        </div>\n        <div class=\"pos-input-group --blank\">\n          <input type=\"text\" class=\"pos-input --lg\" value=\"Icebox Diamonds &amp; Watches\">\n        </div>\n        <div class=\"pos-input-group --blank\">\n          <input type=\"text\" class=\"pos-input --sm\" value=\"3255 Peachtree Road NE Ste 2\">\n        </div>\n        <div class=\"pos-input-group --blank\">\n          <input type=\"text\" class=\"pos-input --sm\" value=\"Atlanta, GA 30305\">\n        </div>\n        <div class=\"pos-input-group --blank\">\n          <input type=\"text\" class=\"pos-input --sm\" value=\"404-842-0266\">\n        </div>\n       ";
          break;
      }
      return html;
    }

    /**
     * Extenders
     */
  }, {
    key: "extendRemovableEl",
    value: function extendRemovableEl(target) {
      target.addEventListener('mouseover', function () {
        if (target.querySelector('.remove-btn')) return;
        var removeBtn = (0, _utils.createElem)('button', {
          className: 'remove-btn',
          attributes: {
            'data-pos-remove': true,
            'data-pos-update': true
          }
        });
        target.appendChild(removeBtn);
      });
      target.addEventListener('mouseleave', function () {
        var removeBtn = target.querySelector('.remove-btn');
        if (removeBtn) {
          removeBtn.remove();
        }
      });
    }
  }, {
    key: "extendToggleBlankInput",
    value: function extendToggleBlankInput(input) {
      input.addEventListener('blur', function () {
        var group = input.parentNode.closest('.pos-input-group');
        var value = input.value;
        if (group && value.length !== 0) {
          group.classList.add(_constants.__BLANK);
        }
      });
      input.addEventListener('focus', function () {
        var group = input.parentNode.closest('.pos-input-group');
        if (group) {
          group.classList.remove(_constants.__BLANK);
        }
      });
      input.addEventListener('keydown', function (e) {
        var isEnter = e.key === 'Enter' || e.keyCode === 13;
        if (isEnter) {
          e.preventDefault();
          input.blur();
        }
      });
    }
  }, {
    key: "extendEditableEl",
    value: function extendEditableEl(target) {
      target.addEventListener('input', function (e) {
        var text = e.target.textContent;
        if (text.length === 0) {
          target.classList.remove(_constants.__FILLED);
        } else {
          target.classList.add(_constants.__FILLED);
        }
      });
    }
  }, {
    key: "extendAllowEl",
    value: function extendAllowEl(target) {
      var attr = target.getAttribute('data-allow');
      if (attr) {
        switch (attr) {
          case 'digits':
            (0, _utils.allowInputDigits)(target);
            break;
          case 'sum':
            (0, _utils.allowInputSum)(target);
            break;
          default:
            throw new Error("Unknown allow attribute: ".concat(attr));
        }
      }
    }
  }, {
    key: "extendUpdateInput",
    value: function extendUpdateInput(input) {
      var _this3 = this;
      input.addEventListener('input', function () {
        _this3.updateValues();
      });
    }

    /**
     * Attach Events
     */
  }, {
    key: "attachRemovableElements",
    value: function attachRemovableElements() {
      var arr = _toConsumableArray(this.main.querySelectorAll('[data-removable]'));
      var _iterator13 = _createForOfIteratorHelper(arr),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var elem = _step13.value;
          this.extendRemovableEl(elem);
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    }
  }, {
    key: "attachAddElements",
    value: function attachAddElements() {
      var _this4 = this;
      var arr = _toConsumableArray(this.main.querySelectorAll('[data-pos-add]'));
      var _iterator14 = _createForOfIteratorHelper(arr),
        _step14;
      try {
        var _loop = function _loop() {
          var elem = _step14.value;
          elem.addEventListener('click', function () {
            var addAttr = elem.dataset.posAdd;
            var elemToAdd, holder;
            switch (addAttr) {
              case 'details_box':
                holder = _this4.details;
                elemToAdd = _this4.createDetailsBox();
                break;
              case 'bill_line_sm':
                holder = _this4.billTo;
                elemToAdd = _this4.createBillSmLine();
                break;
              case 'item_line':
                holder = _this4.items;
                elemToAdd = _this4.createItemLine();
                break;
              case 'sum_line_tax':
              case 'sum_line_shipping':
              case 'sum_line_discount':
                holder = elem.parentNode.closest('.pos-doc-sum__line');
                if (!holder) throw new Error('PosPage : Add Elements : Holder not found');
                holder.classList.add(_constants.__ADDED);
                holder.setAttribute('data-removable', true);
                _this4.extendRemovableEl(holder);
                elemToAdd = addAttr == 'sum_line_shipping' ? _this4.createShippingLine() : addAttr == 'sum_line_tax' ? _this4.createTaxLine() : _this4.createDiscountLine();
                break;
              default:
                elemToAdd = undefined;
                holder = undefined;
                throw new Error('Unknown element to add');
            }
            if (!holder) throw new Error('PosPage : Add Elements : Holder not found');
            if (!elemToAdd) throw new Error('PosPage : Add Elements : Element is undefined');
            (0, _utils.toArray)(elemToAdd).forEach(function (el) {
              return holder.appendChild(el);
            });
            _this4.updateCurrency();
          });
        };
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
    }
  }, {
    key: "attachToggleBlankInput",
    value: function attachToggleBlankInput() {
      var arr = _toConsumableArray(document.querySelectorAll('[data-input-toggle]'));
      var _iterator15 = _createForOfIteratorHelper(arr),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var input = _step15.value;
          this.extendToggleBlankInput(input);
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
    }
  }, {
    key: "attachEditableElements",
    value: function attachEditableElements() {
      var arr = _toConsumableArray(this.main.querySelectorAll('[contenteditable]'));
      var _iterator16 = _createForOfIteratorHelper(arr),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var elem = _step16.value;
          this.extendEditableEl(elem);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
    }
  }, {
    key: "attachAllowElements",
    value: function attachAllowElements() {
      var arr = _toConsumableArray(this.main.querySelectorAll('[data-allow]'));
      var _iterator17 = _createForOfIteratorHelper(arr),
        _step17;
      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var elem = _step17.value;
          this.extendAllowEl(elem);
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
    }
  }, {
    key: "attachChangeCurrency",
    value: function attachChangeCurrency() {
      var _this5 = this;
      var selectArr = _toConsumableArray(this.main.querySelectorAll('[data-pos-select="currency"]'));
      var _iterator18 = _createForOfIteratorHelper(selectArr),
        _step18;
      try {
        var _loop2 = function _loop2() {
          var select = _step18.value;
          select.onchange = function () {
            _this5.updateCurrency(select);
          };
        };
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
    }
  }, {
    key: "attachChangeBillFrom",
    value: function attachChangeBillFrom() {
      var _this6 = this;
      var selectArr = _toConsumableArray(this.main.querySelectorAll('[data-pos-select="bill_from"]'));
      var _iterator19 = _createForOfIteratorHelper(selectArr),
        _step19;
      try {
        var _loop3 = function _loop3() {
          var select = _step19.value;
          select.onchange = function () {
            _this6.updateBillFrom(select);
          };
        };
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          _loop3();
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
    }
  }, {
    key: "attachDocumentClick",
    value: function attachDocumentClick() {
      var _this7 = this;
      document.addEventListener('click', function (e) {
        var target = e.target;
        // Remove elements
        if (target.matches('[data-pos-remove]')) {
          var parent = target.closest('[data-removable]');
          if (parent.classList.contains('pos-doc-sum__line')) {
            parent.classList.remove(_constants.__ADDED);
            parent.removeAttribute('data-removable');
            var elemToRemove = [].concat(_toConsumableArray(parent.querySelectorAll('span')), _toConsumableArray(parent.querySelectorAll('.pos-input-group')));
            elemToRemove.forEach(function (el) {
              return el.remove();
            });
          } else {
            target.closest('[data-removable]').remove();
          }
        }
        // Update Value
        if (target.matches('[data-pos-update]')) {
          _this7.updateValues();
        }
      });
    }
  }, {
    key: "attachSave",
    value: function attachSave() {
      var _this8 = this;
      var saveEvtArr = _toConsumableArray(this.main.querySelectorAll('[data-pos-save]'));
      var _iterator20 = _createForOfIteratorHelper(saveEvtArr),
        _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var elem = _step20.value;
          elem.addEventListener('click', function () {
            _this8.save();
          });
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
    }

    /**
     * Attach Calculations
     */
  }, {
    key: "attachItemInputChange",
    value: function attachItemInputChange() {
      var _this9 = this;
      var inputArr = _toConsumableArray(this.main.querySelectorAll('input[data-item-qty], input[data-item-rate], input[data-paid-amount]'));
      var _iterator21 = _createForOfIteratorHelper(inputArr),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var input = _step21.value;
          input.addEventListener('input', function (e) {
            _this9.updateValues();
          });
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
    }

    /**
     * Save event
     */
  }, {
    key: "save",
    value: function save() {
      this.data = Object.create(null);
      var data = this.data;
      data.billTo = this.getBillTo;
      data.billFrom = this.getBillFrom;
      data.currency = this.getCurrency;
      data.details = this.getDetails;
      data.invoice_number = this.getInvoiceNumber;
      data.items = this.getItemsAsObj;
      data.notes = this.getNotesValue;
      data.terms = this.getTermsValue;
      data.itemsAmount = this.getAllItemsAmount;
      data.subtotal = this.getSubtotalValue;
      data.total = this.getTotalValue;
      data.tax = this.getTaxValue || 0;
      data.shipping = this.getShippingValue || 0;
      data.discount = this.getDiscountValue || 0;
      data.balanceDue = this.getDueValue;
      data.store = (0, _jquery["default"])('#store_select').val();
      data.salesperson = (0, _jquery["default"])('#salesperson_select').val();
      _jquery["default"].ajax({
        url: '/admin/json/save-pos',
        type: 'POST',
        data: {
          "object": JSON.stringify(data)
        },
        success: function success(data) {
          var r = _jquery["default"].parseJSON(data);
          if (!r.error) {
            new PageMsg({
              type: 'success',
              heading: 'Invoice Saved',
              msg: 'Invoice saved successfully',
              timeout: 1400
            });
          } else {
            new PageMsg({
              type: 'error',
              heading: 'Error',
              msg: r.msg,
              timeout: 1400
            });
          }
        }
      });
    }
  }]);
}();

},{"../../modules/dynamic/content-search":8,"../general/constants":28,"../general/utils":33,"jquery":1}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = require("../general/utils");
var _constants = require("../general/constants");
var _pageMsg = _interopRequireDefault(require("../dynamic/page-msg"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var PrintTag = exports["default"] = /*#__PURE__*/function () {
  function PrintTag(rootEl) {
    _classCallCheck(this, PrintTag);
    this.rootEl = rootEl;
    if (!this.rootEl) return;
    this.main = this.rootEl;
    this.previewInputsHolder = document.querySelector('#tagPreviewInputs');
    this.previewDetails = document.querySelector('#tagPreviewDetails');
    this.previewImage = document.querySelector('#tagPreviewImage');
    this.previewImageInput = document.querySelector('#tag_image');
    this.tagElem = document.querySelector('#tagPreview');
    this.printList = document.querySelector('#print_list');
    this.previewInputs = [];
    this.previewOutputObj = {};
    this.tagsToPrint = {};
    this.renderedHTMLToPrint = '';
    this.init();
  }
  return _createClass(PrintTag, [{
    key: "getPreviewObj",
    get: function get() {
      return this.previewOutputObj;
    }
  }, {
    key: "getPreviewImageBackgroundURL",
    get: function get() {
      var style = window.getComputedStyle(this.previewImage);
      var url = style.getPropertyValue('background-image');
      var regex = /^url\((['"]?)(.*)\1\)$/;
      var matches = url.match(regex);
      var backgroundImageUrl = '';
      if (matches && matches[2]) {
        backgroundImageUrl = matches[2];
      }
      return backgroundImageUrl;
    }

    /**
     * 
     * Utils
     */
  }, {
    key: "renderDetailsHTML",
    value: function renderDetailsHTML() {
      var html = '';
      for (var _i = 0, _Object$entries = Object.entries(this.previewOutputObj); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        if ('value' in value) {
          html += "\n        <span data-title=\"".concat(value.title, "\">").concat(value.value, "</span>\n        ");
        }
      }
      return html;
    }
  }, {
    key: "bindInput",
    value: function bindInput(input, callback) {
      if (input) {
        input.addEventListener('input', callback);
      }
    }
  }, {
    key: "createLabelFromOutputObj",
    value: function createLabelFromOutputObj() {
      var currentLabels = _toConsumableArray(this.printList.querySelectorAll('label'));
      var label = (0, _utils.createElem)('label', {
        className: 'print-tag-label',
        attributes: {
          'data-tag-id': currentLabels.length + 1
        },
        innerHTML: "\n      <input type=\"checkbox\" checked>\n      <div>\n        <div class=\"print-tag-label__main\">\n          <div class=\"print-tag-label__img-wrap\">\n            <div class=\"print-tag-label__img\" style=\"background-image: url(".concat(this.getPreviewImageBackgroundURL, ")\"></div>\n          </div>\n          <div class=\"print-tag-label__details\">\n            ").concat(this.renderDetailsHTML(), "\n          </div>\n        </div>\n      </div>\n      ")
      });
      return label;
    }

    /**
     * 
     * Extenders
     */
  }, {
    key: "extendPrintListItemToggle",
    value: function extendPrintListItemToggle(label) {
      var _this = this;
      var labelArr = label ? (0, _utils.toArray)(label) : _toConsumableArray(document.querySelectorAll('.print-tag-label'));
      var _iterator = _createForOfIteratorHelper(labelArr),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var elem = _step.value;
          var input = elem.querySelector('input');
          input.addEventListener('change', function () {
            _this.observePrintList();
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    /**
     * 
     * Methods
     */
  }, {
    key: "updatePreviewObjFromInputs",
    value: function updatePreviewObjFromInputs() {
      var _this2 = this;
      this.previewOutputObj = {};
      if (this.previewInputs.length) {
        this.previewInputs.forEach(function (input, index) {
          _this2.previewOutputObj[index] = {
            id: input.id,
            title: input.closest('div').querySelector('label').innerHTML,
            value: input.value
          };
        });
      }
    }
  }, {
    key: "updateOutputPreviewDetails",
    value: function updateOutputPreviewDetails() {
      var filled = 0,
        html = "";
      var obj = this.previewOutputObj;
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          var keyObj = obj[key];
          if ('value' in keyObj && keyObj.value.length !== 0) {
            ++filled;
            html += "\n          <div id=\"".concat(keyObj.id, "\">\n            <span>").concat(keyObj.title, "</span>\n            <span>").concat(keyObj.value, "</span>\n          </div>\n          ");
          }
        }
      }
      if (filled) {
        this.previewDetails.innerHTML = html;
        this.previewDetails.classList.add(_constants.__FILLED);
      } else {
        this.previewDetails.innerHTML = '';
        this.previewDetails.classList.remove(_constants.__FILLED);
      }
    }
  }, {
    key: "clearPreviewInputs",
    value: function clearPreviewInputs() {
      if (this.previewInputs.length) {
        var _iterator2 = _createForOfIteratorHelper(this.previewInputs),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var input = _step2.value;
            input.value = '';
            input.dispatchEvent(new Event('change'));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (this.previewImage && this.previewImageInput) {
        this.previewImage.style.backgroundImage = '';
        this.previewImage.classList.remove(_constants.__FILLED);
        this.previewImageInput.value = '';
      }
      this.previewOutputObj = {};
    }

    /** 
     * 
     * Printing
     */
  }, {
    key: "observePrintList",
    value: function observePrintList() {
      if (!this.printList) throw new Error('No print list found');
      var labels = _toConsumableArray(this.printList.querySelectorAll('.print-tag-label'));
      var inputs = labels.map(function (label) {
        return label.querySelector('input');
      });
      var printBtnArr = _toConsumableArray(document.querySelectorAll('[data-tag-evt="print_selected"]'));
      if (labels.length) {
        this.printList.classList.add(_constants.__FILLED);
      } else {
        this.printList.classList.remove(_constants.__FILLED);
      }
      if (inputs.some(function (input) {
        return input.checked;
      })) {
        printBtnArr.forEach(function (btn) {
          return btn.removeAttribute('disabled');
        });
      } else {
        printBtnArr.forEach(function (btn) {
          return btn.setAttribute('disabled', 'disabled');
        });
      }
    }
  }, {
    key: "saveTag",
    value: function saveTag() {
      var elem = this.createLabelFromOutputObj();
      this.printList.appendChild(elem);
      this.observePrintList();
      this.clearPreviewInputs();
      this.updatePreviewObjFromInputs();
      this.updateOutputPreviewDetails();
    }
  }, {
    key: "printSelected",
    value: function printSelected() {
      var _this3 = this;
      this.tagsToPrint = {};
      var labels = _toConsumableArray(this.printList.querySelectorAll('label')).reduce(function (acc, label) {
        var inputCheckbox = label.querySelector('input[type="checkbox"]');
        if (inputCheckbox.checked) {
          acc.push(label);
        }
        return acc;
      }, []);
      if (!labels.length) {
        new _pageMsg["default"]({
          type: 'error',
          heading: 'No labels selected',
          msg: 'Select at least one label'
        });
      } else {
        labels.forEach(function (label, index) {
          var img_url = label.querySelector('.print-tag-label__img').style.backgroundImage;
          var spans = _toConsumableArray(label.querySelectorAll('span'));
          _this3.tagsToPrint[index] = {};
          _this3.tagsToPrint[index].details = [];
          _this3.tagsToPrint[index].img_url = img_url;
          spans.forEach(function (span) {
            if (!span.textContent.trim().length) return;
            _this3.tagsToPrint[index].details.push({
              title: span.getAttribute('data-title'),
              value: span.textContent
            });
          });
        });
      }
      this.renderPrintHTML();
    }
  }, {
    key: "printAll",
    value: function printAll() {
      var _this4 = this;
      var labels = _toConsumableArray(this.printList.querySelectorAll('label'));
      if (!labels.length) {
        new _pageMsg["default"]({
          type: 'error',
          heading: 'No Tags Found',
          msg: 'Add at least one tag to print list'
        });
        return;
      }
      this.tagsToPrint = {};
      labels.forEach(function (label, index) {
        var img_url = label.querySelector('.print-tag-label__img').style.backgroundImage;
        var spans = _toConsumableArray(label.querySelectorAll('span'));
        _this4.tagsToPrint[index] = {};
        _this4.tagsToPrint[index].details = [];
        _this4.tagsToPrint[index].img_url = img_url;
        spans.forEach(function (span) {
          if (!span.textContent.trim().length) return;
          _this4.tagsToPrint[index].details.push({
            title: span.getAttribute('data-title'),
            value: span.textContent
          });
        });
      });
      this.renderPrintHTML();
    }
  }, {
    key: "renderPrintHTML",
    value: function renderPrintHTML() {
      var _this5 = this;
      this.renderedHTMLToPrint = '';
      var _loop = function _loop() {
        var obj = _this5.tagsToPrint[key];
        var renderDetailsHTML = function renderDetailsHTML() {
          var html = '';
          if (obj.details.length) {
            for (var details in obj.details) {
              if (obj.details[details].title && obj.details[details].value) {
                html += "\n              <div>\n                <span>".concat(obj.details[details].title, "</span>\n                <span>").concat(obj.details[details].value, "</span>\n              </div>\n              ");
              }
            }
          }
          return html;
        };
        _this5.renderedHTMLToPrint += "\n\t      <div id=\"tagPreview\" class=\"tag-preview\">\n\t\t      <img class=\"tag-preview__logo\" src=\"./assets/blue-logo.svg\" alt=\"Icebox logo\">\n\t\t      <div id=\"tagPreviewImage\" class=\"tag-preview__item-img --filled\" style=\"background-image:".concat(obj.img_url, "\"></div>\n\t\t      <div id=\"tagPreviewDetails\" class=\"tag-preview__details --filled\">\n            ").concat(renderDetailsHTML(), "\n          </div>\n\t      </div>\n      ");
      };
      for (var key in this.tagsToPrint) {
        _loop();
      }
      console.log(this.renderedHTMLToPrint);
    }

    /**
     * 
     * Bind Events
     */
  }, {
    key: "bindPreviewInputs",
    value: function bindPreviewInputs() {
      var _this6 = this;
      if (this.previewInputsHolder) {
        var textInputsArr = _toConsumableArray(this.previewInputsHolder.querySelectorAll('input[type="text"]'));
        textInputsArr.forEach(function (input, index, inputs) {
          _this6.previewInputs.push(input);
          _this6.previewOutputObj[index] = {
            id: input.id,
            value: '',
            title: input.closest('div').querySelector('label').innerHTML
          };
          input.oninput = function () {
            var value = input.value;
            _this6.previewOutputObj[index].value = value;
            _this6.updateOutputPreviewDetails();
          };
          input.addEventListener('change', function () {
            var value = input.value;
            var divParent = input.closest('div');
            if (value.length) {
              divParent.classList.add(_constants.__FILLED);
            } else {
              divParent.classList.remove(_constants.__FILLED);
            }
          });
          input.onblur = function () {
            var value = input.value;
            var divParent = input.closest('div');
            if (value.length) {
              divParent.classList.add(_constants.__FILLED);
            } else {
              divParent.classList.remove(_constants.__FILLED);
            }
          };
          input.onkeydown = function (e) {
            var isEnter = e.key === 'Enter' || e.keyCode === 13,
              isBackscape = e.key === 'Backspace' || e.key === 'Delete',
              isEsc = e.key === 'Escape' || e.key === 'Esc',
              isUp = e.key === 'ArrowUp',
              isDown = e.key === 'ArrowDown',
              next = inputs[index + 1],
              prev = inputs[index - 1];
            if (isEnter || isDown) {
              if (next !== undefined) {
                next.focus();
              }
            }
            if (isBackscape) {
              if (input.value.length == 0 && prev !== undefined) {
                prev.focus();
              }
            }
            if (isEsc) {
              e.preventDefault();
              input.blur();
            }
            if (isUp) {
              if (prev !== undefined) {
                prev.focus();
              }
            }
          };
        });
      }
    }
  }, {
    key: "bindPreviewImageUpload",
    value: function bindPreviewImageUpload() {
      var input = document.querySelector('#tag_image'),
        label = document.querySelector('#upload_tag-image'),
        imageElem = this.previewImage;
      if (input) {
        var processImage = function processImage(file) {
          if (file) {
            var reader = new FileReader();
            reader.onload = function (e) {
              imageElem.classList.add(_constants.__FILLED);
              imageElem.style.backgroundImage = "url(".concat(e.target.result, ")");
            };
            reader.readAsDataURL(file);
          }
        };
        if (label) {
          label.ondragover = function (e) {
            e.preventDefault();
            label.classList.add(_constants.IS_ACTIVE);
          };
          label.ondragleave = function (e) {
            e.preventDefault();
            label.classList.remove(_constants.IS_ACTIVE);
          };
          label.ondrop = function (e) {
            e.preventDefault();
            label.classList.remove(_constants.IS_ACTIVE);
            var files = _toConsumableArray(e.dataTransfer.items),
              file = files.find(function (item) {
                if (item.kind === 'file') {
                  return item;
                }
              });
            processImage(file.getAsFile());
          };
        }
        input.onchange = function (e) {
          var file = _toConsumableArray(e.target.files)[0];
          processImage(file);
        };
      }
    }
  }, {
    key: "bindTagHover",
    value: function bindTagHover() {
      var tag = this.tagElem;
      if (tag) {
        var row = tag.closest('.print-tag__row');
        var elementInRow = _toConsumableArray(row.querySelectorAll('*'));
        window.previewTagHoverTimeout = undefined;
        tag.addEventListener('mouseover', function () {
          window.previewTagHoverTimeout = setTimeout(function () {
            tag.classList.add(_constants.__HOVERED);
          }, 800);
        });
        tag.addEventListener('mouseleave', function () {
          clearTimeout(window.previewTagHoverTimeout);
          tag.classList.remove(_constants.__HOVERED);
        });
      }
    }
  }, {
    key: "bindClear",
    value: function bindClear() {
      var _this7 = this;
      var elemArr = _toConsumableArray(document.querySelectorAll('[data-tag-evt="clearInputs"]'));
      var _iterator3 = _createForOfIteratorHelper(elemArr),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var elem = _step3.value;
          elem.addEventListener('click', function () {
            _this7.clearPreviewInputs();
            _this7.updatePreviewObjFromInputs();
            _this7.updateOutputPreviewDetails();
          });
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "bindPrintListItemToggle",
    value: function bindPrintListItemToggle() {
      this.extendPrintListItemToggle();
    }
  }, {
    key: "bindSave",
    value: function bindSave() {
      var _this8 = this;
      document.querySelectorAll('[data-tag-evt="save"]').forEach(function (btn) {
        btn.onclick = function () {
          _this8.saveTag();
        };
      });
    }
  }, {
    key: "bindPrintListClick",
    value: function bindPrintListClick() {
      var _this9 = this;
      if (this.printList) {
        this.printList.addEventListener('click', function () {
          _this9.observePrintList();
        });
      }
    }
  }, {
    key: "bindPrint",
    value: function bindPrint() {
      var _this10 = this;
      var selectedArr = _toConsumableArray(document.querySelectorAll('[data-tag-evt="print_selected"]'));
      selectedArr.forEach(function (btn) {
        btn.onclick = function () {
          _this10.printSelected();
        };
      });
      var allArr = _toConsumableArray(document.querySelectorAll('[data-tag-evt="print_all"]'));
      allArr.forEach(function (btn) {
        btn.onclick = function () {
          _this10.printAll();
        };
      });
    }

    /**
     * 
     * Init
     */
  }, {
    key: "init",
    value: function init() {
      this.bindPreviewInputs();
      this.bindPreviewImageUpload();
      this.bindClear();
      this.observePrintList();
      this.bindPrintListItemToggle();
      this.bindPrintListClick();
      this.bindPrint();
      this.bindSave();
    }
  }]);
}();

},{"../dynamic/page-msg":11,"../general/constants":28,"../general/utils":33}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _jquery = _interopRequireDefault(require("jquery"));
var _utils = require("../general/utils");
var _popupBackdrop = _interopRequireDefault(require("../dynamic/popup-backdrop"));
var _askModal = _interopRequireDefault(require("../dynamic/ask-modal"));
var _pageMsg = _interopRequireDefault(require("../dynamic/page-msg"));
var _constants = require("../general/constants");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _readOnlyError(r) { throw new TypeError('"' + r + '" is read-only'); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SMS = exports["default"] = /*#__PURE__*/function () {
  function SMS(rootEl) {
    _classCallCheck(this, SMS);
    this.rootEl = rootEl;
    if (!rootEl) return;
    this.board = document.querySelector('#sms_board');
    this.sidebar = document.querySelector('.board-sidebar');
    this.toolbar = document.querySelector('.board-toolbar');
    this.SMSModal = document.querySelector('.sms-modal');
    this.__barCollapsed = '--sidebar_collapsed';
    this.menuIsOpen = false;
    this.init();
    // new PopupBackdrop()
  }
  // Initialize
  return _createClass(SMS, [{
    key: "init",
    value: function init() {
      if (this.board) {
        window.sms = this;
        // this.initSelect2()
        this.bindInputEvents();
        this.bindCustomUpload();
        this.toggleSMSType();
      }
    }

    // Methods - Sidebar
  }, {
    key: "hideSidebar",
    value: function hideSidebar() {
      document.body.classList.add(this.__barCollapsed);
    }
  }, {
    key: "showSidebar",
    value: function showSidebar() {
      document.body.classList.remove(this.__barCollapsed);
    }
  }, {
    key: "toggleSidebar",
    value: function toggleSidebar() {
      if (window.innerWidth < 992) {
        this.toggleMenu();
      }
      if (document.body.classList.contains(this.__barCollapsed)) {
        this.showSidebar();
        return;
      }
      this.hideSidebar();
      return;
    }

    // Methods - Menu
  }, {
    key: "openMenu",
    value: function openMenu() {
      var _this = this;
      if (!this.menuIsOpen) {
        this.menuIsOpen = true;
        (0, _utils.lockScroll)();
        window.smsMenuBackdrop = new _popupBackdrop["default"]({
          callback: function callback() {
            _this.closeMenu();
          }
        });
        this.sidebar.style.display = 'flex';
        if (this.toolbar) {
          this.toolbar.classList.add(_constants.__HIDDEN);
        }
        setTimeout(function () {
          _this.sidebar.classList.add(_constants.__ACTIVE);
        }, 5);
      }
    }
  }, {
    key: "closeMenu",
    value: function closeMenu() {
      var _this2 = this;
      if (this.menuIsOpen) {
        this.menuIsOpen = false;
        (0, _utils.unlockScroll)();
        this.sidebar.classList.remove(_constants.__ACTIVE);
        if (window.smsMenuBackdrop) {
          window.smsMenuBackdrop.hide();
        }
        if (this.toolbar) {
          this.toolbar.classList.remove(_constants.__HIDDEN);
        }
        setTimeout(function () {
          _this2.sidebar.style.display = 'none';
        }, (0, _utils.getTransitionTime)(this.sidebar));
      }
    }
  }, {
    key: "toggleMenu",
    value: function toggleMenu() {
      if (this.menuIsOpen) {
        this.closeMenu();
      } else {
        this.openMenu();
      }
    }

    // Methods - SMS Preview Events
  }, {
    key: "addToFavorites",
    value: function addToFavorites(id, event) {
      if (id) {
        var elem = event.target.classList.contains('.sms-preview__btn') ? event.target : event.target.closest('.sms-preview__btn');
        _jquery["default"].ajax({
          url: '/admin/json/conversation-favorite/' + id,
          type: 'GET',
          success: function success(data) {
            var r = _jquery["default"].parseJSON(data);
            if (!r.error) {
              if (elem) {
                elem.classList.toggle(_constants.__ACTIVE);
              }
            } else {
              (0, _utils.showMessage)('error', 'Error', r.msg);
            }
          }
        });
      }
    }
  }, {
    key: "remove",
    value: function remove(id, event) {
      var remove = function remove() {
        if (id) {
          var elem = event.target.parentNode.closest('.sms-preview');
          if (elem) {
            _jquery["default"].ajax({
              url: '/admin/json/conversation-trash/' + id,
              type: 'GET',
              success: function success(data) {
                var r = _jquery["default"].parseJSON(data);
                if (!r.error) {
                  this.animateRemoveMessage(elem);
                } else {
                  (0, _utils.showMessage)('error', 'Error', r.msg);
                }
              }
            });
          }
        }
      };
      var ask = new _askModal["default"]({
        heading: 'Delete Message',
        subheading: 'Are you sure want to delete this message?',
        exitText: 'Back',
        submitText: 'Delete',
        submitCallback: [remove]
      });
      ask.show();
    }

    // Methods - Tags
  }, {
    key: "addTag",
    value: function addTag(id, event) {
      event.stopPropagation();
      var elem = event.target;
      var tagsHolder = elem.parentNode.closest('.sms-preview__footer');
      if (!tagsHolder) throw new Error('class SMS. addTag : tagsHolder not found');
      if (!tagsHolder.querySelector('.sms-tag-add')) {
        var renderHTML = function renderHTML() {
          return "\n        <div class=\"sms-tag-add\">\n          <input type=\"text\" class=\"sms-tag --blue\">\n          <select name=\"\" id=\"\" class=\"sms-tag\" onchange=\"window.sms.changeTagColor(event)\">\n            <option value=\"blue\" selected>Blue</option>\n            <option value=\"green\">Green</option>\n            <option value=\"purple\">Purple</option>\n            <option value=\"orange\">Orange</option>\n            <option value=\"red\">Red</option>\n          </select>\n          <button class=\"sms-tag_btn --cancel\" onclick=\"window.sms.cancelTag(event)\"></button>\n          <button class=\"sms-tag_btn --confirm\" onclick=\"window.sms.confirmTag(event,".concat(id, ")\"></button>\n        </div>\n        ");
        };
        tagsHolder.insertAdjacentHTML('beforeend', renderHTML());
        var input = tagsHolder.querySelector('input.sms-tag');
        input.focus();
      }
    }
  }, {
    key: "changeTagColor",
    value: function changeTagColor(event) {
      var _input$classList;
      var elem = event.target;
      var parent = elem.closest('.sms-tag-add');
      if (!parent) throw new Error('class SMS. changeTagColor : parent not found');
      var input = parent.querySelector('input.sms-tag');
      var option = elem.options[elem.selectedIndex].value;
      (_input$classList = input.classList).remove.apply(_input$classList, _toConsumableArray(input.classList));
      (0, _utils.addClasses)(input, 'sms-tag', "--".concat(option));
    }
  }, {
    key: "cancelTag",
    value: function cancelTag(event) {
      var elem = event.target;
      var parent = elem.closest('.sms-tag-add');
      if (parent) {
        parent.remove();
      } else {
        throw new Error('class SMS. cancelTag : parent not found');
      }
    }
  }, {
    key: "confirmTag",
    value: function confirmTag(event, id) {
      var elem = event.target;
      var parent = elem.closest('.sms-tag-add');
      var tagsHolder = parent.parentNode.closest('.sms-preview__footer');
      if (!parent) throw new Error('class SMS. confirmTag : parent not found');
      var input = parent.querySelector('input.sms-tag');
      var value = input.value;
      if (!value) {
        new _pageMsg["default"]({
          type: 'error',
          heading: 'No Value',
          msg: 'You can\'t add tag with empty value.'
        });
        throw new Error('class SMS. confirmTag : value not found');
      }
      var className = input.className;
      var newTag = (0, _utils.createElem)('div', {
        innerHTML: value,
        className: className
      });
      tagsHolder.appendChild(newTag);
      storeNewTag(value, className, id);
      this.cancelTag(event);
    }

    // Methods - General
  }, {
    key: "toggleSMSType",
    value: function toggleSMSType() {
      var nameGroup = _toConsumableArray(document.querySelectorAll('input[name="new_sms_type"]'));
      if (nameGroup.length) {
        var selected = nameGroup.find(function (input) {
          return input.checked;
        });
        if (selected) {
          var value = selected.value;
          var forms = _toConsumableArray(this.SMSModal.querySelectorAll('form'));
          switch (value) {
            case 'single':
              var _iterator = _createForOfIteratorHelper(forms),
                _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var form = _step.value;
                  if (form.id == 'new_sms_single') {
                    form.style.display = 'block';
                  } else {
                    form.style.display = 'none';
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              (0, _jquery["default"])('#sms_send_btn_global').attr('onclick', 'window.sms.sendNewSMS(0)');
              break;
            case 'bulk':
              var _iterator2 = _createForOfIteratorHelper(forms),
                _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var _form = _step2.value;
                  if (_form.id == 'new_sms_bulk') {
                    _form.style.display = 'block';
                  } else {
                    _form.style.display = 'none';
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
              (0, _jquery["default"])('#sms_send_btn_global').attr('onclick', 'window.sms.sendNewSMS(1)');
              break;
            default:
              var _iterator3 = _createForOfIteratorHelper(forms),
                _step3;
              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var _form2 = _step3.value;
                  _form2.style.display = 'none';
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
              forms[0].style.display = 'block';
              break;
          }
        }
      }
    }
  }, {
    key: "toggleMMSMode",
    value: function toggleMMSMode(event) {
      var target = event.target;
      var form = target.parentNode.closest('form');
      var label = target.closest('label');
      if (form) {
        var isChecked = target.checked;
        if (isChecked) {
          form.classList.add('--mms');
          label.querySelector('span').textContent = 'Disable MMS';
        } else {
          form.classList.remove('--mms');
          label.querySelector('span').textContent = 'Enable MMS';
        }
      }
    }

    // SMS
  }, {
    key: "initSelect2",
    value: function initSelect2() {
      (0, _jquery["default"])('#sms_single_whale').select2({
        placeholder: "Select a whale",
        ajax: {
          url: '/admin/json/search-whale',
          dataType: 'json'
        }
      });
      (0, _jquery["default"])('#sms_bulk_whale').select2({
        placeholder: "Select a whales...",
        ajax: {
          url: '/admin/json/search-whale',
          dataType: 'json'
        }
      });
    }
  }, {
    key: "sendNewSMS",
    value: function sendNewSMS() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (type == 0) {
        (0, _jquery["default"])('#submit_sms_btn').click();
      } else {
        (0, _jquery["default"])('#submit_bulk_sms_btn').click();
      }
    }
  }, {
    key: "openSMSModal",
    value: function openSMSModal() {
      var _this3 = this;
      (0, _utils.lockScroll)();
      if (this.SMSModal) {
        this.SMSModal.style.display = 'block';
        window.SMSModalBackdrop = new _popupBackdrop["default"]({
          instant: true,
          callback: function callback() {
            _this3.closeSMSModal(1);
          }
        });
        if (this.menuIsOpen && window.innerWidth < 992) {
          this.closeMenu();
        }
      }
    }
  }, {
    key: "closeSMSModal",
    value: function closeSMSModal(offBackdrop) {
      (0, _utils.unlockScroll)();
      if (this.SMSModal) {
        this.SMSModal.style.display = 'none';
        var inputs = _toConsumableArray(this.SMSModal.querySelectorAll('input[type="text"], textarea'));
        var _iterator4 = _createForOfIteratorHelper(inputs),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var input = _step4.value;
            input.value = '';
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
      if (!offBackdrop) {
        if (window.SMSModalBackdrop) {
          window.SMSModalBackdrop.hide();
        }
      }
    }
  }, {
    key: "bindInputEvents",
    value: function bindInputEvents() {
      var input = document.querySelector('#new_converation_message');
      var button = document.querySelector('.sms-viewer__btn');
      if (input && button) {
        input.addEventListener('keydown', function (e) {
          var keyIsEnter = e.key === 'Enter';
          if (keyIsEnter) {
            e.preventDefault();
            button.click();
            input.value = '';
          }
        });
      }
    }
  }, {
    key: "bindCustomUpload",
    value: function bindCustomUpload() {
      var btnArr = _toConsumableArray(document.querySelectorAll('[data-custom-upload].--btn'));
      var _iterator5 = _createForOfIteratorHelper(btnArr),
        _step5;
      try {
        var _loop = function _loop() {
          var btn = _step5.value;
          btn.addEventListener('click', function () {
            var input = btn.querySelector('input[type="file"]');
            if (input) {
              input.dispatchEvent(new MouseEvent('click'));
            }
          });
        };
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }

    // Utils
  }, {
    key: "animateRemoveMessage",
    value: function animateRemoveMessage(elem) {
      elem.style.transform = 'translateX(18px)';
      elem.style.opacity = 0;
      setTimeout(function () {
        elem.remove();
      }, (0, _utils.getTransitionTime)(elem));
    }
  }]);
}();

},{"../dynamic/ask-modal":7,"../dynamic/page-msg":11,"../dynamic/popup-backdrop":12,"../general/constants":28,"../general/utils":33,"jquery":1}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _jquery = _interopRequireDefault(require("jquery"));
var _lockPin = _interopRequireDefault(require("../dynamic/lock-pin"));
var _crmSwiper = _interopRequireDefault(require("../dynamic/crm-swiper"));
var _utils = require("../general/utils");
var _constants = require("../general/constants");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var WhalesPage = exports["default"] = /*#__PURE__*/function () {
  function WhalesPage(rootEl) {
    _classCallCheck(this, WhalesPage);
    this.rootEl = rootEl;
    if (!rootEl) return;
    this.initFn = {
      attachMoreBtnClick: this.attachMoreBtnClick.bind(this),
      attachDropdownBtnClick: this.attachDropdownBtnClick.bind(this),
      attachViewSwitch: this.attachViewSwitch.bind(this),
      attachDocClick: this.attachDocClick.bind(this),
      attachCRM: this.attachCRM.bind(this),
      attachToggleQuestion: this.attachToggleQuestion.bind(this),
      attachAvatarUpload: this.attachAvatarUpload.bind(this)
    };
    this.init();
  }
  return _createClass(WhalesPage, [{
    key: "init",
    value: function init() {
      var pin = new _lockPin["default"]({
        code: 3256
      });
      pin.push();
      Object.values(this.initFn).forEach(function (fn) {
        if (typeof fn === 'function') {
          try {
            fn();
          } catch (err) {
            console.log("whales init fn err : ".concat(err.message));
          }
        }
      });
      this.hidePhones();
    }
  }, {
    key: "toggleView",
    value: function toggleView() {
      var viewType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'list';
      var grid = document.querySelector('.tb-grid-container');
      var list = document.querySelector('.tb-table-container');
      if (list !== undefined && grid !== undefined) {
        switch (viewType) {
          case 'grid':
            list.style.opacity = 0;
            setTimeout(function () {
              list.style.display = 'none';
              grid.style.display = 'block';
              setTimeout(function () {
                grid.style.opacity = 1;
              }, 3);
            }, (0, _utils.getTransitionTime)(list));
            break;
          case 'list':
            grid.style.opacity = 0;
            setTimeout(function () {
              grid.style.display = 'none';
              list.style.display = 'block';
              setTimeout(function () {
                list.style.opacity = 1;
              }, 3);
            }, (0, _utils.getTransitionTime)(list));
            break;
          default:
            break;
        }
      }
    }
  }, {
    key: "hidePhones",
    value: function hidePhones() {
      var phoneCellArr = _toConsumableArray(document.querySelectorAll('[data-cell="phone"]'));
      var _iterator = _createForOfIteratorHelper(phoneCellArr),
        _step;
      try {
        var _loop = function _loop() {
          var cell = _step.value;
          var evtReveal = cell.querySelector('[data-cell-evt="reveal"]');
          var evtEdit = cell.querySelector('[data-cell-evt="edit"]');
          var evtSMS = cell.querySelector('[data-cell-evt="sms"]');
          var input = cell.querySelector('.whale-card__input');
          var cellValue = cell.querySelector('.cell-value');
          var phoneValue;
          if (cellValue && evtEdit && evtReveal && input) {
            phoneValue = cellValue.innerText;
            cell.seal = function () {
              if (!cell.classList.contains(_constants.__SEALED)) {
                cell.classList.add(_constants.__SEALED);
                var lastFourDigits = phoneValue.replace(/ /g, '').replace(/-/g, '').slice(-4);
                cellValue.innerText = "\xB7\xB7\xB7\xB7 ".concat(lastFourDigits);
              }
            };
            cell.reveal = function () {
              cell.classList.remove(_constants.__SEALED);
              cell.classList.add(_constants.__REVEALED);
              cellValue.innerText = phoneValue;
              evtReveal.remove();
            };
            cell.edit = function () {
              cell.classList.add(_constants.__EDIT);
              input.value = phoneValue;
              input.focus();
              evtEdit.innerHTML = 'Save';
            };
            cell.save = function () {
              cell.classList.remove(_constants.__EDIT);
              cell.classList.remove(_constants.__SEALED);
              cellValue.innerText = input.value;
              phoneValue = input.value;
              evtEdit.innerHTML = 'Edit';
              evtReveal.remove();
            };
            cell.seal();

            // Events
            evtReveal.onclick = function () {
              var pin = new _lockPin["default"]({
                code: 3257,
                callback: cell.reveal,
                allowClose: true
              });
              pin.push();
            };
            evtEdit.onclick = function () {
              if (cell.classList.contains(_constants.__EDIT)) {
                cell.save();
              } else {
                var pin = new _lockPin["default"]({
                  code: 3257,
                  callback: cell.edit,
                  allowClose: true
                });
                pin.push();
              }
            };
            input.addEventListener('keydown', function (e) {
              if (e.key === 'Enter' || e.keyCode === 13) {
                cell.save();
              }
            });
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "attachMoreBtnClick",
    value: function attachMoreBtnClick() {
      document.addEventListener('click', function (e) {
        var target = e.target;
        var btn = e.target.dataset.evt === 'whale_toggle_more' ? e.target : e.target.closest('[data-evt="whale_toggle_more"]');
        if (btn) {
          var card = target.closest('.whale-card');
          var drop_menu = card.parentNode.querySelector('.whale-more-drop');
          document.querySelectorAll('.whale-card.--drop-active').forEach(function (elCard) {
            if (elCard !== card) {
              elCard.classList.remove('--drop-active');
            }
          });
          if (card && drop_menu) {
            var is_active = card.classList.contains('--drop-active');
            if (is_active) {
              card.classList.remove('--drop-active');
            } else {
              card.classList.add('--drop-active');
            }
          }
        }
        if (!target.closest('.whale-more-wrap')) {
          document.querySelectorAll('.whale-card.--drop-active').forEach(function (card) {
            card.classList.remove('--drop-active');
          });
        }
      });
    }
  }, {
    key: "attachDropdownBtnClick",
    value: function attachDropdownBtnClick() {
      var btnArr = _toConsumableArray(document.querySelectorAll('[data-tb-dropdown]'));
      btnArr.forEach(function (btn) {
        btn.onclick = function () {
          var dropdown = btn.parentNode.querySelector('.tb-dropdown');
          if (dropdown !== null) {
            if (window.getComputedStyle(dropdown).getPropertyValue('display') !== 'none') {
              btn.classList.remove(_constants.IS_ACTIVE);
              dropdown.classList.remove(_constants.IS_VISIBLE);
              setTimeout(function () {
                dropdown.style.display = 'none';
              }, (0, _utils.getTransitionTime)(dropdown));
            } else {
              dropdown.style.display = 'block';
              btn.classList.add(_constants.IS_ACTIVE);
              setTimeout(function () {
                dropdown.classList.add(_constants.IS_VISIBLE);
              }, 1);
            }
          }
        };
      });
    }
  }, {
    key: "attachViewSwitch",
    value: function attachViewSwitch() {
      var _this = this;
      var btnArr = _toConsumableArray(document.querySelectorAll('[data-switch-view]'));
      var removeCls = function removeCls() {
        btnArr.forEach(function (btn) {
          btn.classList.remove(_constants.IS_ACTIVE);
        });
      };
      btnArr.forEach(function (btn) {
        btn.onclick = function () {
          var attr = btn.getAttribute('data-switch-view');
          if (attr !== null && !btn.classList.contains(_constants.IS_ACTIVE)) {
            removeCls();
            btn.classList.add(_constants.IS_ACTIVE);
            _this.toggleView(attr);
          }
        };
      });
    }
  }, {
    key: "attachDocClick",
    value: function attachDocClick() {
      var dropdowns = _toConsumableArray(document.querySelectorAll('.tb-dropdown'));
      var dropButtons = _toConsumableArray(document.querySelectorAll('[data-tb-dropdown]'));
      document.addEventListener('click', function (e) {
        var target = e.target;
        if (!target.closest('.tb-btn')) {
          dropdowns.forEach(function (drop) {
            drop.classList.remove(_constants.IS_VISIBLE);
            setTimeout(function () {
              drop.style.display = 'none';
            }, (0, _utils.getTransitionTime)(drop));
          });
          dropButtons.forEach(function (btn) {
            btn.classList.remove(_constants.IS_ACTIVE);
          });
        }
      });
    }
  }, {
    key: "attachCRM",
    value: function attachCRM() {
      if (window.innerWidth < 1024) return;
      var evtGoCrm = _toConsumableArray(document.querySelectorAll('[data-evt="goCRM"]'));
      var _iterator2 = _createForOfIteratorHelper(evtGoCrm),
        _step2;
      try {
        var _loop2 = function _loop2() {
          var element = _step2.value;
          element.onclick = function () {
            var card = element.parentNode.closest('.whale-card') || null;
            var swiperInstance = new _crmSwiper["default"]({}, card).init();
          };
        };
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      document.onclick = function (e) {
        var target = e.target;
        if (target.closest('[data-evt="cardGoCRM"]')) {
          var card = target.closest('.whale-card');
          if (card) {
            var swiperInstance = new _crmSwiper["default"]({}, card).init();
          }
        }
      };
    }
  }, {
    key: "attachToggleQuestion",
    value: function attachToggleQuestion() {
      var input = document.querySelector('#show_questions');
      if (input) {
        var span = input.parentNode.querySelector('span');
        input.addEventListener('change', function () {
          var isChecked = input.checked;
          if (isChecked) {
            document.body.classList.add('--visible_questions');
          } else {
            document.body.classList.remove('--visible_questions');
          }
        });
      }
    }
  }, {
    key: "attachAvatarUpload",
    value: function attachAvatarUpload() {
      document.addEventListener('change', function (e) {
        var target = e.target;
        if (target.matches('input[data-input="avatar_upload"][type="file"]')) {
          var reader = new FileReader();
          try {
            reader.onload = function (e) {
              var img = target.closest('.whale-card .whale-card__avatar').querySelector('img');
              if (img) {
                img.src = e.target.result;
              }
            };
            reader.readAsDataURL(target.files[0]);
          } catch (err) {
            throw new Error("Upload avatar error: ".concat(err.message));
          }
        }
      });
    }
  }]);
}();

},{"../dynamic/crm-swiper":9,"../dynamic/lock-pin":10,"../general/constants":28,"../general/utils":33,"jquery":1}],46:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPageElements = initPageElements;
var _initFn = require("./modules/general/init-fn");
var _toolBar = require("./modules/elements/tool-bar");
var _pageTips = require("./modules/elements/page-tips");
var _orderNotes = require("./modules/elements/order-notes");
var _pageSearch = require("./modules/elements/page-search");
var _pageMenu = require("./modules/elements/page-menu");
var _pageSidebar = require("./modules/elements/page-sidebar");
var _gTip = require("./modules/elements/g-tip");
var _whaleCards = require("./modules/elements/whale-cards");
var _editModal = require("./modules/elements/edit-modal");
var _swapModal = require("./modules/elements/swap-modal");
var _addModal = require("./modules/elements/add-modal");
var _ordersModal = require("./modules/elements/orders-modal");
var _fingersModal = require("./modules/elements/fingers-modal");
var _psSelect = require("./modules/elements/ps-select");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
var _PageElements_brand = /*#__PURE__*/new WeakSet();
var PageElements = /*#__PURE__*/_createClass(function PageElements() {
  _classCallCheck(this, PageElements);
  _classPrivateMethodInitSpec(this, _PageElements_brand);
  this.initFnArr = [_initFn.updateInputsAllowOnlyDecimals, _initFn.initLottieElements, _toolBar.initToolbar, _pageTips.initPageTips, _orderNotes.initOrderNotes, _pageSearch.initPageSearch, _pageMenu.initPageMenu, _pageSidebar.initPageSidebar, _gTip.initGTip, _whaleCards.initWhaleCards, _editModal.initEditModal, _swapModal.initSwapModal, _addModal.initAddModal, _ordersModal.initOrdersModal, _fingersModal.initFingerModal, _psSelect.initPsSelect];
  _assertClassBrand(_PageElements_brand, this, _init).call(this);
});
function _init() {
  var _iterator = _createForOfIteratorHelper(this.initFnArr),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var fn = _step.value;
      if (fn && typeof fn === 'function') {
        fn();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function initPageElements() {
  new PageElements();
}

},{"./modules/elements/add-modal":13,"./modules/elements/edit-modal":14,"./modules/elements/fingers-modal":15,"./modules/elements/g-tip":16,"./modules/elements/order-notes":17,"./modules/elements/orders-modal":18,"./modules/elements/page-menu":19,"./modules/elements/page-search":20,"./modules/elements/page-sidebar":21,"./modules/elements/page-tips":22,"./modules/elements/ps-select":23,"./modules/elements/swap-modal":24,"./modules/elements/tool-bar":25,"./modules/elements/whale-cards":26,"./modules/general/init-fn":32}],47:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPageEvents = initPageEvents;
var _events = require("./modules/general/events");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
var _PageEvents_brand = /*#__PURE__*/new WeakSet();
var PageEvents = /*#__PURE__*/_createClass(function PageEvents() {
  _classCallCheck(this, PageEvents);
  _classPrivateMethodInitSpec(this, _PageEvents_brand);
  this.initFnArr = [_events.bindUnlockDataLockedInput];
  _assertClassBrand(_PageEvents_brand, this, _init).call(this);
});
function _init() {
  var _iterator = _createForOfIteratorHelper(this.initFnArr),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var fn = _step.value;
      if (fn && typeof fn === 'function') {
        fn();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function initPageEvents() {
  new PageEvents();
}

},{"./modules/general/events":29}],48:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteManualOrder = deleteManualOrder;
var _lockPin = _interopRequireDefault(require("./modules/dynamic/lock-pin"));
var _utils = require("./modules/general/utils");
var _pageMsg = _interopRequireDefault(require("./modules/dynamic/page-msg"));
var _fakeAjax = require("./modules/general/fake-ajax");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Delete Manual Order
 * @param {Event} event - The event object
 * @param {string} orderID - The ID of the order to delete
 */
function deleteManualOrder(event, orderID) {
  new _lockPin["default"]({
    code: 3256,
    callback: deleteCallback
  }).push();
  function deleteCallback() {
    return _deleteCallback.apply(this, arguments);
  }
  function _deleteCallback() {
    _deleteCallback = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var button, orderElement, animateDelete, toggleActiveState, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            button = event.target.closest('.blank-btn');
            orderElement = button.closest('.am-item');
            animateDelete = function animateDelete() {
              orderElement.classList.add('--remove');
              setTimeout(function () {
                orderElement.remove();
              }, (0, _utils.getTransitionTime)(orderElement));
            };
            toggleActiveState = function toggleActiveState(state) {
              if (button && orderElement) {
                var text = !state ? 'Deleting...' : 'Delete Order';
                button.disabled = !state;
                orderElement.classList.toggle('--deleting', !state);
                button.textContent = text;
              }
            };
            _context.prev = 4;
            toggleActiveState(false);
            /**
            * @CHOU Setup here (Delete Order)
            * Need to setup function here to delete order
            */
            _context.next = 8;
            return (0, _fakeAjax.fakeFetchRemoveOrder)(orderID);
          case 8:
            response = _context.sent;
            if (response.ok) {
              _context.next = 12;
              break;
            }
            new _pageMsg["default"]({
              heading: 'Error',
              msg: "HTTP Error! Status: ".concat(response.status)
            });
            throw new Error("HTTP Error! Status: ".concat(response.status));
          case 12:
            animateDelete();
            _context.next = 19;
            break;
          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](4);
            console.error(_context.t0);
            new _pageMsg["default"]({
              heading: 'Error',
              msg: "Something went wrong: ".concat(_context.t0.message)
            });
          case 19:
            _context.prev = 19;
            toggleActiveState(true);
            return _context.finish(19);
          case 22:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[4, 15, 19, 22]]);
    }));
    return _deleteCallback.apply(this, arguments);
  }
}

},{"./modules/dynamic/lock-pin":10,"./modules/dynamic/page-msg":11,"./modules/general/fake-ajax":30,"./modules/general/utils":33}],49:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPage = initPage;
var _inventory = _interopRequireDefault(require("./modules/pages/inventory"));
var _goldPrice = _interopRequireDefault(require("./modules/pages/gold-price"));
var _sms = _interopRequireDefault(require("./modules/pages/sms"));
var _pos = _interopRequireDefault(require("./modules/pages/pos"));
var _printTag = _interopRequireDefault(require("./modules/pages/print-tag"));
var _whales = _interopRequireDefault(require("./modules/pages/whales"));
var _financeList = _interopRequireDefault(require("./modules/pages/finance-list"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
var _PageManager_brand = /*#__PURE__*/new WeakSet();
var PageManager = /*#__PURE__*/_createClass(function PageManager() {
  _classCallCheck(this, PageManager);
  _classPrivateMethodInitSpec(this, _PageManager_brand);
  this.pageComponents = {
    inventory: {
      instance: _inventory["default"],
      rootSelector: '.main_inventory'
    },
    goldPrice: {
      instance: _goldPrice["default"],
      rootSelector: '.main_gold'
    },
    sms: {
      instance: _sms["default"],
      rootSelector: '#sms_board'
    },
    PosPage: {
      instance: _pos["default"],
      rootSelector: '.main_pos'
    },
    PrintTag: {
      instance: _printTag["default"],
      rootSelector: '.main_print-tag'
    },
    WhalesPage: {
      instance: _whales["default"],
      rootSelector: '.main_whales'
    },
    FinanceList: {
      instance: _financeList["default"],
      rootSelector: '.main_fin_list'
    }
  };
  _assertClassBrand(_PageManager_brand, this, _init).call(this);
});
function _init() {
  _assertClassBrand(_PageManager_brand, this, _initPages).call(this);
}
function _initPages() {
  for (var key in this.pageComponents) {
    var component = this.pageComponents[key];
    var rootEl = document.querySelector(component === null || component === void 0 ? void 0 : component.rootSelector);
    if (!rootEl) continue;
    new component.instance(rootEl);
  }
}
function initPage() {
  new PageManager();
}

},{"./modules/pages/finance-list":39,"./modules/pages/gold-price":40,"./modules/pages/inventory":41,"./modules/pages/pos":42,"./modules/pages/print-tag":43,"./modules/pages/sms":44,"./modules/pages/whales":45}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
